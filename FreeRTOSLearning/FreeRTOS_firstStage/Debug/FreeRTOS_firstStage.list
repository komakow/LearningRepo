
FreeRTOS_firstStage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015774  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08015904  08015904  00025904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08015940  08015940  00025940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08015944  08015944  00025944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000030  20000000  08015948  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00030030  2**0
                  CONTENTS
  7 .bss          00012de4  20000030  20000030  00030030  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20012e14  20012e14  00030030  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030030  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ca85  00000000  00000000  00030060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004e55  00000000  00000000  0004cae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000598  00000000  00000000  0005193a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ab93  00000000  00000000  00051ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00009048  00000000  00000000  0005ca65  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00065aad  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00007e28  00000000  00000000  00065b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000024  00000000  00000000  0006d954  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0006d978  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000030 	.word	0x20000030
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080158e8 	.word	0x080158e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000034 	.word	0x20000034
 80001cc:	080158e8 	.word	0x080158e8

080001d0 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80001d6:	201c      	movs	r0, #28
 80001d8:	f000 fe04 	bl	8000de4 <pvPortMalloc>
 80001dc:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d007      	beq.n	80001f4 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	3304      	adds	r3, #4
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 faec 	bl	80007cc <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80001f4:	687b      	ldr	r3, [r7, #4]
	}
 80001f6:	4618      	mov	r0, r3
 80001f8:	3708      	adds	r7, #8
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}

080001fe <xEventGroupSync>:

#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
{
 80001fe:	b580      	push	{r7, lr}
 8000200:	b08c      	sub	sp, #48	; 0x30
 8000202:	af00      	add	r7, sp, #0
 8000204:	60f8      	str	r0, [r7, #12]
 8000206:	60b9      	str	r1, [r7, #8]
 8000208:	607a      	str	r2, [r7, #4]
 800020a:	603b      	str	r3, [r7, #0]
EventBits_t uxOriginalBitValue, uxReturn;
EventGroup_t *pxEventBits = xEventGroup;
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8000210:	2300      	movs	r3, #0
 8000212:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800021a:	2b00      	cmp	r3, #0
 800021c:	d009      	beq.n	8000232 <xEventGroupSync+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800021e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000222:	f383 8811 	msr	BASEPRI, r3
 8000226:	f3bf 8f6f 	isb	sy
 800022a:	f3bf 8f4f 	dsb	sy
 800022e:	61bb      	str	r3, [r7, #24]
 8000230:	e7fe      	b.n	8000230 <xEventGroupSync+0x32>
	configASSERT( uxBitsToWaitFor != 0 );
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d109      	bne.n	800024c <xEventGroupSync+0x4e>
 8000238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800023c:	f383 8811 	msr	BASEPRI, r3
 8000240:	f3bf 8f6f 	isb	sy
 8000244:	f3bf 8f4f 	dsb	sy
 8000248:	617b      	str	r3, [r7, #20]
 800024a:	e7fe      	b.n	800024a <xEventGroupSync+0x4c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800024c:	f004 fb86 	bl	800495c <xTaskGetSchedulerState>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d102      	bne.n	800025c <xEventGroupSync+0x5e>
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d101      	bne.n	8000260 <xEventGroupSync+0x62>
 800025c:	2301      	movs	r3, #1
 800025e:	e000      	b.n	8000262 <xEventGroupSync+0x64>
 8000260:	2300      	movs	r3, #0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d109      	bne.n	800027a <xEventGroupSync+0x7c>
 8000266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800026a:	f383 8811 	msr	BASEPRI, r3
 800026e:	f3bf 8f6f 	isb	sy
 8000272:	f3bf 8f4f 	dsb	sy
 8000276:	613b      	str	r3, [r7, #16]
 8000278:	e7fe      	b.n	8000278 <xEventGroupSync+0x7a>
	}
	#endif

	vTaskSuspendAll();
 800027a:	f003 fcc1 	bl	8003c00 <vTaskSuspendAll>
	{
		uxOriginalBitValue = pxEventBits->uxEventBits;
 800027e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	623b      	str	r3, [r7, #32]

		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
 8000284:	68b9      	ldr	r1, [r7, #8]
 8000286:	68f8      	ldr	r0, [r7, #12]
 8000288:	f000 f987 	bl	800059a <xEventGroupSetBits>

		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800028c:	6a3a      	ldr	r2, [r7, #32]
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	431a      	orrs	r2, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	401a      	ands	r2, r3
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	429a      	cmp	r2, r3
 800029a:	d10d      	bne.n	80002b8 <xEventGroupSync+0xba>
		{
			/* All the rendezvous bits are now set - no need to block. */
			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
 800029c:	6a3a      	ldr	r2, [r7, #32]
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	4313      	orrs	r3, r2
 80002a2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Rendezvous always clear the bits.  They will have been cleared
			already unless this is the only task in the rendezvous. */
			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80002a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002a6:	681a      	ldr	r2, [r3, #0]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	43db      	mvns	r3, r3
 80002ac:	401a      	ands	r2, r3
 80002ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002b0:	601a      	str	r2, [r3, #0]

			xTicksToWait = 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	603b      	str	r3, [r7, #0]
 80002b6:	e013      	b.n	80002e0 <xEventGroupSync+0xe2>
		}
		else
		{
			if( xTicksToWait != ( TickType_t ) 0 )
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d00b      	beq.n	80002d6 <xEventGroupSync+0xd8>
				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );

				/* Store the bits that the calling task is waiting for in the
				task's event list item so the kernel knows when a match is
				found.  Then enter the blocked state. */
				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
 80002be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002c0:	1d18      	adds	r0, r3, #4
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	4619      	mov	r1, r3
 80002cc:	f003 ffb8 	bl	8004240 <vTaskPlaceOnUnorderedEventList>

				/* This assignment is obsolete as uxReturn will get set after
				the task unblocks, but some compilers mistakenly generate a
				warning about uxReturn being returned without being set if the
				assignment is omitted. */
				uxReturn = 0;
 80002d0:	2300      	movs	r3, #0
 80002d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002d4:	e004      	b.n	80002e0 <xEventGroupSync+0xe2>
			}
			else
			{
				/* The rendezvous bits were not set, but no block time was
				specified - just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80002d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	62fb      	str	r3, [r7, #44]	; 0x2c
				xTimeoutOccurred = pdTRUE;
 80002dc:	2301      	movs	r3, #1
 80002de:	627b      	str	r3, [r7, #36]	; 0x24
			}
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80002e0:	f003 fc9c 	bl	8003c1c <xTaskResumeAll>
 80002e4:	61f8      	str	r0, [r7, #28]

	if( xTicksToWait != ( TickType_t ) 0 )
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d02c      	beq.n	8000346 <xEventGroupSync+0x148>
	{
		if( xAlreadyYielded == pdFALSE )
 80002ec:	69fb      	ldr	r3, [r7, #28]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d107      	bne.n	8000302 <xEventGroupSync+0x104>
		{
			portYIELD_WITHIN_API();
 80002f2:	4b17      	ldr	r3, [pc, #92]	; (8000350 <xEventGroupSync+0x152>)
 80002f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	f3bf 8f4f 	dsb	sy
 80002fe:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8000302:	f004 fccf 	bl	8004ca4 <uxTaskResetEventItemValue>
 8000306:	62f8      	str	r0, [r7, #44]	; 0x2c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8000308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800030a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800030e:	2b00      	cmp	r3, #0
 8000310:	d115      	bne.n	800033e <xEventGroupSync+0x140>
		{
			/* The task timed out, just return the current event bit value. */
			taskENTER_CRITICAL();
 8000312:	f000 fc53 	bl	8000bbc <vPortEnterCritical>
			{
				uxReturn = pxEventBits->uxEventBits;
 8000316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* Although the task got here because it timed out before the
				bits it was waiting for were set, it is possible that since it
				unblocked another task has set the bits.  If this is the case
				then it needs to clear the bits before exiting. */
				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800031c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	401a      	ands	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	429a      	cmp	r2, r3
 8000326:	d106      	bne.n	8000336 <xEventGroupSync+0x138>
				{
					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	43db      	mvns	r3, r3
 8000330:	401a      	ands	r2, r3
 8000332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000334:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8000336:	f000 fc6f 	bl	8000c18 <vPortExitCritical>

			xTimeoutOccurred = pdTRUE;
 800033a:	2301      	movs	r3, #1
 800033c:	627b      	str	r3, [r7, #36]	; 0x24
			/* The task unblocked because the bits were set. */
		}

		/* Control bits might be set as the task had blocked should not be
		returned. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800033e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000340:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000344:	62fb      	str	r3, [r7, #44]	; 0x2c
	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8000346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000348:	4618      	mov	r0, r3
 800034a:	3730      	adds	r7, #48	; 0x30
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	e000ed04 	.word	0xe000ed04

08000354 <xEventGroupWaitBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b090      	sub	sp, #64	; 0x40
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
 8000360:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800036a:	2300      	movs	r3, #0
 800036c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d109      	bne.n	8000388 <xEventGroupWaitBits+0x34>
 8000374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000378:	f383 8811 	msr	BASEPRI, r3
 800037c:	f3bf 8f6f 	isb	sy
 8000380:	f3bf 8f4f 	dsb	sy
 8000384:	623b      	str	r3, [r7, #32]
 8000386:	e7fe      	b.n	8000386 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800038e:	2b00      	cmp	r3, #0
 8000390:	d009      	beq.n	80003a6 <xEventGroupWaitBits+0x52>
 8000392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000396:	f383 8811 	msr	BASEPRI, r3
 800039a:	f3bf 8f6f 	isb	sy
 800039e:	f3bf 8f4f 	dsb	sy
 80003a2:	61fb      	str	r3, [r7, #28]
 80003a4:	e7fe      	b.n	80003a4 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d109      	bne.n	80003c0 <xEventGroupWaitBits+0x6c>
 80003ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b0:	f383 8811 	msr	BASEPRI, r3
 80003b4:	f3bf 8f6f 	isb	sy
 80003b8:	f3bf 8f4f 	dsb	sy
 80003bc:	61bb      	str	r3, [r7, #24]
 80003be:	e7fe      	b.n	80003be <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80003c0:	f004 facc 	bl	800495c <xTaskGetSchedulerState>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d102      	bne.n	80003d0 <xEventGroupWaitBits+0x7c>
 80003ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d101      	bne.n	80003d4 <xEventGroupWaitBits+0x80>
 80003d0:	2301      	movs	r3, #1
 80003d2:	e000      	b.n	80003d6 <xEventGroupWaitBits+0x82>
 80003d4:	2300      	movs	r3, #0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d109      	bne.n	80003ee <xEventGroupWaitBits+0x9a>
 80003da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003de:	f383 8811 	msr	BASEPRI, r3
 80003e2:	f3bf 8f6f 	isb	sy
 80003e6:	f3bf 8f4f 	dsb	sy
 80003ea:	617b      	str	r3, [r7, #20]
 80003ec:	e7fe      	b.n	80003ec <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 80003ee:	f003 fc07 	bl	8003c00 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80003f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80003f8:	683a      	ldr	r2, [r7, #0]
 80003fa:	68b9      	ldr	r1, [r7, #8]
 80003fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80003fe:	f000 f99f 	bl	8000740 <prvTestWaitCondition>
 8000402:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8000404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000406:	2b00      	cmp	r3, #0
 8000408:	d00e      	beq.n	8000428 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800040a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800040c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800040e:	2300      	movs	r3, #0
 8000410:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d028      	beq.n	800046a <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8000418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	43db      	mvns	r3, r3
 8000420:	401a      	ands	r2, r3
 8000422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	e020      	b.n	800046a <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8000428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800042a:	2b00      	cmp	r3, #0
 800042c:	d104      	bne.n	8000438 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800042e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000430:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8000432:	2301      	movs	r3, #1
 8000434:	633b      	str	r3, [r7, #48]	; 0x30
 8000436:	e018      	b.n	800046a <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d003      	beq.n	8000446 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800043e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000440:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000444:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d003      	beq.n	8000454 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800044c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800044e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000452:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8000454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000456:	1d18      	adds	r0, r3, #4
 8000458:	68ba      	ldr	r2, [r7, #8]
 800045a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800045c:	4313      	orrs	r3, r2
 800045e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000460:	4619      	mov	r1, r3
 8000462:	f003 feed 	bl	8004240 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800046a:	f003 fbd7 	bl	8003c1c <xTaskResumeAll>
 800046e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8000470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000472:	2b00      	cmp	r3, #0
 8000474:	d031      	beq.n	80004da <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8000476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000478:	2b00      	cmp	r3, #0
 800047a:	d107      	bne.n	800048c <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 800047c:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <xEventGroupWaitBits+0x190>)
 800047e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	f3bf 8f4f 	dsb	sy
 8000488:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800048c:	f004 fc0a 	bl	8004ca4 <uxTaskResetEventItemValue>
 8000490:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8000492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000498:	2b00      	cmp	r3, #0
 800049a:	d11a      	bne.n	80004d2 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 800049c:	f000 fb8e 	bl	8000bbc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80004a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80004a6:	683a      	ldr	r2, [r7, #0]
 80004a8:	68b9      	ldr	r1, [r7, #8]
 80004aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80004ac:	f000 f948 	bl	8000740 <prvTestWaitCondition>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d009      	beq.n	80004ca <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d006      	beq.n	80004ca <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80004bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	43db      	mvns	r3, r3
 80004c4:	401a      	ands	r2, r3
 80004c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004c8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80004ca:	2301      	movs	r3, #1
 80004cc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80004ce:	f000 fba3 	bl	8000c18 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80004d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80004d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80004da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3740      	adds	r7, #64	; 0x40
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	e000ed04 	.word	0xe000ed04

080004e8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d109      	bne.n	8000510 <xEventGroupClearBits+0x28>
 80004fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000500:	f383 8811 	msr	BASEPRI, r3
 8000504:	f3bf 8f6f 	isb	sy
 8000508:	f3bf 8f4f 	dsb	sy
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	e7fe      	b.n	800050e <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000516:	2b00      	cmp	r3, #0
 8000518:	d009      	beq.n	800052e <xEventGroupClearBits+0x46>
 800051a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800051e:	f383 8811 	msr	BASEPRI, r3
 8000522:	f3bf 8f6f 	isb	sy
 8000526:	f3bf 8f4f 	dsb	sy
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	e7fe      	b.n	800052c <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 800052e:	f000 fb45 	bl	8000bbc <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	43db      	mvns	r3, r3
 8000540:	401a      	ands	r2, r3
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8000546:	f000 fb67 	bl	8000c18 <vPortExitCritical>

	return uxReturn;
 800054a:	693b      	ldr	r3, [r7, #16]
}
 800054c:	4618      	mov	r0, r3
 800054e:	3718      	adds	r7, #24
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8000554:	b480      	push	{r7}
 8000556:	b089      	sub	sp, #36	; 0x24
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000560:	f3ef 8211 	mrs	r2, BASEPRI
 8000564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000568:	f383 8811 	msr	BASEPRI, r3
 800056c:	f3bf 8f6f 	isb	sy
 8000570:	f3bf 8f4f 	dsb	sy
 8000574:	60fa      	str	r2, [r7, #12]
 8000576:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000578:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800057a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800057c:	69fb      	ldr	r3, [r7, #28]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	617b      	str	r3, [r7, #20]
 8000582:	69bb      	ldr	r3, [r7, #24]
 8000584:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	f383 8811 	msr	BASEPRI, r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800058c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800058e:	4618      	mov	r0, r3
 8000590:	3724      	adds	r7, #36	; 0x24
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b08e      	sub	sp, #56	; 0x38
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80005a4:	2300      	movs	r3, #0
 80005a6:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d109      	bne.n	80005ca <xEventGroupSetBits+0x30>
	__asm volatile
 80005b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ba:	f383 8811 	msr	BASEPRI, r3
 80005be:	f3bf 8f6f 	isb	sy
 80005c2:	f3bf 8f4f 	dsb	sy
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	e7fe      	b.n	80005c8 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d009      	beq.n	80005e8 <xEventGroupSetBits+0x4e>
 80005d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d8:	f383 8811 	msr	BASEPRI, r3
 80005dc:	f3bf 8f6f 	isb	sy
 80005e0:	f3bf 8f4f 	dsb	sy
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	e7fe      	b.n	80005e6 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80005e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ea:	3304      	adds	r3, #4
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	3308      	adds	r3, #8
 80005f2:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80005f4:	f003 fb04 	bl	8003c00 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80005f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80005fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	431a      	orrs	r2, r3
 8000606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000608:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800060a:	e03c      	b.n	8000686 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 800060c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8000612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8000618:	2300      	movs	r3, #0
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000622:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800062a:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d108      	bne.n	8000648 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8000636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	4013      	ands	r3, r2
 800063e:	2b00      	cmp	r3, #0
 8000640:	d00b      	beq.n	800065a <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8000642:	2301      	movs	r3, #1
 8000644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000646:	e008      	b.n	800065a <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8000648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	401a      	ands	r2, r3
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	429a      	cmp	r2, r3
 8000654:	d101      	bne.n	800065a <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8000656:	2301      	movs	r3, #1
 8000658:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800065c:	2b00      	cmp	r3, #0
 800065e:	d010      	beq.n	8000682 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000666:	2b00      	cmp	r3, #0
 8000668:	d003      	beq.n	8000672 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800066a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800066c:	69bb      	ldr	r3, [r7, #24]
 800066e:	4313      	orrs	r3, r2
 8000670:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8000672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800067a:	4619      	mov	r1, r3
 800067c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800067e:	f003 fea5 	bl	80043cc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8000686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000688:	6a3b      	ldr	r3, [r7, #32]
 800068a:	429a      	cmp	r2, r3
 800068c:	d1be      	bne.n	800060c <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800068e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000694:	43db      	mvns	r3, r3
 8000696:	401a      	ands	r2, r3
 8000698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800069a:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800069c:	f003 fabe 	bl	8003c1c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80006a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a2:	681b      	ldr	r3, [r3, #0]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3738      	adds	r7, #56	; 0x38
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = xEventGroup;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	3304      	adds	r3, #4
 80006bc:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 80006be:	f003 fa9f 	bl	8003c00 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80006c2:	e016      	b.n	80006f2 <vEventGroupDelete+0x46>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	68da      	ldr	r2, [r3, #12]
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	3308      	adds	r3, #8
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d109      	bne.n	80006e4 <vEventGroupDelete+0x38>
 80006d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d4:	f383 8811 	msr	BASEPRI, r3
 80006d8:	f3bf 8f6f 	isb	sy
 80006dc:	f3bf 8f4f 	dsb	sy
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	e7fe      	b.n	80006e2 <vEventGroupDelete+0x36>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fe6d 	bl	80043cc <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1e4      	bne.n	80006c4 <vEventGroupDelete+0x18>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
		{
			/* The event group can only have been allocated dynamically - free
			it again. */
			vPortFree( pxEventBits );
 80006fa:	6978      	ldr	r0, [r7, #20]
 80006fc:	f000 fc00 	bl	8000f00 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 8000700:	f003 fa8c 	bl	8003c1c <xTaskResumeAll>
}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8000716:	6839      	ldr	r1, [r7, #0]
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff ff3e 	bl	800059a <xEventGroupSetBits>
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
 800072e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8000730:	6839      	ldr	r1, [r7, #0]
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff fed8 	bl	80004e8 <xEventGroupClearBits>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8000740:	b480      	push	{r7}
 8000742:	b087      	sub	sp, #28
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d107      	bne.n	8000766 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	4013      	ands	r3, r2
 800075c:	2b00      	cmp	r3, #0
 800075e:	d00a      	beq.n	8000776 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8000760:	2301      	movs	r3, #1
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	e007      	b.n	8000776 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	401a      	ands	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	429a      	cmp	r2, r3
 8000770:	d101      	bne.n	8000776 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8000772:	2301      	movs	r3, #1
 8000774:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8000776:	697b      	ldr	r3, [r7, #20]
}
 8000778:	4618      	mov	r0, r3
 800077a:	371c      	adds	r7, #28
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <uxEventGroupGetNumber>:
/*-----------------------------------------------------------*/

#if (configUSE_TRACE_FACILITY == 1)

	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
	{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	UBaseType_t xReturn;
	EventGroup_t const *pxEventBits = ( EventGroup_t * ) xEventGroup; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	60bb      	str	r3, [r7, #8]

		if( xEventGroup == NULL )
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d102      	bne.n	800079c <uxEventGroupGetNumber+0x18>
		{
			xReturn = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	e002      	b.n	80007a2 <uxEventGroupGetNumber+0x1e>
		}
		else
		{
			xReturn = pxEventBits->uxEventGroupNumber;
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 80007a2:	68fb      	ldr	r3, [r7, #12]
	}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <vEventGroupSetNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vEventGroupSetNumber( void * xEventGroup, UBaseType_t uxEventGroupNumber )
	{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
		( ( EventGroup_t * ) xEventGroup )->uxEventGroupNumber = uxEventGroupNumber; /*lint !e9087 !e9079 EventGroupHandle_t is a pointer to an EventGroup_t, but EventGroupHandle_t is kept opaque outside of this file for data hiding purposes. */
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	683a      	ldr	r2, [r7, #0]
 80007be:	619a      	str	r2, [r3, #24]
	}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	f103 0208 	add.w	r2, r3, #8
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295
 80007e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f103 0208 	add.w	r2, r3, #8
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f103 0208 	add.w	r2, r3, #8
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000826:	b480      	push	{r7}
 8000828:	b085      	sub	sp, #20
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	683a      	ldr	r2, [r7, #0]
 800084a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	683a      	ldr	r2, [r7, #0]
 8000850:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	1c5a      	adds	r2, r3, #1
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	601a      	str	r2, [r3, #0]
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800086e:	b480      	push	{r7}
 8000870:	b085      	sub	sp, #20
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000884:	d103      	bne.n	800088e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	e00c      	b.n	80008a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	3308      	adds	r3, #8
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	e002      	b.n	800089c <vListInsert+0x2e>
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d9f6      	bls.n	8000896 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	683a      	ldr	r2, [r7, #0]
 80008c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	1c5a      	adds	r2, r3, #1
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	601a      	str	r2, [r3, #0]
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	691b      	ldr	r3, [r3, #16]
 80008ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	6892      	ldr	r2, [r2, #8]
 80008f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	6852      	ldr	r2, [r2, #4]
 8000900:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	685a      	ldr	r2, [r3, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	429a      	cmp	r2, r3
 800090a:	d103      	bne.n	8000914 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	1e5a      	subs	r2, r3, #1
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	681b      	ldr	r3, [r3, #0]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
	...

08000940 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	3b04      	subs	r3, #4
 8000950:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000958:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	3b04      	subs	r3, #4
 800095e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	f023 0201 	bic.w	r2, r3, #1
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	3b04      	subs	r3, #4
 800096e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000970:	4a0c      	ldr	r2, [pc, #48]	; (80009a4 <pxPortInitialiseStack+0x64>)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	3b14      	subs	r3, #20
 800097a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3b04      	subs	r3, #4
 8000986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f06f 0202 	mvn.w	r2, #2
 800098e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	3b20      	subs	r3, #32
 8000994:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	080009a9 	.word	0x080009a9

080009a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <prvTaskExitError+0x50>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ba:	d009      	beq.n	80009d0 <prvTaskExitError+0x28>
 80009bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009c0:	f383 8811 	msr	BASEPRI, r3
 80009c4:	f3bf 8f6f 	isb	sy
 80009c8:	f3bf 8f4f 	dsb	sy
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	e7fe      	b.n	80009ce <prvTaskExitError+0x26>
 80009d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009d4:	f383 8811 	msr	BASEPRI, r3
 80009d8:	f3bf 8f6f 	isb	sy
 80009dc:	f3bf 8f4f 	dsb	sy
 80009e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80009e2:	bf00      	nop
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0fc      	beq.n	80009e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000004 	.word	0x20000004

080009fc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <pxCurrentTCBConst2>)
 80009fe:	6819      	ldr	r1, [r3, #0]
 8000a00:	6808      	ldr	r0, [r1, #0]
 8000a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a06:	f380 8809 	msr	PSP, r0
 8000a0a:	f3bf 8f6f 	isb	sy
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	f380 8811 	msr	BASEPRI, r0
 8000a16:	4770      	bx	lr
 8000a18:	f3af 8000 	nop.w
 8000a1c:	f3af 8000 	nop.w

08000a20 <pxCurrentTCBConst2>:
 8000a20:	20012c68 	.word	0x20012c68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000a24:	bf00      	nop

08000a26 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8000a26:	48ed      	ldr	r0, [pc, #948]	; (8000ddc <vPortValidateInterruptPriority+0x7c>)
 8000a28:	6800      	ldr	r0, [r0, #0]
 8000a2a:	6800      	ldr	r0, [r0, #0]
 8000a2c:	f380 8808 	msr	MSP, r0
 8000a30:	f04f 0000 	mov.w	r0, #0
 8000a34:	f380 8814 	msr	CONTROL, r0
 8000a38:	b662      	cpsie	i
 8000a3a:	b661      	cpsie	f
 8000a3c:	f3bf 8f4f 	dsb	sy
 8000a40:	f3bf 8f6f 	isb	sy
 8000a44:	df00      	svc	0
 8000a46:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000a48:	bf00      	nop

08000a4a <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b086      	sub	sp, #24
 8000a4e:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000a50:	4b44      	ldr	r3, [pc, #272]	; (8000b64 <xPortStartScheduler+0x11a>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a44      	ldr	r2, [pc, #272]	; (8000b68 <xPortStartScheduler+0x11e>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d109      	bne.n	8000a6e <xPortStartScheduler+0x24>
 8000a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a5e:	f383 8811 	msr	BASEPRI, r3
 8000a62:	f3bf 8f6f 	isb	sy
 8000a66:	f3bf 8f4f 	dsb	sy
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	e7fe      	b.n	8000a6c <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000a6e:	4b3d      	ldr	r3, [pc, #244]	; (8000b64 <xPortStartScheduler+0x11a>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a3e      	ldr	r2, [pc, #248]	; (8000b6c <xPortStartScheduler+0x122>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d109      	bne.n	8000a8c <xPortStartScheduler+0x42>
 8000a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a7c:	f383 8811 	msr	BASEPRI, r3
 8000a80:	f3bf 8f6f 	isb	sy
 8000a84:	f3bf 8f4f 	dsb	sy
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	e7fe      	b.n	8000a8a <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000a8c:	4b38      	ldr	r3, [pc, #224]	; (8000b70 <xPortStartScheduler+0x126>)
 8000a8e:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000aa6:	78fb      	ldrb	r3, [r7, #3]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <xPortStartScheduler+0x12a>)
 8000ab2:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000ab4:	4b30      	ldr	r3, [pc, #192]	; (8000b78 <xPortStartScheduler+0x12e>)
 8000ab6:	2207      	movs	r2, #7
 8000ab8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000aba:	e009      	b.n	8000ad0 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <xPortStartScheduler+0x12e>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	4a2d      	ldr	r2, [pc, #180]	; (8000b78 <xPortStartScheduler+0x12e>)
 8000ac4:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000ac6:	78fb      	ldrb	r3, [r7, #3]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000ad0:	78fb      	ldrb	r3, [r7, #3]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad8:	2b80      	cmp	r3, #128	; 0x80
 8000ada:	d0ef      	beq.n	8000abc <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <xPortStartScheduler+0x12e>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f1c3 0307 	rsb	r3, r3, #7
 8000ae4:	2b04      	cmp	r3, #4
 8000ae6:	d009      	beq.n	8000afc <xPortStartScheduler+0xb2>
 8000ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aec:	f383 8811 	msr	BASEPRI, r3
 8000af0:	f3bf 8f6f 	isb	sy
 8000af4:	f3bf 8f4f 	dsb	sy
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	e7fe      	b.n	8000afa <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <xPortStartScheduler+0x12e>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	021b      	lsls	r3, r3, #8
 8000b02:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <xPortStartScheduler+0x12e>)
 8000b04:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <xPortStartScheduler+0x12e>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b0e:	4a1a      	ldr	r2, [pc, #104]	; (8000b78 <xPortStartScheduler+0x12e>)
 8000b10:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000b1a:	4a18      	ldr	r2, [pc, #96]	; (8000b7c <xPortStartScheduler+0x132>)
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <xPortStartScheduler+0x132>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b24:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000b26:	4a15      	ldr	r2, [pc, #84]	; (8000b7c <xPortStartScheduler+0x132>)
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <xPortStartScheduler+0x132>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000b30:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000b32:	f000 f8f1 	bl	8000d18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <xPortStartScheduler+0x136>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8000b3c:	f000 f908 	bl	8000d50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000b40:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <xPortStartScheduler+0x13a>)
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <xPortStartScheduler+0x13a>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000b4a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000b4c:	f7ff ff6b 	bl	8000a26 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000b50:	f003 faf8 	bl	8004144 <vTaskSwitchContext>
	prvTaskExitError();
 8000b54:	f7ff ff28 	bl	80009a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	410fc271 	.word	0x410fc271
 8000b6c:	410fc270 	.word	0x410fc270
 8000b70:	e000e400 	.word	0xe000e400
 8000b74:	2000004c 	.word	0x2000004c
 8000b78:	20000050 	.word	0x20000050
 8000b7c:	e000ed20 	.word	0xe000ed20
 8000b80:	20000004 	.word	0x20000004
 8000b84:	e000ef34 	.word	0xe000ef34

08000b88 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <vPortEndScheduler+0x30>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b96:	d009      	beq.n	8000bac <vPortEndScheduler+0x24>
 8000b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b9c:	f383 8811 	msr	BASEPRI, r3
 8000ba0:	f3bf 8f6f 	isb	sy
 8000ba4:	f3bf 8f4f 	dsb	sy
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	e7fe      	b.n	8000baa <vPortEndScheduler+0x22>
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	20000004 	.word	0x20000004

08000bbc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bc6:	f383 8811 	msr	BASEPRI, r3
 8000bca:	f3bf 8f6f 	isb	sy
 8000bce:	f3bf 8f4f 	dsb	sy
 8000bd2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <vPortEnterCritical+0x54>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <vPortEnterCritical+0x54>)
 8000bdc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <vPortEnterCritical+0x54>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d10e      	bne.n	8000c04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <vPortEnterCritical+0x58>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d009      	beq.n	8000c04 <vPortEnterCritical+0x48>
 8000bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bf4:	f383 8811 	msr	BASEPRI, r3
 8000bf8:	f3bf 8f6f 	isb	sy
 8000bfc:	f3bf 8f4f 	dsb	sy
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	e7fe      	b.n	8000c02 <vPortEnterCritical+0x46>
	}
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	20000004 	.word	0x20000004
 8000c14:	e000ed04 	.word	0xe000ed04

08000c18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <vPortExitCritical+0x4c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d109      	bne.n	8000c3a <vPortExitCritical+0x22>
 8000c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c2a:	f383 8811 	msr	BASEPRI, r3
 8000c2e:	f3bf 8f6f 	isb	sy
 8000c32:	f3bf 8f4f 	dsb	sy
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	e7fe      	b.n	8000c38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <vPortExitCritical+0x4c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <vPortExitCritical+0x4c>)
 8000c42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <vPortExitCritical+0x4c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d104      	bne.n	8000c56 <vPortExitCritical+0x3e>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000004 	.word	0x20000004

08000c68 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000c68:	f3ef 8009 	mrs	r0, PSP
 8000c6c:	f3bf 8f6f 	isb	sy
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <pxCurrentTCBConst>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	f01e 0f10 	tst.w	lr, #16
 8000c78:	bf08      	it	eq
 8000c7a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000c7e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c82:	6010      	str	r0, [r2, #0]
 8000c84:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000c88:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000c8c:	f380 8811 	msr	BASEPRI, r0
 8000c90:	f3bf 8f4f 	dsb	sy
 8000c94:	f3bf 8f6f 	isb	sy
 8000c98:	f003 fa54 	bl	8004144 <vTaskSwitchContext>
 8000c9c:	f04f 0000 	mov.w	r0, #0
 8000ca0:	f380 8811 	msr	BASEPRI, r0
 8000ca4:	bc09      	pop	{r0, r3}
 8000ca6:	6819      	ldr	r1, [r3, #0]
 8000ca8:	6808      	ldr	r0, [r1, #0]
 8000caa:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cae:	f01e 0f10 	tst.w	lr, #16
 8000cb2:	bf08      	it	eq
 8000cb4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000cb8:	f380 8809 	msr	PSP, r0
 8000cbc:	f3bf 8f6f 	isb	sy
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	f3af 8000 	nop.w
 8000cc8:	f3af 8000 	nop.w
 8000ccc:	f3af 8000 	nop.w

08000cd0 <pxCurrentTCBConst>:
 8000cd0:	20012c68 	.word	0x20012c68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000cd4:	bf00      	nop

08000cd6 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
	__asm volatile
 8000cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce0:	f383 8811 	msr	BASEPRI, r3
 8000ce4:	f3bf 8f6f 	isb	sy
 8000ce8:	f3bf 8f4f 	dsb	sy
 8000cec:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000cee:	f003 f969 	bl	8003fc4 <xTaskIncrementTick>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <SysTick_Handler+0x3e>)
 8000cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	2300      	movs	r3, #0
 8000d02:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000ed04 	.word	0xe000ed04

08000d18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <vPortSetupTimerInterrupt+0x28>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <vPortSetupTimerInterrupt+0x2c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <vPortSetupTimerInterrupt+0x30>)
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <vPortSetupTimerInterrupt+0x34>)
 8000d2c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <vPortSetupTimerInterrupt+0x28>)
 8000d30:	2207      	movs	r2, #7
 8000d32:	601a      	str	r2, [r3, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000e010 	.word	0xe000e010
 8000d44:	e000e018 	.word	0xe000e018
 8000d48:	e000e014 	.word	0xe000e014
 8000d4c:	0002903f 	.word	0x0002903f

08000d50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000d50:	f8df 008c 	ldr.w	r0, [pc, #140]	; 8000de0 <vPortValidateInterruptPriority+0x80>
 8000d54:	6801      	ldr	r1, [r0, #0]
 8000d56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000d5a:	6001      	str	r1, [r0, #0]
 8000d5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8000d5e:	bf00      	nop

08000d60 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8000d66:	f3ef 8305 	mrs	r3, IPSR
 8000d6a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2b0f      	cmp	r3, #15
 8000d70:	d913      	bls.n	8000d9a <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000d72:	4a16      	ldr	r2, [pc, #88]	; (8000dcc <vPortValidateInterruptPriority+0x6c>)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000d7c:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <vPortValidateInterruptPriority+0x70>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	7afa      	ldrb	r2, [r7, #11]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d209      	bcs.n	8000d9a <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8000d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d8a:	f383 8811 	msr	BASEPRI, r3
 8000d8e:	f3bf 8f6f 	isb	sy
 8000d92:	f3bf 8f4f 	dsb	sy
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	e7fe      	b.n	8000d98 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <vPortValidateInterruptPriority+0x74>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <vPortValidateInterruptPriority+0x78>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d909      	bls.n	8000dbe <vPortValidateInterruptPriority+0x5e>
 8000daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dae:	f383 8811 	msr	BASEPRI, r3
 8000db2:	f3bf 8f6f 	isb	sy
 8000db6:	f3bf 8f4f 	dsb	sy
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	e7fe      	b.n	8000dbc <vPortValidateInterruptPriority+0x5c>
	}
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e3f0 	.word	0xe000e3f0
 8000dd0:	2000004c 	.word	0x2000004c
 8000dd4:	e000ed0c 	.word	0xe000ed0c
 8000dd8:	20000050 	.word	0x20000050
 8000ddc:	e000ed08 	.word	0xe000ed08
 8000de0:	e000ed88 	.word	0xe000ed88

08000de4 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 8000df0:	f002 ff06 	bl	8003c00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8000df4:	4b3d      	ldr	r3, [pc, #244]	; (8000eec <pvPortMalloc+0x108>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d104      	bne.n	8000e06 <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8000dfc:	f000 f8cd 	bl	8000f9a <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8000e00:	4b3a      	ldr	r3, [pc, #232]	; (8000eec <pvPortMalloc+0x108>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00e      	beq.n	8000e2a <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	461a      	mov	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d004      	beq.n	8000e2a <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f023 0307 	bic.w	r3, r3, #7
 8000e26:	3308      	adds	r3, #8
 8000e28:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d056      	beq.n	8000ede <pvPortMalloc+0xfa>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a2f      	ldr	r2, [pc, #188]	; (8000ef0 <pvPortMalloc+0x10c>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d852      	bhi.n	8000ede <pvPortMalloc+0xfa>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8000e38:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <pvPortMalloc+0x110>)
 8000e3a:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <pvPortMalloc+0x110>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000e42:	e004      	b.n	8000e4e <pvPortMalloc+0x6a>
			{
				pxPreviousBlock = pxBlock;
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d203      	bcs.n	8000e60 <pvPortMalloc+0x7c>
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1f1      	bne.n	8000e44 <pvPortMalloc+0x60>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	4a25      	ldr	r2, [pc, #148]	; (8000ef8 <pvPortMalloc+0x114>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d03a      	beq.n	8000ede <pvPortMalloc+0xfa>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	4413      	add	r3, r2
 8000e70:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2208      	movs	r2, #8
 8000e84:	0052      	lsls	r2, r2, #1
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d922      	bls.n	8000ed0 <pvPortMalloc+0xec>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000e8a:	69fa      	ldr	r2, [r7, #28]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4413      	add	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	1ad2      	subs	r2, r2, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <pvPortMalloc+0x110>)
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	e002      	b.n	8000eb6 <pvPortMalloc+0xd2>
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d3f6      	bcc.n	8000eb0 <pvPortMalloc+0xcc>
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <pvPortMalloc+0x118>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <pvPortMalloc+0x118>)
 8000edc:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000ede:	f002 fe9d 	bl	8003c1c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8000ee2:	697b      	ldr	r3, [r7, #20]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20012c64 	.word	0x20012c64
 8000ef0:	00012bf7 	.word	0x00012bf7
 8000ef4:	20012c54 	.word	0x20012c54
 8000ef8:	20012c5c 	.word	0x20012c5c
 8000efc:	20000008 	.word	0x20000008

08000f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d027      	beq.n	8000f62 <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8000f12:	2308      	movs	r3, #8
 8000f14:	425b      	negs	r3, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4413      	add	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 8000f20:	f002 fe6e 	bl	8003c00 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <vPortFree+0x6c>)
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	e002      	b.n	8000f36 <vPortFree+0x36>
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d3f6      	bcc.n	8000f30 <vPortFree+0x30>
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <vPortFree+0x70>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4413      	add	r3, r2
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <vPortFree+0x70>)
 8000f5c:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8000f5e:	f002 fe5d 	bl	8003c1c <xTaskResumeAll>
	}
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20012c54 	.word	0x20012c54
 8000f70:	20000008 	.word	0x20000008

08000f74 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <xPortGetFreeHeapSize+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008

08000f8c <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
	/* This just exists to keep the linker quiet. */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <prvHeapInit+0x42>)
 8000fa2:	f023 0307 	bic.w	r3, r3, #7
 8000fa6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <prvHeapInit+0x46>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <prvHeapInit+0x46>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <prvHeapInit+0x4a>)
 8000fb6:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <prvHeapInit+0x4e>)
 8000fb8:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <prvHeapInit+0x4a>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <prvHeapInit+0x4e>)
 8000fc8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <prvHeapInit+0x4a>)
 8000fce:	601a      	str	r2, [r3, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	2000005c 	.word	0x2000005c
 8000fe0:	20012c54 	.word	0x20012c54
 8000fe4:	20012c5c 	.word	0x20012c5c
 8000fe8:	00012bf8 	.word	0x00012bf8

08000fec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d109      	bne.n	8001014 <xQueueGenericReset+0x28>
 8001000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001004:	f383 8811 	msr	BASEPRI, r3
 8001008:	f3bf 8f6f 	isb	sy
 800100c:	f3bf 8f4f 	dsb	sy
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	e7fe      	b.n	8001012 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001014:	f7ff fdd2 	bl	8000bbc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001020:	68f9      	ldr	r1, [r7, #12]
 8001022:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001024:	fb01 f303 	mul.w	r3, r1, r3
 8001028:	441a      	add	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2200      	movs	r2, #0
 8001032:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001044:	3b01      	subs	r3, #1
 8001046:	68f9      	ldr	r1, [r7, #12]
 8001048:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800104a:	fb01 f303 	mul.w	r3, r1, r3
 800104e:	441a      	add	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	22ff      	movs	r2, #255	; 0xff
 8001058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	22ff      	movs	r2, #255	; 0xff
 8001060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d114      	bne.n	8001094 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d01a      	beq.n	80010a8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3310      	adds	r3, #16
 8001076:	4618      	mov	r0, r3
 8001078:	f003 f946 	bl	8004308 <xTaskRemoveFromEventList>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d012      	beq.n	80010a8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <xQueueGenericReset+0xcc>)
 8001084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	f3bf 8f4f 	dsb	sy
 800108e:	f3bf 8f6f 	isb	sy
 8001092:	e009      	b.n	80010a8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3310      	adds	r3, #16
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fb97 	bl	80007cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3324      	adds	r3, #36	; 0x24
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fb92 	bl	80007cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80010a8:	f7ff fdb6 	bl	8000c18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80010ac:	2301      	movs	r3, #1
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000ed04 	.word	0xe000ed04

080010bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	4613      	mov	r3, r2
 80010c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d109      	bne.n	80010e4 <xQueueGenericCreate+0x28>
 80010d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010d4:	f383 8811 	msr	BASEPRI, r3
 80010d8:	f3bf 8f6f 	isb	sy
 80010dc:	f3bf 8f4f 	dsb	sy
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	e7fe      	b.n	80010e2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d102      	bne.n	80010f0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
 80010ee:	e004      	b.n	80010fa <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	fb02 f303 	mul.w	r3, r2, r3
 80010f8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3350      	adds	r3, #80	; 0x50
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fe70 	bl	8000de4 <pvPortMalloc>
 8001104:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00d      	beq.n	8001128 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3350      	adds	r3, #80	; 0x50
 8001114:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001116:	79fa      	ldrb	r2, [r7, #7]
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	4613      	mov	r3, r2
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	f000 f805 	bl	8001132 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001128:	69bb      	ldr	r3, [r7, #24]
	}
 800112a:	4618      	mov	r0, r3
 800112c:	3720      	adds	r7, #32
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d103      	bne.n	800114e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e002      	b.n	8001154 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001160:	2101      	movs	r1, #1
 8001162:	69b8      	ldr	r0, [r7, #24]
 8001164:	f7ff ff42 	bl	8000fec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	78fa      	ldrb	r2, [r7, #3]
 800116c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00e      	beq.n	80011a4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001198:	2300      	movs	r3, #0
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f8b5 	bl	800130e <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80011b6:	2301      	movs	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	461a      	mov	r2, r3
 80011c2:	6939      	ldr	r1, [r7, #16]
 80011c4:	6978      	ldr	r0, [r7, #20]
 80011c6:	f7ff ff79 	bl	80010bc <xQueueGenericCreate>
 80011ca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f7ff ffd3 	bl	8001178 <prvInitialiseMutex>

		return xNewQueue;
 80011d2:	68fb      	ldr	r3, [r7, #12]
	}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d109      	bne.n	8001202 <xQueueGiveMutexRecursive+0x26>
 80011ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011f2:	f383 8811 	msr	BASEPRI, r3
 80011f6:	f3bf 8f6f 	isb	sy
 80011fa:	f3bf 8f4f 	dsb	sy
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e7fe      	b.n	8001200 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	689c      	ldr	r4, [r3, #8]
 8001206:	f003 fb99 	bl	800493c <xTaskGetCurrentTaskHandle>
 800120a:	4603      	mov	r3, r0
 800120c:	429c      	cmp	r4, r3
 800120e:	d111      	bne.n	8001234 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	1e5a      	subs	r2, r3, #1
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d105      	bne.n	800122e <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8001222:	2300      	movs	r3, #0
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	6938      	ldr	r0, [r7, #16]
 800122a:	f000 f870 	bl	800130e <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800122e:	2301      	movs	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	e001      	b.n	8001238 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8001238:	697b      	ldr	r3, [r7, #20]
	}
 800123a:	4618      	mov	r0, r3
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd90      	pop	{r4, r7, pc}

08001242 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8001242:	b590      	push	{r4, r7, lr}
 8001244:	b087      	sub	sp, #28
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d109      	bne.n	800126a <xQueueTakeMutexRecursive+0x28>
 8001256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800125a:	f383 8811 	msr	BASEPRI, r3
 800125e:	f3bf 8f6f 	isb	sy
 8001262:	f3bf 8f4f 	dsb	sy
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	e7fe      	b.n	8001268 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	689c      	ldr	r4, [r3, #8]
 800126e:	f003 fb65 	bl	800493c <xTaskGetCurrentTaskHandle>
 8001272:	4603      	mov	r3, r0
 8001274:	429c      	cmp	r4, r3
 8001276:	d107      	bne.n	8001288 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8001282:	2301      	movs	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e00c      	b.n	80012a2 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8001288:	6839      	ldr	r1, [r7, #0]
 800128a:	6938      	ldr	r0, [r7, #16]
 800128c:	f000 fb34 	bl	80018f8 <xQueueSemaphoreTake>
 8001290:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d004      	beq.n	80012a2 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80012a2:	697b      	ldr	r3, [r7, #20]
	}
 80012a4:	4618      	mov	r0, r3
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}

080012ac <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d109      	bne.n	80012d0 <xQueueCreateCountingSemaphore+0x24>
 80012bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012c0:	f383 8811 	msr	BASEPRI, r3
 80012c4:	f3bf 8f6f 	isb	sy
 80012c8:	f3bf 8f4f 	dsb	sy
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	e7fe      	b.n	80012ce <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d909      	bls.n	80012ec <xQueueCreateCountingSemaphore+0x40>
 80012d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012dc:	f383 8811 	msr	BASEPRI, r3
 80012e0:	f3bf 8f6f 	isb	sy
 80012e4:	f3bf 8f4f 	dsb	sy
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	e7fe      	b.n	80012ea <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80012ec:	2202      	movs	r2, #2
 80012ee:	2100      	movs	r1, #0
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff fee3 	bl	80010bc <xQueueGenericCreate>
 80012f6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d002      	beq.n	8001304 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8001304:	697b      	ldr	r3, [r7, #20]
	}
 8001306:	4618      	mov	r0, r3
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b08e      	sub	sp, #56	; 0x38
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800131c:	2300      	movs	r3, #0
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001326:	2b00      	cmp	r3, #0
 8001328:	d109      	bne.n	800133e <xQueueGenericSend+0x30>
 800132a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800132e:	f383 8811 	msr	BASEPRI, r3
 8001332:	f3bf 8f6f 	isb	sy
 8001336:	f3bf 8f4f 	dsb	sy
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
 800133c:	e7fe      	b.n	800133c <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <xQueueGenericSend+0x3e>
 8001344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <xQueueGenericSend+0x42>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <xQueueGenericSend+0x44>
 8001350:	2300      	movs	r3, #0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d109      	bne.n	800136a <xQueueGenericSend+0x5c>
 8001356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800135a:	f383 8811 	msr	BASEPRI, r3
 800135e:	f3bf 8f6f 	isb	sy
 8001362:	f3bf 8f4f 	dsb	sy
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
 8001368:	e7fe      	b.n	8001368 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d103      	bne.n	8001378 <xQueueGenericSend+0x6a>
 8001370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001374:	2b01      	cmp	r3, #1
 8001376:	d101      	bne.n	800137c <xQueueGenericSend+0x6e>
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <xQueueGenericSend+0x70>
 800137c:	2300      	movs	r3, #0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d109      	bne.n	8001396 <xQueueGenericSend+0x88>
 8001382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001386:	f383 8811 	msr	BASEPRI, r3
 800138a:	f3bf 8f6f 	isb	sy
 800138e:	f3bf 8f4f 	dsb	sy
 8001392:	623b      	str	r3, [r7, #32]
 8001394:	e7fe      	b.n	8001394 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001396:	f003 fae1 	bl	800495c <xTaskGetSchedulerState>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <xQueueGenericSend+0x98>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <xQueueGenericSend+0x9c>
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <xQueueGenericSend+0x9e>
 80013aa:	2300      	movs	r3, #0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d109      	bne.n	80013c4 <xQueueGenericSend+0xb6>
 80013b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013b4:	f383 8811 	msr	BASEPRI, r3
 80013b8:	f3bf 8f6f 	isb	sy
 80013bc:	f3bf 8f4f 	dsb	sy
 80013c0:	61fb      	str	r3, [r7, #28]
 80013c2:	e7fe      	b.n	80013c2 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80013c4:	f7ff fbfa 	bl	8000bbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80013c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d302      	bcc.n	80013da <xQueueGenericSend+0xcc>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d129      	bne.n	800142e <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013e0:	f000 fe0a 	bl	8001ff8 <prvCopyDataToQueue>
 80013e4:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d010      	beq.n	8001410 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80013ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f0:	3324      	adds	r3, #36	; 0x24
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 ff88 	bl	8004308 <xTaskRemoveFromEventList>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d013      	beq.n	8001426 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80013fe:	4b40      	ldr	r3, [pc, #256]	; (8001500 <xQueueGenericSend+0x1f2>)
 8001400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	f3bf 8f4f 	dsb	sy
 800140a:	f3bf 8f6f 	isb	sy
 800140e:	e00a      	b.n	8001426 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001412:	2b00      	cmp	r3, #0
 8001414:	d007      	beq.n	8001426 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001416:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <xQueueGenericSend+0x1f2>)
 8001418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	f3bf 8f4f 	dsb	sy
 8001422:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001426:	f7ff fbf7 	bl	8000c18 <vPortExitCritical>
				return pdPASS;
 800142a:	2301      	movs	r3, #1
 800142c:	e063      	b.n	80014f6 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d103      	bne.n	800143c <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001434:	f7ff fbf0 	bl	8000c18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001438:	2300      	movs	r3, #0
 800143a:	e05c      	b.n	80014f6 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800143c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143e:	2b00      	cmp	r3, #0
 8001440:	d106      	bne.n	8001450 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4618      	mov	r0, r3
 8001448:	f003 f846 	bl	80044d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800144c:	2301      	movs	r3, #1
 800144e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001450:	f7ff fbe2 	bl	8000c18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001454:	f002 fbd4 	bl	8003c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001458:	f7ff fbb0 	bl	8000bbc <vPortEnterCritical>
 800145c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800145e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001462:	b25b      	sxtb	r3, r3
 8001464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001468:	d103      	bne.n	8001472 <xQueueGenericSend+0x164>
 800146a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001478:	b25b      	sxtb	r3, r3
 800147a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147e:	d103      	bne.n	8001488 <xQueueGenericSend+0x17a>
 8001480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001488:	f7ff fbc6 	bl	8000c18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800148c:	1d3a      	adds	r2, r7, #4
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f003 f835 	bl	8004504 <xTaskCheckForTimeOut>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d124      	bne.n	80014ea <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80014a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014a2:	f000 fec4 	bl	800222e <prvIsQueueFull>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d018      	beq.n	80014de <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80014ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ae:	3310      	adds	r3, #16
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fe9f 	bl	80041f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80014ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014bc:	f000 fe2c 	bl	8002118 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80014c0:	f002 fbac 	bl	8003c1c <xTaskResumeAll>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f47f af7c 	bne.w	80013c4 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <xQueueGenericSend+0x1f2>)
 80014ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	f3bf 8f4f 	dsb	sy
 80014d8:	f3bf 8f6f 	isb	sy
 80014dc:	e772      	b.n	80013c4 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80014de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014e0:	f000 fe1a 	bl	8002118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80014e4:	f002 fb9a 	bl	8003c1c <xTaskResumeAll>
 80014e8:	e76c      	b.n	80013c4 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80014ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80014ec:	f000 fe14 	bl	8002118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80014f0:	f002 fb94 	bl	8003c1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80014f4:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3738      	adds	r7, #56	; 0x38
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	e000ed04 	.word	0xe000ed04

08001504 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08e      	sub	sp, #56	; 0x38
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001518:	2b00      	cmp	r3, #0
 800151a:	d109      	bne.n	8001530 <xQueueGenericSendFromISR+0x2c>
 800151c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001520:	f383 8811 	msr	BASEPRI, r3
 8001524:	f3bf 8f6f 	isb	sy
 8001528:	f3bf 8f4f 	dsb	sy
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
 800152e:	e7fe      	b.n	800152e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d103      	bne.n	800153e <xQueueGenericSendFromISR+0x3a>
 8001536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <xQueueGenericSendFromISR+0x3e>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <xQueueGenericSendFromISR+0x40>
 8001542:	2300      	movs	r3, #0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <xQueueGenericSendFromISR+0x58>
 8001548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800154c:	f383 8811 	msr	BASEPRI, r3
 8001550:	f3bf 8f6f 	isb	sy
 8001554:	f3bf 8f4f 	dsb	sy
 8001558:	623b      	str	r3, [r7, #32]
 800155a:	e7fe      	b.n	800155a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d103      	bne.n	800156a <xQueueGenericSendFromISR+0x66>
 8001562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <xQueueGenericSendFromISR+0x6a>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <xQueueGenericSendFromISR+0x6c>
 800156e:	2300      	movs	r3, #0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d109      	bne.n	8001588 <xQueueGenericSendFromISR+0x84>
 8001574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001578:	f383 8811 	msr	BASEPRI, r3
 800157c:	f3bf 8f6f 	isb	sy
 8001580:	f3bf 8f4f 	dsb	sy
 8001584:	61fb      	str	r3, [r7, #28]
 8001586:	e7fe      	b.n	8001586 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001588:	f7ff fbea 	bl	8000d60 <vPortValidateInterruptPriority>
	__asm volatile
 800158c:	f3ef 8211 	mrs	r2, BASEPRI
 8001590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001594:	f383 8811 	msr	BASEPRI, r3
 8001598:	f3bf 8f6f 	isb	sy
 800159c:	f3bf 8f4f 	dsb	sy
 80015a0:	61ba      	str	r2, [r7, #24]
 80015a2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80015a4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d302      	bcc.n	80015ba <xQueueGenericSendFromISR+0xb6>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d12c      	bne.n	8001614 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80015ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	68b9      	ldr	r1, [r7, #8]
 80015c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015ca:	f000 fd15 	bl	8001ff8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80015ce:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80015d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d6:	d112      	bne.n	80015fe <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80015d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d016      	beq.n	800160e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80015e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e2:	3324      	adds	r3, #36	; 0x24
 80015e4:	4618      	mov	r0, r3
 80015e6:	f002 fe8f 	bl	8004308 <xTaskRemoveFromEventList>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00e      	beq.n	800160e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00b      	beq.n	800160e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e007      	b.n	800160e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80015fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001602:	3301      	adds	r3, #1
 8001604:	b2db      	uxtb	r3, r3
 8001606:	b25a      	sxtb	r2, r3
 8001608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800160e:	2301      	movs	r3, #1
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001612:	e001      	b.n	8001618 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001614:	2300      	movs	r3, #0
 8001616:	637b      	str	r3, [r7, #52]	; 0x34
 8001618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001624:	4618      	mov	r0, r3
 8001626:	3738      	adds	r7, #56	; 0x38
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08e      	sub	sp, #56	; 0x38
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800163a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163c:	2b00      	cmp	r3, #0
 800163e:	d109      	bne.n	8001654 <xQueueGiveFromISR+0x28>
	__asm volatile
 8001640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001644:	f383 8811 	msr	BASEPRI, r3
 8001648:	f3bf 8f6f 	isb	sy
 800164c:	f3bf 8f4f 	dsb	sy
 8001650:	623b      	str	r3, [r7, #32]
 8001652:	e7fe      	b.n	8001652 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	2b00      	cmp	r3, #0
 800165a:	d009      	beq.n	8001670 <xQueueGiveFromISR+0x44>
 800165c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001660:	f383 8811 	msr	BASEPRI, r3
 8001664:	f3bf 8f6f 	isb	sy
 8001668:	f3bf 8f4f 	dsb	sy
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	e7fe      	b.n	800166e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d103      	bne.n	8001680 <xQueueGiveFromISR+0x54>
 8001678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <xQueueGiveFromISR+0x58>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <xQueueGiveFromISR+0x5a>
 8001684:	2300      	movs	r3, #0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <xQueueGiveFromISR+0x72>
 800168a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800168e:	f383 8811 	msr	BASEPRI, r3
 8001692:	f3bf 8f6f 	isb	sy
 8001696:	f3bf 8f4f 	dsb	sy
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	e7fe      	b.n	800169c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800169e:	f7ff fb5f 	bl	8000d60 <vPortValidateInterruptPriority>
	__asm volatile
 80016a2:	f3ef 8211 	mrs	r2, BASEPRI
 80016a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016aa:	f383 8811 	msr	BASEPRI, r3
 80016ae:	f3bf 8f6f 	isb	sy
 80016b2:	f3bf 8f4f 	dsb	sy
 80016b6:	617a      	str	r2, [r7, #20]
 80016b8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80016ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80016be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80016c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d92b      	bls.n	8001726 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80016ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80016d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016da:	1c5a      	adds	r2, r3, #1
 80016dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016de:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80016e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e8:	d112      	bne.n	8001710 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80016ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d016      	beq.n	8001720 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80016f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f4:	3324      	adds	r3, #36	; 0x24
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 fe06 	bl	8004308 <xTaskRemoveFromEventList>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00e      	beq.n	8001720 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00b      	beq.n	8001720 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	e007      	b.n	8001720 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001714:	3301      	adds	r3, #1
 8001716:	b2db      	uxtb	r3, r3
 8001718:	b25a      	sxtb	r2, r3
 800171a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001720:	2301      	movs	r3, #1
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
 8001724:	e001      	b.n	800172a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001726:	2300      	movs	r3, #0
 8001728:	637b      	str	r3, [r7, #52]	; 0x34
 800172a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001736:	4618      	mov	r0, r3
 8001738:	3738      	adds	r7, #56	; 0x38
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b08c      	sub	sp, #48	; 0x30
 8001742:	af00      	add	r7, sp, #0
 8001744:	60f8      	str	r0, [r7, #12]
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800174a:	2300      	movs	r3, #0
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001754:	2b00      	cmp	r3, #0
 8001756:	d109      	bne.n	800176c <xQueueReceive+0x2e>
	__asm volatile
 8001758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800175c:	f383 8811 	msr	BASEPRI, r3
 8001760:	f3bf 8f6f 	isb	sy
 8001764:	f3bf 8f4f 	dsb	sy
 8001768:	623b      	str	r3, [r7, #32]
 800176a:	e7fe      	b.n	800176a <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d103      	bne.n	800177a <xQueueReceive+0x3c>
 8001772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <xQueueReceive+0x40>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <xQueueReceive+0x42>
 800177e:	2300      	movs	r3, #0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d109      	bne.n	8001798 <xQueueReceive+0x5a>
 8001784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001788:	f383 8811 	msr	BASEPRI, r3
 800178c:	f3bf 8f6f 	isb	sy
 8001790:	f3bf 8f4f 	dsb	sy
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	e7fe      	b.n	8001796 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001798:	f003 f8e0 	bl	800495c <xTaskGetSchedulerState>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <xQueueReceive+0x6a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <xQueueReceive+0x6e>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <xQueueReceive+0x70>
 80017ac:	2300      	movs	r3, #0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d109      	bne.n	80017c6 <xQueueReceive+0x88>
 80017b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b6:	f383 8811 	msr	BASEPRI, r3
 80017ba:	f3bf 8f6f 	isb	sy
 80017be:	f3bf 8f4f 	dsb	sy
 80017c2:	61bb      	str	r3, [r7, #24]
 80017c4:	e7fe      	b.n	80017c4 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80017c6:	f7ff f9f9 	bl	8000bbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80017ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d01f      	beq.n	8001816 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80017d6:	68b9      	ldr	r1, [r7, #8]
 80017d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017da:	f000 fc77 	bl	80020cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80017e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00f      	beq.n	800180e <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80017ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f0:	3310      	adds	r3, #16
 80017f2:	4618      	mov	r0, r3
 80017f4:	f002 fd88 	bl	8004308 <xTaskRemoveFromEventList>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d007      	beq.n	800180e <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80017fe:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <xQueueReceive+0x1b6>)
 8001800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	f3bf 8f4f 	dsb	sy
 800180a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800180e:	f7ff fa03 	bl	8000c18 <vPortExitCritical>
				return pdPASS;
 8001812:	2301      	movs	r3, #1
 8001814:	e069      	b.n	80018ea <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d103      	bne.n	8001824 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800181c:	f7ff f9fc 	bl	8000c18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001820:	2300      	movs	r3, #0
 8001822:	e062      	b.n	80018ea <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001826:	2b00      	cmp	r3, #0
 8001828:	d106      	bne.n	8001838 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800182a:	f107 0310 	add.w	r3, r7, #16
 800182e:	4618      	mov	r0, r3
 8001830:	f002 fe52 	bl	80044d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001834:	2301      	movs	r3, #1
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001838:	f7ff f9ee 	bl	8000c18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800183c:	f002 f9e0 	bl	8003c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001840:	f7ff f9bc 	bl	8000bbc <vPortEnterCritical>
 8001844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800184a:	b25b      	sxtb	r3, r3
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001850:	d103      	bne.n	800185a <xQueueReceive+0x11c>
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800185a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001860:	b25b      	sxtb	r3, r3
 8001862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001866:	d103      	bne.n	8001870 <xQueueReceive+0x132>
 8001868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001870:	f7ff f9d2 	bl	8000c18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001874:	1d3a      	adds	r2, r7, #4
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f002 fe41 	bl	8004504 <xTaskCheckForTimeOut>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d123      	bne.n	80018d0 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800188a:	f000 fc97 	bl	80021bc <prvIsQueueEmpty>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d017      	beq.n	80018c4 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001896:	3324      	adds	r3, #36	; 0x24
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f002 fcab 	bl	80041f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80018a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018a4:	f000 fc38 	bl	8002118 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80018a8:	f002 f9b8 	bl	8003c1c <xTaskResumeAll>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d189      	bne.n	80017c6 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <xQueueReceive+0x1b6>)
 80018b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	f3bf 8f4f 	dsb	sy
 80018be:	f3bf 8f6f 	isb	sy
 80018c2:	e780      	b.n	80017c6 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80018c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018c6:	f000 fc27 	bl	8002118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80018ca:	f002 f9a7 	bl	8003c1c <xTaskResumeAll>
 80018ce:	e77a      	b.n	80017c6 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80018d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018d2:	f000 fc21 	bl	8002118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80018d6:	f002 f9a1 	bl	8003c1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80018da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018dc:	f000 fc6e 	bl	80021bc <prvIsQueueEmpty>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f43f af6f 	beq.w	80017c6 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80018e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3730      	adds	r7, #48	; 0x30
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000ed04 	.word	0xe000ed04

080018f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08e      	sub	sp, #56	; 0x38
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8001902:	2300      	movs	r3, #0
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001910:	2b00      	cmp	r3, #0
 8001912:	d109      	bne.n	8001928 <xQueueSemaphoreTake+0x30>
 8001914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001918:	f383 8811 	msr	BASEPRI, r3
 800191c:	f3bf 8f6f 	isb	sy
 8001920:	f3bf 8f4f 	dsb	sy
 8001924:	623b      	str	r3, [r7, #32]
 8001926:	e7fe      	b.n	8001926 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	2b00      	cmp	r3, #0
 800192e:	d009      	beq.n	8001944 <xQueueSemaphoreTake+0x4c>
 8001930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001934:	f383 8811 	msr	BASEPRI, r3
 8001938:	f3bf 8f6f 	isb	sy
 800193c:	f3bf 8f4f 	dsb	sy
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	e7fe      	b.n	8001942 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001944:	f003 f80a 	bl	800495c <xTaskGetSchedulerState>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <xQueueSemaphoreTake+0x5c>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <xQueueSemaphoreTake+0x60>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <xQueueSemaphoreTake+0x62>
 8001958:	2300      	movs	r3, #0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d109      	bne.n	8001972 <xQueueSemaphoreTake+0x7a>
 800195e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001962:	f383 8811 	msr	BASEPRI, r3
 8001966:	f3bf 8f6f 	isb	sy
 800196a:	f3bf 8f4f 	dsb	sy
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	e7fe      	b.n	8001970 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001972:	f7ff f923 	bl	8000bbc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197e:	2b00      	cmp	r3, #0
 8001980:	d024      	beq.n	80019cc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001984:	1e5a      	subs	r2, r3, #1
 8001986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001988:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800198a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d104      	bne.n	800199c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001992:	f003 f99f 	bl	8004cd4 <pvTaskIncrementMutexHeldCount>
 8001996:	4602      	mov	r2, r0
 8001998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00f      	beq.n	80019c4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a6:	3310      	adds	r3, #16
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 fcad 	bl	8004308 <xTaskRemoveFromEventList>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d007      	beq.n	80019c4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80019b4:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <xQueueSemaphoreTake+0x20c>)
 80019b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	f3bf 8f4f 	dsb	sy
 80019c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80019c4:	f7ff f928 	bl	8000c18 <vPortExitCritical>
				return pdPASS;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e096      	b.n	8001afa <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d110      	bne.n	80019f4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80019d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d009      	beq.n	80019ec <xQueueSemaphoreTake+0xf4>
 80019d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019dc:	f383 8811 	msr	BASEPRI, r3
 80019e0:	f3bf 8f6f 	isb	sy
 80019e4:	f3bf 8f4f 	dsb	sy
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	e7fe      	b.n	80019ea <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80019ec:	f7ff f914 	bl	8000c18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80019f0:	2300      	movs	r3, #0
 80019f2:	e082      	b.n	8001afa <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80019f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d106      	bne.n	8001a08 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80019fa:	f107 030c 	add.w	r3, r7, #12
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 fd6a 	bl	80044d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001a04:	2301      	movs	r3, #1
 8001a06:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001a08:	f7ff f906 	bl	8000c18 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001a0c:	f002 f8f8 	bl	8003c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001a10:	f7ff f8d4 	bl	8000bbc <vPortEnterCritical>
 8001a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	d103      	bne.n	8001a2a <xQueueSemaphoreTake+0x132>
 8001a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a30:	b25b      	sxtb	r3, r3
 8001a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a36:	d103      	bne.n	8001a40 <xQueueSemaphoreTake+0x148>
 8001a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a40:	f7ff f8ea 	bl	8000c18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001a44:	463a      	mov	r2, r7
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 fd59 	bl	8004504 <xTaskCheckForTimeOut>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d132      	bne.n	8001abe <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001a58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a5a:	f000 fbaf 	bl	80021bc <prvIsQueueEmpty>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d026      	beq.n	8001ab2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d109      	bne.n	8001a80 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8001a6c:	f7ff f8a6 	bl	8000bbc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 ff8f 	bl	8004998 <xTaskPriorityInherit>
 8001a7a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8001a7c:	f7ff f8cc 	bl	8000c18 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a82:	3324      	adds	r3, #36	; 0x24
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f002 fbb5 	bl	80041f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001a8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a90:	f000 fb42 	bl	8002118 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001a94:	f002 f8c2 	bl	8003c1c <xTaskResumeAll>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f47f af69 	bne.w	8001972 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <xQueueSemaphoreTake+0x20c>)
 8001aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	f3bf 8f4f 	dsb	sy
 8001aac:	f3bf 8f6f 	isb	sy
 8001ab0:	e75f      	b.n	8001972 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8001ab2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ab4:	f000 fb30 	bl	8002118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ab8:	f002 f8b0 	bl	8003c1c <xTaskResumeAll>
 8001abc:	e759      	b.n	8001972 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001abe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ac0:	f000 fb2a 	bl	8002118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ac4:	f002 f8aa 	bl	8003c1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ac8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001aca:	f000 fb77 	bl	80021bc <prvIsQueueEmpty>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f43f af4e 	beq.w	8001972 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8001ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00d      	beq.n	8001af8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8001adc:	f7ff f86e 	bl	8000bbc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001ae0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ae2:	f000 fa71 	bl	8001fc8 <prvGetDisinheritPriorityAfterTimeout>
 8001ae6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8001ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 f84c 	bl	8004b8c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8001af4:	f7ff f890 	bl	8000c18 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001af8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3738      	adds	r7, #56	; 0x38
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	e000ed04 	.word	0xe000ed04

08001b08 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08e      	sub	sp, #56	; 0x38
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <xQueuePeek+0x2e>
 8001b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b26:	f383 8811 	msr	BASEPRI, r3
 8001b2a:	f3bf 8f6f 	isb	sy
 8001b2e:	f3bf 8f4f 	dsb	sy
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
 8001b34:	e7fe      	b.n	8001b34 <xQueuePeek+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d103      	bne.n	8001b44 <xQueuePeek+0x3c>
 8001b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <xQueuePeek+0x40>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <xQueuePeek+0x42>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <xQueuePeek+0x5a>
 8001b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b52:	f383 8811 	msr	BASEPRI, r3
 8001b56:	f3bf 8f6f 	isb	sy
 8001b5a:	f3bf 8f4f 	dsb	sy
 8001b5e:	623b      	str	r3, [r7, #32]
 8001b60:	e7fe      	b.n	8001b60 <xQueuePeek+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b62:	f002 fefb 	bl	800495c <xTaskGetSchedulerState>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <xQueuePeek+0x6a>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <xQueuePeek+0x6e>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <xQueuePeek+0x70>
 8001b76:	2300      	movs	r3, #0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d109      	bne.n	8001b90 <xQueuePeek+0x88>
 8001b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b80:	f383 8811 	msr	BASEPRI, r3
 8001b84:	f3bf 8f6f 	isb	sy
 8001b88:	f3bf 8f4f 	dsb	sy
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	e7fe      	b.n	8001b8e <xQueuePeek+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001b90:	f7ff f814 	bl	8000bbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d021      	beq.n	8001be4 <xQueuePeek+0xdc>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8001ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001baa:	f000 fa8f 	bl	80020cc <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8001bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bb2:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00f      	beq.n	8001bdc <xQueuePeek+0xd4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbe:	3324      	adds	r3, #36	; 0x24
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f002 fba1 	bl	8004308 <xTaskRemoveFromEventList>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <xQueuePeek+0xd4>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 8001bcc:	4b3c      	ldr	r3, [pc, #240]	; (8001cc0 <xQueuePeek+0x1b8>)
 8001bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	f3bf 8f4f 	dsb	sy
 8001bd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001bdc:	f7ff f81c 	bl	8000c18 <vPortExitCritical>
				return pdPASS;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e069      	b.n	8001cb8 <xQueuePeek+0x1b0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d103      	bne.n	8001bf2 <xQueuePeek+0xea>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001bea:	f7ff f815 	bl	8000c18 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e062      	b.n	8001cb8 <xQueuePeek+0x1b0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d106      	bne.n	8001c06 <xQueuePeek+0xfe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 fc6b 	bl	80044d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001c02:	2301      	movs	r3, #1
 8001c04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001c06:	f7ff f807 	bl	8000c18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001c0a:	f001 fff9 	bl	8003c00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001c0e:	f7fe ffd5 	bl	8000bbc <vPortEnterCritical>
 8001c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c18:	b25b      	sxtb	r3, r3
 8001c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1e:	d103      	bne.n	8001c28 <xQueuePeek+0x120>
 8001c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c2e:	b25b      	sxtb	r3, r3
 8001c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c34:	d103      	bne.n	8001c3e <xQueuePeek+0x136>
 8001c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c3e:	f7fe ffeb 	bl	8000c18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c42:	1d3a      	adds	r2, r7, #4
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f002 fc5a 	bl	8004504 <xTaskCheckForTimeOut>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d123      	bne.n	8001c9e <xQueuePeek+0x196>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c58:	f000 fab0 	bl	80021bc <prvIsQueueEmpty>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d017      	beq.n	8001c92 <xQueuePeek+0x18a>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c64:	3324      	adds	r3, #36	; 0x24
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	4611      	mov	r1, r2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f002 fac4 	bl	80041f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c72:	f000 fa51 	bl	8002118 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001c76:	f001 ffd1 	bl	8003c1c <xTaskResumeAll>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d187      	bne.n	8001b90 <xQueuePeek+0x88>
				{
					portYIELD_WITHIN_API();
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <xQueuePeek+0x1b8>)
 8001c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	f3bf 8f4f 	dsb	sy
 8001c8c:	f3bf 8f6f 	isb	sy
 8001c90:	e77e      	b.n	8001b90 <xQueuePeek+0x88>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8001c92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c94:	f000 fa40 	bl	8002118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001c98:	f001 ffc0 	bl	8003c1c <xTaskResumeAll>
 8001c9c:	e778      	b.n	8001b90 <xQueuePeek+0x88>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8001c9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ca0:	f000 fa3a 	bl	8002118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001ca4:	f001 ffba 	bl	8003c1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001caa:	f000 fa87 	bl	80021bc <prvIsQueueEmpty>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f43f af6d 	beq.w	8001b90 <xQueuePeek+0x88>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001cb6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3738      	adds	r7, #56	; 0x38
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	e000ed04 	.word	0xe000ed04

08001cc4 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08e      	sub	sp, #56	; 0x38
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <xQueueReceiveFromISR+0x2a>
 8001cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cde:	f383 8811 	msr	BASEPRI, r3
 8001ce2:	f3bf 8f6f 	isb	sy
 8001ce6:	f3bf 8f4f 	dsb	sy
 8001cea:	623b      	str	r3, [r7, #32]
 8001cec:	e7fe      	b.n	8001cec <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d103      	bne.n	8001cfc <xQueueReceiveFromISR+0x38>
 8001cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <xQueueReceiveFromISR+0x3c>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <xQueueReceiveFromISR+0x3e>
 8001d00:	2300      	movs	r3, #0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <xQueueReceiveFromISR+0x56>
 8001d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d0a:	f383 8811 	msr	BASEPRI, r3
 8001d0e:	f3bf 8f6f 	isb	sy
 8001d12:	f3bf 8f4f 	dsb	sy
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	e7fe      	b.n	8001d18 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001d1a:	f7ff f821 	bl	8000d60 <vPortValidateInterruptPriority>
	__asm volatile
 8001d1e:	f3ef 8211 	mrs	r2, BASEPRI
 8001d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d26:	f383 8811 	msr	BASEPRI, r3
 8001d2a:	f3bf 8f6f 	isb	sy
 8001d2e:	f3bf 8f4f 	dsb	sy
 8001d32:	61ba      	str	r2, [r7, #24]
 8001d34:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8001d36:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001d38:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d02f      	beq.n	8001da6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8001d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d54:	f000 f9ba 	bl	80020cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5a:	1e5a      	subs	r2, r3, #1
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8001d60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d112      	bne.n	8001d90 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d016      	beq.n	8001da0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d74:	3310      	adds	r3, #16
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 fac6 	bl	8004308 <xTaskRemoveFromEventList>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00e      	beq.n	8001da0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00b      	beq.n	8001da0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e007      	b.n	8001da0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8001d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d94:	3301      	adds	r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	b25a      	sxtb	r2, r3
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8001da0:	2301      	movs	r3, #1
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
 8001da4:	e001      	b.n	8001daa <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
 8001daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dac:	613b      	str	r3, [r7, #16]
	__asm volatile
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3738      	adds	r7, #56	; 0x38
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b08c      	sub	sp, #48	; 0x30
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28

	configASSERT( pxQueue );
 8001dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <xQueuePeekFromISR+0x28>
	__asm volatile
 8001dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd6:	f383 8811 	msr	BASEPRI, r3
 8001dda:	f3bf 8f6f 	isb	sy
 8001dde:	f3bf 8f4f 	dsb	sy
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	e7fe      	b.n	8001de4 <xQueuePeekFromISR+0x26>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <xQueuePeekFromISR+0x36>
 8001dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <xQueuePeekFromISR+0x3a>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <xQueuePeekFromISR+0x3c>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d109      	bne.n	8001e12 <xQueuePeekFromISR+0x54>
 8001dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e02:	f383 8811 	msr	BASEPRI, r3
 8001e06:	f3bf 8f6f 	isb	sy
 8001e0a:	f3bf 8f4f 	dsb	sy
 8001e0e:	61bb      	str	r3, [r7, #24]
 8001e10:	e7fe      	b.n	8001e10 <xQueuePeekFromISR+0x52>
	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 8001e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <xQueuePeekFromISR+0x70>
 8001e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e1e:	f383 8811 	msr	BASEPRI, r3
 8001e22:	f3bf 8f6f 	isb	sy
 8001e26:	f3bf 8f4f 	dsb	sy
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	e7fe      	b.n	8001e2c <xQueuePeekFromISR+0x6e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001e2e:	f7fe ff97 	bl	8000d60 <vPortValidateInterruptPriority>
	__asm volatile
 8001e32:	f3ef 8211 	mrs	r2, BASEPRI
 8001e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e3a:	f383 8811 	msr	BASEPRI, r3
 8001e3e:	f3bf 8f6f 	isb	sy
 8001e42:	f3bf 8f4f 	dsb	sy
 8001e46:	613a      	str	r2, [r7, #16]
 8001e48:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8001e4a:	693b      	ldr	r3, [r7, #16]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00c      	beq.n	8001e70 <xQueuePeekFromISR+0xb2>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8001e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	623b      	str	r3, [r7, #32]
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001e5c:	6839      	ldr	r1, [r7, #0]
 8001e5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e60:	f000 f934 	bl	80020cc <prvCopyDataFromQueue>
			pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	6a3a      	ldr	r2, [r7, #32]
 8001e68:	60da      	str	r2, [r3, #12]

			xReturn = pdPASS;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e6e:	e001      	b.n	8001e74 <xQueuePeekFromISR+0xb6>
		}
		else
		{
			xReturn = pdFAIL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3730      	adds	r7, #48	; 0x30
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8001e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e9a:	f383 8811 	msr	BASEPRI, r3
 8001e9e:	f3bf 8f6f 	isb	sy
 8001ea2:	f3bf 8f4f 	dsb	sy
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	e7fe      	b.n	8001ea8 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8001eaa:	f7fe fe87 	bl	8000bbc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8001eb4:	f7fe feb0 	bl	8000c18 <vPortExitCritical>

	return uxReturn;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d109      	bne.n	8001ee8 <uxQueueSpacesAvailable+0x26>
 8001ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed8:	f383 8811 	msr	BASEPRI, r3
 8001edc:	f3bf 8f6f 	isb	sy
 8001ee0:	f3bf 8f4f 	dsb	sy
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	e7fe      	b.n	8001ee6 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 8001ee8:	f7fe fe68 	bl	8000bbc <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8001ef8:	f7fe fe8e 	bl	8000c18 <vPortExitCritical>

	return uxReturn;
 8001efc:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8001f06:	b480      	push	{r7}
 8001f08:	b087      	sub	sp, #28
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d109      	bne.n	8001f2c <uxQueueMessagesWaitingFromISR+0x26>
 8001f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1c:	f383 8811 	msr	BASEPRI, r3
 8001f20:	f3bf 8f6f 	isb	sy
 8001f24:	f3bf 8f4f 	dsb	sy
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	e7fe      	b.n	8001f2a <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f30:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8001f32:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8001f34:	4618      	mov	r0, r3
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <vQueueDelete+0x26>
 8001f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f56:	f383 8811 	msr	BASEPRI, r3
 8001f5a:	f3bf 8f6f 	isb	sy
 8001f5e:	f3bf 8f4f 	dsb	sy
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	e7fe      	b.n	8001f64 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f9ec 	bl	8002344 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f7fe ffc7 	bl	8000f00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	649a      	str	r2, [r3, #72]	; 0x48
	}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
	}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d006      	beq.n	8001fe6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f1c3 0305 	rsb	r3, r3, #5
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	e001      	b.n	8001fea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8001fea:	68fb      	ldr	r3, [r7, #12]
	}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10d      	bne.n	8002032 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d14d      	bne.n	80020ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4618      	mov	r0, r3
 8002024:	f002 fd2e 	bl	8004a84 <xTaskPriorityDisinherit>
 8002028:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	e043      	b.n	80020ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d119      	bne.n	800206c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6858      	ldr	r0, [r3, #4]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	461a      	mov	r2, r3
 8002042:	68b9      	ldr	r1, [r7, #8]
 8002044:	f013 fc34 	bl	80158b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	441a      	add	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	429a      	cmp	r2, r3
 8002060:	d32b      	bcc.n	80020ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	e026      	b.n	80020ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	68d8      	ldr	r0, [r3, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	461a      	mov	r2, r3
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	f013 fc1a 	bl	80158b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	425b      	negs	r3, r3
 8002086:	441a      	add	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d207      	bcs.n	80020a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	425b      	negs	r3, r3
 80020a2:	441a      	add	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d105      	bne.n	80020ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1c5a      	adds	r2, r3, #1
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80020c2:	697b      	ldr	r3, [r7, #20]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d018      	beq.n	8002110 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	441a      	add	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d303      	bcc.n	8002100 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68d9      	ldr	r1, [r3, #12]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	461a      	mov	r2, r3
 800210a:	6838      	ldr	r0, [r7, #0]
 800210c:	f013 fbd0 	bl	80158b0 <memcpy>
	}
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002120:	f7fe fd4c 	bl	8000bbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800212a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800212c:	e011      	b.n	8002152 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	2b00      	cmp	r3, #0
 8002134:	d012      	beq.n	800215c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3324      	adds	r3, #36	; 0x24
 800213a:	4618      	mov	r0, r3
 800213c:	f002 f8e4 	bl	8004308 <xTaskRemoveFromEventList>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002146:	f002 fa3d 	bl	80045c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	3b01      	subs	r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002156:	2b00      	cmp	r3, #0
 8002158:	dce9      	bgt.n	800212e <prvUnlockQueue+0x16>
 800215a:	e000      	b.n	800215e <prvUnlockQueue+0x46>
					break;
 800215c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	22ff      	movs	r2, #255	; 0xff
 8002162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002166:	f7fe fd57 	bl	8000c18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800216a:	f7fe fd27 	bl	8000bbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002174:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002176:	e011      	b.n	800219c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d012      	beq.n	80021a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3310      	adds	r3, #16
 8002184:	4618      	mov	r0, r3
 8002186:	f002 f8bf 	bl	8004308 <xTaskRemoveFromEventList>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002190:	f002 fa18 	bl	80045c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002194:	7bbb      	ldrb	r3, [r7, #14]
 8002196:	3b01      	subs	r3, #1
 8002198:	b2db      	uxtb	r3, r3
 800219a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800219c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	dce9      	bgt.n	8002178 <prvUnlockQueue+0x60>
 80021a4:	e000      	b.n	80021a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80021a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	22ff      	movs	r2, #255	; 0xff
 80021ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80021b0:	f7fe fd32 	bl	8000c18 <vPortExitCritical>
}
 80021b4:	bf00      	nop
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80021c4:	f7fe fcfa 	bl	8000bbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80021d0:	2301      	movs	r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	e001      	b.n	80021da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80021da:	f7fe fd1d 	bl	8000c18 <vPortExitCritical>

	return xReturn;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	613b      	str	r3, [r7, #16]

	configASSERT( pxQueue );
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <xQueueIsQueueEmptyFromISR+0x26>
 80021fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fe:	f383 8811 	msr	BASEPRI, r3
 8002202:	f3bf 8f6f 	isb	sy
 8002206:	f3bf 8f4f 	dsb	sy
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	e7fe      	b.n	800220c <xQueueIsQueueEmptyFromISR+0x24>
	if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002212:	2b00      	cmp	r3, #0
 8002214:	d102      	bne.n	800221c <xQueueIsQueueEmptyFromISR+0x34>
	{
		xReturn = pdTRUE;
 8002216:	2301      	movs	r3, #1
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e001      	b.n	8002220 <xQueueIsQueueEmptyFromISR+0x38>
	}
	else
	{
		xReturn = pdFALSE;
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002220:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8002222:	4618      	mov	r0, r3
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002236:	f7fe fcc1 	bl	8000bbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002242:	429a      	cmp	r2, r3
 8002244:	d102      	bne.n	800224c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002246:	2301      	movs	r3, #1
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	e001      	b.n	8002250 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002250:	f7fe fce2 	bl	8000c18 <vPortExitCritical>

	return xReturn;
 8002254:	68fb      	ldr	r3, [r7, #12]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800225e:	b480      	push	{r7}
 8002260:	b087      	sub	sp, #28
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Queue_t * const pxQueue = xQueue;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	613b      	str	r3, [r7, #16]

	configASSERT( pxQueue );
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d109      	bne.n	8002284 <xQueueIsQueueFullFromISR+0x26>
 8002270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002274:	f383 8811 	msr	BASEPRI, r3
 8002278:	f3bf 8f6f 	isb	sy
 800227c:	f3bf 8f4f 	dsb	sy
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	e7fe      	b.n	8002282 <xQueueIsQueueFullFromISR+0x24>
	if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228c:	429a      	cmp	r2, r3
 800228e:	d102      	bne.n	8002296 <xQueueIsQueueFullFromISR+0x38>
	{
		xReturn = pdTRUE;
 8002290:	2301      	movs	r3, #1
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	e001      	b.n	800229a <xQueueIsQueueFullFromISR+0x3c>
	}
	else
	{
		xReturn = pdFALSE;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800229a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800229c:	4618      	mov	r0, r3
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	e014      	b.n	80022e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80022b8:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <vQueueAddToRegistry+0x4c>)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10b      	bne.n	80022dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80022c4:	490b      	ldr	r1, [pc, #44]	; (80022f4 <vQueueAddToRegistry+0x4c>)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80022ce:	4a09      	ldr	r2, [pc, #36]	; (80022f4 <vQueueAddToRegistry+0x4c>)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80022da:	e005      	b.n	80022e8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3301      	adds	r3, #1
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2b07      	cmp	r3, #7
 80022e6:	d9e7      	bls.n	80022b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	20012db4 	.word	0x20012db4

080022f8 <pcQueueGetName>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;
	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]

		/* Note there is nothing here to protect against another task adding or
		removing entries from the registry while it is being searched. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	e010      	b.n	800232c <pcQueueGetName+0x34>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800230a:	4a0d      	ldr	r2, [pc, #52]	; (8002340 <pcQueueGetName+0x48>)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	429a      	cmp	r2, r3
 8002318:	d105      	bne.n	8002326 <pcQueueGetName+0x2e>
			{
				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 800231a:	4a09      	ldr	r2, [pc, #36]	; (8002340 <pcQueueGetName+0x48>)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002322:	60bb      	str	r3, [r7, #8]
				break;
 8002324:	e005      	b.n	8002332 <pcQueueGetName+0x3a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	3301      	adds	r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b07      	cmp	r3, #7
 8002330:	d9eb      	bls.n	800230a <pcQueueGetName+0x12>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return pcReturn;
 8002332:	68bb      	ldr	r3, [r7, #8]
	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	20012db4 	.word	0x20012db4

08002344 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	e016      	b.n	8002380 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8002352:	4a10      	ldr	r2, [pc, #64]	; (8002394 <vQueueUnregisterQueue+0x50>)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	d10b      	bne.n	800237a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8002362:	4a0c      	ldr	r2, [pc, #48]	; (8002394 <vQueueUnregisterQueue+0x50>)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2100      	movs	r1, #0
 8002368:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800236c:	4a09      	ldr	r2, [pc, #36]	; (8002394 <vQueueUnregisterQueue+0x50>)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	2200      	movs	r2, #0
 8002376:	605a      	str	r2, [r3, #4]
				break;
 8002378:	e005      	b.n	8002386 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	3301      	adds	r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b07      	cmp	r3, #7
 8002384:	d9e5      	bls.n	8002352 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20012db4 	.word	0x20012db4

08002398 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80023a8:	f7fe fc08 	bl	8000bbc <vPortEnterCritical>
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023b2:	b25b      	sxtb	r3, r3
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b8:	d103      	bne.n	80023c2 <vQueueWaitForMessageRestricted+0x2a>
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023c8:	b25b      	sxtb	r3, r3
 80023ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ce:	d103      	bne.n	80023d8 <vQueueWaitForMessageRestricted+0x40>
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023d8:	f7fe fc1e 	bl	8000c18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	3324      	adds	r3, #36	; 0x24
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f001 ff61 	bl	80042b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80023f2:	6978      	ldr	r0, [r7, #20]
 80023f4:	f7ff fe90 	bl	8002118 <prvUnlockQueue>
	}
 80023f8:	bf00      	nop
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08c      	sub	sp, #48	; 0x30
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d10f      	bne.n	8002432 <xStreamBufferGenericCreate+0x32>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8002412:	2301      	movs	r3, #1
 8002414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b04      	cmp	r3, #4
 800241c:	d819      	bhi.n	8002452 <xStreamBufferGenericCreate+0x52>
 800241e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002422:	f383 8811 	msr	BASEPRI, r3
 8002426:	f3bf 8f6f 	isb	sy
 800242a:	f3bf 8f4f 	dsb	sy
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	e7fe      	b.n	8002430 <xStreamBufferGenericCreate+0x30>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <xStreamBufferGenericCreate+0x52>
 800243e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	f3bf 8f6f 	isb	sy
 800244a:	f3bf 8f4f 	dsb	sy
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	e7fe      	b.n	8002450 <xStreamBufferGenericCreate+0x50>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	429a      	cmp	r2, r3
 8002458:	d909      	bls.n	800246e <xStreamBufferGenericCreate+0x6e>
 800245a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245e:	f383 8811 	msr	BASEPRI, r3
 8002462:	f3bf 8f6f 	isb	sy
 8002466:	f3bf 8f4f 	dsb	sy
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	e7fe      	b.n	800246c <xStreamBufferGenericCreate+0x6c>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <xStreamBufferGenericCreate+0x78>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8002474:	2301      	movs	r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3301      	adds	r3, #1
 800247c:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3324      	adds	r3, #36	; 0x24
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fcae 	bl	8000de4 <pvPortMalloc>
 8002488:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <xStreamBufferGenericCreate+0xa6>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8002496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	6a38      	ldr	r0, [r7, #32]
 80024a2:	f000 fd92 	bl	8002fca <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 80024a6:	6a3b      	ldr	r3, [r7, #32]
	}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3728      	adds	r7, #40	; 0x28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <vStreamBufferDelete>:

#endif /* ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
/*-----------------------------------------------------------*/

void vStreamBufferDelete( StreamBufferHandle_t xStreamBuffer )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
StreamBuffer_t * pxStreamBuffer = xStreamBuffer;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxStreamBuffer );
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <vStreamBufferDelete+0x26>
 80024c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c6:	f383 8811 	msr	BASEPRI, r3
 80024ca:	f3bf 8f6f 	isb	sy
 80024ce:	f3bf 8f4f 	dsb	sy
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	e7fe      	b.n	80024d4 <vStreamBufferDelete+0x24>

	traceSTREAM_BUFFER_DELETE( xStreamBuffer );

	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) pdFALSE )
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	7f1b      	ldrb	r3, [r3, #28]
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d103      	bne.n	80024ea <vStreamBufferDelete+0x3a>
	{
		#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
		{
			/* Both the structure and the buffer were allocated using a single call
			to pvPortMalloc(), hence only one call to vPortFree() is required. */
			vPortFree( ( void * ) pxStreamBuffer ); /*lint !e9087 Standard free() semantics require void *, plus pxStreamBuffer was allocated by pvPortMalloc(). */
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f7fe fd0c 	bl	8000f00 <vPortFree>
	{
		/* The structure and buffer were not allocated dynamically and cannot be
		freed - just scrub the structure so future use will assert. */
		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
	}
}
 80024e8:	e004      	b.n	80024f4 <vStreamBufferDelete+0x44>
		( void ) memset( pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) );
 80024ea:	2224      	movs	r2, #36	; 0x24
 80024ec:	2100      	movs	r1, #0
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f013 f9e9 	bl	80158c6 <memset>
}
 80024f4:	bf00      	nop
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <xStreamBufferReset>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReset( StreamBufferHandle_t xStreamBuffer )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af02      	add	r7, sp, #8
 8002502:	6078      	str	r0, [r7, #4]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	613b      	str	r3, [r7, #16]
BaseType_t xReturn = pdFAIL;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]

#if( configUSE_TRACE_FACILITY == 1 )
	UBaseType_t uxStreamBufferNumber;
#endif

	configASSERT( pxStreamBuffer );
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <xStreamBufferReset+0x2a>
 8002512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002516:	f383 8811 	msr	BASEPRI, r3
 800251a:	f3bf 8f6f 	isb	sy
 800251e:	f3bf 8f4f 	dsb	sy
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	e7fe      	b.n	8002524 <xStreamBufferReset+0x28>

	#if( configUSE_TRACE_FACILITY == 1 )
	{
		/* Store the stream buffer number so it can be restored after the
		reset. */
		uxStreamBufferNumber = pxStreamBuffer->uxStreamBufferNumber;
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Can only reset a message buffer if there are no tasks blocked on it. */
	taskENTER_CRITICAL();
 800252c:	f7fe fb46 	bl	8000bbc <vPortEnterCritical>
	{
		if( pxStreamBuffer->xTaskWaitingToReceive == NULL )
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d115      	bne.n	8002564 <xStreamBufferReset+0x68>
		{
			if( pxStreamBuffer->xTaskWaitingToSend == NULL )
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d111      	bne.n	8002564 <xStreamBufferReset+0x68>
			{
				prvInitialiseNewStreamBuffer( pxStreamBuffer,
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	6999      	ldr	r1, [r3, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	68d8      	ldr	r0, [r3, #12]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	7f1b      	ldrb	r3, [r3, #28]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	4603      	mov	r3, r0
 8002554:	6938      	ldr	r0, [r7, #16]
 8002556:	f000 fd38 	bl	8002fca <prvInitialiseNewStreamBuffer>
											  pxStreamBuffer->pucBuffer,
											  pxStreamBuffer->xLength,
											  pxStreamBuffer->xTriggerLevelBytes,
											  pxStreamBuffer->ucFlags );
				xReturn = pdPASS;
 800255a:	2301      	movs	r3, #1
 800255c:	617b      	str	r3, [r7, #20]

				#if( configUSE_TRACE_FACILITY == 1 )
				{
					pxStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	621a      	str	r2, [r3, #32]

				traceSTREAM_BUFFER_RESET( xStreamBuffer );
			}
		}
	}
	taskEXIT_CRITICAL();
 8002564:	f7fe fb58 	bl	8000c18 <vPortExitCritical>

	return xReturn;
 8002568:	697b      	ldr	r3, [r7, #20]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <xStreamBufferSetTriggerLevel>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSetTriggerLevel( StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel )
{
 8002572:	b480      	push	{r7}
 8002574:	b087      	sub	sp, #28
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	613b      	str	r3, [r7, #16]
BaseType_t xReturn;

	configASSERT( pxStreamBuffer );
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <xStreamBufferSetTriggerLevel+0x28>
 8002586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258a:	f383 8811 	msr	BASEPRI, r3
 800258e:	f3bf 8f6f 	isb	sy
 8002592:	f3bf 8f4f 	dsb	sy
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	e7fe      	b.n	8002598 <xStreamBufferSetTriggerLevel+0x26>

	/* It is not valid for the trigger level to be 0. */
	if( xTriggerLevel == ( size_t ) 0 )
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <xStreamBufferSetTriggerLevel+0x32>
	{
		xTriggerLevel = ( size_t ) 1;
 80025a0:	2301      	movs	r3, #1
 80025a2:	603b      	str	r3, [r7, #0]
	}

	/* The trigger level is the number of bytes that must be in the stream
	buffer before a task that is waiting for data is unblocked. */
	if( xTriggerLevel <= pxStreamBuffer->xLength )
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d305      	bcc.n	80025ba <xStreamBufferSetTriggerLevel+0x48>
	{
		pxStreamBuffer->xTriggerLevelBytes = xTriggerLevel;
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	60da      	str	r2, [r3, #12]
		xReturn = pdPASS;
 80025b4:	2301      	movs	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	e001      	b.n	80025be <xStreamBufferSetTriggerLevel+0x4c>
	}
	else
	{
		xReturn = pdFALSE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80025be:	697b      	ldr	r3, [r7, #20]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	371c      	adds	r7, #28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <xStreamBufferSpacesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <xStreamBufferSpacesAvailable+0x26>
 80025de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e2:	f383 8811 	msr	BASEPRI, r3
 80025e6:	f3bf 8f6f 	isb	sy
 80025ea:	f3bf 8f4f 	dsb	sy
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	e7fe      	b.n	80025f0 <xStreamBufferSpacesAvailable+0x24>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	3b01      	subs	r3, #1
 800260c:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	429a      	cmp	r2, r3
 8002616:	d804      	bhi.n	8002622 <xStreamBufferSpacesAvailable+0x56>
	{
		xSpace -= pxStreamBuffer->xLength;
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8002622:	697b      	ldr	r3, [r7, #20]
}
 8002624:	4618      	mov	r0, r3
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <xStreamBufferBytesAvailable>:
/*-----------------------------------------------------------*/

size_t xStreamBufferBytesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	617b      	str	r3, [r7, #20]
size_t xReturn;

	configASSERT( pxStreamBuffer );
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d109      	bne.n	8002656 <xStreamBufferBytesAvailable+0x26>
 8002642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002646:	f383 8811 	msr	BASEPRI, r3
 800264a:	f3bf 8f6f 	isb	sy
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e7fe      	b.n	8002654 <xStreamBufferBytesAvailable+0x24>

	xReturn = prvBytesInBuffer( pxStreamBuffer );
 8002656:	6978      	ldr	r0, [r7, #20]
 8002658:	f000 fc97 	bl	8002f8a <prvBytesInBuffer>
 800265c:	6138      	str	r0, [r7, #16]
	return xReturn;
 800265e:	693b      	ldr	r3, [r7, #16]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b090      	sub	sp, #64	; 0x40
 800266c:	af02      	add	r7, sp, #8
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <xStreamBufferSend+0x34>
 8002688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
 800269a:	e7fe      	b.n	800269a <xStreamBufferSend+0x32>
	configASSERT( pxStreamBuffer );
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <xStreamBufferSend+0x4e>
 80026a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a6:	f383 8811 	msr	BASEPRI, r3
 80026aa:	f3bf 8f6f 	isb	sy
 80026ae:	f3bf 8f4f 	dsb	sy
 80026b2:	623b      	str	r3, [r7, #32]
 80026b4:	e7fe      	b.n	80026b4 <xStreamBufferSend+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80026b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b8:	7f1b      	ldrb	r3, [r3, #28]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d010      	beq.n	80026e4 <xStreamBufferSend+0x7c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80026c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c4:	3304      	adds	r3, #4
 80026c6:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 80026c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d809      	bhi.n	80026e4 <xStreamBufferSend+0x7c>
 80026d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	e7fe      	b.n	80026e2 <xStreamBufferSend+0x7a>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d03d      	beq.n	8002766 <xStreamBufferSend+0xfe>
	{
		vTaskSetTimeOutState( &xTimeOut );
 80026ea:	f107 0310 	add.w	r3, r7, #16
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 fecc 	bl	800448c <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 80026f4:	f7fe fa62 	bl	8000bbc <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80026f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026fa:	f7ff ff67 	bl	80025cc <xStreamBufferSpacesAvailable>
 80026fe:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8002700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	429a      	cmp	r2, r3
 8002706:	d216      	bcs.n	8002736 <xStreamBufferSend+0xce>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8002708:	2000      	movs	r0, #0
 800270a:	f002 fdb1 	bl	8005270 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <xStreamBufferSend+0xc2>
 8002716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271a:	f383 8811 	msr	BASEPRI, r3
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	f3bf 8f4f 	dsb	sy
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	e7fe      	b.n	8002728 <xStreamBufferSend+0xc0>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 800272a:	f002 f907 	bl	800493c <xTaskGetCurrentTaskHandle>
 800272e:	4602      	mov	r2, r0
 8002730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002732:	615a      	str	r2, [r3, #20]
 8002734:	e002      	b.n	800273c <xStreamBufferSend+0xd4>
				}
				else
				{
					taskEXIT_CRITICAL();
 8002736:	f7fe fa6f 	bl	8000c18 <vPortExitCritical>
					break;
 800273a:	e014      	b.n	8002766 <xStreamBufferSend+0xfe>
				}
			}
			taskEXIT_CRITICAL();
 800273c:	f7fe fa6c 	bl	8000c18 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2200      	movs	r2, #0
 8002744:	2100      	movs	r1, #0
 8002746:	2000      	movs	r0, #0
 8002748:	f002 fb20 	bl	8004d8c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274e:	2200      	movs	r2, #0
 8002750:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8002752:	463a      	mov	r2, r7
 8002754:	f107 0310 	add.w	r3, r7, #16
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f001 fed2 	bl	8004504 <xTaskCheckForTimeOut>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0c6      	beq.n	80026f4 <xStreamBufferSend+0x8c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8002766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002768:	2b00      	cmp	r3, #0
 800276a:	d103      	bne.n	8002774 <xStreamBufferSend+0x10c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800276c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800276e:	f7ff ff2d 	bl	80025cc <xStreamBufferSpacesAvailable>
 8002772:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8002774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002780:	f000 f891 	bl	80028a6 <prvWriteMessageToBuffer>
 8002784:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	2b00      	cmp	r3, #0
 800278a:	d019      	beq.n	80027c0 <xStreamBufferSend+0x158>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800278c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800278e:	f000 fbfc 	bl	8002f8a <prvBytesInBuffer>
 8002792:	4602      	mov	r2, r0
 8002794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	429a      	cmp	r2, r3
 800279a:	d311      	bcc.n	80027c0 <xStreamBufferSend+0x158>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 800279c:	f001 fa30 	bl	8003c00 <vTaskSuspendAll>
 80027a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d009      	beq.n	80027bc <xStreamBufferSend+0x154>
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	6918      	ldr	r0, [r3, #16]
 80027ac:	2300      	movs	r3, #0
 80027ae:	2200      	movs	r2, #0
 80027b0:	2100      	movs	r1, #0
 80027b2:	f002 fb45 	bl	8004e40 <xTaskGenericNotify>
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
 80027bc:	f001 fa2e 	bl	8003c1c <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 80027c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3738      	adds	r7, #56	; 0x38
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b090      	sub	sp, #64	; 0x40
 80027ce:	af02      	add	r7, sp, #8
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <xStreamBufferSendFromISR+0x30>
 80027e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	623b      	str	r3, [r7, #32]
 80027f8:	e7fe      	b.n	80027f8 <xStreamBufferSendFromISR+0x2e>
	configASSERT( pxStreamBuffer );
 80027fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <xStreamBufferSendFromISR+0x4a>
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	e7fe      	b.n	8002812 <xStreamBufferSendFromISR+0x48>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002816:	7f1b      	ldrb	r3, [r3, #28]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <xStreamBufferSendFromISR+0x5c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002822:	3304      	adds	r3, #4
 8002824:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8002826:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002828:	f7ff fed0 	bl	80025cc <xStreamBufferSpacesAvailable>
 800282c:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800282e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800283a:	f000 f834 	bl	80028a6 <prvWriteMessageToBuffer>
 800283e:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	2b00      	cmp	r3, #0
 8002844:	d02a      	beq.n	800289c <xStreamBufferSendFromISR+0xd2>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8002846:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002848:	f000 fb9f 	bl	8002f8a <prvBytesInBuffer>
 800284c:	4602      	mov	r2, r0
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	429a      	cmp	r2, r3
 8002854:	d322      	bcc.n	800289c <xStreamBufferSendFromISR+0xd2>
	__asm volatile
 8002856:	f3ef 8211 	mrs	r2, BASEPRI
 800285a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	61ba      	str	r2, [r7, #24]
 800286c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800286e:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <xStreamBufferSendFromISR+0xc8>
 800287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287c:	6918      	ldr	r0, [r3, #16]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2300      	movs	r3, #0
 8002884:	2200      	movs	r2, #0
 8002886:	2100      	movs	r1, #0
 8002888:	f002 fb8c 	bl	8004fa4 <xTaskGenericNotifyFromISR>
 800288c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f383 8811 	msr	BASEPRI, r3
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3738      	adds	r7, #56	; 0x38
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d102      	bne.n	80028c0 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e01d      	b.n	80028fc <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	7f1b      	ldrb	r3, [r3, #28]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d108      	bne.n	80028de <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 80028cc:	2301      	movs	r3, #1
 80028ce:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	4293      	cmp	r3, r2
 80028d6:	bf28      	it	cs
 80028d8:	4613      	movcs	r3, r2
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	e00e      	b.n	80028fc <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d308      	bcc.n	80028f8 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80028e6:	2301      	movs	r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	2204      	movs	r2, #4
 80028ee:	4619      	mov	r1, r3
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 fa64 	bl	8002dbe <prvWriteBytesToBuffer>
 80028f6:	e001      	b.n	80028fc <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	461a      	mov	r2, r3
 8002906:	68b9      	ldr	r1, [r7, #8]
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 fa58 	bl	8002dbe <prvWriteBytesToBuffer>
 800290e:	6138      	str	r0, [r7, #16]
 8002910:	e001      	b.n	8002916 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8002916:	693b      	ldr	r3, [r7, #16]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08e      	sub	sp, #56	; 0x38
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8002932:	2300      	movs	r3, #0
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <xStreamBufferReceive+0x30>
	__asm volatile
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	e7fe      	b.n	800294e <xStreamBufferReceive+0x2e>
	configASSERT( pxStreamBuffer );
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <xStreamBufferReceive+0x4a>
 8002956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
 8002966:	61bb      	str	r3, [r7, #24]
 8002968:	e7fe      	b.n	8002968 <xStreamBufferReceive+0x48>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	7f1b      	ldrb	r3, [r3, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <xStreamBufferReceive+0x5c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002976:	2304      	movs	r3, #4
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
 800297a:	e001      	b.n	8002980 <xStreamBufferReceive+0x60>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d033      	beq.n	80029ee <xStreamBufferReceive+0xce>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8002986:	f7fe f919 	bl	8000bbc <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800298a:	6a38      	ldr	r0, [r7, #32]
 800298c:	f000 fafd 	bl	8002f8a <prvBytesInBuffer>
 8002990:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8002992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	429a      	cmp	r2, r3
 8002998:	d815      	bhi.n	80029c6 <xStreamBufferReceive+0xa6>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800299a:	2000      	movs	r0, #0
 800299c:	f002 fc68 	bl	8005270 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d009      	beq.n	80029bc <xStreamBufferReceive+0x9c>
 80029a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ac:	f383 8811 	msr	BASEPRI, r3
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	e7fe      	b.n	80029ba <xStreamBufferReceive+0x9a>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80029bc:	f001 ffbe 	bl	800493c <xTaskGetCurrentTaskHandle>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80029c6:	f7fe f927 	bl	8000c18 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 80029ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d811      	bhi.n	80029f6 <xStreamBufferReceive+0xd6>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2200      	movs	r2, #0
 80029d6:	2100      	movs	r1, #0
 80029d8:	2000      	movs	r0, #0
 80029da:	f002 f9d7 	bl	8004d8c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80029e4:	6a38      	ldr	r0, [r7, #32]
 80029e6:	f000 fad0 	bl	8002f8a <prvBytesInBuffer>
 80029ea:	62b8      	str	r0, [r7, #40]	; 0x28
 80029ec:	e003      	b.n	80029f6 <xStreamBufferReceive+0xd6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80029ee:	6a38      	ldr	r0, [r7, #32]
 80029f0:	f000 facb 	bl	8002f8a <prvBytesInBuffer>
 80029f4:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80029f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d91d      	bls.n	8002a3a <xStreamBufferReceive+0x11a>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	6a38      	ldr	r0, [r7, #32]
 8002a0a:	f000 f8ce 	bl	8002baa <prvReadMessageFromBuffer>
 8002a0e:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d011      	beq.n	8002a3a <xStreamBufferReceive+0x11a>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8002a16:	f001 f8f3 	bl	8003c00 <vTaskSuspendAll>
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <xStreamBufferReceive+0x116>
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	6958      	ldr	r0, [r3, #20]
 8002a26:	2300      	movs	r3, #0
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	f002 fa08 	bl	8004e40 <xTaskGenericNotify>
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	2200      	movs	r2, #0
 8002a34:	615a      	str	r2, [r3, #20]
 8002a36:	f001 f8f1 	bl	8003c1c <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3730      	adds	r7, #48	; 0x30
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <xStreamBufferNextMessageLengthBytes>:
/*-----------------------------------------------------------*/

size_t xStreamBufferNextMessageLengthBytes( StreamBufferHandle_t xStreamBuffer )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b08a      	sub	sp, #40	; 0x28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	623b      	str	r3, [r7, #32]
size_t xReturn, xBytesAvailable, xOriginalTail;
configMESSAGE_BUFFER_LENGTH_TYPE xTempReturn;

	configASSERT( pxStreamBuffer );
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d109      	bne.n	8002a6a <xStreamBufferNextMessageLengthBytes+0x26>
 8002a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	e7fe      	b.n	8002a68 <xStreamBufferNextMessageLengthBytes+0x24>

	/* Ensure the stream buffer is being used as a message buffer. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	7f1b      	ldrb	r3, [r3, #28]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d026      	beq.n	8002ac4 <xStreamBufferNextMessageLengthBytes+0x80>
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002a76:	6a38      	ldr	r0, [r7, #32]
 8002a78:	f000 fa87 	bl	8002f8a <prvBytesInBuffer>
 8002a7c:	61f8      	str	r0, [r7, #28]
		if( xBytesAvailable > sbBYTES_TO_STORE_MESSAGE_LENGTH )
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d90f      	bls.n	8002aa4 <xStreamBufferNextMessageLengthBytes+0x60>
			required to hold the length of the next message, so another message
			is available.  Return its length without removing the length bytes
			from the buffer.  A copy of the tail is stored so the buffer can be
			returned to its prior state as the message is not actually being
			removed from the buffer. */
			xOriginalTail = pxStreamBuffer->xTail;
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	61bb      	str	r3, [r7, #24]
			( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempReturn, sbBYTES_TO_STORE_MESSAGE_LENGTH, xBytesAvailable );
 8002a8a:	f107 010c 	add.w	r1, r7, #12
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	2204      	movs	r2, #4
 8002a92:	6a38      	ldr	r0, [r7, #32]
 8002a94:	f000 fa02 	bl	8002e9c <prvReadBytesFromBuffer>
			xReturn = ( size_t ) xTempReturn;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxStreamBuffer->xTail = xOriginalTail;
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	e011      	b.n	8002ac8 <xStreamBufferNextMessageLengthBytes+0x84>
		{
			/* The minimum amount of bytes in a message buffer is
			( sbBYTES_TO_STORE_MESSAGE_LENGTH + 1 ), so if xBytesAvailable is
			less than sbBYTES_TO_STORE_MESSAGE_LENGTH the only other valid
			value is 0. */
			configASSERT( xBytesAvailable == 0 );
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <xStreamBufferNextMessageLengthBytes+0x7a>
 8002aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aae:	f383 8811 	msr	BASEPRI, r3
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	e7fe      	b.n	8002abc <xStreamBufferNextMessageLengthBytes+0x78>
			xReturn = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac2:	e001      	b.n	8002ac8 <xStreamBufferNextMessageLengthBytes+0x84>
		}
	}
	else
	{
		xReturn = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	return xReturn;
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3728      	adds	r7, #40	; 0x28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <xStreamBufferReceiveFromISR>:

size_t xStreamBufferReceiveFromISR( StreamBufferHandle_t xStreamBuffer,
									void *pvRxData,
									size_t xBufferLengthBytes,
									BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b090      	sub	sp, #64	; 0x40
 8002ad6:	af02      	add	r7, sp, #8
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvRxData );
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <xStreamBufferReceiveFromISR+0x30>
 8002aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af2:	f383 8811 	msr	BASEPRI, r3
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	623b      	str	r3, [r7, #32]
 8002b00:	e7fe      	b.n	8002b00 <xStreamBufferReceiveFromISR+0x2e>
	configASSERT( pxStreamBuffer );
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d109      	bne.n	8002b1c <xStreamBufferReceiveFromISR+0x4a>
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	e7fe      	b.n	8002b1a <xStreamBufferReceiveFromISR+0x48>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	7f1b      	ldrb	r3, [r3, #28]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <xStreamBufferReceiveFromISR+0x5c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002b28:	2304      	movs	r3, #4
 8002b2a:	633b      	str	r3, [r7, #48]	; 0x30
 8002b2c:	e001      	b.n	8002b32 <xStreamBufferReceiveFromISR+0x60>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	633b      	str	r3, [r7, #48]	; 0x30
	}

	xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8002b32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b34:	f000 fa29 	bl	8002f8a <prvBytesInBuffer>
 8002b38:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8002b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d92e      	bls.n	8002ba0 <xStreamBufferReceiveFromISR+0xce>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b4e:	f000 f82c 	bl	8002baa <prvReadMessageFromBuffer>
 8002b52:	6378      	str	r0, [r7, #52]	; 0x34

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8002b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d022      	beq.n	8002ba0 <xStreamBufferReceiveFromISR+0xce>
	__asm volatile
 8002b5a:	f3ef 8211 	mrs	r2, BASEPRI
 8002b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b62:	f383 8811 	msr	BASEPRI, r3
 8002b66:	f3bf 8f6f 	isb	sy
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	61ba      	str	r2, [r7, #24]
 8002b70:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002b72:	69bb      	ldr	r3, [r7, #24]
		{
			sbRECEIVE_COMPLETED_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
 8002b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00b      	beq.n	8002b96 <xStreamBufferReceiveFromISR+0xc4>
 8002b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b80:	6958      	ldr	r0, [r3, #20]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	2300      	movs	r3, #0
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	f002 fa0a 	bl	8004fa4 <xTaskGenericNotifyFromISR>
 8002b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b92:	2200      	movs	r2, #0
 8002b94:	615a      	str	r2, [r3, #20]
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f383 8811 	msr	BASEPRI, r3
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_RECEIVE_FROM_ISR( xStreamBuffer, xReceivedLength );

	return xReceivedLength;
 8002ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3738      	adds	r7, #56	; 0x38
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b088      	sub	sp, #32
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d019      	beq.n	8002bf2 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8002bc4:	f107 0110 	add.w	r1, r7, #16
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f965 	bl	8002e9c <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8002bde:	69fa      	ldr	r2, [r7, #28]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d907      	bls.n	8002bf6 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	e001      	b.n	8002bf6 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 f94d 	bl	8002e9c <prvReadBytesFromBuffer>
 8002c02:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8002c04:	697b      	ldr	r3, [r7, #20]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3720      	adds	r7, #32
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b087      	sub	sp, #28
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	613b      	str	r3, [r7, #16]
BaseType_t xReturn;
size_t xTail;

	configASSERT( pxStreamBuffer );
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <xStreamBufferIsEmpty+0x26>
	__asm volatile
 8002c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c24:	f383 8811 	msr	BASEPRI, r3
 8002c28:	f3bf 8f6f 	isb	sy
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	e7fe      	b.n	8002c32 <xStreamBufferIsEmpty+0x24>

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60fb      	str	r3, [r7, #12]
	if( pxStreamBuffer->xHead == xTail )
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d102      	bne.n	8002c4a <xStreamBufferIsEmpty+0x3c>
	{
		xReturn = pdTRUE;
 8002c44:	2301      	movs	r3, #1
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	e001      	b.n	8002c4e <xStreamBufferIsEmpty+0x40>
	}
	else
	{
		xReturn = pdFALSE;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002c4e:	697b      	ldr	r3, [r7, #20]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <xStreamBufferIsFull>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsFull( StreamBufferHandle_t xStreamBuffer )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
size_t xBytesToStoreMessageLength;
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	60fb      	str	r3, [r7, #12]

	configASSERT( pxStreamBuffer );
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <xStreamBufferIsFull+0x26>
 8002c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c72:	f383 8811 	msr	BASEPRI, r3
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	e7fe      	b.n	8002c80 <xStreamBufferIsFull+0x24>

	/* This generic version of the receive function is used by both message
	buffers, which store discrete messages, and stream buffers, which store a
	continuous stream of bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	7f1b      	ldrb	r3, [r3, #28]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <xStreamBufferIsFull+0x38>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8002c8e:	2304      	movs	r3, #4
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	e001      	b.n	8002c98 <xStreamBufferIsFull+0x3c>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	613b      	str	r3, [r7, #16]
	}

	/* True if the available space equals zero. */
	if( xStreamBufferSpacesAvailable( xStreamBuffer ) <= xBytesToStoreMessageLength )
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff fc97 	bl	80025cc <xStreamBufferSpacesAvailable>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d802      	bhi.n	8002cac <xStreamBufferIsFull+0x50>
	{
		xReturn = pdTRUE;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	e001      	b.n	8002cb0 <xStreamBufferIsFull+0x54>
	}
	else
	{
		xReturn = pdFALSE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002cb0:	697b      	ldr	r3, [r7, #20]
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <xStreamBufferSendCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferSendCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b08c      	sub	sp, #48	; 0x30
 8002cbe:	af02      	add	r7, sp, #8
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d109      	bne.n	8002ce2 <xStreamBufferSendCompletedFromISR+0x28>
 8002cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd2:	f383 8811 	msr	BASEPRI, r3
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	61bb      	str	r3, [r7, #24]
 8002ce0:	e7fe      	b.n	8002ce0 <xStreamBufferSendCompletedFromISR+0x26>
	__asm volatile
 8002ce2:	f3ef 8211 	mrs	r2, BASEPRI
 8002ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	617a      	str	r2, [r7, #20]
 8002cf8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002cfa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8002cfc:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToReceive != NULL )
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00e      	beq.n	8002d24 <xStreamBufferSendCompletedFromISR+0x6a>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToReceive,
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	6918      	ldr	r0, [r3, #16]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2200      	movs	r2, #0
 8002d12:	2100      	movs	r1, #0
 8002d14:	f002 f946 	bl	8004fa4 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToReceive = NULL;
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
			xReturn = pdTRUE;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
 8002d22:	e001      	b.n	8002d28 <xStreamBufferSendCompletedFromISR+0x6e>
		}
		else
		{
			xReturn = pdFALSE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3728      	adds	r7, #40	; 0x28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <xStreamBufferReceiveCompletedFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferReceiveCompletedFromISR( StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08c      	sub	sp, #48	; 0x30
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	623b      	str	r3, [r7, #32]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;

	configASSERT( pxStreamBuffer );
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d109      	bne.n	8002d64 <xStreamBufferReceiveCompletedFromISR+0x28>
	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	e7fe      	b.n	8002d62 <xStreamBufferReceiveCompletedFromISR+0x26>
	__asm volatile
 8002d64:	f3ef 8211 	mrs	r2, BASEPRI
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	617a      	str	r2, [r7, #20]
 8002d7a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002d7c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = ( UBaseType_t ) portSET_INTERRUPT_MASK_FROM_ISR();
 8002d7e:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxStreamBuffer )->xTaskWaitingToSend != NULL )
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00e      	beq.n	8002da6 <xStreamBufferReceiveCompletedFromISR+0x6a>
		{
			( void ) xTaskNotifyFromISR( ( pxStreamBuffer )->xTaskWaitingToSend,
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	6958      	ldr	r0, [r3, #20]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	2300      	movs	r3, #0
 8002d92:	2200      	movs	r2, #0
 8002d94:	2100      	movs	r1, #0
 8002d96:	f002 f905 	bl	8004fa4 <xTaskGenericNotifyFromISR>
										 ( uint32_t ) 0,
										 eNoAction,
										 pxHigherPriorityTaskWoken );
			( pxStreamBuffer )->xTaskWaitingToSend = NULL;
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	615a      	str	r2, [r3, #20]
			xReturn = pdTRUE;
 8002da0:	2301      	movs	r3, #1
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
 8002da4:	e001      	b.n	8002daa <xStreamBufferReceiveCompletedFromISR+0x6e>
		}
		else
		{
			xReturn = pdFALSE;
 8002da6:	2300      	movs	r3, #0
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3728      	adds	r7, #40	; 0x28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b08a      	sub	sp, #40	; 0x28
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d109      	bne.n	8002de4 <prvWriteBytesToBuffer+0x26>
	__asm volatile
 8002dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	e7fe      	b.n	8002de2 <prvWriteBytesToBuffer+0x24>

	xNextHead = pxStreamBuffer->xHead;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	1ad2      	subs	r2, r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4293      	cmp	r3, r2
 8002df6:	bf28      	it	cs
 8002df8:	4613      	movcs	r3, r2
 8002dfa:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8002dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	441a      	add	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d909      	bls.n	8002e1e <prvWriteBytesToBuffer+0x60>
 8002e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	61bb      	str	r3, [r7, #24]
 8002e1c:	e7fe      	b.n	8002e1c <prvWriteBytesToBuffer+0x5e>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	699a      	ldr	r2, [r3, #24]
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	4413      	add	r3, r2
 8002e26:	6a3a      	ldr	r2, [r7, #32]
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f012 fd40 	bl	80158b0 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d91b      	bls.n	8002e70 <prvWriteBytesToBuffer+0xb2>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	1ad2      	subs	r2, r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d909      	bls.n	8002e5a <prvWriteBytesToBuffer+0x9c>
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	e7fe      	b.n	8002e58 <prvWriteBytesToBuffer+0x9a>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6998      	ldr	r0, [r3, #24]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	18d1      	adds	r1, r2, r3
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f012 fd20 	bl	80158b0 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8002e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d804      	bhi.n	8002e8c <prvWriteBytesToBuffer+0xce>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e90:	605a      	str	r2, [r3, #4]

	return xCount;
 8002e92:	687b      	ldr	r3, [r7, #4]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3728      	adds	r7, #40	; 0x28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08a      	sub	sp, #40	; 0x28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	bf28      	it	cs
 8002eb2:	4613      	movcs	r3, r2
 8002eb4:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d061      	beq.n	8002f80 <prvReadBytesFromBuffer+0xe4>
	{
		xNextTail = pxStreamBuffer->xTail;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	1ad2      	subs	r2, r2, r3
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	bf28      	it	cs
 8002ed0:	4613      	movcs	r3, r2
 8002ed2:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d909      	bls.n	8002ef0 <prvReadBytesFromBuffer+0x54>
 8002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	e7fe      	b.n	8002eee <prvReadBytesFromBuffer+0x52>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8002ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	441a      	add	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d909      	bls.n	8002f12 <prvReadBytesFromBuffer+0x76>
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	e7fe      	b.n	8002f10 <prvReadBytesFromBuffer+0x74>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	4413      	add	r3, r2
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	68b8      	ldr	r0, [r7, #8]
 8002f20:	f012 fcc6 	bl	80158b0 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8002f24:	6a3a      	ldr	r2, [r7, #32]
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d918      	bls.n	8002f5e <prvReadBytesFromBuffer+0xc2>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8002f2c:	6a3a      	ldr	r2, [r7, #32]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d909      	bls.n	8002f48 <prvReadBytesFromBuffer+0xac>
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	e7fe      	b.n	8002f46 <prvReadBytesFromBuffer+0xaa>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	18d0      	adds	r0, r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6999      	ldr	r1, [r3, #24]
 8002f52:	6a3a      	ldr	r2, [r7, #32]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	f012 fca9 	bl	80158b0 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8002f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	4413      	add	r3, r2
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d804      	bhi.n	8002f7a <prvReadBytesFromBuffer+0xde>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7e:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8002f80:	6a3b      	ldr	r3, [r7, #32]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3728      	adds	r7, #40	; 0x28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d804      	bhi.n	8002fbc <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8002fd8:	2355      	movs	r3, #85	; 0x55
 8002fda:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6979      	ldr	r1, [r7, #20]
 8002fe0:	68b8      	ldr	r0, [r7, #8]
 8002fe2:	f012 fc70 	bl	80158c6 <memset>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d009      	beq.n	8003002 <prvInitialiseNewStreamBuffer+0x38>
 8002fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	e7fe      	b.n	8003000 <prvInitialiseNewStreamBuffer+0x36>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8003002:	2224      	movs	r2, #36	; 0x24
 8003004:	2100      	movs	r1, #0
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f012 fc5d 	bl	80158c6 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003024:	771a      	strb	r2, [r3, #28]
}
 8003026:	bf00      	nop
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <uxStreamBufferGetStreamBufferNumber>:

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxStreamBufferGetStreamBufferNumber( StreamBufferHandle_t xStreamBuffer )
	{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
		return xStreamBuffer->uxStreamBufferNumber;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
	}
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <vStreamBufferSetStreamBufferNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vStreamBufferSetStreamBufferNumber( StreamBufferHandle_t xStreamBuffer, UBaseType_t uxStreamBufferNumber )
	{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
		xStreamBuffer->uxStreamBufferNumber = uxStreamBufferNumber;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	621a      	str	r2, [r3, #32]
	}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <ucStreamBufferGetStreamBufferType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucStreamBufferGetStreamBufferType( StreamBufferHandle_t xStreamBuffer )
	{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
		return ( xStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER );
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7f1b      	ldrb	r3, [r3, #28]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	b2db      	uxtb	r3, r3
	}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08c      	sub	sp, #48	; 0x30
 8003084:	af04      	add	r7, sp, #16
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	4613      	mov	r3, r2
 800308e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003090:	88fb      	ldrh	r3, [r7, #6]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd fea5 	bl	8000de4 <pvPortMalloc>
 800309a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00e      	beq.n	80030c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030a2:	2058      	movs	r0, #88	; 0x58
 80030a4:	f7fd fe9e 	bl	8000de4 <pvPortMalloc>
 80030a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30
 80030b6:	e005      	b.n	80030c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030b8:	6978      	ldr	r0, [r7, #20]
 80030ba:	f7fd ff21 	bl	8000f00 <vPortFree>
 80030be:	e001      	b.n	80030c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d013      	beq.n	80030f2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030ca:	88fa      	ldrh	r2, [r7, #6]
 80030cc:	2300      	movs	r3, #0
 80030ce:	9303      	str	r3, [sp, #12]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	9302      	str	r3, [sp, #8]
 80030d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f80e 	bl	8003102 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030e6:	69f8      	ldr	r0, [r7, #28]
 80030e8:	f000 f899 	bl	800321e <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030ec:	2301      	movs	r3, #1
 80030ee:	61bb      	str	r3, [r7, #24]
 80030f0:	e002      	b.n	80030f8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030f2:	f04f 33ff 	mov.w	r3, #4294967295
 80030f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80030f8:	69bb      	ldr	r3, [r7, #24]
	}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b088      	sub	sp, #32
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	461a      	mov	r2, r3
 800311a:	21a5      	movs	r1, #165	; 0xa5
 800311c:	f012 fbd3 	bl	80158c6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800312a:	3b01      	subs	r3, #1
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	f023 0307 	bic.w	r3, r3, #7
 8003138:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	2b00      	cmp	r3, #0
 8003142:	d009      	beq.n	8003158 <prvInitialiseNewTask+0x56>
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	e7fe      	b.n	8003156 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d01f      	beq.n	800319e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	e012      	b.n	800318a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	4413      	add	r3, r2
 800316a:	7819      	ldrb	r1, [r3, #0]
 800316c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	4413      	add	r3, r2
 8003172:	3334      	adds	r3, #52	; 0x34
 8003174:	460a      	mov	r2, r1
 8003176:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	4413      	add	r3, r2
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d006      	beq.n	8003192 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	3301      	adds	r3, #1
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	2b09      	cmp	r3, #9
 800318e:	d9e9      	bls.n	8003164 <prvInitialiseNewTask+0x62>
 8003190:	e000      	b.n	8003194 <prvInitialiseNewTask+0x92>
			{
				break;
 8003192:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800319c:	e003      	b.n	80031a6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800319e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d901      	bls.n	80031b0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031ac:	2304      	movs	r3, #4
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ba:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80031bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031be:	2200      	movs	r2, #0
 80031c0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	3304      	adds	r3, #4
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fd fb20 	bl	800080c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	3318      	adds	r3, #24
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd fb1b 	bl	800080c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	f1c3 0205 	rsb	r2, r3, #5
 80031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	2200      	movs	r2, #0
 80031f0:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	68f9      	ldr	r1, [r7, #12]
 80031fe:	69b8      	ldr	r0, [r7, #24]
 8003200:	f7fd fb9e 	bl	8000940 <pxPortInitialiseStack>
 8003204:	4602      	mov	r2, r0
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003216:	bf00      	nop
 8003218:	3720      	adds	r7, #32
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003226:	f7fd fcc9 	bl	8000bbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800322a:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <prvAddNewTaskToReadyList+0xc2>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3301      	adds	r3, #1
 8003230:	4a2b      	ldr	r2, [pc, #172]	; (80032e0 <prvAddNewTaskToReadyList+0xc2>)
 8003232:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <prvAddNewTaskToReadyList+0xc6>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800323c:	4a29      	ldr	r2, [pc, #164]	; (80032e4 <prvAddNewTaskToReadyList+0xc6>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003242:	4b27      	ldr	r3, [pc, #156]	; (80032e0 <prvAddNewTaskToReadyList+0xc2>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d110      	bne.n	800326c <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800324a:	f001 fa07 	bl	800465c <prvInitialiseTaskLists>
 800324e:	e00d      	b.n	800326c <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003250:	4b25      	ldr	r3, [pc, #148]	; (80032e8 <prvAddNewTaskToReadyList+0xca>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003258:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <prvAddNewTaskToReadyList+0xc6>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	429a      	cmp	r2, r3
 8003264:	d802      	bhi.n	800326c <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003266:	4a1f      	ldr	r2, [pc, #124]	; (80032e4 <prvAddNewTaskToReadyList+0xc6>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800326c:	4b1f      	ldr	r3, [pc, #124]	; (80032ec <prvAddNewTaskToReadyList+0xce>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3301      	adds	r3, #1
 8003272:	4a1e      	ldr	r2, [pc, #120]	; (80032ec <prvAddNewTaskToReadyList+0xce>)
 8003274:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003276:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <prvAddNewTaskToReadyList+0xce>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	2201      	movs	r2, #1
 8003284:	409a      	lsls	r2, r3
 8003286:	4b1a      	ldr	r3, [pc, #104]	; (80032f0 <prvAddNewTaskToReadyList+0xd2>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <prvAddNewTaskToReadyList+0xd2>)
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4a15      	ldr	r2, [pc, #84]	; (80032f4 <prvAddNewTaskToReadyList+0xd6>)
 800329e:	441a      	add	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f7fd fabd 	bl	8000826 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80032ac:	f7fd fcb4 	bl	8000c18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80032b0:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <prvAddNewTaskToReadyList+0xca>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00e      	beq.n	80032d6 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <prvAddNewTaskToReadyList+0xc6>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d207      	bcs.n	80032d6 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <prvAddNewTaskToReadyList+0xda>)
 80032c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20012d40 	.word	0x20012d40
 80032e4:	20012c68 	.word	0x20012c68
 80032e8:	20012d4c 	.word	0x20012d4c
 80032ec:	20012d5c 	.word	0x20012d5c
 80032f0:	20012d48 	.word	0x20012d48
 80032f4:	20012c6c 	.word	0x20012c6c
 80032f8:	e000ed04 	.word	0xe000ed04

080032fc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003304:	f7fd fc5a 	bl	8000bbc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <vTaskDelete+0x18>
 800330e:	4b38      	ldr	r3, [pc, #224]	; (80033f0 <vTaskDelete+0xf4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	e000      	b.n	8003316 <vTaskDelete+0x1a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3304      	adds	r3, #4
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd fadf 	bl	80008e0 <uxListRemove>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d115      	bne.n	8003354 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332c:	4931      	ldr	r1, [pc, #196]	; (80033f4 <vTaskDelete+0xf8>)
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10a      	bne.n	8003354 <vTaskDelete+0x58>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	2201      	movs	r2, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43da      	mvns	r2, r3
 800334a:	4b2b      	ldr	r3, [pc, #172]	; (80033f8 <vTaskDelete+0xfc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4013      	ands	r3, r2
 8003350:	4a29      	ldr	r2, [pc, #164]	; (80033f8 <vTaskDelete+0xfc>)
 8003352:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	2b00      	cmp	r3, #0
 800335a:	d004      	beq.n	8003366 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	3318      	adds	r3, #24
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd fabd 	bl	80008e0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003366:	4b25      	ldr	r3, [pc, #148]	; (80033fc <vTaskDelete+0x100>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3301      	adds	r3, #1
 800336c:	4a23      	ldr	r2, [pc, #140]	; (80033fc <vTaskDelete+0x100>)
 800336e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003370:	4b1f      	ldr	r3, [pc, #124]	; (80033f0 <vTaskDelete+0xf4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	429a      	cmp	r2, r3
 8003378:	d10b      	bne.n	8003392 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3304      	adds	r3, #4
 800337e:	4619      	mov	r1, r3
 8003380:	481f      	ldr	r0, [pc, #124]	; (8003400 <vTaskDelete+0x104>)
 8003382:	f7fd fa50 	bl	8000826 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003386:	4b1f      	ldr	r3, [pc, #124]	; (8003404 <vTaskDelete+0x108>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	3301      	adds	r3, #1
 800338c:	4a1d      	ldr	r2, [pc, #116]	; (8003404 <vTaskDelete+0x108>)
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	e009      	b.n	80033a6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003392:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <vTaskDelete+0x10c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3b01      	subs	r3, #1
 8003398:	4a1b      	ldr	r2, [pc, #108]	; (8003408 <vTaskDelete+0x10c>)
 800339a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f001 fa9d 	bl	80048dc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80033a2:	f001 faab 	bl	80048fc <prvResetNextTaskUnblockTime>
				traceTASK_DELETE( pxTCB );
			}
		}
		taskEXIT_CRITICAL();
 80033a6:	f7fd fc37 	bl	8000c18 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80033aa:	4b18      	ldr	r3, [pc, #96]	; (800340c <vTaskDelete+0x110>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d01a      	beq.n	80033e8 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 80033b2:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <vTaskDelete+0xf4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d115      	bne.n	80033e8 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80033bc:	4b14      	ldr	r3, [pc, #80]	; (8003410 <vTaskDelete+0x114>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d009      	beq.n	80033d8 <vTaskDelete+0xdc>
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	e7fe      	b.n	80033d6 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 80033d8:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <vTaskDelete+0x118>)
 80033da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	f3bf 8f4f 	dsb	sy
 80033e4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80033e8:	bf00      	nop
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20012c68 	.word	0x20012c68
 80033f4:	20012c6c 	.word	0x20012c6c
 80033f8:	20012d48 	.word	0x20012d48
 80033fc:	20012d5c 	.word	0x20012d5c
 8003400:	20012d14 	.word	0x20012d14
 8003404:	20012d28 	.word	0x20012d28
 8003408:	20012d40 	.word	0x20012d40
 800340c:	20012d4c 	.word	0x20012d4c
 8003410:	20012d68 	.word	0x20012d68
 8003414:	e000ed04 	.word	0xe000ed04

08003418 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	; 0x28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003422:	2300      	movs	r3, #0
 8003424:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d109      	bne.n	8003440 <vTaskDelayUntil+0x28>
 800342c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	e7fe      	b.n	800343e <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <vTaskDelayUntil+0x42>
 8003446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	613b      	str	r3, [r7, #16]
 8003458:	e7fe      	b.n	8003458 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800345a:	4b29      	ldr	r3, [pc, #164]	; (8003500 <vTaskDelayUntil+0xe8>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <vTaskDelayUntil+0x5e>
 8003462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003466:	f383 8811 	msr	BASEPRI, r3
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e7fe      	b.n	8003474 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8003476:	f000 fbc3 	bl	8003c00 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800347a:	4b22      	ldr	r3, [pc, #136]	; (8003504 <vTaskDelayUntil+0xec>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4413      	add	r3, r2
 8003488:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	429a      	cmp	r2, r3
 8003492:	d90b      	bls.n	80034ac <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	429a      	cmp	r2, r3
 800349c:	d911      	bls.n	80034c2 <vTaskDelayUntil+0xaa>
 800349e:	69fa      	ldr	r2, [r7, #28]
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d90d      	bls.n	80034c2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80034a6:	2301      	movs	r3, #1
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
 80034aa:	e00a      	b.n	80034c2 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d803      	bhi.n	80034be <vTaskDelayUntil+0xa6>
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d901      	bls.n	80034c2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80034be:	2301      	movs	r3, #1
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f001 fef0 	bl	80052bc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80034dc:	f000 fb9e 	bl	8003c1c <xTaskResumeAll>
 80034e0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d107      	bne.n	80034f8 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80034e8:	4b07      	ldr	r3, [pc, #28]	; (8003508 <vTaskDelayUntil+0xf0>)
 80034ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034f8:	bf00      	nop
 80034fa:	3728      	adds	r7, #40	; 0x28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20012d68 	.word	0x20012d68
 8003504:	20012d44 	.word	0x20012d44
 8003508:	e000ed04 	.word	0xe000ed04

0800350c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d016      	beq.n	800354c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800351e:	4b13      	ldr	r3, [pc, #76]	; (800356c <vTaskDelay+0x60>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d009      	beq.n	800353a <vTaskDelay+0x2e>
 8003526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	60bb      	str	r3, [r7, #8]
 8003538:	e7fe      	b.n	8003538 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800353a:	f000 fb61 	bl	8003c00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800353e:	2100      	movs	r1, #0
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f001 febb 	bl	80052bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003546:	f000 fb69 	bl	8003c1c <xTaskResumeAll>
 800354a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d107      	bne.n	8003562 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003552:	4b07      	ldr	r3, [pc, #28]	; (8003570 <vTaskDelay+0x64>)
 8003554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	20012d68 	.word	0x20012d68
 8003570:	e000ed04 	.word	0xe000ed04

08003574 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <eTaskGetState+0x26>
 8003586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358a:	f383 8811 	msr	BASEPRI, r3
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	f3bf 8f4f 	dsb	sy
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	e7fe      	b.n	8003598 <eTaskGetState+0x24>

		if( pxTCB == pxCurrentTCB )
 800359a:	4b24      	ldr	r3, [pc, #144]	; (800362c <eTaskGetState+0xb8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d102      	bne.n	80035aa <eTaskGetState+0x36>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80035a4:	2300      	movs	r3, #0
 80035a6:	77fb      	strb	r3, [r7, #31]
 80035a8:	e03a      	b.n	8003620 <eTaskGetState+0xac>
		}
		else
		{
			taskENTER_CRITICAL();
 80035aa:	f7fd fb07 	bl	8000bbc <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80035b4:	4b1e      	ldr	r3, [pc, #120]	; (8003630 <eTaskGetState+0xbc>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80035ba:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <eTaskGetState+0xc0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80035c0:	f7fd fb2a 	bl	8000c18 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d003      	beq.n	80035d4 <eTaskGetState+0x60>
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d102      	bne.n	80035da <eTaskGetState+0x66>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80035d4:	2302      	movs	r3, #2
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	e022      	b.n	8003620 <eTaskGetState+0xac>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	4a16      	ldr	r2, [pc, #88]	; (8003638 <eTaskGetState+0xc4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d112      	bne.n	8003608 <eTaskGetState+0x94>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10b      	bne.n	8003602 <eTaskGetState+0x8e>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d102      	bne.n	80035fc <eTaskGetState+0x88>
							{
								eReturn = eBlocked;
 80035f6:	2302      	movs	r3, #2
 80035f8:	77fb      	strb	r3, [r7, #31]
 80035fa:	e011      	b.n	8003620 <eTaskGetState+0xac>
							}
							else
							{
								eReturn = eSuspended;
 80035fc:	2303      	movs	r3, #3
 80035fe:	77fb      	strb	r3, [r7, #31]
 8003600:	e00e      	b.n	8003620 <eTaskGetState+0xac>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8003602:	2302      	movs	r3, #2
 8003604:	77fb      	strb	r3, [r7, #31]
 8003606:	e00b      	b.n	8003620 <eTaskGetState+0xac>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	4a0c      	ldr	r2, [pc, #48]	; (800363c <eTaskGetState+0xc8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d002      	beq.n	8003616 <eTaskGetState+0xa2>
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d102      	bne.n	800361c <eTaskGetState+0xa8>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8003616:	2304      	movs	r3, #4
 8003618:	77fb      	strb	r3, [r7, #31]
 800361a:	e001      	b.n	8003620 <eTaskGetState+0xac>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800361c:	2301      	movs	r3, #1
 800361e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8003620:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003622:	4618      	mov	r0, r3
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20012c68 	.word	0x20012c68
 8003630:	20012cf8 	.word	0x20012cf8
 8003634:	20012cfc 	.word	0x20012cfc
 8003638:	20012d2c 	.word	0x20012d2c
 800363c:	20012d14 	.word	0x20012d14

08003640 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8003648:	f7fd fab8 	bl	8000bbc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d102      	bne.n	8003658 <uxTaskPriorityGet+0x18>
 8003652:	4b07      	ldr	r3, [pc, #28]	; (8003670 <uxTaskPriorityGet+0x30>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	e000      	b.n	800365a <uxTaskPriorityGet+0x1a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8003662:	f7fd fad9 	bl	8000c18 <vPortExitCritical>

		return uxReturn;
 8003666:	68bb      	ldr	r3, [r7, #8]
	}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20012c68 	.word	0x20012c68

08003674 <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800367c:	f7fd fb70 	bl	8000d60 <vPortValidateInterruptPriority>
	__asm volatile
 8003680:	f3ef 8211 	mrs	r2, BASEPRI
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	613a      	str	r2, [r7, #16]
 8003696:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
 8003698:	693b      	ldr	r3, [r7, #16]

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 800369a:	61fb      	str	r3, [r7, #28]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d102      	bne.n	80036a8 <uxTaskPriorityGetFromISR+0x34>
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <uxTaskPriorityGetFromISR+0x54>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	e000      	b.n	80036aa <uxTaskPriorityGetFromISR+0x36>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	61bb      	str	r3, [r7, #24]
			uxReturn = pxTCB->uxPriority;
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f383 8811 	msr	BASEPRI, r3
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 80036bc:	697b      	ldr	r3, [r7, #20]
	}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20012c68 	.word	0x20012c68

080036cc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d909      	bls.n	80036f4 <vTaskPrioritySet+0x28>
	__asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	e7fe      	b.n	80036f2 <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d901      	bls.n	80036fe <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036fa:	2304      	movs	r3, #4
 80036fc:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80036fe:	f7fd fa5d 	bl	8000bbc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d102      	bne.n	800370e <vTaskPrioritySet+0x42>
 8003708:	4b40      	ldr	r3, [pc, #256]	; (800380c <vTaskPrioritySet+0x140>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	e000      	b.n	8003710 <vTaskPrioritySet+0x44>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003716:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d06f      	beq.n	8003800 <vTaskPrioritySet+0x134>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	429a      	cmp	r2, r3
 8003726:	d90d      	bls.n	8003744 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 8003728:	4b38      	ldr	r3, [pc, #224]	; (800380c <vTaskPrioritySet+0x140>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	429a      	cmp	r2, r3
 8003730:	d00f      	beq.n	8003752 <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003732:	4b36      	ldr	r3, [pc, #216]	; (800380c <vTaskPrioritySet+0x140>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d809      	bhi.n	8003752 <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 800373e:	2301      	movs	r3, #1
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	e006      	b.n	8003752 <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8003744:	4b31      	ldr	r3, [pc, #196]	; (800380c <vTaskPrioritySet+0x140>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	429a      	cmp	r2, r3
 800374c:	d101      	bne.n	8003752 <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800374e:	2301      	movs	r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	429a      	cmp	r2, r3
 8003762:	d102      	bne.n	800376a <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	649a      	str	r2, [r3, #72]	; 0x48
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	db04      	blt.n	8003782 <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f1c3 0205 	rsb	r2, r3, #5
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	6959      	ldr	r1, [r3, #20]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4a1f      	ldr	r2, [pc, #124]	; (8003810 <vTaskPrioritySet+0x144>)
 8003792:	4413      	add	r3, r2
 8003794:	4299      	cmp	r1, r3
 8003796:	d128      	bne.n	80037ea <vTaskPrioritySet+0x11e>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	3304      	adds	r3, #4
 800379c:	4618      	mov	r0, r3
 800379e:	f7fd f89f 	bl	80008e0 <uxListRemove>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d109      	bne.n	80037bc <vTaskPrioritySet+0xf0>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80037a8:	2201      	movs	r2, #1
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43da      	mvns	r2, r3
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <vTaskPrioritySet+0x148>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4013      	ands	r3, r2
 80037b8:	4a16      	ldr	r2, [pc, #88]	; (8003814 <vTaskPrioritySet+0x148>)
 80037ba:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c0:	2201      	movs	r2, #1
 80037c2:	409a      	lsls	r2, r3
 80037c4:	4b13      	ldr	r3, [pc, #76]	; (8003814 <vTaskPrioritySet+0x148>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	4a12      	ldr	r2, [pc, #72]	; (8003814 <vTaskPrioritySet+0x148>)
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4a0d      	ldr	r2, [pc, #52]	; (8003810 <vTaskPrioritySet+0x144>)
 80037dc:	441a      	add	r2, r3
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	3304      	adds	r3, #4
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f7fd f81e 	bl	8000826 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d007      	beq.n	8003800 <vTaskPrioritySet+0x134>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <vTaskPrioritySet+0x14c>)
 80037f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8003800:	f7fd fa0a 	bl	8000c18 <vPortExitCritical>
	}
 8003804:	bf00      	nop
 8003806:	3720      	adds	r7, #32
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20012c68 	.word	0x20012c68
 8003810:	20012c6c 	.word	0x20012c6c
 8003814:	20012d48 	.word	0x20012d48
 8003818:	e000ed04 	.word	0xe000ed04

0800381c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003824:	f7fd f9ca 	bl	8000bbc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d102      	bne.n	8003834 <vTaskSuspend+0x18>
 800382e:	4b3c      	ldr	r3, [pc, #240]	; (8003920 <vTaskSuspend+0x104>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	e000      	b.n	8003836 <vTaskSuspend+0x1a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3304      	adds	r3, #4
 800383c:	4618      	mov	r0, r3
 800383e:	f7fd f84f 	bl	80008e0 <uxListRemove>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d115      	bne.n	8003874 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384c:	4935      	ldr	r1, [pc, #212]	; (8003924 <vTaskSuspend+0x108>)
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10a      	bne.n	8003874 <vTaskSuspend+0x58>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	2201      	movs	r2, #1
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43da      	mvns	r2, r3
 800386a:	4b2f      	ldr	r3, [pc, #188]	; (8003928 <vTaskSuspend+0x10c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4013      	ands	r3, r2
 8003870:	4a2d      	ldr	r2, [pc, #180]	; (8003928 <vTaskSuspend+0x10c>)
 8003872:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	2b00      	cmp	r3, #0
 800387a:	d004      	beq.n	8003886 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3318      	adds	r3, #24
 8003880:	4618      	mov	r0, r3
 8003882:	f7fd f82d 	bl	80008e0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3304      	adds	r3, #4
 800388a:	4619      	mov	r1, r3
 800388c:	4827      	ldr	r0, [pc, #156]	; (800392c <vTaskSuspend+0x110>)
 800388e:	f7fc ffca 	bl	8000826 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d103      	bne.n	80038a6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80038a6:	f7fd f9b7 	bl	8000c18 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80038aa:	4b21      	ldr	r3, [pc, #132]	; (8003930 <vTaskSuspend+0x114>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d005      	beq.n	80038be <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80038b2:	f7fd f983 	bl	8000bbc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80038b6:	f001 f821 	bl	80048fc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80038ba:	f7fd f9ad 	bl	8000c18 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80038be:	4b18      	ldr	r3, [pc, #96]	; (8003920 <vTaskSuspend+0x104>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d126      	bne.n	8003916 <vTaskSuspend+0xfa>
		{
			if( xSchedulerRunning != pdFALSE )
 80038c8:	4b19      	ldr	r3, [pc, #100]	; (8003930 <vTaskSuspend+0x114>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d016      	beq.n	80038fe <vTaskSuspend+0xe2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80038d0:	4b18      	ldr	r3, [pc, #96]	; (8003934 <vTaskSuspend+0x118>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d009      	beq.n	80038ec <vTaskSuspend+0xd0>
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	e7fe      	b.n	80038ea <vTaskSuspend+0xce>
				portYIELD_WITHIN_API();
 80038ec:	4b12      	ldr	r3, [pc, #72]	; (8003938 <vTaskSuspend+0x11c>)
 80038ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038fc:	e00b      	b.n	8003916 <vTaskSuspend+0xfa>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80038fe:	4b0b      	ldr	r3, [pc, #44]	; (800392c <vTaskSuspend+0x110>)
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	4b0e      	ldr	r3, [pc, #56]	; (800393c <vTaskSuspend+0x120>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d103      	bne.n	8003912 <vTaskSuspend+0xf6>
					pxCurrentTCB = NULL;
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <vTaskSuspend+0x104>)
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
	}
 8003910:	e001      	b.n	8003916 <vTaskSuspend+0xfa>
					vTaskSwitchContext();
 8003912:	f000 fc17 	bl	8004144 <vTaskSwitchContext>
	}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20012c68 	.word	0x20012c68
 8003924:	20012c6c 	.word	0x20012c6c
 8003928:	20012d48 	.word	0x20012d48
 800392c:	20012d2c 	.word	0x20012d2c
 8003930:	20012d4c 	.word	0x20012d4c
 8003934:	20012d68 	.word	0x20012d68
 8003938:	e000ed04 	.word	0xe000ed04
 800393c:	20012d40 	.word	0x20012d40

08003940 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <prvTaskIsTaskSuspended+0x2a>
 8003956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	e7fe      	b.n	8003968 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <prvTaskIsTaskSuspended+0x58>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d10a      	bne.n	800398a <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	4a08      	ldr	r2, [pc, #32]	; (800399c <prvTaskIsTaskSuspended+0x5c>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d005      	beq.n	800398a <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 8003986:	2301      	movs	r3, #1
 8003988:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800398a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800398c:	4618      	mov	r0, r3
 800398e:	371c      	adds	r7, #28
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	20012d2c 	.word	0x20012d2c
 800399c:	20012d00 	.word	0x20012d00

080039a0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d109      	bne.n	80039c6 <vTaskResume+0x26>
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	60bb      	str	r3, [r7, #8]
 80039c4:	e7fe      	b.n	80039c4 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80039c6:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <vTaskResume+0xa8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d037      	beq.n	8003a40 <vTaskResume+0xa0>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d034      	beq.n	8003a40 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 80039d6:	f7fd f8f1 	bl	8000bbc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f7ff ffb0 	bl	8003940 <prvTaskIsTaskSuspended>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d02a      	beq.n	8003a3c <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	3304      	adds	r3, #4
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fc ff78 	bl	80008e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	2201      	movs	r2, #1
 80039f6:	409a      	lsls	r2, r3
 80039f8:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <vTaskResume+0xac>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <vTaskResume+0xac>)
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4a10      	ldr	r2, [pc, #64]	; (8003a50 <vTaskResume+0xb0>)
 8003a10:	441a      	add	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3304      	adds	r3, #4
 8003a16:	4619      	mov	r1, r3
 8003a18:	4610      	mov	r0, r2
 8003a1a:	f7fc ff04 	bl	8000826 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <vTaskResume+0xa8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d307      	bcc.n	8003a3c <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <vTaskResume+0xb4>)
 8003a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003a3c:	f7fd f8ec 	bl	8000c18 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a40:	bf00      	nop
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20012c68 	.word	0x20012c68
 8003a4c:	20012d48 	.word	0x20012d48
 8003a50:	20012c6c 	.word	0x20012c6c
 8003a54:	e000ed04 	.word	0xe000ed04

08003a58 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	; 0x28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8003a60:	2300      	movs	r3, #0
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d109      	bne.n	8003a82 <xTaskResumeFromISR+0x2a>
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	61bb      	str	r3, [r7, #24]
 8003a80:	e7fe      	b.n	8003a80 <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a82:	f7fd f96d 	bl	8000d60 <vPortValidateInterruptPriority>
	__asm volatile
 8003a86:	f3ef 8211 	mrs	r2, BASEPRI
 8003a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	617a      	str	r2, [r7, #20]
 8003a9c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003a9e:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003aa0:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003aa2:	6a38      	ldr	r0, [r7, #32]
 8003aa4:	f7ff ff4c 	bl	8003940 <prvTaskIsTaskSuspended>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d02f      	beq.n	8003b0e <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aae:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <xTaskResumeFromISR+0xcc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d125      	bne.n	8003b02 <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aba:	4b1b      	ldr	r3, [pc, #108]	; (8003b28 <xTaskResumeFromISR+0xd0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d301      	bcc.n	8003ac8 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	3304      	adds	r3, #4
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fc ff07 	bl	80008e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	409a      	lsls	r2, r3
 8003ada:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <xTaskResumeFromISR+0xd4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <xTaskResumeFromISR+0xd4>)
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4a0f      	ldr	r2, [pc, #60]	; (8003b30 <xTaskResumeFromISR+0xd8>)
 8003af2:	441a      	add	r2, r3
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4619      	mov	r1, r3
 8003afa:	4610      	mov	r0, r2
 8003afc:	f7fc fe93 	bl	8000826 <vListInsertEnd>
 8003b00:	e005      	b.n	8003b0e <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	3318      	adds	r3, #24
 8003b06:	4619      	mov	r1, r3
 8003b08:	480a      	ldr	r0, [pc, #40]	; (8003b34 <xTaskResumeFromISR+0xdc>)
 8003b0a:	f7fc fe8c 	bl	8000826 <vListInsertEnd>
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3728      	adds	r7, #40	; 0x28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20012d68 	.word	0x20012d68
 8003b28:	20012c68 	.word	0x20012c68
 8003b2c:	20012d48 	.word	0x20012d48
 8003b30:	20012c6c 	.word	0x20012c6c
 8003b34:	20012d00 	.word	0x20012d00

08003b38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003b3e:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <vTaskStartScheduler+0x80>)
 8003b40:	9301      	str	r3, [sp, #4]
 8003b42:	2300      	movs	r3, #0
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	2300      	movs	r3, #0
 8003b48:	2282      	movs	r2, #130	; 0x82
 8003b4a:	491c      	ldr	r1, [pc, #112]	; (8003bbc <vTaskStartScheduler+0x84>)
 8003b4c:	481c      	ldr	r0, [pc, #112]	; (8003bc0 <vTaskStartScheduler+0x88>)
 8003b4e:	f7ff fa97 	bl	8003080 <xTaskCreate>
 8003b52:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d102      	bne.n	8003b60 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003b5a:	f001 fc15 	bl	8005388 <xTimerCreateTimerTask>
 8003b5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d115      	bne.n	8003b92 <vTaskStartScheduler+0x5a>
	__asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b78:	4b12      	ldr	r3, [pc, #72]	; (8003bc4 <vTaskStartScheduler+0x8c>)
 8003b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b80:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <vTaskStartScheduler+0x90>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b86:	4b11      	ldr	r3, [pc, #68]	; (8003bcc <vTaskStartScheduler+0x94>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b8c:	f7fc ff5d 	bl	8000a4a <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b90:	e00d      	b.n	8003bae <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d109      	bne.n	8003bae <vTaskStartScheduler+0x76>
 8003b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	607b      	str	r3, [r7, #4]
 8003bac:	e7fe      	b.n	8003bac <vTaskStartScheduler+0x74>
}
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20012d64 	.word	0x20012d64
 8003bbc:	0801590c 	.word	0x0801590c
 8003bc0:	0800462f 	.word	0x0800462f
 8003bc4:	20012d60 	.word	0x20012d60
 8003bc8:	20012d4c 	.word	0x20012d4c
 8003bcc:	20012d44 	.word	0x20012d44

08003bd0 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	607b      	str	r3, [r7, #4]
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 8003be8:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <vTaskEndScheduler+0x2c>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 8003bee:	f7fc ffcb 	bl	8000b88 <vPortEndScheduler>
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20012d4c 	.word	0x20012d4c

08003c00 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c04:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <vTaskSuspendAll+0x18>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	4a03      	ldr	r2, [pc, #12]	; (8003c18 <vTaskSuspendAll+0x18>)
 8003c0c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003c0e:	bf00      	nop
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	20012d68 	.word	0x20012d68

08003c1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]
TickType_t xTicksToNextUnblockTime;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c2a:	4b57      	ldr	r3, [pc, #348]	; (8003d88 <xTaskResumeAll+0x16c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <xTaskResumeAll+0x2a>
 8003c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	e7fe      	b.n	8003c44 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c46:	f7fc ffb9 	bl	8000bbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c4a:	4b4f      	ldr	r3, [pc, #316]	; (8003d88 <xTaskResumeAll+0x16c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	4a4d      	ldr	r2, [pc, #308]	; (8003d88 <xTaskResumeAll+0x16c>)
 8003c52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c54:	4b4c      	ldr	r3, [pc, #304]	; (8003d88 <xTaskResumeAll+0x16c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f040 808d 	bne.w	8003d78 <xTaskResumeAll+0x15c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c5e:	4b4b      	ldr	r3, [pc, #300]	; (8003d8c <xTaskResumeAll+0x170>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8088 	beq.w	8003d78 <xTaskResumeAll+0x15c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c68:	e02e      	b.n	8003cc8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c6a:	4b49      	ldr	r3, [pc, #292]	; (8003d90 <xTaskResumeAll+0x174>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	617b      	str	r3, [r7, #20]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	3318      	adds	r3, #24
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fc fe32 	bl	80008e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fc fe2d 	bl	80008e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <xTaskResumeAll+0x178>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	4a3f      	ldr	r2, [pc, #252]	; (8003d94 <xTaskResumeAll+0x178>)
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4a3c      	ldr	r2, [pc, #240]	; (8003d98 <xTaskResumeAll+0x17c>)
 8003ca6:	441a      	add	r2, r3
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	3304      	adds	r3, #4
 8003cac:	4619      	mov	r1, r3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	f7fc fdb9 	bl	8000826 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb8:	4b38      	ldr	r3, [pc, #224]	; (8003d9c <xTaskResumeAll+0x180>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d302      	bcc.n	8003cc8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003cc2:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <xTaskResumeAll+0x184>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cc8:	4b31      	ldr	r3, [pc, #196]	; (8003d90 <xTaskResumeAll+0x174>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1cc      	bne.n	8003c6a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d03e      	beq.n	8003d54 <xTaskResumeAll+0x138>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cd6:	f000 fe11 	bl	80048fc <prvResetNextTaskUnblockTime>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				while( xPendedTicks > ( TickType_t ) 0 )
 8003cda:	e03b      	b.n	8003d54 <xTaskResumeAll+0x138>
					the time now and the time at which the tick count overflows
					then xNextTaskUnblockTime will the tick overflow time.
					This means xNextTaskUnblockTime can never be less than
					xTickCount, and the following can therefore not
					underflow. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8003cdc:	4b31      	ldr	r3, [pc, #196]	; (8003da4 <xTaskResumeAll+0x188>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b31      	ldr	r3, [pc, #196]	; (8003da8 <xTaskResumeAll+0x18c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d209      	bcs.n	8003cfc <xTaskResumeAll+0xe0>
 8003ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	e7fe      	b.n	8003cfa <xTaskResumeAll+0xde>
					xTicksToNextUnblockTime = xNextTaskUnblockTime - xTickCount;
 8003cfc:	4b29      	ldr	r3, [pc, #164]	; (8003da4 <xTaskResumeAll+0x188>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4b29      	ldr	r3, [pc, #164]	; (8003da8 <xTaskResumeAll+0x18c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	60fb      	str	r3, [r7, #12]

					/* Don't want to move the tick count more than the number
					of ticks that are pending, so cap if necessary. */
					if( xTicksToNextUnblockTime > xPendedTicks )
 8003d08:	4b28      	ldr	r3, [pc, #160]	; (8003dac <xTaskResumeAll+0x190>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d902      	bls.n	8003d18 <xTaskResumeAll+0xfc>
					{
						xTicksToNextUnblockTime = xPendedTicks;
 8003d12:	4b26      	ldr	r3, [pc, #152]	; (8003dac <xTaskResumeAll+0x190>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]
					}

					if( xTicksToNextUnblockTime == 0 )
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d102      	bne.n	8003d24 <xTaskResumeAll+0x108>
						count is about to overflow and xTicksToNetUnblockTime
						holds the time at which the tick count will overflow
						(rather than the time at which the next task will
						unblock).  Set to 1 otherwise xPendedTicks won't be
						decremented below. */
						xTicksToNextUnblockTime = ( TickType_t ) 1;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	e009      	b.n	8003d38 <xTaskResumeAll+0x11c>
					}
					else if( xTicksToNextUnblockTime > ( TickType_t ) 1 )
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d906      	bls.n	8003d38 <xTaskResumeAll+0x11c>
						/* Move the tick count one short of the next unblock
						time, then call xTaskIncrementTick() to move the tick
						count up to the next unblock time to unblock the task,
						if any.  This will also swap the blocked task and
						overflow blocked task lists if necessary. */
						xTickCount += ( xTicksToNextUnblockTime - ( TickType_t ) 1 );
 8003d2a:	4b1f      	ldr	r3, [pc, #124]	; (8003da8 <xTaskResumeAll+0x18c>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4413      	add	r3, r2
 8003d32:	3b01      	subs	r3, #1
 8003d34:	4a1c      	ldr	r2, [pc, #112]	; (8003da8 <xTaskResumeAll+0x18c>)
 8003d36:	6013      	str	r3, [r2, #0]
					}
					xYieldPending |= xTaskIncrementTick();
 8003d38:	f000 f944 	bl	8003fc4 <xTaskIncrementTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	4b18      	ldr	r3, [pc, #96]	; (8003da0 <xTaskResumeAll+0x184>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	4a16      	ldr	r2, [pc, #88]	; (8003da0 <xTaskResumeAll+0x184>)
 8003d46:	6013      	str	r3, [r2, #0]

					/* Adjust for the number of ticks just added to
					xTickCount and go around the loop again if
					xTicksToCatchUp is still greater than 0. */
					xPendedTicks -= xTicksToNextUnblockTime;
 8003d48:	4b18      	ldr	r3, [pc, #96]	; (8003dac <xTaskResumeAll+0x190>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	4a16      	ldr	r2, [pc, #88]	; (8003dac <xTaskResumeAll+0x190>)
 8003d52:	6013      	str	r3, [r2, #0]
				while( xPendedTicks > ( TickType_t ) 0 )
 8003d54:	4b15      	ldr	r3, [pc, #84]	; (8003dac <xTaskResumeAll+0x190>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1bf      	bne.n	8003cdc <xTaskResumeAll+0xc0>
				}

				if( xYieldPending != pdFALSE )
 8003d5c:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <xTaskResumeAll+0x184>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d009      	beq.n	8003d78 <xTaskResumeAll+0x15c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d64:	2301      	movs	r3, #1
 8003d66:	613b      	str	r3, [r7, #16]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d68:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <xTaskResumeAll+0x194>)
 8003d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d78:	f7fc ff4e 	bl	8000c18 <vPortExitCritical>

	return xAlreadyYielded;
 8003d7c:	693b      	ldr	r3, [r7, #16]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20012d68 	.word	0x20012d68
 8003d8c:	20012d40 	.word	0x20012d40
 8003d90:	20012d00 	.word	0x20012d00
 8003d94:	20012d48 	.word	0x20012d48
 8003d98:	20012c6c 	.word	0x20012c6c
 8003d9c:	20012c68 	.word	0x20012c68
 8003da0:	20012d54 	.word	0x20012d54
 8003da4:	20012d60 	.word	0x20012d60
 8003da8:	20012d44 	.word	0x20012d44
 8003dac:	20012d50 	.word	0x20012d50
 8003db0:	e000ed04 	.word	0xe000ed04

08003db4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003dba:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <xTaskGetTickCount+0x1c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003dc0:	687b      	ldr	r3, [r7, #4]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20012d44 	.word	0x20012d44

08003dd4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dda:	f7fc ffc1 	bl	8000d60 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003dde:	2300      	movs	r3, #0
 8003de0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003de2:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <xTaskGetTickCountFromISR+0x20>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003de8:	683b      	ldr	r3, [r7, #0]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20012d44 	.word	0x20012d44

08003df8 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <uxTaskGetNumberOfTasks+0x14>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	20012d40 	.word	0x20012d40

08003e10 <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d102      	bne.n	8003e24 <pcTaskGetName+0x14>
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <pcTaskGetName+0x44>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	e000      	b.n	8003e26 <pcTaskGetName+0x16>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <pcTaskGetName+0x32>
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	e7fe      	b.n	8003e40 <pcTaskGetName+0x30>
	return &( pxTCB->pcTaskName[ 0 ] );
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3334      	adds	r3, #52	; 0x34
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	20012c68 	.word	0x20012c68

08003e58 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	2305      	movs	r3, #5
 8003e6a:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8003e6c:	f7ff fec8 	bl	8003c00 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8003e70:	4b3a      	ldr	r3, [pc, #232]	; (8003f5c <uxTaskGetSystemState+0x104>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d368      	bcc.n	8003f4c <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4613      	mov	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1898      	adds	r0, r3, r2
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4a31      	ldr	r2, [pc, #196]	; (8003f60 <uxTaskGetSystemState+0x108>)
 8003e9c:	4413      	add	r3, r2
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	f000 fcad 	bl	8004800 <prvListTasksWithinSingleList>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	4413      	add	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e2      	bne.n	8003e7a <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1898      	adds	r0, r3, r2
 8003ec4:	4b27      	ldr	r3, [pc, #156]	; (8003f64 <uxTaskGetSystemState+0x10c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	4619      	mov	r1, r3
 8003ecc:	f000 fc98 	bl	8004800 <prvListTasksWithinSingleList>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4613      	mov	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1898      	adds	r0, r3, r2
 8003ee8:	4b1f      	ldr	r3, [pc, #124]	; (8003f68 <uxTaskGetSystemState+0x110>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2202      	movs	r2, #2
 8003eee:	4619      	mov	r1, r3
 8003ef0:	f000 fc86 	bl	8004800 <prvListTasksWithinSingleList>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	4413      	add	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4613      	mov	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	461a      	mov	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	4917      	ldr	r1, [pc, #92]	; (8003f6c <uxTaskGetSystemState+0x114>)
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fc75 	bl	8004800 <prvListTasksWithinSingleList>
 8003f16:	4602      	mov	r2, r0
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4613      	mov	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	461a      	mov	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	2203      	movs	r2, #3
 8003f30:	490f      	ldr	r1, [pc, #60]	; (8003f70 <uxTaskGetSystemState+0x118>)
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fc64 	bl	8004800 <prvListTasksWithinSingleList>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8003f4c:	f7ff fe66 	bl	8003c1c <xTaskResumeAll>

		return uxTask;
 8003f50:	697b      	ldr	r3, [r7, #20]
	}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20012d40 	.word	0x20012d40
 8003f60:	20012c6c 	.word	0x20012c6c
 8003f64:	20012cf8 	.word	0x20012cf8
 8003f68:	20012cfc 	.word	0x20012cfc
 8003f6c:	20012d14 	.word	0x20012d14
 8003f70:	20012d2c 	.word	0x20012d2c

08003f74 <xTaskCatchUpTicks>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
BaseType_t xYieldRequired = pdFALSE;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]

	/* Must not be called with the scheduler suspended as the implementation
	relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
	configASSERT( uxSchedulerSuspended == 0 );
 8003f80:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <xTaskCatchUpTicks+0x48>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <xTaskCatchUpTicks+0x28>
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	e7fe      	b.n	8003f9a <xTaskCatchUpTicks+0x26>

	/* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occuring when
	the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
	vTaskSuspendAll();
 8003f9c:	f7ff fe30 	bl	8003c00 <vTaskSuspendAll>
	xPendedTicks += xTicksToCatchUp;
 8003fa0:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <xTaskCatchUpTicks+0x4c>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	4a05      	ldr	r2, [pc, #20]	; (8003fc0 <xTaskCatchUpTicks+0x4c>)
 8003faa:	6013      	str	r3, [r2, #0]
	xYieldRequired = xTaskResumeAll();
 8003fac:	f7ff fe36 	bl	8003c1c <xTaskResumeAll>
 8003fb0:	60f8      	str	r0, [r7, #12]

	return xYieldRequired;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20012d68 	.word	0x20012d68
 8003fc0:	20012d50 	.word	0x20012d50

08003fc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fce:	4b52      	ldr	r3, [pc, #328]	; (8004118 <xTaskIncrementTick+0x154>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f040 808d 	bne.w	80040f2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fd8:	4b50      	ldr	r3, [pc, #320]	; (800411c <xTaskIncrementTick+0x158>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fe0:	4a4e      	ldr	r2, [pc, #312]	; (800411c <xTaskIncrementTick+0x158>)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d11f      	bne.n	800402c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fec:	4b4c      	ldr	r3, [pc, #304]	; (8004120 <xTaskIncrementTick+0x15c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d009      	beq.n	800400a <xTaskIncrementTick+0x46>
 8003ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	e7fe      	b.n	8004008 <xTaskIncrementTick+0x44>
 800400a:	4b45      	ldr	r3, [pc, #276]	; (8004120 <xTaskIncrementTick+0x15c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	4b44      	ldr	r3, [pc, #272]	; (8004124 <xTaskIncrementTick+0x160>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a42      	ldr	r2, [pc, #264]	; (8004120 <xTaskIncrementTick+0x15c>)
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	4a42      	ldr	r2, [pc, #264]	; (8004124 <xTaskIncrementTick+0x160>)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	4b42      	ldr	r3, [pc, #264]	; (8004128 <xTaskIncrementTick+0x164>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3301      	adds	r3, #1
 8004024:	4a40      	ldr	r2, [pc, #256]	; (8004128 <xTaskIncrementTick+0x164>)
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	f000 fc68 	bl	80048fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800402c:	4b3f      	ldr	r3, [pc, #252]	; (800412c <xTaskIncrementTick+0x168>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	429a      	cmp	r2, r3
 8004034:	d348      	bcc.n	80040c8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004036:	4b3a      	ldr	r3, [pc, #232]	; (8004120 <xTaskIncrementTick+0x15c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d104      	bne.n	800404a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004040:	4b3a      	ldr	r3, [pc, #232]	; (800412c <xTaskIncrementTick+0x168>)
 8004042:	f04f 32ff 	mov.w	r2, #4294967295
 8004046:	601a      	str	r2, [r3, #0]
					break;
 8004048:	e03e      	b.n	80040c8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800404a:	4b35      	ldr	r3, [pc, #212]	; (8004120 <xTaskIncrementTick+0x15c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	429a      	cmp	r2, r3
 8004060:	d203      	bcs.n	800406a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004062:	4a32      	ldr	r2, [pc, #200]	; (800412c <xTaskIncrementTick+0x168>)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004068:	e02e      	b.n	80040c8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	3304      	adds	r3, #4
 800406e:	4618      	mov	r0, r3
 8004070:	f7fc fc36 	bl	80008e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	2b00      	cmp	r3, #0
 800407a:	d004      	beq.n	8004086 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	3318      	adds	r3, #24
 8004080:	4618      	mov	r0, r3
 8004082:	f7fc fc2d 	bl	80008e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	2201      	movs	r2, #1
 800408c:	409a      	lsls	r2, r3
 800408e:	4b28      	ldr	r3, [pc, #160]	; (8004130 <xTaskIncrementTick+0x16c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4313      	orrs	r3, r2
 8004094:	4a26      	ldr	r2, [pc, #152]	; (8004130 <xTaskIncrementTick+0x16c>)
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4a23      	ldr	r2, [pc, #140]	; (8004134 <xTaskIncrementTick+0x170>)
 80040a6:	441a      	add	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	3304      	adds	r3, #4
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f7fc fbb9 	bl	8000826 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b8:	4b1f      	ldr	r3, [pc, #124]	; (8004138 <xTaskIncrementTick+0x174>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	429a      	cmp	r2, r3
 80040c0:	d3b9      	bcc.n	8004036 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80040c2:	2301      	movs	r3, #1
 80040c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040c6:	e7b6      	b.n	8004036 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040c8:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <xTaskIncrementTick+0x174>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ce:	4919      	ldr	r1, [pc, #100]	; (8004134 <xTaskIncrementTick+0x170>)
 80040d0:	4613      	mov	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d901      	bls.n	80040e4 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 80040e0:	2301      	movs	r3, #1
 80040e2:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80040e4:	4b15      	ldr	r3, [pc, #84]	; (800413c <xTaskIncrementTick+0x178>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d109      	bne.n	8004100 <xTaskIncrementTick+0x13c>
			{
				vApplicationTickHook();
 80040ec:	f010 ff8a 	bl	8015004 <vApplicationTickHook>
 80040f0:	e006      	b.n	8004100 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++xPendedTicks;
 80040f2:	4b12      	ldr	r3, [pc, #72]	; (800413c <xTaskIncrementTick+0x178>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3301      	adds	r3, #1
 80040f8:	4a10      	ldr	r2, [pc, #64]	; (800413c <xTaskIncrementTick+0x178>)
 80040fa:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80040fc:	f010 ff82 	bl	8015004 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004100:	4b0f      	ldr	r3, [pc, #60]	; (8004140 <xTaskIncrementTick+0x17c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8004108:	2301      	movs	r3, #1
 800410a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800410c:	697b      	ldr	r3, [r7, #20]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20012d68 	.word	0x20012d68
 800411c:	20012d44 	.word	0x20012d44
 8004120:	20012cf8 	.word	0x20012cf8
 8004124:	20012cfc 	.word	0x20012cfc
 8004128:	20012d58 	.word	0x20012d58
 800412c:	20012d60 	.word	0x20012d60
 8004130:	20012d48 	.word	0x20012d48
 8004134:	20012c6c 	.word	0x20012c6c
 8004138:	20012c68 	.word	0x20012c68
 800413c:	20012d50 	.word	0x20012d50
 8004140:	20012d54 	.word	0x20012d54

08004144 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800414a:	4b26      	ldr	r3, [pc, #152]	; (80041e4 <vTaskSwitchContext+0xa0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004152:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <vTaskSwitchContext+0xa4>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004158:	e03e      	b.n	80041d8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800415a:	4b23      	ldr	r3, [pc, #140]	; (80041e8 <vTaskSwitchContext+0xa4>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004160:	4b22      	ldr	r3, [pc, #136]	; (80041ec <vTaskSwitchContext+0xa8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	fab3 f383 	clz	r3, r3
 800416c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800416e:	7afb      	ldrb	r3, [r7, #11]
 8004170:	f1c3 031f 	rsb	r3, r3, #31
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	491e      	ldr	r1, [pc, #120]	; (80041f0 <vTaskSwitchContext+0xac>)
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	4613      	mov	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <vTaskSwitchContext+0x5a>
	__asm volatile
 800418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418e:	f383 8811 	msr	BASEPRI, r3
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	f3bf 8f4f 	dsb	sy
 800419a:	607b      	str	r3, [r7, #4]
 800419c:	e7fe      	b.n	800419c <vTaskSwitchContext+0x58>
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4a11      	ldr	r2, [pc, #68]	; (80041f0 <vTaskSwitchContext+0xac>)
 80041aa:	4413      	add	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	605a      	str	r2, [r3, #4]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	3308      	adds	r3, #8
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d104      	bne.n	80041ce <vTaskSwitchContext+0x8a>
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	605a      	str	r2, [r3, #4]
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4a07      	ldr	r2, [pc, #28]	; (80041f4 <vTaskSwitchContext+0xb0>)
 80041d6:	6013      	str	r3, [r2, #0]
}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	20012d68 	.word	0x20012d68
 80041e8:	20012d54 	.word	0x20012d54
 80041ec:	20012d48 	.word	0x20012d48
 80041f0:	20012c6c 	.word	0x20012c6c
 80041f4:	20012c68 	.word	0x20012c68

080041f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d109      	bne.n	800421c <vTaskPlaceOnEventList+0x24>
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	e7fe      	b.n	800421a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800421c:	4b07      	ldr	r3, [pc, #28]	; (800423c <vTaskPlaceOnEventList+0x44>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3318      	adds	r3, #24
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7fc fb22 	bl	800086e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800422a:	2101      	movs	r1, #1
 800422c:	6838      	ldr	r0, [r7, #0]
 800422e:	f001 f845 	bl	80052bc <prvAddCurrentTaskToDelayedList>
}
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20012c68 	.word	0x20012c68

08004240 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d109      	bne.n	8004266 <vTaskPlaceOnUnorderedEventList+0x26>
 8004252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	e7fe      	b.n	8004264 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004266:	4b11      	ldr	r3, [pc, #68]	; (80042ac <vTaskPlaceOnUnorderedEventList+0x6c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <vTaskPlaceOnUnorderedEventList+0x42>
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	e7fe      	b.n	8004280 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004282:	4b0b      	ldr	r3, [pc, #44]	; (80042b0 <vTaskPlaceOnUnorderedEventList+0x70>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800428c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800428e:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <vTaskPlaceOnUnorderedEventList+0x70>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3318      	adds	r3, #24
 8004294:	4619      	mov	r1, r3
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f7fc fac5 	bl	8000826 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800429c:	2101      	movs	r1, #1
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f001 f80c 	bl	80052bc <prvAddCurrentTaskToDelayedList>
}
 80042a4:	bf00      	nop
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20012d68 	.word	0x20012d68
 80042b0:	20012c68 	.word	0x20012c68

080042b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <vTaskPlaceOnEventListRestricted+0x26>
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	e7fe      	b.n	80042d8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042da:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <vTaskPlaceOnEventListRestricted+0x50>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3318      	adds	r3, #24
 80042e0:	4619      	mov	r1, r3
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f7fc fa9f 	bl	8000826 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80042ee:	f04f 33ff 	mov.w	r3, #4294967295
 80042f2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	68b8      	ldr	r0, [r7, #8]
 80042f8:	f000 ffe0 	bl	80052bc <prvAddCurrentTaskToDelayedList>
	}
 80042fc:	bf00      	nop
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20012c68 	.word	0x20012c68

08004308 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <xTaskRemoveFromEventList+0x2a>
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	e7fe      	b.n	8004330 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	3318      	adds	r3, #24
 8004336:	4618      	mov	r0, r3
 8004338:	f7fc fad2 	bl	80008e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800433c:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <xTaskRemoveFromEventList+0xac>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d11c      	bne.n	800437e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	3304      	adds	r3, #4
 8004348:	4618      	mov	r0, r3
 800434a:	f7fc fac9 	bl	80008e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	2201      	movs	r2, #1
 8004354:	409a      	lsls	r2, r3
 8004356:	4b18      	ldr	r3, [pc, #96]	; (80043b8 <xTaskRemoveFromEventList+0xb0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4313      	orrs	r3, r2
 800435c:	4a16      	ldr	r2, [pc, #88]	; (80043b8 <xTaskRemoveFromEventList+0xb0>)
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4a13      	ldr	r2, [pc, #76]	; (80043bc <xTaskRemoveFromEventList+0xb4>)
 800436e:	441a      	add	r2, r3
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	3304      	adds	r3, #4
 8004374:	4619      	mov	r1, r3
 8004376:	4610      	mov	r0, r2
 8004378:	f7fc fa55 	bl	8000826 <vListInsertEnd>
 800437c:	e005      	b.n	800438a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	3318      	adds	r3, #24
 8004382:	4619      	mov	r1, r3
 8004384:	480e      	ldr	r0, [pc, #56]	; (80043c0 <xTaskRemoveFromEventList+0xb8>)
 8004386:	f7fc fa4e 	bl	8000826 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438e:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <xTaskRemoveFromEventList+0xbc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	429a      	cmp	r2, r3
 8004396:	d905      	bls.n	80043a4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004398:	2301      	movs	r3, #1
 800439a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <xTaskRemoveFromEventList+0xc0>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	e001      	b.n	80043a8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80043a8:	697b      	ldr	r3, [r7, #20]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20012d68 	.word	0x20012d68
 80043b8:	20012d48 	.word	0x20012d48
 80043bc:	20012c6c 	.word	0x20012c6c
 80043c0:	20012d00 	.word	0x20012d00
 80043c4:	20012c68 	.word	0x20012c68
 80043c8:	20012d54 	.word	0x20012d54

080043cc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80043d6:	4b28      	ldr	r3, [pc, #160]	; (8004478 <vTaskRemoveFromUnorderedEventList+0xac>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d109      	bne.n	80043f2 <vTaskRemoveFromUnorderedEventList+0x26>
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	e7fe      	b.n	80043f0 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d109      	bne.n	800441c <vTaskRemoveFromUnorderedEventList+0x50>
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	e7fe      	b.n	800441a <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7fc fa5f 	bl	80008e0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	3304      	adds	r3, #4
 8004426:	4618      	mov	r0, r3
 8004428:	f7fc fa5a 	bl	80008e0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	2201      	movs	r2, #1
 8004432:	409a      	lsls	r2, r3
 8004434:	4b11      	ldr	r3, [pc, #68]	; (800447c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4313      	orrs	r3, r2
 800443a:	4a10      	ldr	r2, [pc, #64]	; (800447c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4a0d      	ldr	r2, [pc, #52]	; (8004480 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800444c:	441a      	add	r2, r3
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	3304      	adds	r3, #4
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f7fc f9e6 	bl	8000826 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445e:	4b09      	ldr	r3, [pc, #36]	; (8004484 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	429a      	cmp	r2, r3
 8004466:	d902      	bls.n	800446e <vTaskRemoveFromUnorderedEventList+0xa2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8004468:	4b07      	ldr	r3, [pc, #28]	; (8004488 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800446a:	2201      	movs	r2, #1
 800446c:	601a      	str	r2, [r3, #0]
	}
}
 800446e:	bf00      	nop
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20012d68 	.word	0x20012d68
 800447c:	20012d48 	.word	0x20012d48
 8004480:	20012c6c 	.word	0x20012c6c
 8004484:	20012c68 	.word	0x20012c68
 8004488:	20012d54 	.word	0x20012d54

0800448c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d109      	bne.n	80044ae <vTaskSetTimeOutState+0x22>
 800449a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	e7fe      	b.n	80044ac <vTaskSetTimeOutState+0x20>
	taskENTER_CRITICAL();
 80044ae:	f7fc fb85 	bl	8000bbc <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <vTaskSetTimeOutState+0x44>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80044ba:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <vTaskSetTimeOutState+0x48>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80044c2:	f7fc fba9 	bl	8000c18 <vPortExitCritical>
}
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20012d58 	.word	0x20012d58
 80044d4:	20012d44 	.word	0x20012d44

080044d8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <vTaskInternalSetTimeOutState+0x24>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <vTaskInternalSetTimeOutState+0x28>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	605a      	str	r2, [r3, #4]
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	20012d58 	.word	0x20012d58
 8004500:	20012d44 	.word	0x20012d44

08004504 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d109      	bne.n	8004528 <xTaskCheckForTimeOut+0x24>
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	613b      	str	r3, [r7, #16]
 8004526:	e7fe      	b.n	8004526 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <xTaskCheckForTimeOut+0x3e>
 800452e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e7fe      	b.n	8004540 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004542:	f7fc fb3b 	bl	8000bbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004546:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <xTaskCheckForTimeOut+0xb8>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	d102      	bne.n	8004566 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004560:	2300      	movs	r3, #0
 8004562:	61fb      	str	r3, [r7, #28]
 8004564:	e023      	b.n	80045ae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b15      	ldr	r3, [pc, #84]	; (80045c0 <xTaskCheckForTimeOut+0xbc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d007      	beq.n	8004582 <xTaskCheckForTimeOut+0x7e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	429a      	cmp	r2, r3
 800457a:	d802      	bhi.n	8004582 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800457c:	2301      	movs	r3, #1
 800457e:	61fb      	str	r3, [r7, #28]
 8004580:	e015      	b.n	80045ae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	429a      	cmp	r2, r3
 800458a:	d90b      	bls.n	80045a4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	1ad2      	subs	r2, r2, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff ff9d 	bl	80044d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	e004      	b.n	80045ae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80045aa:	2301      	movs	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80045ae:	f7fc fb33 	bl	8000c18 <vPortExitCritical>

	return xReturn;
 80045b2:	69fb      	ldr	r3, [r7, #28]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3720      	adds	r7, #32
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20012d44 	.word	0x20012d44
 80045c0:	20012d58 	.word	0x20012d58

080045c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045c8:	4b03      	ldr	r3, [pc, #12]	; (80045d8 <vTaskMissedYield+0x14>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
}
 80045ce:	bf00      	nop
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	20012d54 	.word	0x20012d54

080045dc <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t const *pxTCB;

		if( xTask != NULL )
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	e001      	b.n	80045fa <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
 80045fa:	68fb      	ldr	r3, [r7, #12]
	}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;

		if( xTask != NULL )
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d004      	beq.n	8004622 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = xTask;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}
 8004622:	bf00      	nop
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004636:	f000 f851 	bl	80046dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800463a:	4b06      	ldr	r3, [pc, #24]	; (8004654 <prvIdleTask+0x26>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d9f9      	bls.n	8004636 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004642:	4b05      	ldr	r3, [pc, #20]	; (8004658 <prvIdleTask+0x2a>)
 8004644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004652:	e7f0      	b.n	8004636 <prvIdleTask+0x8>
 8004654:	20012c6c 	.word	0x20012c6c
 8004658:	e000ed04 	.word	0xe000ed04

0800465c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004662:	2300      	movs	r3, #0
 8004664:	607b      	str	r3, [r7, #4]
 8004666:	e00c      	b.n	8004682 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4a12      	ldr	r2, [pc, #72]	; (80046bc <prvInitialiseTaskLists+0x60>)
 8004674:	4413      	add	r3, r2
 8004676:	4618      	mov	r0, r3
 8004678:	f7fc f8a8 	bl	80007cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3301      	adds	r3, #1
 8004680:	607b      	str	r3, [r7, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b04      	cmp	r3, #4
 8004686:	d9ef      	bls.n	8004668 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004688:	480d      	ldr	r0, [pc, #52]	; (80046c0 <prvInitialiseTaskLists+0x64>)
 800468a:	f7fc f89f 	bl	80007cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800468e:	480d      	ldr	r0, [pc, #52]	; (80046c4 <prvInitialiseTaskLists+0x68>)
 8004690:	f7fc f89c 	bl	80007cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004694:	480c      	ldr	r0, [pc, #48]	; (80046c8 <prvInitialiseTaskLists+0x6c>)
 8004696:	f7fc f899 	bl	80007cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800469a:	480c      	ldr	r0, [pc, #48]	; (80046cc <prvInitialiseTaskLists+0x70>)
 800469c:	f7fc f896 	bl	80007cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046a0:	480b      	ldr	r0, [pc, #44]	; (80046d0 <prvInitialiseTaskLists+0x74>)
 80046a2:	f7fc f893 	bl	80007cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046a6:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <prvInitialiseTaskLists+0x78>)
 80046a8:	4a05      	ldr	r2, [pc, #20]	; (80046c0 <prvInitialiseTaskLists+0x64>)
 80046aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046ac:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <prvInitialiseTaskLists+0x7c>)
 80046ae:	4a05      	ldr	r2, [pc, #20]	; (80046c4 <prvInitialiseTaskLists+0x68>)
 80046b0:	601a      	str	r2, [r3, #0]
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20012c6c 	.word	0x20012c6c
 80046c0:	20012cd0 	.word	0x20012cd0
 80046c4:	20012ce4 	.word	0x20012ce4
 80046c8:	20012d00 	.word	0x20012d00
 80046cc:	20012d14 	.word	0x20012d14
 80046d0:	20012d2c 	.word	0x20012d2c
 80046d4:	20012cf8 	.word	0x20012cf8
 80046d8:	20012cfc 	.word	0x20012cfc

080046dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046e2:	e019      	b.n	8004718 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046e4:	f7fc fa6a 	bl	8000bbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e8:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <prvCheckTasksWaitingTermination+0x4c>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fc f8f3 	bl	80008e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046fa:	4b0c      	ldr	r3, [pc, #48]	; (800472c <prvCheckTasksWaitingTermination+0x50>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3b01      	subs	r3, #1
 8004700:	4a0a      	ldr	r2, [pc, #40]	; (800472c <prvCheckTasksWaitingTermination+0x50>)
 8004702:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004704:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <prvCheckTasksWaitingTermination+0x54>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3b01      	subs	r3, #1
 800470a:	4a09      	ldr	r2, [pc, #36]	; (8004730 <prvCheckTasksWaitingTermination+0x54>)
 800470c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800470e:	f7fc fa83 	bl	8000c18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f8e2 	bl	80048dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <prvCheckTasksWaitingTermination+0x54>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e1      	bne.n	80046e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20012d14 	.word	0x20012d14
 800472c:	20012d40 	.word	0x20012d40
 8004730:	20012d28 	.word	0x20012d28

08004734 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <vTaskGetInfo+0x1a>
 8004748:	4b2c      	ldr	r3, [pc, #176]	; (80047fc <vTaskGetInfo+0xc8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	e000      	b.n	8004750 <vTaskGetInfo+0x1c>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2200      	movs	r2, #0
 8004786:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8004788:	78fb      	ldrb	r3, [r7, #3]
 800478a:	2b05      	cmp	r3, #5
 800478c:	d01a      	beq.n	80047c4 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800478e:	4b1b      	ldr	r3, [pc, #108]	; (80047fc <vTaskGetInfo+0xc8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	429a      	cmp	r2, r3
 8004796:	d103      	bne.n	80047a0 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2200      	movs	r2, #0
 800479c:	731a      	strb	r2, [r3, #12]
 800479e:	e018      	b.n	80047d2 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	78fa      	ldrb	r2, [r7, #3]
 80047a4:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 80047a6:	78fb      	ldrb	r3, [r7, #3]
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	d112      	bne.n	80047d2 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 80047ac:	f7ff fa28 	bl	8003c00 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2202      	movs	r2, #2
 80047bc:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 80047be:	f7ff fa2d 	bl	8003c1c <xTaskResumeAll>
 80047c2:	e006      	b.n	80047d2 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80047c4:	6978      	ldr	r0, [r7, #20]
 80047c6:	f7fe fed5 	bl	8003574 <eTaskGetState>
 80047ca:	4603      	mov	r3, r0
 80047cc:	461a      	mov	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d009      	beq.n	80047ec <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 f861 	bl	80048a4 <prvTaskCheckFreeStackSpace>
 80047e2:	4603      	mov	r3, r0
 80047e4:	461a      	mov	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 80047ea:	e002      	b.n	80047f2 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2200      	movs	r2, #0
 80047f0:	841a      	strh	r2, [r3, #32]
	}
 80047f2:	bf00      	nop
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20012c68 	.word	0x20012c68

08004800 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	; 0x28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d03f      	beq.n	800489a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	623b      	str	r3, [r7, #32]
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	605a      	str	r2, [r3, #4]
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	3308      	adds	r3, #8
 8004830:	429a      	cmp	r2, r3
 8004832:	d104      	bne.n	800483e <prvListTasksWithinSingleList+0x3e>
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	605a      	str	r2, [r3, #4]
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	605a      	str	r2, [r3, #4]
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	3308      	adds	r3, #8
 800485c:	429a      	cmp	r2, r3
 800485e:	d104      	bne.n	800486a <prvListTasksWithinSingleList+0x6a>
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	605a      	str	r2, [r3, #4]
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8004872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004874:	4613      	mov	r3, r2
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	4413      	add	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	461a      	mov	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1899      	adds	r1, r3, r2
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	2201      	movs	r2, #1
 8004886:	6978      	ldr	r0, [r7, #20]
 8004888:	f7ff ff54 	bl	8004734 <vTaskGetInfo>
				uxTask++;
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	3301      	adds	r3, #1
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	429a      	cmp	r2, r3
 8004898:	d1d5      	bne.n	8004846 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800489c:	4618      	mov	r0, r3
 800489e:	3728      	adds	r7, #40	; 0x28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80048b0:	e005      	b.n	80048be <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3301      	adds	r3, #1
 80048b6:	607b      	str	r3, [r7, #4]
			ulCount++;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3301      	adds	r3, #1
 80048bc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2ba5      	cmp	r3, #165	; 0xa5
 80048c4:	d0f5      	beq.n	80048b2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	089b      	lsrs	r3, r3, #2
 80048ca:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	b29b      	uxth	r3, r3
	}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7fc fb09 	bl	8000f00 <vPortFree>
			vPortFree( pxTCB );
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fc fb06 	bl	8000f00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048f4:	bf00      	nop
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004902:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <prvResetNextTaskUnblockTime+0x38>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d104      	bne.n	8004916 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <prvResetNextTaskUnblockTime+0x3c>)
 800490e:	f04f 32ff 	mov.w	r2, #4294967295
 8004912:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004914:	e008      	b.n	8004928 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004916:	4b07      	ldr	r3, [pc, #28]	; (8004934 <prvResetNextTaskUnblockTime+0x38>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4a04      	ldr	r2, [pc, #16]	; (8004938 <prvResetNextTaskUnblockTime+0x3c>)
 8004926:	6013      	str	r3, [r2, #0]
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	20012cf8 	.word	0x20012cf8
 8004938:	20012d60 	.word	0x20012d60

0800493c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004942:	4b05      	ldr	r3, [pc, #20]	; (8004958 <xTaskGetCurrentTaskHandle+0x1c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004948:	687b      	ldr	r3, [r7, #4]
	}
 800494a:	4618      	mov	r0, r3
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20012c68 	.word	0x20012c68

0800495c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004962:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <xTaskGetSchedulerState+0x34>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d102      	bne.n	8004970 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800496a:	2301      	movs	r3, #1
 800496c:	607b      	str	r3, [r7, #4]
 800496e:	e008      	b.n	8004982 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004970:	4b08      	ldr	r3, [pc, #32]	; (8004994 <xTaskGetSchedulerState+0x38>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d102      	bne.n	800497e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004978:	2302      	movs	r3, #2
 800497a:	607b      	str	r3, [r7, #4]
 800497c:	e001      	b.n	8004982 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800497e:	2300      	movs	r3, #0
 8004980:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004982:	687b      	ldr	r3, [r7, #4]
	}
 8004984:	4618      	mov	r0, r3
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	20012d4c 	.word	0x20012d4c
 8004994:	20012d68 	.word	0x20012d68

08004998 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d05e      	beq.n	8004a6c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b2:	4b31      	ldr	r3, [pc, #196]	; (8004a78 <xTaskPriorityInherit+0xe0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d24e      	bcs.n	8004a5a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	db06      	blt.n	80049d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049c4:	4b2c      	ldr	r3, [pc, #176]	; (8004a78 <xTaskPriorityInherit+0xe0>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	f1c3 0205 	rsb	r2, r3, #5
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	6959      	ldr	r1, [r3, #20]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049da:	4613      	mov	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4a26      	ldr	r2, [pc, #152]	; (8004a7c <xTaskPriorityInherit+0xe4>)
 80049e4:	4413      	add	r3, r2
 80049e6:	4299      	cmp	r1, r3
 80049e8:	d12f      	bne.n	8004a4a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fb ff76 	bl	80008e0 <uxListRemove>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10a      	bne.n	8004a10 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	2201      	movs	r2, #1
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	43da      	mvns	r2, r3
 8004a06:	4b1e      	ldr	r3, [pc, #120]	; (8004a80 <xTaskPriorityInherit+0xe8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	4a1c      	ldr	r2, [pc, #112]	; (8004a80 <xTaskPriorityInherit+0xe8>)
 8004a0e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a10:	4b19      	ldr	r3, [pc, #100]	; (8004a78 <xTaskPriorityInherit+0xe0>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	2201      	movs	r2, #1
 8004a20:	409a      	lsls	r2, r3
 8004a22:	4b17      	ldr	r3, [pc, #92]	; (8004a80 <xTaskPriorityInherit+0xe8>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	4a15      	ldr	r2, [pc, #84]	; (8004a80 <xTaskPriorityInherit+0xe8>)
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4a10      	ldr	r2, [pc, #64]	; (8004a7c <xTaskPriorityInherit+0xe4>)
 8004a3a:	441a      	add	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4619      	mov	r1, r3
 8004a42:	4610      	mov	r0, r2
 8004a44:	f7fb feef 	bl	8000826 <vListInsertEnd>
 8004a48:	e004      	b.n	8004a54 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <xTaskPriorityInherit+0xe0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004a54:	2301      	movs	r3, #1
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	e008      	b.n	8004a6c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a5e:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <xTaskPriorityInherit+0xe0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d201      	bcs.n	8004a6c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
	}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20012c68 	.word	0x20012c68
 8004a7c:	20012c6c 	.word	0x20012c6c
 8004a80:	20012d48 	.word	0x20012d48

08004a84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a90:	2300      	movs	r3, #0
 8004a92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d06c      	beq.n	8004b74 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a9a:	4b39      	ldr	r3, [pc, #228]	; (8004b80 <xTaskPriorityDisinherit+0xfc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d009      	beq.n	8004ab8 <xTaskPriorityDisinherit+0x34>
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	e7fe      	b.n	8004ab6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d109      	bne.n	8004ad4 <xTaskPriorityDisinherit+0x50>
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	e7fe      	b.n	8004ad2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad8:	1e5a      	subs	r2, r3, #1
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d044      	beq.n	8004b74 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d140      	bne.n	8004b74 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	3304      	adds	r3, #4
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fb fef2 	bl	80008e0 <uxListRemove>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d115      	bne.n	8004b2e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b06:	491f      	ldr	r1, [pc, #124]	; (8004b84 <xTaskPriorityDisinherit+0x100>)
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <xTaskPriorityDisinherit+0xaa>
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43da      	mvns	r2, r3
 8004b24:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <xTaskPriorityDisinherit+0x104>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	4a17      	ldr	r2, [pc, #92]	; (8004b88 <xTaskPriorityDisinherit+0x104>)
 8004b2c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	f1c3 0205 	rsb	r2, r3, #5
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	2201      	movs	r2, #1
 8004b48:	409a      	lsls	r2, r3
 8004b4a:	4b0f      	ldr	r3, [pc, #60]	; (8004b88 <xTaskPriorityDisinherit+0x104>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	4a0d      	ldr	r2, [pc, #52]	; (8004b88 <xTaskPriorityDisinherit+0x104>)
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4a08      	ldr	r2, [pc, #32]	; (8004b84 <xTaskPriorityDisinherit+0x100>)
 8004b62:	441a      	add	r2, r3
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f7fb fe5b 	bl	8000826 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b70:	2301      	movs	r3, #1
 8004b72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b74:	697b      	ldr	r3, [r7, #20]
	}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20012c68 	.word	0x20012c68
 8004b84:	20012c6c 	.word	0x20012c6c
 8004b88:	20012d48 	.word	0x20012d48

08004b8c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d075      	beq.n	8004c90 <vTaskPriorityDisinheritAfterTimeout+0x104>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d109      	bne.n	8004bc0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	e7fe      	b.n	8004bbe <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d202      	bcs.n	8004bd0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	61fb      	str	r3, [r7, #28]
 8004bce:	e002      	b.n	8004bd6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d057      	beq.n	8004c90 <vTaskPriorityDisinheritAfterTimeout+0x104>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d152      	bne.n	8004c90 <vTaskPriorityDisinheritAfterTimeout+0x104>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004bea:	4b2b      	ldr	r3, [pc, #172]	; (8004c98 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d109      	bne.n	8004c08 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	e7fe      	b.n	8004c06 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	db04      	blt.n	8004c26 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f1c3 0205 	rsb	r2, r3, #5
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	6959      	ldr	r1, [r3, #20]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4a19      	ldr	r2, [pc, #100]	; (8004c9c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004c36:	4413      	add	r3, r2
 8004c38:	4299      	cmp	r1, r3
 8004c3a:	d129      	bne.n	8004c90 <vTaskPriorityDisinheritAfterTimeout+0x104>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fb fe4d 	bl	80008e0 <uxListRemove>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <vTaskPriorityDisinheritAfterTimeout+0xd6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	2201      	movs	r2, #1
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	43da      	mvns	r2, r3
 8004c58:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	4a10      	ldr	r2, [pc, #64]	; (8004ca0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004c60:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	2201      	movs	r2, #1
 8004c68:	409a      	lsls	r2, r3
 8004c6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ca0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	4a0b      	ldr	r2, [pc, #44]	; (8004ca0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8004c72:	6013      	str	r3, [r2, #0]
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4a06      	ldr	r2, [pc, #24]	; (8004c9c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8004c82:	441a      	add	r2, r3
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	3304      	adds	r3, #4
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f7fb fdcb 	bl	8000826 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c90:	bf00      	nop
 8004c92:	3720      	adds	r7, #32
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20012c68 	.word	0x20012c68
 8004c9c:	20012c6c 	.word	0x20012c6c
 8004ca0:	20012d48 	.word	0x20012d48

08004ca4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004caa:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <uxTaskResetEventItemValue+0x2c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cb2:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <uxTaskResetEventItemValue+0x2c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a06      	ldr	r2, [pc, #24]	; (8004cd0 <uxTaskResetEventItemValue+0x2c>)
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004cbc:	f1c2 0205 	rsb	r2, r2, #5
 8004cc0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8004cc2:	687b      	ldr	r3, [r7, #4]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	20012c68 	.word	0x20012c68

08004cd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004cd4:	b480      	push	{r7}
 8004cd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004cd8:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ce6:	3201      	adds	r2, #1
 8004ce8:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8004cea:	4b03      	ldr	r3, [pc, #12]	; (8004cf8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004cec:	681b      	ldr	r3, [r3, #0]
	}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	20012c68 	.word	0x20012c68

08004cfc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8004d06:	f7fb ff59 	bl	8000bbc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8004d0a:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <ulTaskNotifyTake+0x88>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d113      	bne.n	8004d3c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004d14:	4b1b      	ldr	r3, [pc, #108]	; (8004d84 <ulTaskNotifyTake+0x88>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00b      	beq.n	8004d3c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d24:	2101      	movs	r1, #1
 8004d26:	6838      	ldr	r0, [r7, #0]
 8004d28:	f000 fac8 	bl	80052bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004d2c:	4b16      	ldr	r3, [pc, #88]	; (8004d88 <ulTaskNotifyTake+0x8c>)
 8004d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004d3c:	f7fb ff6c 	bl	8000c18 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004d40:	f7fb ff3c 	bl	8000bbc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8004d44:	4b0f      	ldr	r3, [pc, #60]	; (8004d84 <ulTaskNotifyTake+0x88>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00c      	beq.n	8004d6c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d004      	beq.n	8004d62 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8004d58:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <ulTaskNotifyTake+0x88>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	651a      	str	r2, [r3, #80]	; 0x50
 8004d60:	e004      	b.n	8004d6c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8004d62:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <ulTaskNotifyTake+0x88>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	3a01      	subs	r2, #1
 8004d6a:	651a      	str	r2, [r3, #80]	; 0x50
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d6c:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <ulTaskNotifyTake+0x88>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 8004d76:	f7fb ff4f 	bl	8000c18 <vPortExitCritical>

		return ulReturn;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
	}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20012c68 	.word	0x20012c68
 8004d88:	e000ed04 	.word	0xe000ed04

08004d8c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004d9a:	f7fb ff0f 	bl	8000bbc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004d9e:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <xTaskNotifyWait+0xac>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d01a      	beq.n	8004de2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004dac:	4b22      	ldr	r3, [pc, #136]	; (8004e38 <xTaskNotifyWait+0xac>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	43d2      	mvns	r2, r2
 8004db6:	400a      	ands	r2, r1
 8004db8:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004dba:	4b1f      	ldr	r3, [pc, #124]	; (8004e38 <xTaskNotifyWait+0xac>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00b      	beq.n	8004de2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dca:	2101      	movs	r1, #1
 8004dcc:	6838      	ldr	r0, [r7, #0]
 8004dce:	f000 fa75 	bl	80052bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004dd2:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <xTaskNotifyWait+0xb0>)
 8004dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004de2:	f7fb ff19 	bl	8000c18 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004de6:	f7fb fee9 	bl	8000bbc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d004      	beq.n	8004dfa <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004df0:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <xTaskNotifyWait+0xac>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004dfa:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <xTaskNotifyWait+0xac>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d002      	beq.n	8004e0e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	e008      	b.n	8004e20 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004e0e:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <xTaskNotifyWait+0xac>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	43d2      	mvns	r2, r2
 8004e18:	400a      	ands	r2, r1
 8004e1a:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e20:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <xTaskNotifyWait+0xac>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 8004e2a:	f7fb fef5 	bl	8000c18 <vPortExitCritical>

		return xReturn;
 8004e2e:	697b      	ldr	r3, [r7, #20]
	}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20012c68 	.word	0x20012c68
 8004e3c:	e000ed04 	.word	0xe000ed04

08004e40 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08a      	sub	sp, #40	; 0x28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004e50:	2301      	movs	r3, #1
 8004e52:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d109      	bne.n	8004e6e <xTaskGenericNotify+0x2e>
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	61bb      	str	r3, [r7, #24]
 8004e6c:	e7fe      	b.n	8004e6c <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8004e72:	f7fb fea3 	bl	8000bbc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004e8a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d827      	bhi.n	8004eea <xTaskGenericNotify+0xaa>
 8004e9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ea0 <xTaskGenericNotify+0x60>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004f09 	.word	0x08004f09
 8004ea4:	08004eb5 	.word	0x08004eb5
 8004ea8:	08004ec3 	.word	0x08004ec3
 8004eac:	08004ecf 	.word	0x08004ecf
 8004eb0:	08004ed7 	.word	0x08004ed7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8004ec0:	e025      	b.n	8004f0e <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8004ecc:	e01f      	b.n	8004f0e <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8004ed4:	e01b      	b.n	8004f0e <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004ed6:	7ffb      	ldrb	r3, [r7, #31]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d003      	beq.n	8004ee4 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004ee2:	e014      	b.n	8004f0e <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004ee8:	e011      	b.n	8004f0e <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d00b      	beq.n	8004f0c <xTaskGenericNotify+0xcc>
 8004ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	617b      	str	r3, [r7, #20]
 8004f06:	e7fe      	b.n	8004f06 <xTaskGenericNotify+0xc6>
					break;
 8004f08:	bf00      	nop
 8004f0a:	e000      	b.n	8004f0e <xTaskGenericNotify+0xce>

					break;
 8004f0c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004f0e:	7ffb      	ldrb	r3, [r7, #31]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d138      	bne.n	8004f86 <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fb fce1 	bl	80008e0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	2201      	movs	r2, #1
 8004f24:	409a      	lsls	r2, r3
 8004f26:	4b1b      	ldr	r3, [pc, #108]	; (8004f94 <xTaskGenericNotify+0x154>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	4a19      	ldr	r2, [pc, #100]	; (8004f94 <xTaskGenericNotify+0x154>)
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4a16      	ldr	r2, [pc, #88]	; (8004f98 <xTaskGenericNotify+0x158>)
 8004f3e:	441a      	add	r2, r3
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	3304      	adds	r3, #4
 8004f44:	4619      	mov	r1, r3
 8004f46:	4610      	mov	r0, r2
 8004f48:	f7fb fc6d 	bl	8000826 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d009      	beq.n	8004f68 <xTaskGenericNotify+0x128>
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	e7fe      	b.n	8004f66 <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <xTaskGenericNotify+0x15c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d907      	bls.n	8004f86 <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004f76:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <xTaskGenericNotify+0x160>)
 8004f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004f86:	f7fb fe47 	bl	8000c18 <vPortExitCritical>

		return xReturn;
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3728      	adds	r7, #40	; 0x28
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20012d48 	.word	0x20012d48
 8004f98:	20012c6c 	.word	0x20012c6c
 8004f9c:	20012c68 	.word	0x20012c68
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08e      	sub	sp, #56	; 0x38
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <xTaskGenericNotifyFromISR+0x2e>
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd0:	e7fe      	b.n	8004fd0 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fd2:	f7fb fec5 	bl	8000d60 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004fda:	f3ef 8211 	mrs	r2, BASEPRI
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	623a      	str	r2, [r7, #32]
 8004ff0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004ff2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800500a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	2202      	movs	r2, #2
 8005012:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	2b04      	cmp	r3, #4
 800501a:	d829      	bhi.n	8005070 <xTaskGenericNotifyFromISR+0xcc>
 800501c:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <xTaskGenericNotifyFromISR+0x80>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	0800508f 	.word	0x0800508f
 8005028:	08005039 	.word	0x08005039
 800502c:	08005047 	.word	0x08005047
 8005030:	08005053 	.word	0x08005053
 8005034:	0800505b 	.word	0x0800505b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	431a      	orrs	r2, r3
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8005044:	e026      	b.n	8005094 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8005050:	e020      	b.n	8005094 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8005058:	e01c      	b.n	8005094 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800505a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800505e:	2b02      	cmp	r3, #2
 8005060:	d003      	beq.n	800506a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005068:	e014      	b.n	8005094 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800506a:	2300      	movs	r3, #0
 800506c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800506e:	e011      	b.n	8005094 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005078:	d00b      	beq.n	8005092 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	61bb      	str	r3, [r7, #24]
 800508c:	e7fe      	b.n	800508c <xTaskGenericNotifyFromISR+0xe8>
					break;
 800508e:	bf00      	nop
 8005090:	e000      	b.n	8005094 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8005092:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005094:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005098:	2b01      	cmp	r3, #1
 800509a:	d144      	bne.n	8005126 <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d009      	beq.n	80050b8 <xTaskGenericNotifyFromISR+0x114>
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	e7fe      	b.n	80050b6 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050b8:	4b20      	ldr	r3, [pc, #128]	; (800513c <xTaskGenericNotifyFromISR+0x198>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d11c      	bne.n	80050fa <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	3304      	adds	r3, #4
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fb fc0b 	bl	80008e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ce:	2201      	movs	r2, #1
 80050d0:	409a      	lsls	r2, r3
 80050d2:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <xTaskGenericNotifyFromISR+0x19c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	4a19      	ldr	r2, [pc, #100]	; (8005140 <xTaskGenericNotifyFromISR+0x19c>)
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4a16      	ldr	r2, [pc, #88]	; (8005144 <xTaskGenericNotifyFromISR+0x1a0>)
 80050ea:	441a      	add	r2, r3
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ee:	3304      	adds	r3, #4
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f7fb fb97 	bl	8000826 <vListInsertEnd>
 80050f8:	e005      	b.n	8005106 <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	3318      	adds	r3, #24
 80050fe:	4619      	mov	r1, r3
 8005100:	4811      	ldr	r0, [pc, #68]	; (8005148 <xTaskGenericNotifyFromISR+0x1a4>)
 8005102:	f7fb fb90 	bl	8000826 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510a:	4b10      	ldr	r3, [pc, #64]	; (800514c <xTaskGenericNotifyFromISR+0x1a8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	429a      	cmp	r2, r3
 8005112:	d908      	bls.n	8005126 <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800511a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800511c:	2201      	movs	r2, #1
 800511e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <xTaskGenericNotifyFromISR+0x1ac>)
 8005122:	2201      	movs	r2, #1
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	613b      	str	r3, [r7, #16]
	__asm volatile
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005132:	4618      	mov	r0, r3
 8005134:	3738      	adds	r7, #56	; 0x38
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20012d68 	.word	0x20012d68
 8005140:	20012d48 	.word	0x20012d48
 8005144:	20012c6c 	.word	0x20012c6c
 8005148:	20012d00 	.word	0x20012d00
 800514c:	20012c68 	.word	0x20012c68
 8005150:	20012d54 	.word	0x20012d54

08005154 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08a      	sub	sp, #40	; 0x28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d109      	bne.n	8005178 <vTaskNotifyGiveFromISR+0x24>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	e7fe      	b.n	8005176 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005178:	f7fb fdf2 	bl	8000d60 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8005180:	f3ef 8211 	mrs	r2, BASEPRI
 8005184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	617a      	str	r2, [r7, #20]
 8005196:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005198:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800519a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80051a2:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	651a      	str	r2, [r3, #80]	; 0x50

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80051b6:	7ffb      	ldrb	r3, [r7, #31]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d144      	bne.n	8005246 <vTaskNotifyGiveFromISR+0xf2>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d009      	beq.n	80051d8 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	e7fe      	b.n	80051d6 <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051d8:	4b1f      	ldr	r3, [pc, #124]	; (8005258 <vTaskNotifyGiveFromISR+0x104>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d11c      	bne.n	800521a <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e2:	3304      	adds	r3, #4
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fb fb7b 	bl	80008e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ee:	2201      	movs	r2, #1
 80051f0:	409a      	lsls	r2, r3
 80051f2:	4b1a      	ldr	r3, [pc, #104]	; (800525c <vTaskNotifyGiveFromISR+0x108>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	4a18      	ldr	r2, [pc, #96]	; (800525c <vTaskNotifyGiveFromISR+0x108>)
 80051fa:	6013      	str	r3, [r2, #0]
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4a15      	ldr	r2, [pc, #84]	; (8005260 <vTaskNotifyGiveFromISR+0x10c>)
 800520a:	441a      	add	r2, r3
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	3304      	adds	r3, #4
 8005210:	4619      	mov	r1, r3
 8005212:	4610      	mov	r0, r2
 8005214:	f7fb fb07 	bl	8000826 <vListInsertEnd>
 8005218:	e005      	b.n	8005226 <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	3318      	adds	r3, #24
 800521e:	4619      	mov	r1, r3
 8005220:	4810      	ldr	r0, [pc, #64]	; (8005264 <vTaskNotifyGiveFromISR+0x110>)
 8005222:	f7fb fb00 	bl	8000826 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522a:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <vTaskNotifyGiveFromISR+0x114>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	429a      	cmp	r2, r3
 8005232:	d908      	bls.n	8005246 <vTaskNotifyGiveFromISR+0xf2>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <vTaskNotifyGiveFromISR+0xec>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	2201      	movs	r2, #1
 800523e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005240:	4b0a      	ldr	r3, [pc, #40]	; (800526c <vTaskNotifyGiveFromISR+0x118>)
 8005242:	2201      	movs	r2, #1
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8005250:	bf00      	nop
 8005252:	3728      	adds	r7, #40	; 0x28
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	20012d68 	.word	0x20012d68
 800525c:	20012d48 	.word	0x20012d48
 8005260:	20012c6c 	.word	0x20012c6c
 8005264:	20012d00 	.word	0x20012d00
 8005268:	20012c68 	.word	0x20012c68
 800526c:	20012d54 	.word	0x20012d54

08005270 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <xTaskNotifyStateClear+0x14>
 800527e:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <xTaskNotifyStateClear+0x48>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	e000      	b.n	8005286 <xTaskNotifyStateClear+0x16>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8005288:	f7fb fc98 	bl	8000bbc <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d106      	bne.n	80052a6 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				xReturn = pdPASS;
 80052a0:	2301      	movs	r3, #1
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	e001      	b.n	80052aa <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80052aa:	f7fb fcb5 	bl	8000c18 <vPortExitCritical>

		return xReturn;
 80052ae:	68fb      	ldr	r3, [r7, #12]
	}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20012c68 	.word	0x20012c68

080052bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052c6:	4b29      	ldr	r3, [pc, #164]	; (800536c <prvAddCurrentTaskToDelayedList+0xb0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052cc:	4b28      	ldr	r3, [pc, #160]	; (8005370 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3304      	adds	r3, #4
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fb fb04 	bl	80008e0 <uxListRemove>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10b      	bne.n	80052f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80052de:	4b24      	ldr	r3, [pc, #144]	; (8005370 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	2201      	movs	r2, #1
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	43da      	mvns	r2, r3
 80052ec:	4b21      	ldr	r3, [pc, #132]	; (8005374 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4013      	ands	r3, r2
 80052f2:	4a20      	ldr	r2, [pc, #128]	; (8005374 <prvAddCurrentTaskToDelayedList+0xb8>)
 80052f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d10a      	bne.n	8005314 <prvAddCurrentTaskToDelayedList+0x58>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005304:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3304      	adds	r3, #4
 800530a:	4619      	mov	r1, r3
 800530c:	481a      	ldr	r0, [pc, #104]	; (8005378 <prvAddCurrentTaskToDelayedList+0xbc>)
 800530e:	f7fb fa8a 	bl	8000826 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005312:	e026      	b.n	8005362 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4413      	add	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800531c:	4b14      	ldr	r3, [pc, #80]	; (8005370 <prvAddCurrentTaskToDelayedList+0xb4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	429a      	cmp	r2, r3
 800532a:	d209      	bcs.n	8005340 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800532c:	4b13      	ldr	r3, [pc, #76]	; (800537c <prvAddCurrentTaskToDelayedList+0xc0>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	4b0f      	ldr	r3, [pc, #60]	; (8005370 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3304      	adds	r3, #4
 8005336:	4619      	mov	r1, r3
 8005338:	4610      	mov	r0, r2
 800533a:	f7fb fa98 	bl	800086e <vListInsert>
}
 800533e:	e010      	b.n	8005362 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005340:	4b0f      	ldr	r3, [pc, #60]	; (8005380 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3304      	adds	r3, #4
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f7fb fa8e 	bl	800086e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005352:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	429a      	cmp	r2, r3
 800535a:	d202      	bcs.n	8005362 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800535c:	4a09      	ldr	r2, [pc, #36]	; (8005384 <prvAddCurrentTaskToDelayedList+0xc8>)
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	6013      	str	r3, [r2, #0]
}
 8005362:	bf00      	nop
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20012d44 	.word	0x20012d44
 8005370:	20012c68 	.word	0x20012c68
 8005374:	20012d48 	.word	0x20012d48
 8005378:	20012d2c 	.word	0x20012d2c
 800537c:	20012cfc 	.word	0x20012cfc
 8005380:	20012cf8 	.word	0x20012cf8
 8005384:	20012d60 	.word	0x20012d60

08005388 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800538e:	2300      	movs	r3, #0
 8005390:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005392:	f000 fbcd 	bl	8005b30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005396:	4b11      	ldr	r3, [pc, #68]	; (80053dc <xTimerCreateTimerTask+0x54>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00b      	beq.n	80053b6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800539e:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <xTimerCreateTimerTask+0x58>)
 80053a0:	9301      	str	r3, [sp, #4]
 80053a2:	2302      	movs	r3, #2
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	2300      	movs	r3, #0
 80053a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80053ac:	490d      	ldr	r1, [pc, #52]	; (80053e4 <xTimerCreateTimerTask+0x5c>)
 80053ae:	480e      	ldr	r0, [pc, #56]	; (80053e8 <xTimerCreateTimerTask+0x60>)
 80053b0:	f7fd fe66 	bl	8003080 <xTaskCreate>
 80053b4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d109      	bne.n	80053d0 <xTimerCreateTimerTask+0x48>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	603b      	str	r3, [r7, #0]
 80053ce:	e7fe      	b.n	80053ce <xTimerCreateTimerTask+0x46>
	return xReturn;
 80053d0:	687b      	ldr	r3, [r7, #4]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20012d9c 	.word	0x20012d9c
 80053e0:	20012da0 	.word	0x20012da0
 80053e4:	08015914 	.word	0x08015914
 80053e8:	08005715 	.word	0x08005715

080053ec <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80053fa:	202c      	movs	r0, #44	; 0x2c
 80053fc:	f7fb fcf2 	bl	8000de4 <pvPortMalloc>
 8005400:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00d      	beq.n	8005424 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	9301      	str	r3, [sp, #4]
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	68b9      	ldr	r1, [r7, #8]
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 f805 	bl	800542e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005424:	697b      	ldr	r3, [r7, #20]
	}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b086      	sub	sp, #24
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
 800543a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <prvInitialiseNewTimer+0x28>
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e7fe      	b.n	8005454 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01e      	beq.n	800549a <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800545c:	f000 fb68 	bl	8005b30 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	6a3a      	ldr	r2, [r7, #32]
 8005476:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	3304      	adds	r3, #4
 800547c:	4618      	mov	r0, r3
 800547e:	f7fb f9c5 	bl	800080c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d008      	beq.n	800549a <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800548e:	f043 0304 	orr.w	r3, r3, #4
 8005492:	b2da      	uxtb	r2, r3
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800549a:	bf00      	nop
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b08a      	sub	sp, #40	; 0x28
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80054b0:	2300      	movs	r3, #0
 80054b2:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d109      	bne.n	80054ce <xTimerGenericCommand+0x2c>
 80054ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	623b      	str	r3, [r7, #32]
 80054cc:	e7fe      	b.n	80054cc <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80054ce:	4b1a      	ldr	r3, [pc, #104]	; (8005538 <xTimerGenericCommand+0x96>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d02a      	beq.n	800552c <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b05      	cmp	r3, #5
 80054e6:	dc18      	bgt.n	800551a <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80054e8:	f7ff fa38 	bl	800495c <xTaskGetSchedulerState>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d109      	bne.n	8005506 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80054f2:	4b11      	ldr	r3, [pc, #68]	; (8005538 <xTimerGenericCommand+0x96>)
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	f107 0114 	add.w	r1, r7, #20
 80054fa:	2300      	movs	r3, #0
 80054fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054fe:	f7fb ff06 	bl	800130e <xQueueGenericSend>
 8005502:	6278      	str	r0, [r7, #36]	; 0x24
 8005504:	e012      	b.n	800552c <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <xTimerGenericCommand+0x96>)
 8005508:	6818      	ldr	r0, [r3, #0]
 800550a:	f107 0114 	add.w	r1, r7, #20
 800550e:	2300      	movs	r3, #0
 8005510:	2200      	movs	r2, #0
 8005512:	f7fb fefc 	bl	800130e <xQueueGenericSend>
 8005516:	6278      	str	r0, [r7, #36]	; 0x24
 8005518:	e008      	b.n	800552c <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800551a:	4b07      	ldr	r3, [pc, #28]	; (8005538 <xTimerGenericCommand+0x96>)
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	f107 0114 	add.w	r1, r7, #20
 8005522:	2300      	movs	r3, #0
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	f7fb ffed 	bl	8001504 <xQueueGenericSendFromISR>
 800552a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800552e:	4618      	mov	r0, r3
 8005530:	3728      	adds	r7, #40	; 0x28
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20012d9c 	.word	0x20012d9c

0800553c <xTimerGetTimerDaemonTaskHandle>:
/*-----------------------------------------------------------*/

TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
	started, then xTimerTaskHandle will be NULL. */
	configASSERT( ( xTimerTaskHandle != NULL ) );
 8005542:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <xTimerGetTimerDaemonTaskHandle+0x34>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d109      	bne.n	800555e <xTimerGetTimerDaemonTaskHandle+0x22>
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	607b      	str	r3, [r7, #4]
 800555c:	e7fe      	b.n	800555c <xTimerGetTimerDaemonTaskHandle+0x20>
	return xTimerTaskHandle;
 800555e:	4b04      	ldr	r3, [pc, #16]	; (8005570 <xTimerGetTimerDaemonTaskHandle+0x34>)
 8005560:	681b      	ldr	r3, [r3, #0]
}
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	20012da0 	.word	0x20012da0

08005574 <xTimerGetPeriod>:
/*-----------------------------------------------------------*/

TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = xTimer;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <xTimerGetPeriod+0x26>
 8005586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	60bb      	str	r3, [r7, #8]
 8005598:	e7fe      	b.n	8005598 <xTimerGetPeriod+0x24>
	return pxTimer->xTimerPeriodInTicks;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	699b      	ldr	r3, [r3, #24]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <vTimerSetReloadMode>:
/*-----------------------------------------------------------*/

void vTimerSetReloadMode( TimerHandle_t xTimer, const UBaseType_t uxAutoReload )
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
Timer_t * pxTimer =  xTimer;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d109      	bne.n	80055d2 <vTimerSetReloadMode+0x28>
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	60bb      	str	r3, [r7, #8]
 80055d0:	e7fe      	b.n	80055d0 <vTimerSetReloadMode+0x26>
	taskENTER_CRITICAL();
 80055d2:	f7fb faf3 	bl	8000bbc <vPortEnterCritical>
	{
		if( uxAutoReload != pdFALSE )
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d009      	beq.n	80055f0 <vTimerSetReloadMode+0x46>
		{
			pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055e2:	f043 0304 	orr.w	r3, r3, #4
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80055ee:	e008      	b.n	8005602 <vTimerSetReloadMode+0x58>
		}
		else
		{
			pxTimer->ucStatus &= ~tmrSTATUS_IS_AUTORELOAD;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055f6:	f023 0304 	bic.w	r3, r3, #4
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
	taskEXIT_CRITICAL();
 8005602:	f7fb fb09 	bl	8000c18 <vPortExitCritical>
}
 8005606:	bf00      	nop
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <xTimerGetExpiryTime>:
/*-----------------------------------------------------------*/

TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
{
 800560e:	b480      	push	{r7}
 8005610:	b087      	sub	sp, #28
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
Timer_t * pxTimer =  xTimer;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	617b      	str	r3, [r7, #20]
TickType_t xReturn;

	configASSERT( xTimer );
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d109      	bne.n	8005634 <xTimerGetExpiryTime+0x26>
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	e7fe      	b.n	8005632 <xTimerGetExpiryTime+0x24>
	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	613b      	str	r3, [r7, #16]
	return xReturn;
 800563a:	693b      	ldr	r3, [r7, #16]
}
 800563c:	4618      	mov	r0, r3
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <pcTimerGetName>:
/*-----------------------------------------------------------*/

const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
Timer_t *pxTimer = xTimer;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d109      	bne.n	800566e <pcTimerGetName+0x26>
 800565a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	60bb      	str	r3, [r7, #8]
 800566c:	e7fe      	b.n	800566c <pcTimerGetName+0x24>
	return pxTimer->pcTimerName;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b088      	sub	sp, #32
 8005682:	af02      	add	r7, sp, #8
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005688:	4b21      	ldr	r3, [pc, #132]	; (8005710 <prvProcessExpiredTimer+0x92>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	3304      	adds	r3, #4
 8005696:	4618      	mov	r0, r3
 8005698:	f7fb f922 	bl	80008e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d021      	beq.n	80056ee <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	18d1      	adds	r1, r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	6978      	ldr	r0, [r7, #20]
 80056b8:	f000 f8d0 	bl	800585c <prvInsertTimerInActiveList>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d01e      	beq.n	8005700 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056c2:	2300      	movs	r3, #0
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	2300      	movs	r3, #0
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	2100      	movs	r1, #0
 80056cc:	6978      	ldr	r0, [r7, #20]
 80056ce:	f7ff fee8 	bl	80054a2 <xTimerGenericCommand>
 80056d2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d112      	bne.n	8005700 <prvProcessExpiredTimer+0x82>
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	e7fe      	b.n	80056ec <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	6978      	ldr	r0, [r7, #20]
 8005706:	4798      	blx	r3
}
 8005708:	bf00      	nop
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20012d94 	.word	0x20012d94

08005714 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800571c:	f107 0308 	add.w	r3, r7, #8
 8005720:	4618      	mov	r0, r3
 8005722:	f000 f857 	bl	80057d4 <prvGetNextExpireTime>
 8005726:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4619      	mov	r1, r3
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f803 	bl	8005738 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005732:	f000 f8d5 	bl	80058e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005736:	e7f1      	b.n	800571c <prvTimerTask+0x8>

08005738 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005742:	f7fe fa5d 	bl	8003c00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005746:	f107 0308 	add.w	r3, r7, #8
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f866 	bl	800581c <prvSampleTimeNow>
 8005750:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d130      	bne.n	80057ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <prvProcessTimerOrBlockTask+0x3c>
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	429a      	cmp	r2, r3
 8005764:	d806      	bhi.n	8005774 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005766:	f7fe fa59 	bl	8003c1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800576a:	68f9      	ldr	r1, [r7, #12]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff ff86 	bl	800567e <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005772:	e024      	b.n	80057be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d008      	beq.n	800578c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800577a:	4b13      	ldr	r3, [pc, #76]	; (80057c8 <prvProcessTimerOrBlockTask+0x90>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <prvProcessTimerOrBlockTask+0x50>
 8005784:	2301      	movs	r3, #1
 8005786:	e000      	b.n	800578a <prvProcessTimerOrBlockTask+0x52>
 8005788:	2300      	movs	r3, #0
 800578a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800578c:	4b0f      	ldr	r3, [pc, #60]	; (80057cc <prvProcessTimerOrBlockTask+0x94>)
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	4619      	mov	r1, r3
 800579a:	f7fc fdfd 	bl	8002398 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800579e:	f7fe fa3d 	bl	8003c1c <xTaskResumeAll>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10a      	bne.n	80057be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80057a8:	4b09      	ldr	r3, [pc, #36]	; (80057d0 <prvProcessTimerOrBlockTask+0x98>)
 80057aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	f3bf 8f6f 	isb	sy
}
 80057b8:	e001      	b.n	80057be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80057ba:	f7fe fa2f 	bl	8003c1c <xTaskResumeAll>
}
 80057be:	bf00      	nop
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20012d98 	.word	0x20012d98
 80057cc:	20012d9c 	.word	0x20012d9c
 80057d0:	e000ed04 	.word	0xe000ed04

080057d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057dc:	4b0e      	ldr	r3, [pc, #56]	; (8005818 <prvGetNextExpireTime+0x44>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <prvGetNextExpireTime+0x16>
 80057e6:	2201      	movs	r2, #1
 80057e8:	e000      	b.n	80057ec <prvGetNextExpireTime+0x18>
 80057ea:	2200      	movs	r2, #0
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d105      	bne.n	8005804 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057f8:	4b07      	ldr	r3, [pc, #28]	; (8005818 <prvGetNextExpireTime+0x44>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	e001      	b.n	8005808 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005808:	68fb      	ldr	r3, [r7, #12]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	20012d94 	.word	0x20012d94

0800581c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005824:	f7fe fac6 	bl	8003db4 <xTaskGetTickCount>
 8005828:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800582a:	4b0b      	ldr	r3, [pc, #44]	; (8005858 <prvSampleTimeNow+0x3c>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	429a      	cmp	r2, r3
 8005832:	d205      	bcs.n	8005840 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005834:	f000 f918 	bl	8005a68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	e002      	b.n	8005846 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005846:	4a04      	ldr	r2, [pc, #16]	; (8005858 <prvSampleTimeNow+0x3c>)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800584c:	68fb      	ldr	r3, [r7, #12]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20012da4 	.word	0x20012da4

0800585c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800586a:	2300      	movs	r3, #0
 800586c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	429a      	cmp	r2, r3
 8005880:	d812      	bhi.n	80058a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	1ad2      	subs	r2, r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	429a      	cmp	r2, r3
 800588e:	d302      	bcc.n	8005896 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005890:	2301      	movs	r3, #1
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	e01b      	b.n	80058ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005896:	4b10      	ldr	r3, [pc, #64]	; (80058d8 <prvInsertTimerInActiveList+0x7c>)
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3304      	adds	r3, #4
 800589e:	4619      	mov	r1, r3
 80058a0:	4610      	mov	r0, r2
 80058a2:	f7fa ffe4 	bl	800086e <vListInsert>
 80058a6:	e012      	b.n	80058ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d206      	bcs.n	80058be <prvInsertTimerInActiveList+0x62>
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d302      	bcc.n	80058be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80058b8:	2301      	movs	r3, #1
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	e007      	b.n	80058ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058be:	4b07      	ldr	r3, [pc, #28]	; (80058dc <prvInsertTimerInActiveList+0x80>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3304      	adds	r3, #4
 80058c6:	4619      	mov	r1, r3
 80058c8:	4610      	mov	r0, r2
 80058ca:	f7fa ffd0 	bl	800086e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80058ce:	697b      	ldr	r3, [r7, #20]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3718      	adds	r7, #24
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	20012d98 	.word	0x20012d98
 80058dc:	20012d94 	.word	0x20012d94

080058e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08c      	sub	sp, #48	; 0x30
 80058e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058e6:	e0ac      	b.n	8005a42 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f2c0 80a9 	blt.w	8005a42 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d004      	beq.n	8005906 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	3304      	adds	r3, #4
 8005900:	4618      	mov	r0, r3
 8005902:	f7fa ffed 	bl	80008e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005906:	1d3b      	adds	r3, r7, #4
 8005908:	4618      	mov	r0, r3
 800590a:	f7ff ff87 	bl	800581c <prvSampleTimeNow>
 800590e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b09      	cmp	r3, #9
 8005914:	f200 8094 	bhi.w	8005a40 <prvProcessReceivedCommands+0x160>
 8005918:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <prvProcessReceivedCommands+0x40>)
 800591a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591e:	bf00      	nop
 8005920:	08005949 	.word	0x08005949
 8005924:	08005949 	.word	0x08005949
 8005928:	08005949 	.word	0x08005949
 800592c:	080059bb 	.word	0x080059bb
 8005930:	080059cf 	.word	0x080059cf
 8005934:	08005a17 	.word	0x08005a17
 8005938:	08005949 	.word	0x08005949
 800593c:	08005949 	.word	0x08005949
 8005940:	080059bb 	.word	0x080059bb
 8005944:	080059cf 	.word	0x080059cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800594e:	f043 0301 	orr.w	r3, r3, #1
 8005952:	b2da      	uxtb	r2, r3
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	18d1      	adds	r1, r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a3a      	ldr	r2, [r7, #32]
 8005966:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005968:	f7ff ff78 	bl	800585c <prvInsertTimerInActiveList>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d067      	beq.n	8005a42 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005978:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d05c      	beq.n	8005a42 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	441a      	add	r2, r3
 8005990:	2300      	movs	r3, #0
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	2300      	movs	r3, #0
 8005996:	2100      	movs	r1, #0
 8005998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800599a:	f7ff fd82 	bl	80054a2 <xTimerGenericCommand>
 800599e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d14d      	bne.n	8005a42 <prvProcessReceivedCommands+0x162>
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	e7fe      	b.n	80059b8 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059c0:	f023 0301 	bic.w	r3, r3, #1
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80059cc:	e039      	b.n	8005a42 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d109      	bne.n	8005a02 <prvProcessReceivedCommands+0x122>
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	e7fe      	b.n	8005a00 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	699a      	ldr	r2, [r3, #24]
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	18d1      	adds	r1, r2, r3
 8005a0a:	6a3b      	ldr	r3, [r7, #32]
 8005a0c:	6a3a      	ldr	r2, [r7, #32]
 8005a0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a10:	f7ff ff24 	bl	800585c <prvInsertTimerInActiveList>
					break;
 8005a14:	e015      	b.n	8005a42 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d103      	bne.n	8005a2c <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8005a24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a26:	f7fb fa6b 	bl	8000f00 <vPortFree>
 8005a2a:	e00a      	b.n	8005a42 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a32:	f023 0301 	bic.w	r3, r3, #1
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a3e:	e000      	b.n	8005a42 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8005a40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a42:	4b08      	ldr	r3, [pc, #32]	; (8005a64 <prvProcessReceivedCommands+0x184>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f107 0108 	add.w	r1, r7, #8
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fb fe76 	bl	800173e <xQueueReceive>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f47f af47 	bne.w	80058e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005a5a:	bf00      	nop
 8005a5c:	3728      	adds	r7, #40	; 0x28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20012d9c 	.word	0x20012d9c

08005a68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a6e:	e047      	b.n	8005b00 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a70:	4b2d      	ldr	r3, [pc, #180]	; (8005b28 <prvSwitchTimerLists+0xc0>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a7a:	4b2b      	ldr	r3, [pc, #172]	; (8005b28 <prvSwitchTimerLists+0xc0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	3304      	adds	r3, #4
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fa ff29 	bl	80008e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	6938      	ldr	r0, [r7, #16]
 8005a94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d02d      	beq.n	8005b00 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	699a      	ldr	r2, [r3, #24]
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	4413      	add	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d90e      	bls.n	8005ad4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ac2:	4b19      	ldr	r3, [pc, #100]	; (8005b28 <prvSwitchTimerLists+0xc0>)
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	4619      	mov	r1, r3
 8005acc:	4610      	mov	r0, r2
 8005ace:	f7fa fece 	bl	800086e <vListInsert>
 8005ad2:	e015      	b.n	8005b00 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	2100      	movs	r1, #0
 8005ade:	6938      	ldr	r0, [r7, #16]
 8005ae0:	f7ff fcdf 	bl	80054a2 <xTimerGenericCommand>
 8005ae4:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d109      	bne.n	8005b00 <prvSwitchTimerLists+0x98>
 8005aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	603b      	str	r3, [r7, #0]
 8005afe:	e7fe      	b.n	8005afe <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b00:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <prvSwitchTimerLists+0xc0>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1b2      	bne.n	8005a70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b0a:	4b07      	ldr	r3, [pc, #28]	; (8005b28 <prvSwitchTimerLists+0xc0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b10:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <prvSwitchTimerLists+0xc4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a04      	ldr	r2, [pc, #16]	; (8005b28 <prvSwitchTimerLists+0xc0>)
 8005b16:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b18:	4a04      	ldr	r2, [pc, #16]	; (8005b2c <prvSwitchTimerLists+0xc4>)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6013      	str	r3, [r2, #0]
}
 8005b1e:	bf00      	nop
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20012d94 	.word	0x20012d94
 8005b2c:	20012d98 	.word	0x20012d98

08005b30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b34:	f7fb f842 	bl	8000bbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b38:	4b12      	ldr	r3, [pc, #72]	; (8005b84 <prvCheckForValidListAndQueue+0x54>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d11d      	bne.n	8005b7c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b40:	4811      	ldr	r0, [pc, #68]	; (8005b88 <prvCheckForValidListAndQueue+0x58>)
 8005b42:	f7fa fe43 	bl	80007cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b46:	4811      	ldr	r0, [pc, #68]	; (8005b8c <prvCheckForValidListAndQueue+0x5c>)
 8005b48:	f7fa fe40 	bl	80007cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b4c:	4b10      	ldr	r3, [pc, #64]	; (8005b90 <prvCheckForValidListAndQueue+0x60>)
 8005b4e:	4a0e      	ldr	r2, [pc, #56]	; (8005b88 <prvCheckForValidListAndQueue+0x58>)
 8005b50:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b52:	4b10      	ldr	r3, [pc, #64]	; (8005b94 <prvCheckForValidListAndQueue+0x64>)
 8005b54:	4a0d      	ldr	r2, [pc, #52]	; (8005b8c <prvCheckForValidListAndQueue+0x5c>)
 8005b56:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005b58:	2200      	movs	r2, #0
 8005b5a:	210c      	movs	r1, #12
 8005b5c:	200a      	movs	r0, #10
 8005b5e:	f7fb faad 	bl	80010bc <xQueueGenericCreate>
 8005b62:	4602      	mov	r2, r0
 8005b64:	4b07      	ldr	r3, [pc, #28]	; (8005b84 <prvCheckForValidListAndQueue+0x54>)
 8005b66:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b68:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <prvCheckForValidListAndQueue+0x54>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b70:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <prvCheckForValidListAndQueue+0x54>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4908      	ldr	r1, [pc, #32]	; (8005b98 <prvCheckForValidListAndQueue+0x68>)
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fc fb96 	bl	80022a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b7c:	f7fb f84c 	bl	8000c18 <vPortExitCritical>
}
 8005b80:	bf00      	nop
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	20012d9c 	.word	0x20012d9c
 8005b88:	20012d6c 	.word	0x20012d6c
 8005b8c:	20012d80 	.word	0x20012d80
 8005b90:	20012d94 	.word	0x20012d94
 8005b94:	20012d98 	.word	0x20012d98
 8005b98:	0801591c 	.word	0x0801591c

08005b9c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <xTimerIsTimerActive+0x26>
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	e7fe      	b.n	8005bc0 <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8005bc2:	f7fa fffb 	bl	8000bbc <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bcc:	f003 0301 	and.w	r3, r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d102      	bne.n	8005bda <xTimerIsTimerActive+0x3e>
		{
			xReturn = pdFALSE;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	e001      	b.n	8005bde <xTimerIsTimerActive+0x42>
		}
		else
		{
			xReturn = pdTRUE;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8005bde:	f7fb f81b 	bl	8000c18 <vPortExitCritical>

	return xReturn;
 8005be2:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d109      	bne.n	8005c12 <pvTimerGetTimerID+0x26>
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	e7fe      	b.n	8005c10 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8005c12:	f7fa ffd3 	bl	8000bbc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8005c1c:	f7fa fffc 	bl	8000c18 <vPortExitCritical>

	return pvReturn;
 8005c20:	693b      	ldr	r3, [r7, #16]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
Timer_t * const pxTimer = xTimer;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	60fb      	str	r3, [r7, #12]

	configASSERT( xTimer );
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <vTimerSetTimerID+0x28>
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	e7fe      	b.n	8005c50 <vTimerSetTimerID+0x26>

	taskENTER_CRITICAL();
 8005c52:	f7fa ffb3 	bl	8000bbc <vPortEnterCritical>
	{
		pxTimer->pvTimerID = pvNewID;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	61da      	str	r2, [r3, #28]
	}
	taskEXIT_CRITICAL();
 8005c5c:	f7fa ffdc 	bl	8000c18 <vPortExitCritical>
}
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <uxTimerGetTimerNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTimerGetTimerNumber( TimerHandle_t xTimer )
	{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
		return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	}
 8005c74:	4618      	mov	r0, r3
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <vTimerSetTimerNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTimerSetTimerNumber( TimerHandle_t xTimer, UBaseType_t uxTimerNumber )
	{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
		( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8005ca4:	4a06      	ldr	r2, [pc, #24]	; (8005cc0 <NVIC_PriorityGroupConfig+0x24>)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cb0:	60d3      	str	r3, [r2, #12]
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	e000ed00 	.word	0xe000ed00

08005cc4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	73fb      	strb	r3, [r7, #15]
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	73bb      	strb	r3, [r7, #14]
 8005cd4:	230f      	movs	r3, #15
 8005cd6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	78db      	ldrb	r3, [r3, #3]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d039      	beq.n	8005d54 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005ce0:	4b27      	ldr	r3, [pc, #156]	; (8005d80 <NVIC_Init+0xbc>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	0a1b      	lsrs	r3, r3, #8
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	f1c3 0304 	rsb	r3, r3, #4
 8005cf6:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8005cf8:	7b7a      	ldrb	r2, [r7, #13]
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
 8005cfc:	fa42 f303 	asr.w	r3, r2, r3
 8005d00:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	785b      	ldrb	r3, [r3, #1]
 8005d06:	461a      	mov	r2, r3
 8005d08:	7bbb      	ldrb	r3, [r7, #14]
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	789a      	ldrb	r2, [r3, #2]
 8005d14:	7b7b      	ldrb	r3, [r7, #13]
 8005d16:	4013      	ands	r3, r2
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	011b      	lsls	r3, r3, #4
 8005d24:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8005d26:	4a17      	ldr	r2, [pc, #92]	; (8005d84 <NVIC_Init+0xc0>)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	7bfa      	ldrb	r2, [r7, #15]
 8005d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005d34:	4a13      	ldr	r2, [pc, #76]	; (8005d84 <NVIC_Init+0xc0>)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	f003 031f 	and.w	r3, r3, #31
 8005d48:	2101      	movs	r1, #1
 8005d4a:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005d4e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005d52:	e00f      	b.n	8005d74 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005d54:	490b      	ldr	r1, [pc, #44]	; (8005d84 <NVIC_Init+0xc0>)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	f003 031f 	and.w	r3, r3, #31
 8005d68:	2201      	movs	r2, #1
 8005d6a:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005d6c:	f100 0320 	add.w	r3, r0, #32
 8005d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005d74:	bf00      	nop
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	e000ed00 	.word	0xe000ed00
 8005d84:	e000e100 	.word	0xe000e100

08005d88 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8005d92:	4907      	ldr	r1, [pc, #28]	; (8005db0 <NVIC_SetVectorTable+0x28>)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005d9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	608b      	str	r3, [r1, #8]
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr
 8005db0:	e000ed00 	.word	0xe000ed00

08005db4 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	4603      	mov	r3, r0
 8005dbc:	460a      	mov	r2, r1
 8005dbe:	71fb      	strb	r3, [r7, #7]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8005dc4:	79bb      	ldrb	r3, [r7, #6]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d006      	beq.n	8005dd8 <NVIC_SystemLPConfig+0x24>
  {
    SCB->SCR |= LowPowerMode;
 8005dca:	490a      	ldr	r1, [pc, #40]	; (8005df4 <NVIC_SystemLPConfig+0x40>)
 8005dcc:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <NVIC_SystemLPConfig+0x40>)
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	79fb      	ldrb	r3, [r7, #7]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	610b      	str	r3, [r1, #16]
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
  }
}
 8005dd6:	e006      	b.n	8005de6 <NVIC_SystemLPConfig+0x32>
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8005dd8:	4906      	ldr	r1, [pc, #24]	; (8005df4 <NVIC_SystemLPConfig+0x40>)
 8005dda:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <NVIC_SystemLPConfig+0x40>)
 8005ddc:	691a      	ldr	r2, [r3, #16]
 8005dde:	79fb      	ldrb	r3, [r7, #7]
 8005de0:	43db      	mvns	r3, r3
 8005de2:	4013      	ands	r3, r2
 8005de4:	610b      	str	r3, [r1, #16]
}
 8005de6:	bf00      	nop
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	e000ed00 	.word	0xe000ed00

08005df8 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d106      	bne.n	8005e14 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8005e06:	4a09      	ldr	r2, [pc, #36]	; (8005e2c <SysTick_CLKSourceConfig+0x34>)
 8005e08:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <SysTick_CLKSourceConfig+0x34>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f043 0304 	orr.w	r3, r3, #4
 8005e10:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 8005e12:	e005      	b.n	8005e20 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8005e14:	4a05      	ldr	r2, [pc, #20]	; (8005e2c <SysTick_CLKSourceConfig+0x34>)
 8005e16:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <SysTick_CLKSourceConfig+0x34>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f023 0304 	bic.w	r3, r3, #4
 8005e1e:	6013      	str	r3, [r2, #0]
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	e000e010 	.word	0xe000e010

08005e30 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8005e34:	2101      	movs	r1, #1
 8005e36:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005e3a:	f009 fcf3 	bl	800f824 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8005e3e:	2100      	movs	r1, #0
 8005e40:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005e44:	f009 fcee 	bl	800f824 <RCC_APB2PeriphResetCmd>
}
 8005e48:	bf00      	nop
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8005e6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e6e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	791b      	ldrb	r3, [r3, #4]
 8005e74:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4b18      	ldr	r3, [pc, #96]	; (8005ef4 <ADC_Init+0xa8>)
 8005e92:	4013      	ands	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8005e9e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8005ea4:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	795b      	ldrb	r3, [r3, #5]
 8005eaa:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8005eac:	4313      	orrs	r3, r2
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebe:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ec6:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	7d1b      	ldrb	r3, [r3, #20]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	7afb      	ldrb	r3, [r7, #11]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8005ed6:	7afb      	ldrb	r3, [r7, #11]
 8005ed8:	051b      	lsls	r3, r3, #20
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	c0fff7fd 	.word	0xc0fff7fd

08005ef8 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	751a      	strb	r2, [r3, #20]
}
 8005f2a:	bf00      	nop
 8005f2c:	370c      	adds	r7, #12
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b085      	sub	sp, #20
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8005f42:	4b0f      	ldr	r3, [pc, #60]	; (8005f80 <ADC_CommonInit+0x4a>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	4b0e      	ldr	r3, [pc, #56]	; (8005f84 <ADC_CommonInit+0x4e>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8005f58:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8005f5e:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8005f64:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8005f6c:	4a04      	ldr	r2, [pc, #16]	; (8005f80 <ADC_CommonInit+0x4a>)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6053      	str	r3, [r2, #4]
}
 8005f72:	bf00      	nop
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	40012300 	.word	0x40012300
 8005f84:	fffc30e0 	.word	0xfffc30e0

08005f88 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	60da      	str	r2, [r3, #12]
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d006      	beq.n	8005fd4 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f043 0201 	orr.w	r2, r3, #1
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8005fd2:	e005      	b.n	8005fe0 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f023 0201 	bic.w	r2, r3, #1
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	609a      	str	r2, [r3, #8]
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006006:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800600a:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	4313      	orrs	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	605a      	str	r2, [r3, #4]
}
 800601a:	bf00      	nop
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	460b      	mov	r3, r1
 8006030:	807b      	strh	r3, [r7, #2]
 8006032:	4613      	mov	r3, r2
 8006034:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8006036:	887a      	ldrh	r2, [r7, #2]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 800603c:	883a      	ldrh	r2, [r7, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 800604e:	b480      	push	{r7}
 8006050:	b085      	sub	sp, #20
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	460b      	mov	r3, r1
 8006058:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800605a:	2300      	movs	r3, #0
 800605c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 031f 	bic.w	r3, r3, #31
 800606a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	605a      	str	r2, [r3, #4]
}
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	4603      	mov	r3, r0
 800608e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006090:	79fb      	ldrb	r3, [r7, #7]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d006      	beq.n	80060a4 <ADC_TempSensorVrefintCmd+0x1e>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8006096:	4a09      	ldr	r2, [pc, #36]	; (80060bc <ADC_TempSensorVrefintCmd+0x36>)
 8006098:	4b08      	ldr	r3, [pc, #32]	; (80060bc <ADC_TempSensorVrefintCmd+0x36>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80060a0:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
  }
}
 80060a2:	e005      	b.n	80060b0 <ADC_TempSensorVrefintCmd+0x2a>
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 80060a4:	4a05      	ldr	r2, [pc, #20]	; (80060bc <ADC_TempSensorVrefintCmd+0x36>)
 80060a6:	4b05      	ldr	r3, [pc, #20]	; (80060bc <ADC_TempSensorVrefintCmd+0x36>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80060ae:	6053      	str	r3, [r2, #4]
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	40012300 	.word	0x40012300

080060c0 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	4603      	mov	r3, r0
 80060c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d006      	beq.n	80060de <ADC_VBATCmd+0x1e>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 80060d0:	4a09      	ldr	r2, [pc, #36]	; (80060f8 <ADC_VBATCmd+0x38>)
 80060d2:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <ADC_VBATCmd+0x38>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060da:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
  }
}
 80060dc:	e005      	b.n	80060ea <ADC_VBATCmd+0x2a>
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 80060de:	4a06      	ldr	r2, [pc, #24]	; (80060f8 <ADC_VBATCmd+0x38>)
 80060e0:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <ADC_VBATCmd+0x38>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80060e8:	6053      	str	r3, [r2, #4]
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	40012300 	.word	0x40012300

080060fc <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	4608      	mov	r0, r1
 8006106:	4611      	mov	r1, r2
 8006108:	461a      	mov	r2, r3
 800610a:	4603      	mov	r3, r0
 800610c:	70fb      	strb	r3, [r7, #3]
 800610e:	460b      	mov	r3, r1
 8006110:	70bb      	strb	r3, [r7, #2]
 8006112:	4613      	mov	r3, r2
 8006114:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	2300      	movs	r3, #0
 800611c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800611e:	78fb      	ldrb	r3, [r7, #3]
 8006120:	2b09      	cmp	r3, #9
 8006122:	d923      	bls.n	800616c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800612a:	78fb      	ldrb	r3, [r7, #3]
 800612c:	f1a3 020a 	sub.w	r2, r3, #10
 8006130:	4613      	mov	r3, r2
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	4413      	add	r3, r2
 8006136:	2207      	movs	r2, #7
 8006138:	fa02 f303 	lsl.w	r3, r2, r3
 800613c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	43db      	mvns	r3, r3
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4013      	ands	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8006148:	7879      	ldrb	r1, [r7, #1]
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	f1a3 020a 	sub.w	r2, r3, #10
 8006150:	4613      	mov	r3, r2
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	4413      	add	r3, r2
 8006156:	fa01 f303 	lsl.w	r3, r1, r3
 800615a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	60da      	str	r2, [r3, #12]
 800616a:	e01e      	b.n	80061aa <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8006172:	78fa      	ldrb	r2, [r7, #3]
 8006174:	4613      	mov	r3, r2
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	4413      	add	r3, r2
 800617a:	2207      	movs	r2, #7
 800617c:	fa02 f303 	lsl.w	r3, r2, r3
 8006180:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	43db      	mvns	r3, r3
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4013      	ands	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800618c:	7879      	ldrb	r1, [r7, #1]
 800618e:	78fa      	ldrb	r2, [r7, #3]
 8006190:	4613      	mov	r3, r2
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	4413      	add	r3, r2
 8006196:	fa01 f303 	lsl.w	r3, r1, r3
 800619a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80061aa:	78bb      	ldrb	r3, [r7, #2]
 80061ac:	2b06      	cmp	r3, #6
 80061ae:	d821      	bhi.n	80061f4 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80061b6:	78bb      	ldrb	r3, [r7, #2]
 80061b8:	1e5a      	subs	r2, r3, #1
 80061ba:	4613      	mov	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	221f      	movs	r2, #31
 80061c2:	fa02 f303 	lsl.w	r3, r2, r3
 80061c6:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	43db      	mvns	r3, r3
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4013      	ands	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80061d2:	78f9      	ldrb	r1, [r7, #3]
 80061d4:	78bb      	ldrb	r3, [r7, #2]
 80061d6:	1e5a      	subs	r2, r3, #1
 80061d8:	4613      	mov	r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	fa01 f303 	lsl.w	r3, r1, r3
 80061e2:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80061f2:	e047      	b.n	8006284 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80061f4:	78bb      	ldrb	r3, [r7, #2]
 80061f6:	2b0c      	cmp	r3, #12
 80061f8:	d821      	bhi.n	800623e <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8006200:	78bb      	ldrb	r3, [r7, #2]
 8006202:	1fda      	subs	r2, r3, #7
 8006204:	4613      	mov	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	221f      	movs	r2, #31
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	43db      	mvns	r3, r3
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4013      	ands	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800621c:	78f9      	ldrb	r1, [r7, #3]
 800621e:	78bb      	ldrb	r3, [r7, #2]
 8006220:	1fda      	subs	r2, r3, #7
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	fa01 f303 	lsl.w	r3, r1, r3
 800622c:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4313      	orrs	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800623c:	e022      	b.n	8006284 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8006244:	78bb      	ldrb	r3, [r7, #2]
 8006246:	f1a3 020d 	sub.w	r2, r3, #13
 800624a:	4613      	mov	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	221f      	movs	r2, #31
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	43db      	mvns	r3, r3
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4013      	ands	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8006262:	78f9      	ldrb	r1, [r7, #3]
 8006264:	78bb      	ldrb	r3, [r7, #2]
 8006266:	f1a3 020d 	sub.w	r2, r3, #13
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	fa01 f303 	lsl.w	r3, r1, r3
 8006274:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006284:	bf00      	nop
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	609a      	str	r2, [r3, #8]
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80062b8:	2300      	movs	r3, #0
 80062ba:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <ADC_GetSoftwareStartConvStatus+0x1e>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 80062c8:	2301      	movs	r3, #1
 80062ca:	73fb      	strb	r3, [r7, #15]
 80062cc:	e001      	b.n	80062d2 <ADC_GetSoftwareStartConvStatus+0x22>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 80062ce:	2300      	movs	r3, #0
 80062d0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d006      	beq.n	8006300 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
  }
}
 80062fe:	e005      	b.n	800630c <ADC_EOCOnEachRegularChannelCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	609a      	str	r2, [r3, #8]
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d006      	beq.n	8006338 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f043 0202 	orr.w	r2, r3, #2
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
  }
}
 8006336:	e005      	b.n	8006344 <ADC_ContinuousModeCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f023 0202 	bic.w	r2, r3, #2
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	609a      	str	r2, [r3, #8]
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8006360:	2300      	movs	r3, #0
 8006362:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006370:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8006372:	78fb      	ldrb	r3, [r7, #3]
 8006374:	3b01      	subs	r3, #1
 8006376:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	035b      	lsls	r3, r3, #13
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	605a      	str	r2, [r3, #4]
}
 8006388:	bf00      	nop
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d006      	beq.n	80063b4 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
  }
}
 80063b2:	e005      	b.n	80063c0 <ADC_DiscModeCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	605a      	str	r2, [r3, #4]
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d8:	b29b      	uxth	r3, r3
}
 80063da:	4618      	mov	r0, r3
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 80063e6:	b480      	push	{r7}
 80063e8:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 80063ea:	4b03      	ldr	r3, [pc, #12]	; (80063f8 <ADC_GetMultiModeConversionValue+0x12>)
 80063ec:	681b      	ldr	r3, [r3, #0]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	40012308 	.word	0x40012308

080063fc <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	460b      	mov	r3, r1
 8006406:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006408:	78fb      	ldrb	r3, [r7, #3]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d006      	beq.n	800641c <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 800641a:	e005      	b.n	8006428 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	609a      	str	r2, [r3, #8]
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d006      	beq.n	8006454 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
  }
}
 8006452:	e005      	b.n	8006460 <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	609a      	str	r2, [r3, #8]
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	4603      	mov	r3, r0
 8006474:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006476:	79fb      	ldrb	r3, [r7, #7]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d006      	beq.n	800648a <ADC_MultiModeDMARequestAfterLastTransferCmd+0x1e>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 800647c:	4a09      	ldr	r2, [pc, #36]	; (80064a4 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 800647e:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006486:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
  }
}
 8006488:	e005      	b.n	8006496 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 800648a:	4a06      	ldr	r2, [pc, #24]	; (80064a4 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x38>)
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006494:	6053      	str	r3, [r2, #4]
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40012300 	.word	0x40012300

080064a8 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	4608      	mov	r0, r1
 80064b2:	4611      	mov	r1, r2
 80064b4:	461a      	mov	r2, r3
 80064b6:	4603      	mov	r3, r0
 80064b8:	70fb      	strb	r3, [r7, #3]
 80064ba:	460b      	mov	r3, r1
 80064bc:	70bb      	strb	r3, [r7, #2]
 80064be:	4613      	mov	r3, r2
 80064c0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	2300      	movs	r3, #0
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	2b09      	cmp	r3, #9
 80064d2:	d923      	bls.n	800651c <ADC_InjectedChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	f1a3 020a 	sub.w	r2, r3, #10
 80064e0:	4613      	mov	r3, r2
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	4413      	add	r3, r2
 80064e6:	2207      	movs	r2, #7
 80064e8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ec:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	43db      	mvns	r3, r3
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	4013      	ands	r3, r2
 80064f6:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 80064f8:	7879      	ldrb	r1, [r7, #1]
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	f1a3 020a 	sub.w	r2, r3, #10
 8006500:	4613      	mov	r3, r2
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	4413      	add	r3, r2
 8006506:	fa01 f303 	lsl.w	r3, r1, r3
 800650a:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	60da      	str	r2, [r3, #12]
 800651a:	e01e      	b.n	800655a <ADC_InjectedChannelConfig+0xb2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8006522:	78fa      	ldrb	r2, [r7, #3]
 8006524:	4613      	mov	r3, r2
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	4413      	add	r3, r2
 800652a:	2207      	movs	r2, #7
 800652c:	fa02 f303 	lsl.w	r3, r2, r3
 8006530:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	43db      	mvns	r3, r3
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4013      	ands	r3, r2
 800653a:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800653c:	7879      	ldrb	r1, [r7, #1]
 800653e:	78fa      	ldrb	r2, [r7, #3]
 8006540:	4613      	mov	r3, r2
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	4413      	add	r3, r2
 8006546:	fa01 f303 	lsl.w	r3, r1, r3
 800654a:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	4313      	orrs	r3, r2
 8006552:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	0d1b      	lsrs	r3, r3, #20
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	b2db      	uxtb	r3, r3
 800656e:	78ba      	ldrb	r2, [r7, #2]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	b2db      	uxtb	r3, r3
 8006574:	3302      	adds	r3, #2
 8006576:	b2db      	uxtb	r3, r3
 8006578:	461a      	mov	r2, r3
 800657a:	4613      	mov	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	221f      	movs	r2, #31
 8006582:	fa02 f303 	lsl.w	r3, r2, r3
 8006586:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	43db      	mvns	r3, r3
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	4013      	ands	r3, r2
 8006590:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8006592:	78fa      	ldrb	r2, [r7, #3]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	b2db      	uxtb	r3, r3
 8006598:	78b9      	ldrb	r1, [r7, #2]
 800659a:	1acb      	subs	r3, r1, r3
 800659c:	b2db      	uxtb	r3, r3
 800659e:	3302      	adds	r3, #2
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	4619      	mov	r1, r3
 80065a4:	460b      	mov	r3, r1
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	440b      	add	r3, r1
 80065aa:	fa02 f303 	lsl.w	r3, r2, r3
 80065ae:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80065be:	bf00      	nop
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b085      	sub	sp, #20
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	460b      	mov	r3, r1
 80065d4:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 80065da:	2300      	movs	r3, #0
 80065dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80065ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 80065ec:	78fb      	ldrb	r3, [r7, #3]
 80065ee:	3b01      	subs	r3, #1
 80065f0:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	051b      	lsls	r3, r3, #20
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006602:	bf00      	nop
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 800660e:	b480      	push	{r7}
 8006610:	b085      	sub	sp, #20
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
 8006616:	460b      	mov	r3, r1
 8006618:	70fb      	strb	r3, [r7, #3]
 800661a:	4613      	mov	r3, r2
 800661c:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 800661e:	2300      	movs	r3, #0
 8006620:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 8006626:	78fa      	ldrb	r2, [r7, #3]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4413      	add	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	461a      	mov	r2, r3
 8006632:	883b      	ldrh	r3, [r7, #0]
 8006634:	6013      	str	r3, [r2, #0]
}
 8006636:	bf00      	nop
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8006642:	b480      	push	{r7}
 8006644:	b085      	sub	sp, #20
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800664c:	2300      	movs	r3, #0
 800664e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800665c:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	609a      	str	r2, [r3, #8]
}
 800666c:	bf00      	nop
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006682:	2300      	movs	r3, #0
 8006684:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006692:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	609a      	str	r2, [r3, #8]
}
 80066a2:	bf00      	nop
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	609a      	str	r2, [r3, #8]
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b085      	sub	sp, #20
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80066d6:	2300      	movs	r3, #0
 80066d8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <ADC_GetSoftwareStartInjectedConvCmdStatus+0x1e>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 80066e6:	2301      	movs	r3, #1
 80066e8:	73fb      	strb	r3, [r7, #15]
 80066ea:	e001      	b.n	80066f0 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 80066ec:	2300      	movs	r3, #0
 80066ee:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	460b      	mov	r3, r1
 8006708:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d006      	beq.n	800671e <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
  }
}
 800671c:	e005      	b.n	800672a <ADC_AutoInjectedConvCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	605a      	str	r2, [r3, #4]
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	460b      	mov	r3, r1
 8006740:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006742:	78fb      	ldrb	r3, [r7, #3]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d006      	beq.n	8006756 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
  }
}
 8006754:	e005      	b.n	8006762 <ADC_InjectedDiscModeCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	605a      	str	r2, [r3, #4]
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 800676e:	b480      	push	{r7}
 8006770:	b085      	sub	sp, #20
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
 8006776:	460b      	mov	r3, r1
 8006778:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8006782:	78fa      	ldrb	r2, [r7, #3]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4413      	add	r3, r2
 8006788:	3328      	adds	r3, #40	; 0x28
 800678a:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 800679e:	b480      	push	{r7}
 80067a0:	b085      	sub	sp, #20
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	460b      	mov	r3, r1
 80067a8:	807b      	strh	r3, [r7, #2]
 80067aa:	4613      	mov	r3, r2
 80067ac:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 80067b2:	887b      	ldrh	r3, [r7, #2]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 80067b8:	2201      	movs	r2, #1
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	fa02 f303 	lsl.w	r3, r2, r3
 80067c0:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 80067c2:	787b      	ldrb	r3, [r7, #1]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d006      	beq.n	80067d6 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	431a      	orrs	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 80067d4:	e006      	b.n	80067e4 <ADC_ITConfig+0x46>
    ADCx->CR1 &= (~(uint32_t)itmask);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	43db      	mvns	r3, r3
 80067de:	401a      	ands	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	605a      	str	r2, [r3, #4]
}
 80067e4:	bf00      	nop
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 80067fc:	2300      	movs	r3, #0
 80067fe:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	78fb      	ldrb	r3, [r7, #3]
 8006806:	4013      	ands	r3, r2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 800680c:	2301      	movs	r3, #1
 800680e:	73fb      	strb	r3, [r7, #15]
 8006810:	e001      	b.n	8006816 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8006812:	2300      	movs	r3, #0
 8006814:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8006816:	7bfb      	ldrb	r3, [r7, #15]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	43da      	mvns	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	601a      	str	r2, [r3, #0]
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 8006850:	2300      	movs	r3, #0
 8006852:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	613b      	str	r3, [r7, #16]
 8006858:	2300      	movs	r3, #0
 800685a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 800685c:	887b      	ldrh	r3, [r7, #2]
 800685e:	0a1b      	lsrs	r3, r3, #8
 8006860:	b29b      	uxth	r3, r3
 8006862:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	887b      	ldrh	r3, [r7, #2]
 800686a:	b2db      	uxtb	r3, r3
 800686c:	4619      	mov	r1, r3
 800686e:	2301      	movs	r3, #1
 8006870:	408b      	lsls	r3, r1
 8006872:	4013      	ands	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	4013      	ands	r3, r2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d005      	beq.n	800688e <ADC_GetITStatus+0x4a>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <ADC_GetITStatus+0x4a>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8006888:	2301      	movs	r3, #1
 800688a:	75fb      	strb	r3, [r7, #23]
 800688c:	e001      	b.n	8006892 <ADC_GetITStatus+0x4e>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 800688e:	2300      	movs	r3, #0
 8006890:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 8006892:	7dfb      	ldrb	r3, [r7, #23]
}
 8006894:	4618      	mov	r0, r3
 8006896:	371c      	adds	r7, #28
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 80068ac:	2300      	movs	r3, #0
 80068ae:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 80068b0:	887b      	ldrh	r3, [r7, #2]
 80068b2:	0a1b      	lsrs	r3, r3, #8
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
 80068ba:	43da      	mvns	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	601a      	str	r2, [r3, #0]
}                    
 80068c0:	bf00      	nop
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a0e      	ldr	r2, [pc, #56]	; (8006910 <CAN_DeInit+0x44>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d10a      	bne.n	80068f2 <CAN_DeInit+0x26>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 80068dc:	2101      	movs	r1, #1
 80068de:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80068e2:	f008 ff7f 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 80068e6:	2100      	movs	r1, #0
 80068e8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80068ec:	f008 ff7a 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  }
}
 80068f0:	e009      	b.n	8006906 <CAN_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 80068f2:	2101      	movs	r1, #1
 80068f4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80068f8:	f008 ff74 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 80068fc:	2100      	movs	r1, #0
 80068fe:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8006902:	f008 ff6f 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 8006906:	bf00      	nop
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	40006400 	.word	0x40006400

08006914 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 800691e:	2300      	movs	r3, #0
 8006920:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 8006922:	2300      	movs	r3, #0
 8006924:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f023 0202 	bic.w	r2, r3, #2
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f043 0201 	orr.w	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 800693e:	e002      	b.n	8006946 <CAN_Init+0x32>
  {
    wait_ack++;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	3301      	adds	r3, #1
 8006944:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b01      	cmp	r3, #1
 8006950:	d004      	beq.n	800695c <CAN_Init+0x48>
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006958:	4293      	cmp	r3, r2
 800695a:	d1f1      	bne.n	8006940 <CAN_Init+0x2c>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b01      	cmp	r3, #1
 8006966:	d002      	beq.n	800696e <CAN_Init+0x5a>
  {
    InitStatus = CAN_InitStatus_Failed;
 8006968:	2300      	movs	r3, #0
 800696a:	73fb      	strb	r3, [r7, #15]
 800696c:	e09c      	b.n	8006aa8 <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	799b      	ldrb	r3, [r3, #6]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d106      	bne.n	8006984 <CAN_Init+0x70>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	e005      	b.n	8006990 <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	79db      	ldrb	r3, [r3, #7]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d106      	bne.n	80069a6 <CAN_Init+0x92>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	e005      	b.n	80069b2 <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	7a1b      	ldrb	r3, [r3, #8]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d106      	bne.n	80069c8 <CAN_Init+0xb4>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f043 0220 	orr.w	r2, r3, #32
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	e005      	b.n	80069d4 <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f023 0220 	bic.w	r2, r3, #32
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	7a5b      	ldrb	r3, [r3, #9]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d106      	bne.n	80069ea <CAN_Init+0xd6>
    {
      CANx->MCR |= CAN_MCR_NART;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f043 0210 	orr.w	r2, r3, #16
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	e005      	b.n	80069f6 <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f023 0210 	bic.w	r2, r3, #16
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	7a9b      	ldrb	r3, [r3, #10]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d106      	bne.n	8006a0c <CAN_Init+0xf8>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f043 0208 	orr.w	r2, r3, #8
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	e005      	b.n	8006a18 <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f023 0208 	bic.w	r2, r3, #8
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	7adb      	ldrb	r3, [r3, #11]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d106      	bne.n	8006a2e <CAN_Init+0x11a>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f043 0204 	orr.w	r2, r3, #4
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	601a      	str	r2, [r3, #0]
 8006a2c:	e005      	b.n	8006a3a <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f023 0204 	bic.w	r2, r3, #4
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	789b      	ldrb	r3, [r3, #2]
 8006a3e:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	78db      	ldrb	r3, [r3, #3]
 8006a44:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8006a46:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	791b      	ldrb	r3, [r3, #4]
 8006a4c:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8006a4e:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	795b      	ldrb	r3, [r3, #5]
 8006a54:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8006a56:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8006a5e:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f023 0201 	bic.w	r2, r3, #1
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8006a74:	e002      	b.n	8006a7c <CAN_Init+0x168>
   {
     wait_ack++;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d104      	bne.n	8006a92 <CAN_Init+0x17e>
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d1f1      	bne.n	8006a76 <CAN_Init+0x162>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d102      	bne.n	8006aa4 <CAN_Init+0x190>
    {
      InitStatus = CAN_InitStatus_Failed;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]
 8006aa2:	e001      	b.n	8006aa8 <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b085      	sub	sp, #20
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	7a9b      	ldrb	r3, [r3, #10]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	2301      	movs	r3, #1
 8006aca:	4093      	lsls	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8006ace:	4a56      	ldr	r2, [pc, #344]	; (8006c28 <CAN_FilterInit+0x172>)
 8006ad0:	4b55      	ldr	r3, [pc, #340]	; (8006c28 <CAN_FilterInit+0x172>)
 8006ad2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ad6:	f043 0301 	orr.w	r3, r3, #1
 8006ada:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8006ade:	4952      	ldr	r1, [pc, #328]	; (8006c28 <CAN_FilterInit+0x172>)
 8006ae0:	4b51      	ldr	r3, [pc, #324]	; (8006c28 <CAN_FilterInit+0x172>)
 8006ae2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	43db      	mvns	r3, r3
 8006aea:	4013      	ands	r3, r2
 8006aec:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	7b1b      	ldrb	r3, [r3, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d125      	bne.n	8006b44 <CAN_FilterInit+0x8e>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8006af8:	494b      	ldr	r1, [pc, #300]	; (8006c28 <CAN_FilterInit+0x172>)
 8006afa:	4b4b      	ldr	r3, [pc, #300]	; (8006c28 <CAN_FilterInit+0x172>)
 8006afc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	43db      	mvns	r3, r3
 8006b04:	4013      	ands	r3, r2
 8006b06:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8006b0a:	4947      	ldr	r1, [pc, #284]	; (8006c28 <CAN_FilterInit+0x172>)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	7a9b      	ldrb	r3, [r3, #10]
 8006b10:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	88db      	ldrh	r3, [r3, #6]
 8006b16:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	8852      	ldrh	r2, [r2, #2]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8006b1c:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8006b1e:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8006b22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8006b26:	4940      	ldr	r1, [pc, #256]	; (8006c28 <CAN_FilterInit+0x172>)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	7a9b      	ldrb	r3, [r3, #10]
 8006b2c:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	889b      	ldrh	r3, [r3, #4]
 8006b32:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	8812      	ldrh	r2, [r2, #0]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8006b38:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8006b3a:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8006b3e:	00db      	lsls	r3, r3, #3
 8006b40:	440b      	add	r3, r1
 8006b42:	605a      	str	r2, [r3, #4]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	7b1b      	ldrb	r3, [r3, #12]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d124      	bne.n	8006b96 <CAN_FilterInit+0xe0>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8006b4c:	4936      	ldr	r1, [pc, #216]	; (8006c28 <CAN_FilterInit+0x172>)
 8006b4e:	4b36      	ldr	r3, [pc, #216]	; (8006c28 <CAN_FilterInit+0x172>)
 8006b50:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8006b5c:	4932      	ldr	r1, [pc, #200]	; (8006c28 <CAN_FilterInit+0x172>)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	7a9b      	ldrb	r3, [r3, #10]
 8006b62:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	8852      	ldrh	r2, [r2, #2]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8006b6e:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8006b70:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8006b74:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8006b78:	492b      	ldr	r1, [pc, #172]	; (8006c28 <CAN_FilterInit+0x172>)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	7a9b      	ldrb	r3, [r3, #10]
 8006b7e:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	889b      	ldrh	r3, [r3, #4]
 8006b84:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	88d2      	ldrh	r2, [r2, #6]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8006b8a:	431a      	orrs	r2, r3
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8006b8c:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	440b      	add	r3, r1
 8006b94:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	7adb      	ldrb	r3, [r3, #11]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <CAN_FilterInit+0xfc>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8006b9e:	4922      	ldr	r1, [pc, #136]	; (8006c28 <CAN_FilterInit+0x172>)
 8006ba0:	4b21      	ldr	r3, [pc, #132]	; (8006c28 <CAN_FilterInit+0x172>)
 8006ba2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	4013      	ands	r3, r2
 8006bac:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 8006bb0:	e007      	b.n	8006bc2 <CAN_FilterInit+0x10c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8006bb2:	491d      	ldr	r1, [pc, #116]	; (8006c28 <CAN_FilterInit+0x172>)
 8006bb4:	4b1c      	ldr	r3, [pc, #112]	; (8006c28 <CAN_FilterInit+0x172>)
 8006bb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	891b      	ldrh	r3, [r3, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d108      	bne.n	8006bdc <CAN_FilterInit+0x126>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8006bca:	4917      	ldr	r1, [pc, #92]	; (8006c28 <CAN_FilterInit+0x172>)
 8006bcc:	4b16      	ldr	r3, [pc, #88]	; (8006c28 <CAN_FilterInit+0x172>)
 8006bce:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	43db      	mvns	r3, r3
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	891b      	ldrh	r3, [r3, #8]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d107      	bne.n	8006bf4 <CAN_FilterInit+0x13e>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8006be4:	4910      	ldr	r1, [pc, #64]	; (8006c28 <CAN_FilterInit+0x172>)
 8006be6:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <CAN_FilterInit+0x172>)
 8006be8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	7b5b      	ldrb	r3, [r3, #13]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d107      	bne.n	8006c0c <CAN_FilterInit+0x156>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8006bfc:	490a      	ldr	r1, [pc, #40]	; (8006c28 <CAN_FilterInit+0x172>)
 8006bfe:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <CAN_FilterInit+0x172>)
 8006c00:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8006c0c:	4a06      	ldr	r2, [pc, #24]	; (8006c28 <CAN_FilterInit+0x172>)
 8006c0e:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <CAN_FilterInit+0x172>)
 8006c10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c14:	f023 0301 	bic.w	r3, r3, #1
 8006c18:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8006c1c:	bf00      	nop
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	40006400 	.word	0x40006400

08006c2c <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2203      	movs	r2, #3
 8006c68:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	801a      	strh	r2, [r3, #0]
}
 8006c76:	bf00      	nop
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	4603      	mov	r3, r0
 8006c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8006c8c:	4a14      	ldr	r2, [pc, #80]	; (8006ce0 <CAN_SlaveStartBank+0x5e>)
 8006c8e:	4b14      	ldr	r3, [pc, #80]	; (8006ce0 <CAN_SlaveStartBank+0x5e>)
 8006c90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c94:	f043 0301 	orr.w	r3, r3, #1
 8006c98:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 8006c9c:	4a10      	ldr	r2, [pc, #64]	; (8006ce0 <CAN_SlaveStartBank+0x5e>)
 8006c9e:	4b10      	ldr	r3, [pc, #64]	; (8006ce0 <CAN_SlaveStartBank+0x5e>)
 8006ca0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ca4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006ca8:	f023 030e 	bic.w	r3, r3, #14
 8006cac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 8006cb0:	490b      	ldr	r1, [pc, #44]	; (8006ce0 <CAN_SlaveStartBank+0x5e>)
 8006cb2:	4b0b      	ldr	r3, [pc, #44]	; (8006ce0 <CAN_SlaveStartBank+0x5e>)
 8006cb4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8006cc2:	4a07      	ldr	r2, [pc, #28]	; (8006ce0 <CAN_SlaveStartBank+0x5e>)
 8006cc4:	4b06      	ldr	r3, [pc, #24]	; (8006ce0 <CAN_SlaveStartBank+0x5e>)
 8006cc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006cca:	f023 0301 	bic.w	r3, r3, #1
 8006cce:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8006cd2:	bf00      	nop
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	40006400 	.word	0x40006400

08006ce4 <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d006      	beq.n	8006d04 <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
  }
}
 8006d02:	e005      	b.n	8006d10 <CAN_DBGFreeze+0x2c>
    CANx->MCR &= ~MCR_DBF;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	601a      	str	r2, [r3, #0]
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006d28:	78fb      	ldrb	r3, [r7, #3]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d01e      	beq.n	8006d6c <CAN_TTComModeCmd+0x50>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8006d40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8006d50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8006d60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
  }
}
 8006d6a:	e01d      	b.n	8006da8 <CAN_TTComModeCmd+0x8c>
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8006d7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8006d8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8006d9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006dca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006dce:	d102      	bne.n	8006dd6 <CAN_Transmit+0x22>
  {
    transmit_mailbox = 0;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	73fb      	strb	r3, [r7, #15]
 8006dd4:	e015      	b.n	8006e02 <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006de2:	d102      	bne.n	8006dea <CAN_Transmit+0x36>
  {
    transmit_mailbox = 1;
 8006de4:	2301      	movs	r3, #1
 8006de6:	73fb      	strb	r3, [r7, #15]
 8006de8:	e00b      	b.n	8006e02 <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006df6:	d102      	bne.n	8006dfe <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 2;
 8006df8:	2302      	movs	r3, #2
 8006dfa:	73fb      	strb	r3, [r7, #15]
 8006dfc:	e001      	b.n	8006e02 <CAN_Transmit+0x4e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8006dfe:	2304      	movs	r3, #4
 8006e00:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	f000 809c 	beq.w	8006f42 <CAN_Transmit+0x18e>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	7bfa      	ldrb	r2, [r7, #15]
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	3218      	adds	r2, #24
 8006e12:	0112      	lsls	r2, r2, #4
 8006e14:	440a      	add	r2, r1
 8006e16:	6812      	ldr	r2, [r2, #0]
 8006e18:	f002 0201 	and.w	r2, r2, #1
 8006e1c:	6879      	ldr	r1, [r7, #4]
 8006e1e:	3318      	adds	r3, #24
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	440b      	add	r3, r1
 8006e24:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	7a1b      	ldrb	r3, [r3, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d113      	bne.n	8006e56 <CAN_Transmit+0xa2>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8006e2e:	7bfb      	ldrb	r3, [r7, #15]
 8006e30:	7bfa      	ldrb	r2, [r7, #15]
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	3218      	adds	r2, #24
 8006e36:	0112      	lsls	r2, r2, #4
 8006e38:	440a      	add	r2, r1
 8006e3a:	6811      	ldr	r1, [r2, #0]
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	6812      	ldr	r2, [r2, #0]
 8006e40:	0552      	lsls	r2, r2, #21
                                                  TxMessage->RTR);
 8006e42:	6838      	ldr	r0, [r7, #0]
 8006e44:	7a40      	ldrb	r0, [r0, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8006e46:	4302      	orrs	r2, r0
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	6879      	ldr	r1, [r7, #4]
 8006e4c:	3318      	adds	r3, #24
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	440b      	add	r3, r1
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	e015      	b.n	8006e82 <CAN_Transmit+0xce>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	7bfa      	ldrb	r2, [r7, #15]
 8006e5a:	6879      	ldr	r1, [r7, #4]
 8006e5c:	3218      	adds	r2, #24
 8006e5e:	0112      	lsls	r2, r2, #4
 8006e60:	440a      	add	r2, r1
 8006e62:	6811      	ldr	r1, [r2, #0]
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	6852      	ldr	r2, [r2, #4]
 8006e68:	00d2      	lsls	r2, r2, #3
                                                  TxMessage->IDE | \
 8006e6a:	6838      	ldr	r0, [r7, #0]
 8006e6c:	7a00      	ldrb	r0, [r0, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8006e6e:	4302      	orrs	r2, r0
                                                  TxMessage->RTR);
 8006e70:	6838      	ldr	r0, [r7, #0]
 8006e72:	7a40      	ldrb	r0, [r0, #9]
                                                  TxMessage->IDE | \
 8006e74:	4302      	orrs	r2, r0
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8006e76:	430a      	orrs	r2, r1
 8006e78:	6879      	ldr	r1, [r7, #4]
 8006e7a:	3318      	adds	r3, #24
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	440b      	add	r3, r1
 8006e80:	601a      	str	r2, [r3, #0]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	7a9b      	ldrb	r3, [r3, #10]
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	7bfa      	ldrb	r2, [r7, #15]
 8006e94:	6879      	ldr	r1, [r7, #4]
 8006e96:	3218      	adds	r2, #24
 8006e98:	0112      	lsls	r2, r2, #4
 8006e9a:	440a      	add	r2, r1
 8006e9c:	3204      	adds	r2, #4
 8006e9e:	6812      	ldr	r2, [r2, #0]
 8006ea0:	f022 020f 	bic.w	r2, r2, #15
 8006ea4:	6879      	ldr	r1, [r7, #4]
 8006ea6:	3318      	adds	r3, #24
 8006ea8:	011b      	lsls	r3, r3, #4
 8006eaa:	440b      	add	r3, r1
 8006eac:	3304      	adds	r3, #4
 8006eae:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	7bfa      	ldrb	r2, [r7, #15]
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	3218      	adds	r2, #24
 8006eb8:	0112      	lsls	r2, r2, #4
 8006eba:	440a      	add	r2, r1
 8006ebc:	3204      	adds	r2, #4
 8006ebe:	6812      	ldr	r2, [r2, #0]
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	7a89      	ldrb	r1, [r1, #10]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	3318      	adds	r3, #24
 8006eca:	011b      	lsls	r3, r3, #4
 8006ecc:	440b      	add	r3, r1
 8006ece:	3304      	adds	r3, #4
 8006ed0:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	7b92      	ldrb	r2, [r2, #14]
 8006ed8:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	7b52      	ldrb	r2, [r2, #13]
 8006ede:	0412      	lsls	r2, r2, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8006ee0:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8006ee2:	683a      	ldr	r2, [r7, #0]
 8006ee4:	7b12      	ldrb	r2, [r2, #12]
 8006ee6:	0212      	lsls	r2, r2, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8006ee8:	430a      	orrs	r2, r1
                                             ((uint32_t)TxMessage->Data[0]));
 8006eea:	6839      	ldr	r1, [r7, #0]
 8006eec:	7ac9      	ldrb	r1, [r1, #11]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8006eee:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8006ef0:	6879      	ldr	r1, [r7, #4]
 8006ef2:	011b      	lsls	r3, r3, #4
 8006ef4:	440b      	add	r3, r1
 8006ef6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006efa:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	7c92      	ldrb	r2, [r2, #18]
 8006f02:	0611      	lsls	r1, r2, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	7c52      	ldrb	r2, [r2, #17]
 8006f08:	0412      	lsls	r2, r2, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8006f0a:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	7c12      	ldrb	r2, [r2, #16]
 8006f10:	0212      	lsls	r2, r2, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8006f12:	430a      	orrs	r2, r1
                                             ((uint32_t)TxMessage->Data[4]));
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	7bc9      	ldrb	r1, [r1, #15]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8006f18:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8006f1a:	6879      	ldr	r1, [r7, #4]
 8006f1c:	011b      	lsls	r3, r3, #4
 8006f1e:	440b      	add	r3, r1
 8006f20:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006f24:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
 8006f28:	7bfa      	ldrb	r2, [r7, #15]
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	3218      	adds	r2, #24
 8006f2e:	0112      	lsls	r2, r2, #4
 8006f30:	440a      	add	r2, r1
 8006f32:	6812      	ldr	r2, [r2, #0]
 8006f34:	f042 0201 	orr.w	r2, r2, #1
 8006f38:	6879      	ldr	r1, [r7, #4]
 8006f3a:	3318      	adds	r3, #24
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	440b      	add	r3, r1
 8006f40:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d009      	beq.n	8006f7a <CAN_TransmitStatus+0x2a>
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d00d      	beq.n	8006f86 <CAN_TransmitStatus+0x36>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d111      	bne.n	8006f92 <CAN_TransmitStatus+0x42>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689a      	ldr	r2, [r3, #8]
 8006f72:	4b26      	ldr	r3, [pc, #152]	; (800700c <CAN_TransmitStatus+0xbc>)
 8006f74:	4013      	ands	r3, r2
 8006f76:	60fb      	str	r3, [r7, #12]
      break;
 8006f78:	e00e      	b.n	8006f98 <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689a      	ldr	r2, [r3, #8]
 8006f7e:	4b24      	ldr	r3, [pc, #144]	; (8007010 <CAN_TransmitStatus+0xc0>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]
      break;
 8006f84:	e008      	b.n	8006f98 <CAN_TransmitStatus+0x48>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	4b22      	ldr	r3, [pc, #136]	; (8007014 <CAN_TransmitStatus+0xc4>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
      break;
 8006f90:	e002      	b.n	8006f98 <CAN_TransmitStatus+0x48>
    default:
      state = CAN_TxStatus_Failed;
 8006f92:	2300      	movs	r3, #0
 8006f94:	60fb      	str	r3, [r7, #12]
      break;
 8006f96:	bf00      	nop
  }
  switch (state)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4a1f      	ldr	r2, [pc, #124]	; (8007018 <CAN_TransmitStatus+0xc8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d01b      	beq.n	8006fd8 <CAN_TransmitStatus+0x88>
 8006fa0:	4a1d      	ldr	r2, [pc, #116]	; (8007018 <CAN_TransmitStatus+0xc8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d808      	bhi.n	8006fb8 <CAN_TransmitStatus+0x68>
 8006fa6:	4a1d      	ldr	r2, [pc, #116]	; (800701c <CAN_TransmitStatus+0xcc>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d012      	beq.n	8006fd2 <CAN_TransmitStatus+0x82>
 8006fac:	4a17      	ldr	r2, [pc, #92]	; (800700c <CAN_TransmitStatus+0xbc>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d018      	beq.n	8006fe4 <CAN_TransmitStatus+0x94>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00a      	beq.n	8006fcc <CAN_TransmitStatus+0x7c>
 8006fb6:	e01e      	b.n	8006ff6 <CAN_TransmitStatus+0xa6>
 8006fb8:	4a19      	ldr	r2, [pc, #100]	; (8007020 <CAN_TransmitStatus+0xd0>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00f      	beq.n	8006fde <CAN_TransmitStatus+0x8e>
 8006fbe:	4a15      	ldr	r2, [pc, #84]	; (8007014 <CAN_TransmitStatus+0xc4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d015      	beq.n	8006ff0 <CAN_TransmitStatus+0xa0>
 8006fc4:	4a12      	ldr	r2, [pc, #72]	; (8007010 <CAN_TransmitStatus+0xc0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d00f      	beq.n	8006fea <CAN_TransmitStatus+0x9a>
 8006fca:	e014      	b.n	8006ff6 <CAN_TransmitStatus+0xa6>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	60fb      	str	r3, [r7, #12]
      break;
 8006fd0:	e014      	b.n	8006ffc <CAN_TransmitStatus+0xac>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]
      break;
 8006fd6:	e011      	b.n	8006ffc <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	60fb      	str	r3, [r7, #12]
      break;
 8006fdc:	e00e      	b.n	8006ffc <CAN_TransmitStatus+0xac>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60fb      	str	r3, [r7, #12]
      break;
 8006fe2:	e00b      	b.n	8006ffc <CAN_TransmitStatus+0xac>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]
      break;
 8006fe8:	e008      	b.n	8006ffc <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 8006fea:	2301      	movs	r3, #1
 8006fec:	60fb      	str	r3, [r7, #12]
      break;
 8006fee:	e005      	b.n	8006ffc <CAN_TransmitStatus+0xac>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	60fb      	str	r3, [r7, #12]
      break;
 8006ff4:	e002      	b.n	8006ffc <CAN_TransmitStatus+0xac>
    default: state = CAN_TxStatus_Failed;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60fb      	str	r3, [r7, #12]
      break;
 8006ffa:	bf00      	nop
  }
  return (uint8_t) state;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	b2db      	uxtb	r3, r3
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr
 800700c:	04000003 	.word	0x04000003
 8007010:	08000300 	.word	0x08000300
 8007014:	10030000 	.word	0x10030000
 8007018:	08000100 	.word	0x08000100
 800701c:	04000001 	.word	0x04000001
 8007020:	10010000 	.word	0x10010000

08007024 <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d00b      	beq.n	800704e <CAN_CancelTransmit+0x2a>
 8007036:	2b02      	cmp	r3, #2
 8007038:	d010      	beq.n	800705c <CAN_CancelTransmit+0x38>
 800703a:	2b00      	cmp	r3, #0
 800703c:	d000      	beq.n	8007040 <CAN_CancelTransmit+0x1c>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
      break;
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
      break;
    default:
      break;
 800703e:	e014      	b.n	800706a <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	609a      	str	r2, [r3, #8]
      break;
 800704c:	e00d      	b.n	800706a <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	609a      	str	r2, [r3, #8]
      break;
 800705a:	e006      	b.n	800706a <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	609a      	str	r2, [r3, #8]
      break;
 8007068:	bf00      	nop
  }
}
 800706a:	bf00      	nop
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8007076:	b480      	push	{r7}
 8007078:	b085      	sub	sp, #20
 800707a:	af00      	add	r7, sp, #0
 800707c:	60f8      	str	r0, [r7, #12]
 800707e:	460b      	mov	r3, r1
 8007080:	607a      	str	r2, [r7, #4]
 8007082:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8007084:	7afb      	ldrb	r3, [r7, #11]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	331b      	adds	r3, #27
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	4413      	add	r3, r2
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	b2db      	uxtb	r3, r3
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	b2da      	uxtb	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	7a1b      	ldrb	r3, [r3, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10b      	bne.n	80070bc <CAN_Receive+0x46>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	331b      	adds	r3, #27
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	4413      	add	r3, r2
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	0d5b      	lsrs	r3, r3, #21
 80070b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	e00a      	b.n	80070d2 <CAN_Receive+0x5c>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 80070bc:	7afb      	ldrb	r3, [r7, #11]
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	331b      	adds	r3, #27
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	4413      	add	r3, r2
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	08db      	lsrs	r3, r3, #3
 80070ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80070d2:	7afb      	ldrb	r3, [r7, #11]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	331b      	adds	r3, #27
 80070d8:	011b      	lsls	r3, r3, #4
 80070da:	4413      	add	r3, r2
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 80070ea:	7afb      	ldrb	r3, [r7, #11]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	331b      	adds	r3, #27
 80070f0:	011b      	lsls	r3, r3, #4
 80070f2:	4413      	add	r3, r2
 80070f4:	3304      	adds	r3, #4
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	f003 030f 	and.w	r3, r3, #15
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8007104:	7afb      	ldrb	r3, [r7, #11]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	331b      	adds	r3, #27
 800710a:	011b      	lsls	r3, r3, #4
 800710c:	4413      	add	r3, r2
 800710e:	3304      	adds	r3, #4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	0a1b      	lsrs	r3, r3, #8
 8007114:	b2da      	uxtb	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 800711a:	7afb      	ldrb	r3, [r7, #11]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	011b      	lsls	r3, r3, #4
 8007120:	4413      	add	r3, r2
 8007122:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	b2da      	uxtb	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 800712e:	7afb      	ldrb	r3, [r7, #11]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	4413      	add	r3, r2
 8007136:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	0a1b      	lsrs	r3, r3, #8
 800713e:	b2da      	uxtb	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8007144:	7afb      	ldrb	r3, [r7, #11]
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	011b      	lsls	r3, r3, #4
 800714a:	4413      	add	r3, r2
 800714c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	0c1b      	lsrs	r3, r3, #16
 8007154:	b2da      	uxtb	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 800715a:	7afb      	ldrb	r3, [r7, #11]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	011b      	lsls	r3, r3, #4
 8007160:	4413      	add	r3, r2
 8007162:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	0e1b      	lsrs	r3, r3, #24
 800716a:	b2da      	uxtb	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8007170:	7afb      	ldrb	r3, [r7, #11]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	011b      	lsls	r3, r3, #4
 8007176:	4413      	add	r3, r2
 8007178:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	b2da      	uxtb	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8007184:	7afb      	ldrb	r3, [r7, #11]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	011b      	lsls	r3, r3, #4
 800718a:	4413      	add	r3, r2
 800718c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	0a1b      	lsrs	r3, r3, #8
 8007194:	b2da      	uxtb	r2, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 800719a:	7afb      	ldrb	r3, [r7, #11]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	0c1b      	lsrs	r3, r3, #16
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 80071b0:	7afb      	ldrb	r3, [r7, #11]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	0e1b      	lsrs	r3, r3, #24
 80071c0:	b2da      	uxtb	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 80071c6:	7afb      	ldrb	r3, [r7, #11]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d106      	bne.n	80071da <CAN_Receive+0x164>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f043 0220 	orr.w	r2, r3, #32
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 80071d8:	e005      	b.n	80071e6 <CAN_Receive+0x170>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f043 0220 	orr.w	r2, r3, #32
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	611a      	str	r2, [r3, #16]
}
 80071e6:	bf00      	nop
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	460b      	mov	r3, r1
 80071fc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 80071fe:	78fb      	ldrb	r3, [r7, #3]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d106      	bne.n	8007212 <CAN_FIFORelease+0x20>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f043 0220 	orr.w	r2, r3, #32
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 8007210:	e005      	b.n	800721e <CAN_FIFORelease+0x2c>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f043 0220 	orr.w	r2, r3, #32
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	611a      	str	r2, [r3, #16]
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 800722a:	b480      	push	{r7}
 800722c:	b085      	sub	sp, #20
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	460b      	mov	r3, r1
 8007234:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 8007236:	2300      	movs	r3, #0
 8007238:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 800723a:	78fb      	ldrb	r3, [r7, #3]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d106      	bne.n	800724e <CAN_MessagePending+0x24>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	b2db      	uxtb	r3, r3
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	73fb      	strb	r3, [r7, #15]
 800724c:	e00b      	b.n	8007266 <CAN_MessagePending+0x3c>
  }
  else if (FIFONumber == CAN_FIFO1)
 800724e:	78fb      	ldrb	r3, [r7, #3]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d106      	bne.n	8007262 <CAN_MessagePending+0x38>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	b2db      	uxtb	r3, r3
 800725a:	f003 0303 	and.w	r3, r3, #3
 800725e:	73fb      	strb	r3, [r7, #15]
 8007260:	e001      	b.n	8007266 <CAN_MessagePending+0x3c>
  }
  else
  {
    message_pending = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 8007266:	7bfb      	ldrb	r3, [r7, #15]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	70fb      	strb	r3, [r7, #3]
  uint8_t status = CAN_ModeStatus_Failed;
 8007280:	2300      	movs	r3, #0
 8007282:	73fb      	strb	r3, [r7, #15]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
 8007284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007288:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d120      	bne.n	80072d2 <CAN_OperatingModeRequest+0x5e>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f023 0303 	bic.w	r3, r3, #3
 8007298:	f043 0201 	orr.w	r2, r3, #1
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80072a0:	e002      	b.n	80072a8 <CAN_OperatingModeRequest+0x34>
    {
      timeout--;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	3b01      	subs	r3, #1
 80072a6:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f003 0303 	and.w	r3, r3, #3
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d002      	beq.n	80072ba <CAN_OperatingModeRequest+0x46>
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1f3      	bne.n	80072a2 <CAN_OperatingModeRequest+0x2e>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d002      	beq.n	80072cc <CAN_OperatingModeRequest+0x58>
    {
      status = CAN_ModeStatus_Failed;
 80072c6:	2300      	movs	r3, #0
 80072c8:	73fb      	strb	r3, [r7, #15]
 80072ca:	e04a      	b.n	8007362 <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 80072cc:	2301      	movs	r3, #1
 80072ce:	73fb      	strb	r3, [r7, #15]
 80072d0:	e047      	b.n	8007362 <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 80072d2:	78fb      	ldrb	r3, [r7, #3]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d11e      	bne.n	8007316 <CAN_OperatingModeRequest+0xa2>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f023 0203 	bic.w	r2, r3, #3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 80072e4:	e002      	b.n	80072ec <CAN_OperatingModeRequest+0x78>
    {
      timeout--;
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	3b01      	subs	r3, #1
 80072ea:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f003 0303 	and.w	r3, r3, #3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <CAN_OperatingModeRequest+0x8a>
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1f3      	bne.n	80072e6 <CAN_OperatingModeRequest+0x72>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <CAN_OperatingModeRequest+0x9c>
    {
      status = CAN_ModeStatus_Failed;
 800730a:	2300      	movs	r3, #0
 800730c:	73fb      	strb	r3, [r7, #15]
 800730e:	e028      	b.n	8007362 <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8007310:	2301      	movs	r3, #1
 8007312:	73fb      	strb	r3, [r7, #15]
 8007314:	e025      	b.n	8007362 <CAN_OperatingModeRequest+0xee>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 8007316:	78fb      	ldrb	r3, [r7, #3]
 8007318:	2b02      	cmp	r3, #2
 800731a:	d120      	bne.n	800735e <CAN_OperatingModeRequest+0xea>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f023 0303 	bic.w	r3, r3, #3
 8007324:	f043 0202 	orr.w	r2, r3, #2
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 800732c:	e002      	b.n	8007334 <CAN_OperatingModeRequest+0xc0>
    {
      timeout--;
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	3b01      	subs	r3, #1
 8007332:	60bb      	str	r3, [r7, #8]
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f003 0303 	and.w	r3, r3, #3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d002      	beq.n	8007346 <CAN_OperatingModeRequest+0xd2>
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f3      	bne.n	800732e <CAN_OperatingModeRequest+0xba>
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f003 0303 	and.w	r3, r3, #3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d002      	beq.n	8007358 <CAN_OperatingModeRequest+0xe4>
    {
      status = CAN_ModeStatus_Failed;
 8007352:	2300      	movs	r3, #0
 8007354:	73fb      	strb	r3, [r7, #15]
 8007356:	e004      	b.n	8007362 <CAN_OperatingModeRequest+0xee>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8007358:	2301      	movs	r3, #1
 800735a:	73fb      	strb	r3, [r7, #15]
 800735c:	e001      	b.n	8007362 <CAN_OperatingModeRequest+0xee>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 800735e:	2300      	movs	r3, #0
 8007360:	73fb      	strb	r3, [r7, #15]
  }

  return  (uint8_t) status;
 8007362:	7bfb      	ldrb	r3, [r7, #15]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
 8007378:	2300      	movs	r3, #0
 800737a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f023 0303 	bic.w	r3, r3, #3
 8007384:	f043 0202 	orr.w	r2, r3, #2
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d101      	bne.n	800739c <CAN_Sleep+0x2c>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
 8007398:	2301      	movs	r3, #1
 800739a:	73fb      	strb	r3, [r7, #15]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 800739c:	7bfb      	ldrb	r3, [r7, #15]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b085      	sub	sp, #20
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
 80073b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80073b6:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 80073b8:	2300      	movs	r3, #0
 80073ba:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f023 0202 	bic.w	r2, r3, #2
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 80073c8:	e002      	b.n	80073d0 <CAN_WakeUp+0x26>
  {
   wait_slak--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	60fb      	str	r3, [r7, #12]
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d102      	bne.n	80073e2 <CAN_WakeUp+0x38>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1f3      	bne.n	80073ca <CAN_WakeUp+0x20>
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f003 0302 	and.w	r3, r3, #2
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d001      	beq.n	80073f2 <CAN_WakeUp+0x48>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
 80073ee:	2301      	movs	r3, #1
 80073f0:	72fb      	strb	r3, [r7, #11]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 80073f2:	7afb      	ldrb	r3, [r7, #11]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
 8007408:	2300      	movs	r3, #0
 800740a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007416:	73fb      	strb	r3, [r7, #15]
  
  /* Return the error code*/
  return errorcode;
 8007418:	7bfb      	ldrb	r3, [r7, #15]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
 8007426:	b480      	push	{r7}
 8007428:	b085      	sub	sp, #20
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 800742e:	2300      	movs	r3, #0
 8007430:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	0e1b      	lsrs	r3, r3, #24
 8007438:	73fb      	strb	r3, [r7, #15]
  
  /* Return the Receive Error Counter*/
  return counter;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8007450:	2300      	movs	r3, #0
 8007452:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	0c1b      	lsrs	r3, r3, #16
 800745a:	73fb      	strb	r3, [r7, #15]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
 800745c:	7bfb      	ldrb	r3, [r7, #15]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 800746a:	b480      	push	{r7}
 800746c:	b085      	sub	sp, #20
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	4613      	mov	r3, r2
 8007476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007478:	79fb      	ldrb	r3, [r7, #7]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d006      	beq.n	800748c <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	695a      	ldr	r2, [r3, #20]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	431a      	orrs	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
 800748a:	e006      	b.n	800749a <CAN_ITConfig+0x30>
    CANx->IER &= ~CAN_IT;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	695a      	ldr	r2, [r3, #20]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	43db      	mvns	r3, r3
 8007494:	401a      	ands	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	615a      	str	r2, [r3, #20]
}
 800749a:	bf00      	nop
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b085      	sub	sp, #20
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80074b0:	2300      	movs	r3, #0
 80074b2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00d      	beq.n	80074da <CAN_GetFlagStatus+0x34>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	699a      	ldr	r2, [r3, #24]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	4013      	ands	r3, r2
 80074c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <CAN_GetFlagStatus+0x2e>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80074ce:	2301      	movs	r3, #1
 80074d0:	73fb      	strb	r3, [r7, #15]
 80074d2:	e048      	b.n	8007566 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80074d4:	2300      	movs	r3, #0
 80074d6:	73fb      	strb	r3, [r7, #15]
 80074d8:	e045      	b.n	8007566 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00d      	beq.n	8007500 <CAN_GetFlagStatus+0x5a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	4013      	ands	r3, r2
 80074ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <CAN_GetFlagStatus+0x54>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80074f4:	2301      	movs	r3, #1
 80074f6:	73fb      	strb	r3, [r7, #15]
 80074f8:	e035      	b.n	8007566 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80074fa:	2300      	movs	r3, #0
 80074fc:	73fb      	strb	r3, [r7, #15]
 80074fe:	e032      	b.n	8007566 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00d      	beq.n	8007526 <CAN_GetFlagStatus+0x80>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689a      	ldr	r2, [r3, #8]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	4013      	ands	r3, r2
 8007512:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <CAN_GetFlagStatus+0x7a>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800751a:	2301      	movs	r3, #1
 800751c:	73fb      	strb	r3, [r7, #15]
 800751e:	e022      	b.n	8007566 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8007520:	2300      	movs	r3, #0
 8007522:	73fb      	strb	r3, [r7, #15]
 8007524:	e01f      	b.n	8007566 <CAN_GetFlagStatus+0xc0>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00d      	beq.n	800754c <CAN_GetFlagStatus+0xa6>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68da      	ldr	r2, [r3, #12]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	4013      	ands	r3, r2
 8007538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <CAN_GetFlagStatus+0xa0>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8007540:	2301      	movs	r3, #1
 8007542:	73fb      	strb	r3, [r7, #15]
 8007544:	e00f      	b.n	8007566 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8007546:	2300      	movs	r3, #0
 8007548:	73fb      	strb	r3, [r7, #15]
 800754a:	e00c      	b.n	8007566 <CAN_GetFlagStatus+0xc0>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	691a      	ldr	r2, [r3, #16]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	4013      	ands	r3, r2
 8007554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <CAN_GetFlagStatus+0xbc>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800755c:	2301      	movs	r3, #1
 800755e:	73fb      	strb	r3, [r7, #15]
 8007560:	e001      	b.n	8007566 <CAN_GetFlagStatus+0xc0>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8007562:	2300      	movs	r3, #0
 8007564:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 8007566:	7bfb      	ldrb	r3, [r7, #15]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 800757e:	2300      	movs	r3, #0
 8007580:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	4a17      	ldr	r2, [pc, #92]	; (80075e4 <CAN_ClearFlag+0x70>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d103      	bne.n	8007592 <CAN_ClearFlag+0x1e>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	619a      	str	r2, [r3, #24]
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
    }
  }
}
 8007590:	e021      	b.n	80075d6 <CAN_ClearFlag+0x62>
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007598:	60fb      	str	r3, [r7, #12]
    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <CAN_ClearFlag+0x38>
      CANx->RF0R = (uint32_t)(flagtmp);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	60da      	str	r2, [r3, #12]
}
 80075aa:	e014      	b.n	80075d6 <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <CAN_ClearFlag+0x4a>
      CANx->RF1R = (uint32_t)(flagtmp);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	611a      	str	r2, [r3, #16]
}
 80075bc:	e00b      	b.n	80075d6 <CAN_ClearFlag+0x62>
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <CAN_ClearFlag+0x5c>
      CANx->TSR = (uint32_t)(flagtmp);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	609a      	str	r2, [r3, #8]
}
 80075ce:	e002      	b.n	80075d6 <CAN_ClearFlag+0x62>
      CANx->MSR = (uint32_t)(flagtmp);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	605a      	str	r2, [r3, #4]
}
 80075d6:	bf00      	nop
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	30f00070 	.word	0x30f00070

080075e8 <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 80075f2:	2300      	movs	r3, #0
 80075f4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	695a      	ldr	r2, [r3, #20]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	4013      	ands	r3, r2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 80b2 	beq.w	8007768 <CAN_GetITStatus+0x180>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2b40      	cmp	r3, #64	; 0x40
 8007608:	d062      	beq.n	80076d0 <CAN_GetITStatus+0xe8>
 800760a:	2b40      	cmp	r3, #64	; 0x40
 800760c:	d80f      	bhi.n	800762e <CAN_GetITStatus+0x46>
 800760e:	2b04      	cmp	r3, #4
 8007610:	d03a      	beq.n	8007688 <CAN_GetITStatus+0xa0>
 8007612:	2b04      	cmp	r3, #4
 8007614:	d804      	bhi.n	8007620 <CAN_GetITStatus+0x38>
 8007616:	2b01      	cmp	r3, #1
 8007618:	d024      	beq.n	8007664 <CAN_GetITStatus+0x7c>
 800761a:	2b02      	cmp	r3, #2
 800761c:	d02b      	beq.n	8007676 <CAN_GetITStatus+0x8e>
 800761e:	e09f      	b.n	8007760 <CAN_GetITStatus+0x178>
 8007620:	2b10      	cmp	r3, #16
 8007622:	d043      	beq.n	80076ac <CAN_GetITStatus+0xc4>
 8007624:	2b20      	cmp	r3, #32
 8007626:	d04a      	beq.n	80076be <CAN_GetITStatus+0xd6>
 8007628:	2b08      	cmp	r3, #8
 800762a:	d036      	beq.n	800769a <CAN_GetITStatus+0xb2>
 800762c:	e098      	b.n	8007760 <CAN_GetITStatus+0x178>
 800762e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007632:	f000 8083 	beq.w	800773c <CAN_GetITStatus+0x154>
 8007636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800763a:	d809      	bhi.n	8007650 <CAN_GetITStatus+0x68>
 800763c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007640:	d06a      	beq.n	8007718 <CAN_GetITStatus+0x130>
 8007642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007646:	d070      	beq.n	800772a <CAN_GetITStatus+0x142>
 8007648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800764c:	d05b      	beq.n	8007706 <CAN_GetITStatus+0x11e>
 800764e:	e087      	b.n	8007760 <CAN_GetITStatus+0x178>
 8007650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007654:	d045      	beq.n	80076e2 <CAN_GetITStatus+0xfa>
 8007656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800765a:	d04b      	beq.n	80076f4 <CAN_GetITStatus+0x10c>
 800765c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007660:	d075      	beq.n	800774e <CAN_GetITStatus+0x166>
 8007662:	e07d      	b.n	8007760 <CAN_GetITStatus+0x178>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	4943      	ldr	r1, [pc, #268]	; (8007778 <CAN_GetITStatus+0x190>)
 800766a:	4618      	mov	r0, r3
 800766c:	f000 f8f6 	bl	800785c <CheckITStatus>
 8007670:	4603      	mov	r3, r0
 8007672:	73fb      	strb	r3, [r7, #15]
        break;
 8007674:	e07a      	b.n	800776c <CAN_GetITStatus+0x184>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	2103      	movs	r1, #3
 800767c:	4618      	mov	r0, r3
 800767e:	f000 f8ed 	bl	800785c <CheckITStatus>
 8007682:	4603      	mov	r3, r0
 8007684:	73fb      	strb	r3, [r7, #15]
        break;
 8007686:	e071      	b.n	800776c <CAN_GetITStatus+0x184>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	2108      	movs	r1, #8
 800768e:	4618      	mov	r0, r3
 8007690:	f000 f8e4 	bl	800785c <CheckITStatus>
 8007694:	4603      	mov	r3, r0
 8007696:	73fb      	strb	r3, [r7, #15]
        break;
 8007698:	e068      	b.n	800776c <CAN_GetITStatus+0x184>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	2110      	movs	r1, #16
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 f8db 	bl	800785c <CheckITStatus>
 80076a6:	4603      	mov	r3, r0
 80076a8:	73fb      	strb	r3, [r7, #15]
        break;
 80076aa:	e05f      	b.n	800776c <CAN_GetITStatus+0x184>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	2103      	movs	r1, #3
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 f8d2 	bl	800785c <CheckITStatus>
 80076b8:	4603      	mov	r3, r0
 80076ba:	73fb      	strb	r3, [r7, #15]
        break;
 80076bc:	e056      	b.n	800776c <CAN_GetITStatus+0x184>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	2108      	movs	r1, #8
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 f8c9 	bl	800785c <CheckITStatus>
 80076ca:	4603      	mov	r3, r0
 80076cc:	73fb      	strb	r3, [r7, #15]
        break;
 80076ce:	e04d      	b.n	800776c <CAN_GetITStatus+0x184>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	2110      	movs	r1, #16
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 f8c0 	bl	800785c <CheckITStatus>
 80076dc:	4603      	mov	r3, r0
 80076de:	73fb      	strb	r3, [r7, #15]
        break;
 80076e0:	e044      	b.n	800776c <CAN_GetITStatus+0x184>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	2108      	movs	r1, #8
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 f8b7 	bl	800785c <CheckITStatus>
 80076ee:	4603      	mov	r3, r0
 80076f0:	73fb      	strb	r3, [r7, #15]
        break;
 80076f2:	e03b      	b.n	800776c <CAN_GetITStatus+0x184>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2110      	movs	r1, #16
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 f8ae 	bl	800785c <CheckITStatus>
 8007700:	4603      	mov	r3, r0
 8007702:	73fb      	strb	r3, [r7, #15]
        break;
 8007704:	e032      	b.n	800776c <CAN_GetITStatus+0x184>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	2101      	movs	r1, #1
 800770c:	4618      	mov	r0, r3
 800770e:	f000 f8a5 	bl	800785c <CheckITStatus>
 8007712:	4603      	mov	r3, r0
 8007714:	73fb      	strb	r3, [r7, #15]
        break;
 8007716:	e029      	b.n	800776c <CAN_GetITStatus+0x184>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	2102      	movs	r1, #2
 800771e:	4618      	mov	r0, r3
 8007720:	f000 f89c 	bl	800785c <CheckITStatus>
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]
        break;
 8007728:	e020      	b.n	800776c <CAN_GetITStatus+0x184>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	2104      	movs	r1, #4
 8007730:	4618      	mov	r0, r3
 8007732:	f000 f893 	bl	800785c <CheckITStatus>
 8007736:	4603      	mov	r3, r0
 8007738:	73fb      	strb	r3, [r7, #15]
        break;
 800773a:	e017      	b.n	800776c <CAN_GetITStatus+0x184>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	2170      	movs	r1, #112	; 0x70
 8007742:	4618      	mov	r0, r3
 8007744:	f000 f88a 	bl	800785c <CheckITStatus>
 8007748:	4603      	mov	r3, r0
 800774a:	73fb      	strb	r3, [r7, #15]
        break;
 800774c:	e00e      	b.n	800776c <CAN_GetITStatus+0x184>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2104      	movs	r1, #4
 8007754:	4618      	mov	r0, r3
 8007756:	f000 f881 	bl	800785c <CheckITStatus>
 800775a:	4603      	mov	r3, r0
 800775c:	73fb      	strb	r3, [r7, #15]
        break;
 800775e:	e005      	b.n	800776c <CAN_GetITStatus+0x184>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]
        break;
 8007764:	bf00      	nop
 8007766:	e001      	b.n	800776c <CAN_GetITStatus+0x184>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 8007768:	2300      	movs	r3, #0
 800776a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	00010101 	.word	0x00010101

0800777c <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800778c:	d043      	beq.n	8007816 <CAN_ClearITPendingBit+0x9a>
 800778e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007792:	d80d      	bhi.n	80077b0 <CAN_ClearITPendingBit+0x34>
 8007794:	2b08      	cmp	r3, #8
 8007796:	d02a      	beq.n	80077ee <CAN_ClearITPendingBit+0x72>
 8007798:	2b08      	cmp	r3, #8
 800779a:	d804      	bhi.n	80077a6 <CAN_ClearITPendingBit+0x2a>
 800779c:	2b01      	cmp	r3, #1
 800779e:	d01e      	beq.n	80077de <CAN_ClearITPendingBit+0x62>
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d020      	beq.n	80077e6 <CAN_ClearITPendingBit+0x6a>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 80077a4:	e051      	b.n	800784a <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 80077a6:	2b20      	cmp	r3, #32
 80077a8:	d025      	beq.n	80077f6 <CAN_ClearITPendingBit+0x7a>
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	d027      	beq.n	80077fe <CAN_ClearITPendingBit+0x82>
       break;
 80077ae:	e04c      	b.n	800784a <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 80077b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077b4:	d03b      	beq.n	800782e <CAN_ClearITPendingBit+0xb2>
 80077b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ba:	d806      	bhi.n	80077ca <CAN_ClearITPendingBit+0x4e>
 80077bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077c0:	d02d      	beq.n	800781e <CAN_ClearITPendingBit+0xa2>
 80077c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077c6:	d02e      	beq.n	8007826 <CAN_ClearITPendingBit+0xaa>
       break;
 80077c8:	e03f      	b.n	800784a <CAN_ClearITPendingBit+0xce>
  switch (CAN_IT)
 80077ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ce:	d01a      	beq.n	8007806 <CAN_ClearITPendingBit+0x8a>
 80077d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077d4:	d01b      	beq.n	800780e <CAN_ClearITPendingBit+0x92>
 80077d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077da:	d02f      	beq.n	800783c <CAN_ClearITPendingBit+0xc0>
       break;
 80077dc:	e035      	b.n	800784a <CAN_ClearITPendingBit+0xce>
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a1d      	ldr	r2, [pc, #116]	; (8007858 <CAN_ClearITPendingBit+0xdc>)
 80077e2:	609a      	str	r2, [r3, #8]
      break;
 80077e4:	e031      	b.n	800784a <CAN_ClearITPendingBit+0xce>
      CANx->RF0R = CAN_RF0R_FULL0; 
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2208      	movs	r2, #8
 80077ea:	60da      	str	r2, [r3, #12]
      break;
 80077ec:	e02d      	b.n	800784a <CAN_ClearITPendingBit+0xce>
      CANx->RF0R = CAN_RF0R_FOVR0; 
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2210      	movs	r2, #16
 80077f2:	60da      	str	r2, [r3, #12]
      break;
 80077f4:	e029      	b.n	800784a <CAN_ClearITPendingBit+0xce>
      CANx->RF1R = CAN_RF1R_FULL1;  
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2208      	movs	r2, #8
 80077fa:	611a      	str	r2, [r3, #16]
      break;
 80077fc:	e025      	b.n	800784a <CAN_ClearITPendingBit+0xce>
      CANx->RF1R = CAN_RF1R_FOVR1; 
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2210      	movs	r2, #16
 8007802:	611a      	str	r2, [r3, #16]
      break;
 8007804:	e021      	b.n	800784a <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_WKUI;  
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2208      	movs	r2, #8
 800780a:	605a      	str	r2, [r3, #4]
      break;
 800780c:	e01d      	b.n	800784a <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_SLAKI;   
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2210      	movs	r2, #16
 8007812:	605a      	str	r2, [r3, #4]
      break;
 8007814:	e019      	b.n	800784a <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_ERRI;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2204      	movs	r2, #4
 800781a:	605a      	str	r2, [r3, #4]
      break;
 800781c:	e015      	b.n	800784a <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_ERRI; 
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2204      	movs	r2, #4
 8007822:	605a      	str	r2, [r3, #4]
      break;
 8007824:	e011      	b.n	800784a <CAN_ClearITPendingBit+0xce>
      CANx->MSR = CAN_MSR_ERRI; 
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2204      	movs	r2, #4
 800782a:	605a      	str	r2, [r3, #4]
       break;
 800782c:	e00d      	b.n	800784a <CAN_ClearITPendingBit+0xce>
      CANx->ESR = RESET; 
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2204      	movs	r2, #4
 8007838:	605a      	str	r2, [r3, #4]
      break;
 800783a:	e006      	b.n	800784a <CAN_ClearITPendingBit+0xce>
      CANx->ESR = RESET; 
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	619a      	str	r2, [r3, #24]
      CANx->MSR = CAN_MSR_ERRI; 
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2204      	movs	r2, #4
 8007846:	605a      	str	r2, [r3, #4]
       break;
 8007848:	bf00      	nop
   }
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	00010101 	.word	0x00010101

0800785c <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 8007866:	2300      	movs	r3, #0
 8007868:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	4013      	ands	r3, r2
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <CheckITStatus+0x1e>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8007874:	2301      	movs	r3, #1
 8007876:	73fb      	strb	r3, [r7, #15]
 8007878:	e001      	b.n	800787e <CheckITStatus+0x22>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 800787e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <CRC_ResetDR>:
  * @brief  Resets the CRC Data register (DR).
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 800788c:	b480      	push	{r7}
 800788e:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8007890:	4b03      	ldr	r3, [pc, #12]	; (80078a0 <CRC_ResetDR+0x14>)
 8007892:	2201      	movs	r2, #1
 8007894:	609a      	str	r2, [r3, #8]
}
 8007896:	bf00      	nop
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	40023000 	.word	0x40023000

080078a4 <CRC_CalcCRC>:
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  CRC->DR = Data;
 80078ac:	4a05      	ldr	r2, [pc, #20]	; (80078c4 <CRC_CalcCRC+0x20>)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6013      	str	r3, [r2, #0]
  
  return (CRC->DR);
 80078b2:	4b04      	ldr	r3, [pc, #16]	; (80078c4 <CRC_CalcCRC+0x20>)
 80078b4:	681b      	ldr	r3, [r3, #0]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	40023000 	.word	0x40023000

080078c8 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint32_t index = 0;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < BufferLength; index++)
 80078d6:	2300      	movs	r3, #0
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	e009      	b.n	80078f0 <CRC_CalcBlockCRC+0x28>
  {
    CRC->DR = pBuffer[index];
 80078dc:	490a      	ldr	r1, [pc, #40]	; (8007908 <CRC_CalcBlockCRC+0x40>)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	4413      	add	r3, r2
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	600b      	str	r3, [r1, #0]
  for(index = 0; index < BufferLength; index++)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3301      	adds	r3, #1
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d3f1      	bcc.n	80078dc <CRC_CalcBlockCRC+0x14>
  }
  return (CRC->DR);
 80078f8:	4b03      	ldr	r3, [pc, #12]	; (8007908 <CRC_CalcBlockCRC+0x40>)
 80078fa:	681b      	ldr	r3, [r3, #0]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	40023000 	.word	0x40023000

0800790c <CRC_GetCRC>:
  * @brief  Returns the current CRC value.
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
 800790c:	b480      	push	{r7}
 800790e:	af00      	add	r7, sp, #0
  return (CRC->DR);
 8007910:	4b03      	ldr	r3, [pc, #12]	; (8007920 <CRC_GetCRC+0x14>)
 8007912:	681b      	ldr	r3, [r3, #0]
}
 8007914:	4618      	mov	r0, r3
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	40023000 	.word	0x40023000

08007924 <CRC_SetIDRegister>:
  * @brief  Stores a 8-bit data in the Independent Data(ID) register.
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	4603      	mov	r3, r0
 800792c:	71fb      	strb	r3, [r7, #7]
  CRC->IDR = IDValue;
 800792e:	4a04      	ldr	r2, [pc, #16]	; (8007940 <CRC_SetIDRegister+0x1c>)
 8007930:	79fb      	ldrb	r3, [r7, #7]
 8007932:	7113      	strb	r3, [r2, #4]
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	40023000 	.word	0x40023000

08007944 <CRC_GetIDRegister>:
  * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
 8007944:	b480      	push	{r7}
 8007946:	af00      	add	r7, sp, #0
  return (CRC->IDR);
 8007948:	4b03      	ldr	r3, [pc, #12]	; (8007958 <CRC_GetIDRegister+0x14>)
 800794a:	791b      	ldrb	r3, [r3, #4]
 800794c:	b2db      	uxtb	r3, r3
}
 800794e:	4618      	mov	r0, r3
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	40023000 	.word	0x40023000

0800795c <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 8007960:	2101      	movs	r1, #1
 8007962:	2010      	movs	r0, #16
 8007964:	f007 fefe 	bl	800f764 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 8007968:	2100      	movs	r1, #0
 800796a:	2010      	movs	r0, #16
 800796c:	f007 fefa 	bl	800f764 <RCC_AHB2PeriphResetCmd>
}
 8007970:	bf00      	nop
 8007972:	bd80      	pop	{r7, pc}

08007974 <CRYP_Init>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 800797c:	4a25      	ldr	r2, [pc, #148]	; (8007a14 <CRYP_Init+0xa0>)
 800797e:	4b25      	ldr	r3, [pc, #148]	; (8007a14 <CRYP_Init+0xa0>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007986:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800798a:	6013      	str	r3, [r2, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 800798c:	4921      	ldr	r1, [pc, #132]	; (8007a14 <CRYP_Init+0xa0>)
 800798e:	4b21      	ldr	r3, [pc, #132]	; (8007a14 <CRYP_Init+0xa0>)
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	4313      	orrs	r3, r2
 8007998:	600b      	str	r3, [r1, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 800799a:	4a1e      	ldr	r2, [pc, #120]	; (8007a14 <CRYP_Init+0xa0>)
 800799c:	4b1d      	ldr	r3, [pc, #116]	; (8007a14 <CRYP_Init+0xa0>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80079a4:	6013      	str	r3, [r2, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 80079a6:	491b      	ldr	r1, [pc, #108]	; (8007a14 <CRYP_Init+0xa0>)
 80079a8:	4b1a      	ldr	r3, [pc, #104]	; (8007a14 <CRYP_Init+0xa0>)
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	600b      	str	r3, [r1, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d018      	beq.n	80079ee <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	685b      	ldr	r3, [r3, #4]
  if ((CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_ECB) &&
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	d014      	beq.n	80079ee <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_TDES_CBC) &&
 80079c8:	2b10      	cmp	r3, #16
 80079ca:	d010      	beq.n	80079ee <CRYP_Init+0x7a>
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_CBC))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
      (CRYP_InitStruct->CRYP_AlgoMode != CRYP_AlgoMode_DES_ECB) &&
 80079d0:	2b18      	cmp	r3, #24
 80079d2:	d00c      	beq.n	80079ee <CRYP_Init+0x7a>
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 80079d4:	4a0f      	ldr	r2, [pc, #60]	; (8007a14 <CRYP_Init+0xa0>)
 80079d6:	4b0f      	ldr	r3, [pc, #60]	; (8007a14 <CRYP_Init+0xa0>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079de:	6013      	str	r3, [r2, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 80079e0:	490c      	ldr	r1, [pc, #48]	; (8007a14 <CRYP_Init+0xa0>)
 80079e2:	4b0c      	ldr	r3, [pc, #48]	; (8007a14 <CRYP_Init+0xa0>)
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	600b      	str	r3, [r1, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 80079ee:	4a09      	ldr	r2, [pc, #36]	; (8007a14 <CRYP_Init+0xa0>)
 80079f0:	4b08      	ldr	r3, [pc, #32]	; (8007a14 <CRYP_Init+0xa0>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f023 0304 	bic.w	r3, r3, #4
 80079f8:	6013      	str	r3, [r2, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 80079fa:	4906      	ldr	r1, [pc, #24]	; (8007a14 <CRYP_Init+0xa0>)
 80079fc:	4b05      	ldr	r3, [pc, #20]	; (8007a14 <CRYP_Init+0xa0>)
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	600b      	str	r3, [r1, #0]
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	50060000 	.word	0x50060000

08007a18 <CRYP_StructInit>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	605a      	str	r2, [r3, #4]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	609a      	str	r2, [r3, #8]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	60da      	str	r2, [r3, #12]
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <CRYP_KeyInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
  *         contains the configuration information for the CRYP Keys.
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 8007a4c:	4a12      	ldr	r2, [pc, #72]	; (8007a98 <CRYP_KeyInit+0x54>)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6213      	str	r3, [r2, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 8007a54:	4a10      	ldr	r2, [pc, #64]	; (8007a98 <CRYP_KeyInit+0x54>)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	6253      	str	r3, [r2, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 8007a5c:	4a0e      	ldr	r2, [pc, #56]	; (8007a98 <CRYP_KeyInit+0x54>)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	6293      	str	r3, [r2, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 8007a64:	4a0c      	ldr	r2, [pc, #48]	; (8007a98 <CRYP_KeyInit+0x54>)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	62d3      	str	r3, [r2, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 8007a6c:	4a0a      	ldr	r2, [pc, #40]	; (8007a98 <CRYP_KeyInit+0x54>)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	6313      	str	r3, [r2, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 8007a74:	4a08      	ldr	r2, [pc, #32]	; (8007a98 <CRYP_KeyInit+0x54>)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	6353      	str	r3, [r2, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 8007a7c:	4a06      	ldr	r2, [pc, #24]	; (8007a98 <CRYP_KeyInit+0x54>)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	6393      	str	r3, [r2, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 8007a84:	4a04      	ldr	r2, [pc, #16]	; (8007a98 <CRYP_KeyInit+0x54>)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	50060000 	.word	0x50060000

08007a9c <CRYP_KeyStructInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	601a      	str	r2, [r3, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	605a      	str	r2, [r3, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	609a      	str	r2, [r3, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	60da      	str	r2, [r3, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	611a      	str	r2, [r3, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	615a      	str	r2, [r3, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	619a      	str	r2, [r3, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	61da      	str	r2, [r3, #28]
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <CRYP_IVInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 8007ae8:	4a0a      	ldr	r2, [pc, #40]	; (8007b14 <CRYP_IVInit+0x34>)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6413      	str	r3, [r2, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 8007af0:	4a08      	ldr	r2, [pc, #32]	; (8007b14 <CRYP_IVInit+0x34>)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	6453      	str	r3, [r2, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 8007af8:	4a06      	ldr	r2, [pc, #24]	; (8007b14 <CRYP_IVInit+0x34>)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	6493      	str	r3, [r2, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 8007b00:	4a04      	ldr	r2, [pc, #16]	; (8007b14 <CRYP_IVInit+0x34>)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	50060000 	.word	0x50060000

08007b18 <CRYP_IVStructInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	605a      	str	r2, [r3, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	609a      	str	r2, [r3, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	60da      	str	r2, [r3, #12]
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <CRYP_PhaseConfig>:
  *            @arg CRYP_Phase_Payload: Payload phase
  *            @arg CRYP_Phase_Final: Final phase 
  * @retval None
  */
void CRYP_PhaseConfig(uint32_t CRYP_Phase)
{ uint32_t tempcr = 0;
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameter */
  assert_param(IS_CRYP_PHASE(CRYP_Phase));

  /* Get the CR register */
  tempcr = CRYP->CR;
 8007b50:	4b09      	ldr	r3, [pc, #36]	; (8007b78 <CRYP_PhaseConfig+0x34>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60fb      	str	r3, [r7, #12]
  
  /* Reset the phase configuration bits: GCMP_CCMPH */
  tempcr &= (uint32_t)(~CRYP_CR_GCM_CCMPH);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007b5c:	60fb      	str	r3, [r7, #12]
  /* Set the selected phase */
  tempcr |= (uint32_t)CRYP_Phase;
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60fb      	str	r3, [r7, #12]

  /* Set the CR register */ 
  CRYP->CR = tempcr;    
 8007b66:	4a04      	ldr	r2, [pc, #16]	; (8007b78 <CRYP_PhaseConfig+0x34>)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6013      	str	r3, [r2, #0]
}
 8007b6c:	bf00      	nop
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	50060000 	.word	0x50060000

08007b7c <CRYP_FIFOFlush>:
  * @note   The FIFOs must be flushed only when BUSY flag is reset.  
  * @param  None
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	af00      	add	r7, sp, #0
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 8007b80:	4a05      	ldr	r2, [pc, #20]	; (8007b98 <CRYP_FIFOFlush+0x1c>)
 8007b82:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <CRYP_FIFOFlush+0x1c>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b8a:	6013      	str	r3, [r2, #0]
}
 8007b8c:	bf00      	nop
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	50060000 	.word	0x50060000

08007b9c <CRYP_Cmd>:
  * @param  NewState: new state of the CRYP peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_Cmd(FunctionalState NewState)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007ba6:	79fb      	ldrb	r3, [r7, #7]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d006      	beq.n	8007bba <CRYP_Cmd+0x1e>
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 8007bac:	4a09      	ldr	r2, [pc, #36]	; (8007bd4 <CRYP_Cmd+0x38>)
 8007bae:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <CRYP_Cmd+0x38>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb6:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
  }
}
 8007bb8:	e005      	b.n	8007bc6 <CRYP_Cmd+0x2a>
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 8007bba:	4a06      	ldr	r2, [pc, #24]	; (8007bd4 <CRYP_Cmd+0x38>)
 8007bbc:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <CRYP_Cmd+0x38>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007bc4:	6013      	str	r3, [r2, #0]
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	50060000 	.word	0x50060000

08007bd8 <CRYP_DataIn>:
  *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  CRYP->DR = Data;
 8007be0:	4a04      	ldr	r2, [pc, #16]	; (8007bf4 <CRYP_DataIn+0x1c>)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6093      	str	r3, [r2, #8]
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	50060000 	.word	0x50060000

08007bf8 <CRYP_DataOut>:
  * @brief  Returns the last data entered into the output FIFO.
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	af00      	add	r7, sp, #0
  return CRYP->DOUT;
 8007bfc:	4b03      	ldr	r3, [pc, #12]	; (8007c0c <CRYP_DataOut+0x14>)
 8007bfe:	68db      	ldr	r3, [r3, #12]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	50060000 	.word	0x50060000

08007c10 <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b087      	sub	sp, #28
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  __IO uint32_t timeout = 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60bb      	str	r3, [r7, #8]
  uint32_t ckeckmask = 0, bitstatus;    
 8007c1e:	2300      	movs	r3, #0
 8007c20:	617b      	str	r3, [r7, #20]
  ErrorStatus status = ERROR;
 8007c22:	2300      	movs	r3, #0
 8007c24:	74fb      	strb	r3, [r7, #19]

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 8007c26:	4a5c      	ldr	r2, [pc, #368]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007c28:	4b5b      	ldr	r3, [pc, #364]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	f023 0301 	bic.w	r3, r3, #1
 8007c30:	6113      	str	r3, [r2, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 8007c32:	4b59      	ldr	r3, [pc, #356]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0308 	and.w	r3, r3, #8
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d002      	beq.n	8007c44 <CRYP_SaveContext+0x34>
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 8007c3e:	2311      	movs	r3, #17
 8007c40:	617b      	str	r3, [r7, #20]
 8007c42:	e001      	b.n	8007c48 <CRYP_SaveContext+0x38>
  }
  else /* AES or DES */
  {
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 8007c44:	2315      	movs	r3, #21
 8007c46:	617b      	str	r3, [r7, #20]
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8007c48:	4b53      	ldr	r3, [pc, #332]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	4013      	ands	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]
    timeout++;
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	3301      	adds	r3, #1
 8007c56:	60bb      	str	r3, [r7, #8]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d002      	beq.n	8007c68 <CRYP_SaveContext+0x58>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d1ef      	bne.n	8007c48 <CRYP_SaveContext+0x38>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 8007c68:	4b4b      	ldr	r3, [pc, #300]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	4013      	ands	r3, r2
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d002      	beq.n	8007c7a <CRYP_SaveContext+0x6a>
  {
    status = ERROR;
 8007c74:	2300      	movs	r3, #0
 8007c76:	74fb      	strb	r3, [r7, #19]
 8007c78:	e087      	b.n	8007d8a <CRYP_SaveContext+0x17a>
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 8007c7a:	4a47      	ldr	r2, [pc, #284]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007c7c:	4b46      	ldr	r3, [pc, #280]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	f023 0302 	bic.w	r3, r3, #2
 8007c84:	6113      	str	r3, [r2, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 8007c86:	4a44      	ldr	r2, [pc, #272]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007c88:	4b43      	ldr	r3, [pc, #268]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c90:	6013      	str	r3, [r2, #0]

    /* Save the current configuration (bit 19, bit[17:16] and bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_CurrentConfig  = CRYP->CR & (CRYP_CR_GCM_CCMPH |
 8007c92:	4b41      	ldr	r3, [pc, #260]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	4b41      	ldr	r3, [pc, #260]	; (8007d9c <CRYP_SaveContext+0x18c>)
 8007c98:	4013      	ands	r3, r2
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6013      	str	r3, [r2, #0]
                                                      CRYP_CR_DATATYPE |
                                                      CRYP_CR_ALGOMODE |
                                                      CRYP_CR_ALGODIR);

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 8007c9e:	4b3e      	ldr	r3, [pc, #248]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	605a      	str	r2, [r3, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 8007ca6:	4b3c      	ldr	r3, [pc, #240]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	609a      	str	r2, [r3, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 8007cae:	4b3a      	ldr	r3, [pc, #232]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007cb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60da      	str	r2, [r3, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 8007cb6:	4b38      	ldr	r3, [pc, #224]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007cb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	611a      	str	r2, [r3, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	615a      	str	r2, [r3, #20]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	685a      	ldr	r2, [r3, #4]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	619a      	str	r2, [r3, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	61da      	str	r2, [r3, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	621a      	str	r2, [r3, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	691a      	ldr	r2, [r3, #16]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	625a      	str	r2, [r3, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	695a      	ldr	r2, [r3, #20]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	629a      	str	r2, [r3, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	699a      	ldr	r2, [r3, #24]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	62da      	str	r2, [r3, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	69da      	ldr	r2, [r3, #28]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Save the content of context swap registers */
    CRYP_ContextSave->CRYP_CSGCMCCMR[0] = CRYP->CSGCMCCM0R;
 8007cfe:	4b26      	ldr	r3, [pc, #152]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007d00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	635a      	str	r2, [r3, #52]	; 0x34
    CRYP_ContextSave->CRYP_CSGCMCCMR[1] = CRYP->CSGCMCCM1R;
 8007d06:	4b24      	ldr	r3, [pc, #144]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007d08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	639a      	str	r2, [r3, #56]	; 0x38
    CRYP_ContextSave->CRYP_CSGCMCCMR[2] = CRYP->CSGCMCCM2R;
 8007d0e:	4b22      	ldr	r3, [pc, #136]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007d10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	63da      	str	r2, [r3, #60]	; 0x3c
    CRYP_ContextSave->CRYP_CSGCMCCMR[3] = CRYP->CSGCMCCM3R;
 8007d16:	4b20      	ldr	r3, [pc, #128]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007d18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	641a      	str	r2, [r3, #64]	; 0x40
    CRYP_ContextSave->CRYP_CSGCMCCMR[4] = CRYP->CSGCMCCM4R;
 8007d1e:	4b1e      	ldr	r3, [pc, #120]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007d20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	645a      	str	r2, [r3, #68]	; 0x44
    CRYP_ContextSave->CRYP_CSGCMCCMR[5] = CRYP->CSGCMCCM5R;
 8007d26:	4b1c      	ldr	r3, [pc, #112]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007d28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	649a      	str	r2, [r3, #72]	; 0x48
    CRYP_ContextSave->CRYP_CSGCMCCMR[6] = CRYP->CSGCMCCM6R;
 8007d2e:	4b1a      	ldr	r3, [pc, #104]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007d30:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	64da      	str	r2, [r3, #76]	; 0x4c
    CRYP_ContextSave->CRYP_CSGCMCCMR[7] = CRYP->CSGCMCCM7R;
 8007d36:	4b18      	ldr	r3, [pc, #96]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007d38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	651a      	str	r2, [r3, #80]	; 0x50
    
    CRYP_ContextSave->CRYP_CSGCMR[0] = CRYP->CSGCM0R;
 8007d3e:	4b16      	ldr	r3, [pc, #88]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007d40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	655a      	str	r2, [r3, #84]	; 0x54
    CRYP_ContextSave->CRYP_CSGCMR[1] = CRYP->CSGCM1R;
 8007d46:	4b14      	ldr	r3, [pc, #80]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007d48:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	659a      	str	r2, [r3, #88]	; 0x58
    CRYP_ContextSave->CRYP_CSGCMR[2] = CRYP->CSGCM2R;
 8007d4e:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007d50:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	65da      	str	r2, [r3, #92]	; 0x5c
    CRYP_ContextSave->CRYP_CSGCMR[3] = CRYP->CSGCM3R;
 8007d56:	4b10      	ldr	r3, [pc, #64]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007d58:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	661a      	str	r2, [r3, #96]	; 0x60
    CRYP_ContextSave->CRYP_CSGCMR[4] = CRYP->CSGCM4R;
 8007d5e:	4b0e      	ldr	r3, [pc, #56]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007d60:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	665a      	str	r2, [r3, #100]	; 0x64
    CRYP_ContextSave->CRYP_CSGCMR[5] = CRYP->CSGCM5R;
 8007d68:	4b0b      	ldr	r3, [pc, #44]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007d6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	669a      	str	r2, [r3, #104]	; 0x68
    CRYP_ContextSave->CRYP_CSGCMR[6] = CRYP->CSGCM6R;
 8007d72:	4b09      	ldr	r3, [pc, #36]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007d74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	66da      	str	r2, [r3, #108]	; 0x6c
    CRYP_ContextSave->CRYP_CSGCMR[7] = CRYP->CSGCM7R;
 8007d7c:	4b06      	ldr	r3, [pc, #24]	; (8007d98 <CRYP_SaveContext+0x188>)
 8007d7e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	671a      	str	r2, [r3, #112]	; 0x70
    
   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 8007d86:	2301      	movs	r3, #1
 8007d88:	74fb      	strb	r3, [r7, #19]
  }

   return status;
 8007d8a:	7cfb      	ldrb	r3, [r7, #19]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	371c      	adds	r7, #28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	50060000 	.word	0x50060000
 8007d9c:	000b03fc 	.word	0x000b03fc

08007da0 <CRYP_RestoreContext>:
  * @note   The data that were saved during context saving must be rewrited into
  *         the IN FIFO.
  * @retval None
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_CurrentConfig;
 8007da8:	4a41      	ldr	r2, [pc, #260]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6013      	str	r3, [r2, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 8007db0:	4a3f      	ldr	r2, [pc, #252]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	6213      	str	r3, [r2, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 8007db8:	4a3d      	ldr	r2, [pc, #244]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	6253      	str	r3, [r2, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 8007dc0:	4a3b      	ldr	r2, [pc, #236]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	6293      	str	r3, [r2, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 8007dc8:	4a39      	ldr	r2, [pc, #228]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	62d3      	str	r3, [r2, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 8007dd0:	4a37      	ldr	r2, [pc, #220]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	6313      	str	r3, [r2, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 8007dd8:	4a35      	ldr	r2, [pc, #212]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dde:	6353      	str	r3, [r2, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 8007de0:	4a33      	ldr	r2, [pc, #204]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de6:	6393      	str	r3, [r2, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 8007de8:	4a31      	ldr	r2, [pc, #196]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dee:	63d3      	str	r3, [r2, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 8007df0:	4a2f      	ldr	r2, [pc, #188]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	6413      	str	r3, [r2, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 8007df8:	4a2d      	ldr	r2, [pc, #180]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	6453      	str	r3, [r2, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 8007e00:	4a2b      	ldr	r2, [pc, #172]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	6493      	str	r3, [r2, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 8007e08:	4a29      	ldr	r2, [pc, #164]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	64d3      	str	r3, [r2, #76]	; 0x4c

  /* Restore the content of context swap registers */
  CRYP->CSGCMCCM0R = CRYP_ContextRestore->CRYP_CSGCMCCMR[0];
 8007e10:	4a27      	ldr	r2, [pc, #156]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e16:	6513      	str	r3, [r2, #80]	; 0x50
  CRYP->CSGCMCCM1R = CRYP_ContextRestore->CRYP_CSGCMCCMR[1];
 8007e18:	4a25      	ldr	r2, [pc, #148]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1e:	6553      	str	r3, [r2, #84]	; 0x54
  CRYP->CSGCMCCM2R = CRYP_ContextRestore->CRYP_CSGCMCCMR[2];
 8007e20:	4a23      	ldr	r2, [pc, #140]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e26:	6593      	str	r3, [r2, #88]	; 0x58
  CRYP->CSGCMCCM3R = CRYP_ContextRestore->CRYP_CSGCMCCMR[3];
 8007e28:	4a21      	ldr	r2, [pc, #132]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2e:	65d3      	str	r3, [r2, #92]	; 0x5c
  CRYP->CSGCMCCM4R = CRYP_ContextRestore->CRYP_CSGCMCCMR[4];
 8007e30:	4a1f      	ldr	r2, [pc, #124]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e36:	6613      	str	r3, [r2, #96]	; 0x60
  CRYP->CSGCMCCM5R = CRYP_ContextRestore->CRYP_CSGCMCCMR[5];
 8007e38:	4a1d      	ldr	r2, [pc, #116]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e3e:	6653      	str	r3, [r2, #100]	; 0x64
  CRYP->CSGCMCCM6R = CRYP_ContextRestore->CRYP_CSGCMCCMR[6];
 8007e40:	4a1b      	ldr	r2, [pc, #108]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e46:	6693      	str	r3, [r2, #104]	; 0x68
  CRYP->CSGCMCCM7R = CRYP_ContextRestore->CRYP_CSGCMCCMR[7];
 8007e48:	4a19      	ldr	r2, [pc, #100]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e4e:	66d3      	str	r3, [r2, #108]	; 0x6c
  
  CRYP->CSGCM0R = CRYP_ContextRestore->CRYP_CSGCMR[0];
 8007e50:	4a17      	ldr	r2, [pc, #92]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e56:	6713      	str	r3, [r2, #112]	; 0x70
  CRYP->CSGCM1R = CRYP_ContextRestore->CRYP_CSGCMR[1];
 8007e58:	4a15      	ldr	r2, [pc, #84]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e5e:	6753      	str	r3, [r2, #116]	; 0x74
  CRYP->CSGCM2R = CRYP_ContextRestore->CRYP_CSGCMR[2];
 8007e60:	4a13      	ldr	r2, [pc, #76]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e66:	6793      	str	r3, [r2, #120]	; 0x78
  CRYP->CSGCM3R = CRYP_ContextRestore->CRYP_CSGCMR[3];
 8007e68:	4a11      	ldr	r2, [pc, #68]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e6e:	67d3      	str	r3, [r2, #124]	; 0x7c
  CRYP->CSGCM4R = CRYP_ContextRestore->CRYP_CSGCMR[4];
 8007e70:	4a0f      	ldr	r2, [pc, #60]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e76:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  CRYP->CSGCM5R = CRYP_ContextRestore->CRYP_CSGCMR[5];
 8007e7a:	4a0d      	ldr	r2, [pc, #52]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e80:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  CRYP->CSGCM6R = CRYP_ContextRestore->CRYP_CSGCMR[6];
 8007e84:	4a0a      	ldr	r2, [pc, #40]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  CRYP->CSGCM7R = CRYP_ContextRestore->CRYP_CSGCMR[7];
 8007e8e:	4a08      	ldr	r2, [pc, #32]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e94:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  
  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 8007e98:	4a05      	ldr	r2, [pc, #20]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e9a:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <CRYP_RestoreContext+0x110>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ea2:	6013      	str	r3, [r2, #0]
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	50060000 	.word	0x50060000

08007eb4 <CRYP_DMACmd>:
  * @param  NewState: new state of the selected CRYP DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	4603      	mov	r3, r0
 8007ebc:	460a      	mov	r2, r1
 8007ebe:	71fb      	strb	r3, [r7, #7]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007ec4:	79bb      	ldrb	r3, [r7, #6]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d006      	beq.n	8007ed8 <CRYP_DMACmd+0x24>
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 8007eca:	490a      	ldr	r1, [pc, #40]	; (8007ef4 <CRYP_DMACmd+0x40>)
 8007ecc:	4b09      	ldr	r3, [pc, #36]	; (8007ef4 <CRYP_DMACmd+0x40>)
 8007ece:	691a      	ldr	r2, [r3, #16]
 8007ed0:	79fb      	ldrb	r3, [r7, #7]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	610b      	str	r3, [r1, #16]
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
  }
}
 8007ed6:	e007      	b.n	8007ee8 <CRYP_DMACmd+0x34>
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 8007ed8:	4906      	ldr	r1, [pc, #24]	; (8007ef4 <CRYP_DMACmd+0x40>)
 8007eda:	4b06      	ldr	r3, [pc, #24]	; (8007ef4 <CRYP_DMACmd+0x40>)
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	79fa      	ldrb	r2, [r7, #7]
 8007ee0:	43d2      	mvns	r2, r2
 8007ee2:	b2d2      	uxtb	r2, r2
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	610b      	str	r3, [r1, #16]
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	50060000 	.word	0x50060000

08007ef8 <CRYP_ITConfig>:
  * @param  NewState: new state of the specified CRYP interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	4603      	mov	r3, r0
 8007f00:	460a      	mov	r2, r1
 8007f02:	71fb      	strb	r3, [r7, #7]
 8007f04:	4613      	mov	r3, r2
 8007f06:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007f08:	79bb      	ldrb	r3, [r7, #6]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d006      	beq.n	8007f1c <CRYP_ITConfig+0x24>
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 8007f0e:	490a      	ldr	r1, [pc, #40]	; (8007f38 <CRYP_ITConfig+0x40>)
 8007f10:	4b09      	ldr	r3, [pc, #36]	; (8007f38 <CRYP_ITConfig+0x40>)
 8007f12:	695a      	ldr	r2, [r3, #20]
 8007f14:	79fb      	ldrb	r3, [r7, #7]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	614b      	str	r3, [r1, #20]
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
  }
}
 8007f1a:	e007      	b.n	8007f2c <CRYP_ITConfig+0x34>
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 8007f1c:	4906      	ldr	r1, [pc, #24]	; (8007f38 <CRYP_ITConfig+0x40>)
 8007f1e:	4b06      	ldr	r3, [pc, #24]	; (8007f38 <CRYP_ITConfig+0x40>)
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	79fa      	ldrb	r2, [r7, #7]
 8007f24:	43d2      	mvns	r2, r2
 8007f26:	b2d2      	uxtb	r2, r2
 8007f28:	4013      	ands	r3, r2
 8007f2a:	614b      	str	r3, [r1, #20]
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	50060000 	.word	0x50060000

08007f3c <CRYP_GetITStatus>:
  *            @arg CRYP_IT_INI: Input FIFO interrupt
  *            @arg CRYP_IT_OUTI: Output FIFO interrupt
  * @retval The new state of CRYP_IT (SET or RESET).
  */
ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	4603      	mov	r3, r0
 8007f44:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8007f46:	2300      	movs	r3, #0
 8007f48:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 8007f4a:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <CRYP_GetITStatus+0x34>)
 8007f4c:	69da      	ldr	r2, [r3, #28]
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	4013      	ands	r3, r2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d002      	beq.n	8007f5c <CRYP_GetITStatus+0x20>
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 8007f56:	2301      	movs	r3, #1
 8007f58:	73fb      	strb	r3, [r7, #15]
 8007f5a:	e001      	b.n	8007f60 <CRYP_GetITStatus+0x24>
  }
  else
  {
    /* CRYP_IT is reset */
    bitstatus = RESET;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CRYP_IT status */
  return bitstatus;
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	50060000 	.word	0x50060000

08007f74 <CRYP_GetCmdStatus>:
  * @brief  Returns whether CRYP peripheral is enabled or disabled.
  * @param  none.
  * @retval Current state of the CRYP peripheral (ENABLE or DISABLE).
  */
FunctionalState CRYP_GetCmdStatus(void)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
  FunctionalState state = DISABLE;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	71fb      	strb	r3, [r7, #7]

  if ((CRYP->CR & CRYP_CR_CRYPEN) != 0)
 8007f7e:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <CRYP_GetCmdStatus+0x30>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <CRYP_GetCmdStatus+0x1c>
  {
    /* CRYPEN bit is set */
    state = ENABLE;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	71fb      	strb	r3, [r7, #7]
 8007f8e:	e001      	b.n	8007f94 <CRYP_GetCmdStatus+0x20>
  }
  else
  {
    /* CRYPEN bit is reset */
    state = DISABLE;
 8007f90:	2300      	movs	r3, #0
 8007f92:	71fb      	strb	r3, [r7, #7]
  }
  return state;
 8007f94:	79fb      	ldrb	r3, [r7, #7]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	50060000 	.word	0x50060000

08007fa8 <CRYP_GetFlagStatus>:
  *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
  *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
  * @retval The new state of CRYP_FLAG (SET or RESET).
  */
FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 8007fba:	79fb      	ldrb	r3, [r7, #7]
 8007fbc:	f003 0320 	and.w	r3, r3, #32
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d003      	beq.n	8007fcc <CRYP_GetFlagStatus+0x24>
  {
    tempreg = CRYP->RISR;
 8007fc4:	4b0b      	ldr	r3, [pc, #44]	; (8007ff4 <CRYP_GetFlagStatus+0x4c>)
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	60bb      	str	r3, [r7, #8]
 8007fca:	e002      	b.n	8007fd2 <CRYP_GetFlagStatus+0x2a>
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 8007fcc:	4b09      	ldr	r3, [pc, #36]	; (8007ff4 <CRYP_GetFlagStatus+0x4c>)
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	60bb      	str	r3, [r7, #8]
  }


  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 8007fd2:	79fa      	ldrb	r2, [r7, #7]
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d002      	beq.n	8007fe2 <CRYP_GetFlagStatus+0x3a>
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	73fb      	strb	r3, [r7, #15]
 8007fe0:	e001      	b.n	8007fe6 <CRYP_GetFlagStatus+0x3e>
  }
  else
  {
    /* CRYP_FLAG is reset */
    bitstatus = RESET;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	50060000 	.word	0x50060000

08007ff8 <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8007ff8:	b590      	push	{r4, r7, lr}
 8007ffa:	b0bd      	sub	sp, #244	; 0xf4
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	607b      	str	r3, [r7, #4]
 8008002:	4603      	mov	r3, r0
 8008004:	73fb      	strb	r3, [r7, #15]
 8008006:	4613      	mov	r3, r2
 8008008:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 800800a:	2300      	movs	r3, #0
 800800c:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800800e:	2300      	movs	r3, #0
 8008010:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  ErrorStatus status = SUCCESS;
 8008014:	2301      	movs	r3, #1
 8008016:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  uint32_t keyaddr    = (uint32_t)Key;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t inputaddr  = (uint32_t)Input;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  uint32_t outputaddr = (uint32_t)Output;
 8008026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800802a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t i = 0;
 800802e:	2300      	movs	r3, #0
 8008030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8008034:	f107 0318 	add.w	r3, r7, #24
 8008038:	4618      	mov	r0, r3
 800803a:	f7ff fd2f 	bl	8007a9c <CRYP_KeyStructInit>

  switch(Keysize)
 800803e:	89bb      	ldrh	r3, [r7, #12]
 8008040:	2bc0      	cmp	r3, #192	; 0xc0
 8008042:	d04c      	beq.n	80080de <CRYP_AES_ECB+0xe6>
 8008044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008048:	f000 80b4 	beq.w	80081b4 <CRYP_AES_ECB+0x1bc>
 800804c:	2b80      	cmp	r3, #128	; 0x80
 800804e:	d000      	beq.n	8008052 <CRYP_AES_ECB+0x5a>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8008050:	e123      	b.n	800829a <CRYP_AES_ECB+0x2a2>
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8008052:	2300      	movs	r3, #0
 8008054:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8008056:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008060:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008064:	ba1b      	rev	r3, r3
 8008066:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 800806a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800806e:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8008070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008074:	3304      	adds	r3, #4
 8008076:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800807a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008084:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008088:	ba1b      	rev	r3, r3
 800808a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return(result);
 800808e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008092:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8008094:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008098:	3304      	adds	r3, #4
 800809a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800809e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80080a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80080ac:	ba1b      	rev	r3, r3
 80080ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 80080b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80080b6:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80080b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080bc:	3304      	adds	r3, #4
 80080be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80080c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80080cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080d0:	ba1b      	rev	r3, r3
 80080d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  return(result);
 80080d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80080da:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80080dc:	e0dd      	b.n	800829a <CRYP_AES_ECB+0x2a2>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80080de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080e2:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80080e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80080ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080f2:	ba1b      	rev	r3, r3
 80080f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return(result);
 80080f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080fc:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 80080fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008102:	3304      	adds	r3, #4
 8008104:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8008108:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008112:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008116:	ba1b      	rev	r3, r3
 8008118:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return(result);
 800811c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008120:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8008122:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008126:	3304      	adds	r3, #4
 8008128:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800812c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008136:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800813a:	ba1b      	rev	r3, r3
 800813c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 8008140:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008144:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8008146:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800814a:	3304      	adds	r3, #4
 800814c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8008150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800815a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800815e:	ba1b      	rev	r3, r3
 8008160:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 8008164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008168:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 800816a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800816e:	3304      	adds	r3, #4
 8008170:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8008174:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800817e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008182:	ba1b      	rev	r3, r3
 8008184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8008188:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800818c:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 800818e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008192:	3304      	adds	r3, #4
 8008194:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8008198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80081a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80081a6:	ba1b      	rev	r3, r3
 80081a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  return(result);
 80081ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80081b0:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80081b2:	e072      	b.n	800829a <CRYP_AES_ECB+0x2a2>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80081b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081b8:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80081ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80081c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081c4:	ba1b      	rev	r3, r3
 80081c6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80081c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081ca:	61bb      	str	r3, [r7, #24]
    keyaddr+=4;
 80081cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081d0:	3304      	adds	r3, #4
 80081d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 80081d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	657b      	str	r3, [r7, #84]	; 0x54
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80081de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081e0:	ba1b      	rev	r3, r3
 80081e2:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 80081e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081e6:	61fb      	str	r3, [r7, #28]
    keyaddr+=4;
 80081e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081ec:	3304      	adds	r3, #4
 80081ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80081f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80081fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081fc:	ba1b      	rev	r3, r3
 80081fe:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 8008200:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008202:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8008204:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008208:	3304      	adds	r3, #4
 800820a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800820e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008216:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008218:	ba1b      	rev	r3, r3
 800821a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800821c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800821e:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8008220:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008224:	3304      	adds	r3, #4
 8008226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800822a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	66fb      	str	r3, [r7, #108]	; 0x6c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008234:	ba1b      	rev	r3, r3
 8008236:	66bb      	str	r3, [r7, #104]	; 0x68
  return(result);
 8008238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800823a:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 800823c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008240:	3304      	adds	r3, #4
 8008242:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8008246:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	677b      	str	r3, [r7, #116]	; 0x74
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800824e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008250:	ba1b      	rev	r3, r3
 8008252:	673b      	str	r3, [r7, #112]	; 0x70
  return(result);
 8008254:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008256:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8008258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800825c:	3304      	adds	r3, #4
 800825e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8008262:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	67fb      	str	r3, [r7, #124]	; 0x7c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800826a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800826c:	ba1b      	rev	r3, r3
 800826e:	67bb      	str	r3, [r7, #120]	; 0x78
  return(result);
 8008270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008272:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8008274:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008278:	3304      	adds	r3, #4
 800827a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800827e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008288:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800828c:	ba1b      	rev	r3, r3
 800828e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  return(result);
 8008292:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008296:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8008298:	bf00      	nop
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 800829a:	7bfb      	ldrb	r3, [r7, #15]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d130      	bne.n	8008302 <CRYP_AES_ECB+0x30a>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 80082a0:	f7ff fc6c 	bl	8007b7c <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80082a4:	2304      	movs	r3, #4
 80082a6:	63bb      	str	r3, [r7, #56]	; 0x38
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 80082a8:	2338      	movs	r3, #56	; 0x38
 80082aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 80082ac:	2300      	movs	r3, #0
 80082ae:	643b      	str	r3, [r7, #64]	; 0x40
    CRYP_Init(&AES_CRYP_InitStructure);
 80082b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7ff fb5d 	bl	8007974 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80082ba:	f107 0318 	add.w	r3, r7, #24
 80082be:	4618      	mov	r0, r3
 80082c0:	f7ff fbc0 	bl	8007a44 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80082c4:	2001      	movs	r0, #1
 80082c6:	f7ff fc69 	bl	8007b9c <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80082ca:	2010      	movs	r0, #16
 80082cc:	f7ff fe6c 	bl	8007fa8 <CRYP_GetFlagStatus>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      counter++;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	3301      	adds	r3, #1
 80082da:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082e2:	d003      	beq.n	80082ec <CRYP_AES_ECB+0x2f4>
 80082e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1ee      	bne.n	80082ca <CRYP_AES_ECB+0x2d2>

    if (busystatus != RESET)
 80082ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d003      	beq.n	80082fc <CRYP_AES_ECB+0x304>
   {
       status = ERROR;
 80082f4:	2300      	movs	r3, #0
 80082f6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80082fa:	e009      	b.n	8008310 <CRYP_AES_ECB+0x318>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80082fc:	2304      	movs	r3, #4
 80082fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8008300:	e006      	b.n	8008310 <CRYP_AES_ECB+0x318>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8008302:	f107 0318 	add.w	r3, r7, #24
 8008306:	4618      	mov	r0, r3
 8008308:	f7ff fb9c 	bl	8007a44 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800830c:	2300      	movs	r3, #0
 800830e:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 8008310:	2320      	movs	r3, #32
 8008312:	63fb      	str	r3, [r7, #60]	; 0x3c
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8008314:	2380      	movs	r3, #128	; 0x80
 8008316:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&AES_CRYP_InitStructure);
 8008318:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff fb29 	bl	8007974 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8008322:	f7ff fc2b 	bl	8007b7c <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8008326:	2001      	movs	r0, #1
 8008328:	f7ff fc38 	bl	8007b9c <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 800832c:	f7ff fe22 	bl	8007f74 <CRYP_GetCmdStatus>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <CRYP_AES_ECB+0x342>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8008336:	2300      	movs	r3, #0
 8008338:	e08b      	b.n	8008452 <CRYP_AES_ECB+0x45a>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800833a:	2300      	movs	r3, #0
 800833c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008340:	e077      	b.n	8008432 <CRYP_AES_ECB+0x43a>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008342:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4618      	mov	r0, r3
 800834a:	f7ff fc45 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 800834e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008352:	3304      	adds	r3, #4
 8008354:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008358:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4618      	mov	r0, r3
 8008360:	f7ff fc3a 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 8008364:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008368:	3304      	adds	r3, #4
 800836a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800836e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4618      	mov	r0, r3
 8008376:	f7ff fc2f 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 800837a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800837e:	3304      	adds	r3, #4
 8008380:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008384:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4618      	mov	r0, r3
 800838c:	f7ff fc24 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 8008390:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008394:	3304      	adds	r3, #4
 8008396:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    /* Wait until the complete message has been processed */
    counter = 0;
 800839a:	2300      	movs	r3, #0
 800839c:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800839e:	2010      	movs	r0, #16
 80083a0:	f7ff fe02 	bl	8007fa8 <CRYP_GetFlagStatus>
 80083a4:	4603      	mov	r3, r0
 80083a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      counter++;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	3301      	adds	r3, #1
 80083ae:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083b6:	d003      	beq.n	80083c0 <CRYP_AES_ECB+0x3c8>
 80083b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1ee      	bne.n	800839e <CRYP_AES_ECB+0x3a6>

    if (busystatus != RESET)
 80083c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d003      	beq.n	80083d0 <CRYP_AES_ECB+0x3d8>
   {
       status = ERROR;
 80083c8:	2300      	movs	r3, #0
 80083ca:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80083ce:	e02b      	b.n	8008428 <CRYP_AES_ECB+0x430>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80083d0:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 80083d4:	f7ff fc10 	bl	8007bf8 <CRYP_DataOut>
 80083d8:	4603      	mov	r3, r0
 80083da:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80083dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e0:	3304      	adds	r3, #4
 80083e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80083e6:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 80083ea:	f7ff fc05 	bl	8007bf8 <CRYP_DataOut>
 80083ee:	4603      	mov	r3, r0
 80083f0:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80083f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083f6:	3304      	adds	r3, #4
 80083f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80083fc:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8008400:	f7ff fbfa 	bl	8007bf8 <CRYP_DataOut>
 8008404:	4603      	mov	r3, r0
 8008406:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8008408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800840c:	3304      	adds	r3, #4
 800840e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 8008412:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8008416:	f7ff fbef 	bl	8007bf8 <CRYP_DataOut>
 800841a:	4603      	mov	r3, r0
 800841c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800841e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008422:	3304      	adds	r3, #4
 8008424:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8008428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800842c:	3310      	adds	r3, #16
 800842e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008432:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008436:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800843a:	429a      	cmp	r2, r3
 800843c:	d204      	bcs.n	8008448 <CRYP_AES_ECB+0x450>
 800843e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8008442:	2b00      	cmp	r3, #0
 8008444:	f47f af7d 	bne.w	8008342 <CRYP_AES_ECB+0x34a>
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8008448:	2000      	movs	r0, #0
 800844a:	f7ff fba7 	bl	8007b9c <CRYP_Cmd>

  return status; 
 800844e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 8008452:	4618      	mov	r0, r3
 8008454:	37f4      	adds	r7, #244	; 0xf4
 8008456:	46bd      	mov	sp, r7
 8008458:	bd90      	pop	{r4, r7, pc}

0800845a <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 800845a:	b590      	push	{r4, r7, lr}
 800845c:	b0c9      	sub	sp, #292	; 0x124
 800845e:	af00      	add	r7, sp, #0
 8008460:	4604      	mov	r4, r0
 8008462:	f107 0008 	add.w	r0, r7, #8
 8008466:	6001      	str	r1, [r0, #0]
 8008468:	1d39      	adds	r1, r7, #4
 800846a:	600a      	str	r2, [r1, #0]
 800846c:	4619      	mov	r1, r3
 800846e:	f107 030f 	add.w	r3, r7, #15
 8008472:	4622      	mov	r2, r4
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	f107 030c 	add.w	r3, r7, #12
 800847a:	460a      	mov	r2, r1
 800847c:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800847e:	f107 0310 	add.w	r3, r7, #16
 8008482:	2200      	movs	r2, #0
 8008484:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  ErrorStatus status = SUCCESS;
 800848c:	2301      	movs	r3, #1
 800848e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  uint32_t keyaddr    = (uint32_t)Key;
 8008492:	1d3b      	adds	r3, r7, #4
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  uint32_t inputaddr  = (uint32_t)Input;
 800849a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800849e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  uint32_t outputaddr = (uint32_t)Output;
 80084a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80084a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  uint32_t ivaddr = (uint32_t)InitVectors;
 80084aa:	f107 0308 	add.w	r3, r7, #8
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint32_t i = 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 80084ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084be:	4618      	mov	r0, r3
 80084c0:	f7ff faec 	bl	8007a9c <CRYP_KeyStructInit>

  switch(Keysize)
 80084c4:	f107 030c 	add.w	r3, r7, #12
 80084c8:	881b      	ldrh	r3, [r3, #0]
 80084ca:	2bc0      	cmp	r3, #192	; 0xc0
 80084cc:	d04c      	beq.n	8008568 <CRYP_AES_CBC+0x10e>
 80084ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084d2:	f000 80b4 	beq.w	800863e <CRYP_AES_CBC+0x1e4>
 80084d6:	2b80      	cmp	r3, #128	; 0x80
 80084d8:	d000      	beq.n	80084dc <CRYP_AES_CBC+0x82>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 80084da:	e139      	b.n	8008750 <CRYP_AES_CBC+0x2f6>
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 80084dc:	2300      	movs	r3, #0
 80084de:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80084e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80084ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084ee:	ba1b      	rev	r3, r3
 80084f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  return(result);
 80084f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f8:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80084fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80084fe:	3304      	adds	r3, #4
 8008500:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8008504:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800850e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008512:	ba1b      	rev	r3, r3
 8008514:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  return(result);
 8008518:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800851c:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 800851e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008522:	3304      	adds	r3, #4
 8008524:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8008528:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008532:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008536:	ba1b      	rev	r3, r3
 8008538:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  return(result);
 800853c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008540:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8008542:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008546:	3304      	adds	r3, #4
 8008548:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800854c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008556:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800855a:	ba1b      	rev	r3, r3
 800855c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  return(result);
 8008560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008564:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8008566:	e0f3      	b.n	8008750 <CRYP_AES_CBC+0x2f6>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8008568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800856c:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800856e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008578:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800857c:	ba1b      	rev	r3, r3
 800857e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 8008582:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008586:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8008588:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800858c:	3304      	adds	r3, #4
 800858e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8008592:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800859c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80085a0:	ba1b      	rev	r3, r3
 80085a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return(result);
 80085a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80085aa:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80085ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80085b0:	3304      	adds	r3, #4
 80085b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80085b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80085c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80085c4:	ba1b      	rev	r3, r3
 80085c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  return(result);
 80085ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80085ce:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80085d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80085d4:	3304      	adds	r3, #4
 80085d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80085da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80085e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80085e8:	ba1b      	rev	r3, r3
 80085ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 80085ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80085f2:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80085f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80085f8:	3304      	adds	r3, #4
 80085fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80085fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800860c:	ba1b      	rev	r3, r3
 800860e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8008612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008616:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8008618:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800861c:	3304      	adds	r3, #4
 800861e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8008622:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800862c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008630:	ba1b      	rev	r3, r3
 8008632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  return(result);
 8008636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800863a:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 800863c:	e088      	b.n	8008750 <CRYP_AES_CBC+0x2f6>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 800863e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008642:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8008644:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	67bb      	str	r3, [r7, #120]	; 0x78
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800864c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800864e:	ba1b      	rev	r3, r3
 8008650:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 8008652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008654:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8008656:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800865a:	3304      	adds	r3, #4
 800865c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8008660:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800866a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800866e:	ba1b      	rev	r3, r3
 8008670:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8008672:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008674:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8008676:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800867a:	3304      	adds	r3, #4
 800867c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8008680:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800868a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800868e:	ba1b      	rev	r3, r3
 8008690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 8008694:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008698:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 800869a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800869e:	3304      	adds	r3, #4
 80086a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80086a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80086ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80086b2:	ba1b      	rev	r3, r3
 80086b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 80086b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086bc:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80086be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80086c2:	3304      	adds	r3, #4
 80086c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80086c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80086d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80086d6:	ba1b      	rev	r3, r3
 80086d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 80086dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80086e0:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80086e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80086e6:	3304      	adds	r3, #4
 80086e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80086ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80086f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086fa:	ba1b      	rev	r3, r3
 80086fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 8008700:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008704:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8008706:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800870a:	3304      	adds	r3, #4
 800870c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8008710:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800871a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800871e:	ba1b      	rev	r3, r3
 8008720:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  return(result);
 8008724:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 800872a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800872e:	3304      	adds	r3, #4
 8008730:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8008734:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800873e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008742:	ba1b      	rev	r3, r3
 8008744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
 8008748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800874c:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 800874e:	bf00      	nop
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8008750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008758:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800875a:	ba1b      	rev	r3, r3
 800875c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800875e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008760:	f107 0314 	add.w	r3, r7, #20
 8008764:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 8008766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800876a:	3304      	adds	r3, #4
 800876c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8008770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008778:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800877a:	ba1b      	rev	r3, r3
 800877c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 800877e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008780:	f107 0314 	add.w	r3, r7, #20
 8008784:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 8008786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800878a:	3304      	adds	r3, #4
 800878c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8008790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008798:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800879a:	ba1b      	rev	r3, r3
 800879c:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 800879e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087a0:	f107 0314 	add.w	r3, r7, #20
 80087a4:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 80087a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087aa:	3304      	adds	r3, #4
 80087ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 80087b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	673b      	str	r3, [r7, #112]	; 0x70
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80087b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087ba:	ba1b      	rev	r3, r3
 80087bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80087be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087c0:	f107 0314 	add.w	r3, r7, #20
 80087c4:	60da      	str	r2, [r3, #12]


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 80087c6:	f107 030f 	add.w	r3, r7, #15
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d136      	bne.n	800883e <CRYP_AES_CBC+0x3e4>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 80087d0:	f7ff f9d4 	bl	8007b7c <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80087d4:	2304      	movs	r3, #4
 80087d6:	647b      	str	r3, [r7, #68]	; 0x44
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 80087d8:	2338      	movs	r3, #56	; 0x38
 80087da:	64bb      	str	r3, [r7, #72]	; 0x48
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 80087dc:	2300      	movs	r3, #0
 80087de:	64fb      	str	r3, [r7, #76]	; 0x4c

    CRYP_Init(&AES_CRYP_InitStructure);
 80087e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7ff f8c5 	bl	8007974 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80087ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff f928 	bl	8007a44 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80087f4:	2001      	movs	r0, #1
 80087f6:	f7ff f9d1 	bl	8007b9c <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80087fa:	2010      	movs	r0, #16
 80087fc:	f7ff fbd4 	bl	8007fa8 <CRYP_GetFlagStatus>
 8008800:	4603      	mov	r3, r0
 8008802:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      counter++;
 8008806:	f107 0310 	add.w	r3, r7, #16
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	1c5a      	adds	r2, r3, #1
 800880e:	f107 0310 	add.w	r3, r7, #16
 8008812:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008814:	f107 0310 	add.w	r3, r7, #16
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800881e:	d003      	beq.n	8008828 <CRYP_AES_CBC+0x3ce>
 8008820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1e8      	bne.n	80087fa <CRYP_AES_CBC+0x3a0>

    if (busystatus != RESET)
 8008828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800882c:	2b00      	cmp	r3, #0
 800882e:	d003      	beq.n	8008838 <CRYP_AES_CBC+0x3de>
   {
       status = ERROR;
 8008830:	2300      	movs	r3, #0
 8008832:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8008836:	e009      	b.n	800884c <CRYP_AES_CBC+0x3f2>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8008838:	2304      	movs	r3, #4
 800883a:	647b      	str	r3, [r7, #68]	; 0x44
 800883c:	e006      	b.n	800884c <CRYP_AES_CBC+0x3f2>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800883e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008842:	4618      	mov	r0, r3
 8008844:	f7ff f8fe 	bl	8007a44 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8008848:	2300      	movs	r3, #0
 800884a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 800884c:	2328      	movs	r3, #40	; 0x28
 800884e:	64bb      	str	r3, [r7, #72]	; 0x48
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8008850:	2380      	movs	r3, #128	; 0x80
 8008852:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&AES_CRYP_InitStructure);
 8008854:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008858:	4618      	mov	r0, r3
 800885a:	f7ff f88b 	bl	8007974 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 800885e:	f107 0314 	add.w	r3, r7, #20
 8008862:	4618      	mov	r0, r3
 8008864:	f7ff f93c 	bl	8007ae0 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8008868:	f7ff f988 	bl	8007b7c <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800886c:	2001      	movs	r0, #1
 800886e:	f7ff f995 	bl	8007b9c <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8008872:	f7ff fb7f 	bl	8007f74 <CRYP_GetCmdStatus>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <CRYP_AES_CBC+0x426>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 800887c:	2300      	movs	r3, #0
 800887e:	e093      	b.n	80089a8 <CRYP_AES_CBC+0x54e>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8008880:	2300      	movs	r3, #0
 8008882:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008886:	e07f      	b.n	8008988 <CRYP_AES_CBC+0x52e>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008888:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4618      	mov	r0, r3
 8008890:	f7ff f9a2 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 8008894:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008898:	3304      	adds	r3, #4
 800889a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800889e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7ff f997 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 80088aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80088ae:	3304      	adds	r3, #4
 80088b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80088b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7ff f98c 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 80088c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80088c4:	3304      	adds	r3, #4
 80088c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80088ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7ff f981 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 80088d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80088da:	3304      	adds	r3, #4
 80088dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    /* Wait until the complete message has been processed */
    counter = 0;
 80088e0:	f107 0310 	add.w	r3, r7, #16
 80088e4:	2200      	movs	r2, #0
 80088e6:	601a      	str	r2, [r3, #0]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80088e8:	2010      	movs	r0, #16
 80088ea:	f7ff fb5d 	bl	8007fa8 <CRYP_GetFlagStatus>
 80088ee:	4603      	mov	r3, r0
 80088f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      counter++;
 80088f4:	f107 0310 	add.w	r3, r7, #16
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	f107 0310 	add.w	r3, r7, #16
 8008900:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008902:	f107 0310 	add.w	r3, r7, #16
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800890c:	d003      	beq.n	8008916 <CRYP_AES_CBC+0x4bc>
 800890e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1e8      	bne.n	80088e8 <CRYP_AES_CBC+0x48e>

    if (busystatus != RESET)
 8008916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <CRYP_AES_CBC+0x4cc>
   {
       status = ERROR;
 800891e:	2300      	movs	r3, #0
 8008920:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8008924:	e02b      	b.n	800897e <CRYP_AES_CBC+0x524>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008926:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800892a:	f7ff f965 	bl	8007bf8 <CRYP_DataOut>
 800892e:	4603      	mov	r3, r0
 8008930:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8008932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008936:	3304      	adds	r3, #4
 8008938:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800893c:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8008940:	f7ff f95a 	bl	8007bf8 <CRYP_DataOut>
 8008944:	4603      	mov	r3, r0
 8008946:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8008948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800894c:	3304      	adds	r3, #4
 800894e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008952:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8008956:	f7ff f94f 	bl	8007bf8 <CRYP_DataOut>
 800895a:	4603      	mov	r3, r0
 800895c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800895e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008962:	3304      	adds	r3, #4
 8008964:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008968:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800896c:	f7ff f944 	bl	8007bf8 <CRYP_DataOut>
 8008970:	4603      	mov	r3, r0
 8008972:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8008974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008978:	3304      	adds	r3, #4
 800897a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800897e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008982:	3310      	adds	r3, #16
 8008984:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008988:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800898c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008990:	429a      	cmp	r2, r3
 8008992:	d204      	bcs.n	800899e <CRYP_AES_CBC+0x544>
 8008994:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008998:	2b00      	cmp	r3, #0
 800899a:	f47f af75 	bne.w	8008888 <CRYP_AES_CBC+0x42e>
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800899e:	2000      	movs	r0, #0
 80089a0:	f7ff f8fc 	bl	8007b9c <CRYP_Cmd>

  return status;
 80089a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd90      	pop	{r4, r7, pc}

080089b2 <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80089b2:	b590      	push	{r4, r7, lr}
 80089b4:	b0c9      	sub	sp, #292	; 0x124
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	4604      	mov	r4, r0
 80089ba:	f107 0008 	add.w	r0, r7, #8
 80089be:	6001      	str	r1, [r0, #0]
 80089c0:	1d39      	adds	r1, r7, #4
 80089c2:	600a      	str	r2, [r1, #0]
 80089c4:	4619      	mov	r1, r3
 80089c6:	f107 030f 	add.w	r3, r7, #15
 80089ca:	4622      	mov	r2, r4
 80089cc:	701a      	strb	r2, [r3, #0]
 80089ce:	f107 030c 	add.w	r3, r7, #12
 80089d2:	460a      	mov	r2, r1
 80089d4:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80089d6:	f107 0310 	add.w	r3, r7, #16
 80089da:	2200      	movs	r2, #0
 80089dc:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 80089de:	2300      	movs	r3, #0
 80089e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  ErrorStatus status = SUCCESS;
 80089e4:	2301      	movs	r3, #1
 80089e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  uint32_t keyaddr    = (uint32_t)Key;
 80089ea:	1d3b      	adds	r3, r7, #4
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  uint32_t inputaddr  = (uint32_t)Input;
 80089f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80089f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  uint32_t outputaddr = (uint32_t)Output;
 80089fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80089fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8008a02:	f107 0308 	add.w	r3, r7, #8
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint32_t i = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8008a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a16:	4618      	mov	r0, r3
 8008a18:	f7ff f840 	bl	8007a9c <CRYP_KeyStructInit>

  switch(Keysize)
 8008a1c:	f107 030c 	add.w	r3, r7, #12
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	2bc0      	cmp	r3, #192	; 0xc0
 8008a24:	d04c      	beq.n	8008ac0 <CRYP_AES_CTR+0x10e>
 8008a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a2a:	f000 80b4 	beq.w	8008b96 <CRYP_AES_CTR+0x1e4>
 8008a2e:	2b80      	cmp	r3, #128	; 0x80
 8008a30:	d000      	beq.n	8008a34 <CRYP_AES_CTR+0x82>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8008a32:	e139      	b.n	8008ca8 <CRYP_AES_CTR+0x2f6>
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8008a34:	2300      	movs	r3, #0
 8008a36:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8008a38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008a42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a46:	ba1b      	rev	r3, r3
 8008a48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  return(result);
 8008a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a50:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8008a52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a56:	3304      	adds	r3, #4
 8008a58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8008a5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008a66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a6a:	ba1b      	rev	r3, r3
 8008a6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  return(result);
 8008a70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008a74:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8008a76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8008a80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008a8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a8e:	ba1b      	rev	r3, r3
 8008a90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  return(result);
 8008a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a98:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8008a9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8008aa4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008aae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ab2:	ba1b      	rev	r3, r3
 8008ab4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  return(result);
 8008ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008abc:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8008abe:	e0f3      	b.n	8008ca8 <CRYP_AES_CTR+0x2f6>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8008ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ac4:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8008ac6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008ad0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ad4:	ba1b      	rev	r3, r3
 8008ad6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 8008ada:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8008ae0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8008aea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008af4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008af8:	ba1b      	rev	r3, r3
 8008afa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return(result);
 8008afe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b02:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8008b04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b08:	3304      	adds	r3, #4
 8008b0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8008b0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008b18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b1c:	ba1b      	rev	r3, r3
 8008b1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  return(result);
 8008b22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008b26:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8008b28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8008b32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008b3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008b40:	ba1b      	rev	r3, r3
 8008b42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return(result);
 8008b46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b4a:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8008b4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b50:	3304      	adds	r3, #4
 8008b52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8008b56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008b60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008b64:	ba1b      	rev	r3, r3
 8008b66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  return(result);
 8008b6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8008b70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b74:	3304      	adds	r3, #4
 8008b76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8008b7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b88:	ba1b      	rev	r3, r3
 8008b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  return(result);
 8008b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b92:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8008b94:	e088      	b.n	8008ca8 <CRYP_AES_CTR+0x2f6>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8008b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b9a:	653b      	str	r3, [r7, #80]	; 0x50
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8008b9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	67bb      	str	r3, [r7, #120]	; 0x78
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008ba4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ba6:	ba1b      	rev	r3, r3
 8008ba8:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 8008baa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bac:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8008bae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8008bb8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008bc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008bc6:	ba1b      	rev	r3, r3
 8008bc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8008bca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8008bce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8008bd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008be6:	ba1b      	rev	r3, r3
 8008be8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 8008bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8008bf2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8008bfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008c06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c0a:	ba1b      	rev	r3, r3
 8008c0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 8008c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c14:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8008c16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8008c20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008c2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c2e:	ba1b      	rev	r3, r3
 8008c30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 8008c34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008c38:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8008c3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c3e:	3304      	adds	r3, #4
 8008c40:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8008c44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008c4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c52:	ba1b      	rev	r3, r3
 8008c54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 8008c58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c5c:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8008c5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c62:	3304      	adds	r3, #4
 8008c64:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8008c68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008c72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c76:	ba1b      	rev	r3, r3
 8008c78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  return(result);
 8008c7c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c80:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8008c82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c86:	3304      	adds	r3, #4
 8008c88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8008c8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008c96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c9a:	ba1b      	rev	r3, r3
 8008c9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
 8008ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ca4:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8008ca6:	bf00      	nop
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8008ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cb2:	ba1b      	rev	r3, r3
 8008cb4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008cb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cb8:	f107 0314 	add.w	r3, r7, #20
 8008cbc:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 8008cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8008cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008cd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cd2:	ba1b      	rev	r3, r3
 8008cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8008cd6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008cd8:	f107 0314 	add.w	r3, r7, #20
 8008cdc:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 8008cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8008ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008cf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008cf2:	ba1b      	rev	r3, r3
 8008cf4:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 8008cf6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008cf8:	f107 0314 	add.w	r3, r7, #20
 8008cfc:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 8008cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d02:	3304      	adds	r3, #4
 8008d04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8008d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	673b      	str	r3, [r7, #112]	; 0x70
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008d10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d12:	ba1b      	rev	r3, r3
 8008d14:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8008d16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008d18:	f107 0314 	add.w	r3, r7, #20
 8008d1c:	60da      	str	r2, [r3, #12]

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8008d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe fe8e 	bl	8007a44 <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8008d28:	f107 030f 	add.w	r3, r7, #15
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d102      	bne.n	8008d38 <CRYP_AES_CTR+0x386>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8008d32:	2304      	movs	r3, #4
 8008d34:	647b      	str	r3, [r7, #68]	; 0x44
 8008d36:	e001      	b.n	8008d3c <CRYP_AES_CTR+0x38a>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 8008d3c:	2330      	movs	r3, #48	; 0x30
 8008d3e:	64bb      	str	r3, [r7, #72]	; 0x48
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8008d40:	2380      	movs	r3, #128	; 0x80
 8008d42:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&AES_CRYP_InitStructure);
 8008d44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fe fe13 	bl	8007974 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8008d4e:	f107 0314 	add.w	r3, r7, #20
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fe fec4 	bl	8007ae0 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8008d58:	f7fe ff10 	bl	8007b7c <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8008d5c:	2001      	movs	r0, #1
 8008d5e:	f7fe ff1d 	bl	8007b9c <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 8008d62:	f7ff f907 	bl	8007f74 <CRYP_GetCmdStatus>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d101      	bne.n	8008d70 <CRYP_AES_CTR+0x3be>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	e093      	b.n	8008e98 <CRYP_AES_CTR+0x4e6>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8008d70:	2300      	movs	r3, #0
 8008d72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008d76:	e07f      	b.n	8008e78 <CRYP_AES_CTR+0x4c6>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008d78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fe ff2a 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 8008d84:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d88:	3304      	adds	r3, #4
 8008d8a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008d8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fe ff1f 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 8008d9a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008d9e:	3304      	adds	r3, #4
 8008da0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008da4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fe ff14 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 8008db0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008db4:	3304      	adds	r3, #4
 8008db6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8008dba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fe ff09 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 8008dc6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8008dca:	3304      	adds	r3, #4
 8008dcc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    /* Wait until the complete message has been processed */
    counter = 0;
 8008dd0:	f107 0310 	add.w	r3, r7, #16
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	601a      	str	r2, [r3, #0]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8008dd8:	2010      	movs	r0, #16
 8008dda:	f7ff f8e5 	bl	8007fa8 <CRYP_GetFlagStatus>
 8008dde:	4603      	mov	r3, r0
 8008de0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      counter++;
 8008de4:	f107 0310 	add.w	r3, r7, #16
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	1c5a      	adds	r2, r3, #1
 8008dec:	f107 0310 	add.w	r3, r7, #16
 8008df0:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8008df2:	f107 0310 	add.w	r3, r7, #16
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dfc:	d003      	beq.n	8008e06 <CRYP_AES_CTR+0x454>
 8008dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1e8      	bne.n	8008dd8 <CRYP_AES_CTR+0x426>

    if (busystatus != RESET)
 8008e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <CRYP_AES_CTR+0x464>
   {
       status = ERROR;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8008e14:	e02b      	b.n	8008e6e <CRYP_AES_CTR+0x4bc>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008e16:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8008e1a:	f7fe feed 	bl	8007bf8 <CRYP_DataOut>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8008e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e26:	3304      	adds	r3, #4
 8008e28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008e2c:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8008e30:	f7fe fee2 	bl	8007bf8 <CRYP_DataOut>
 8008e34:	4603      	mov	r3, r0
 8008e36:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8008e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e3c:	3304      	adds	r3, #4
 8008e3e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008e42:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8008e46:	f7fe fed7 	bl	8007bf8 <CRYP_DataOut>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8008e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e52:	3304      	adds	r3, #4
 8008e54:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8008e58:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8008e5c:	f7fe fecc 	bl	8007bf8 <CRYP_DataOut>
 8008e60:	4603      	mov	r3, r0
 8008e62:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8008e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e68:	3304      	adds	r3, #4
 8008e6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8008e6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008e72:	3310      	adds	r3, #16
 8008e74:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008e78:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8008e7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d204      	bcs.n	8008e8e <CRYP_AES_CTR+0x4dc>
 8008e84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f47f af75 	bne.w	8008d78 <CRYP_AES_CTR+0x3c6>
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8008e8e:	2000      	movs	r0, #0
 8008e90:	f7fe fe84 	bl	8007b9c <CRYP_Cmd>

  return status;
 8008e94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd90      	pop	{r4, r7, pc}

08008ea2 <CRYP_AES_GCM>:
ErrorStatus CRYP_AES_GCM(uint8_t Mode, uint8_t InitVectors[16],
                         uint8_t *Key, uint16_t Keysize,
                         uint8_t *Input, uint32_t ILength,
                         uint8_t *Header, uint32_t HLength,
                         uint8_t *Output, uint8_t *AuthTAG)
{
 8008ea2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea6:	b0e3      	sub	sp, #396	; 0x18c
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4604      	mov	r4, r0
 8008eac:	f107 0010 	add.w	r0, r7, #16
 8008eb0:	6001      	str	r1, [r0, #0]
 8008eb2:	f107 010c 	add.w	r1, r7, #12
 8008eb6:	600a      	str	r2, [r1, #0]
 8008eb8:	4619      	mov	r1, r3
 8008eba:	f107 0317 	add.w	r3, r7, #23
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	701a      	strb	r2, [r3, #0]
 8008ec2:	f107 0314 	add.w	r3, r7, #20
 8008ec6:	460a      	mov	r2, r1
 8008ec8:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8008eca:	f107 031c 	add.w	r3, r7, #28
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  ErrorStatus status = SUCCESS;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
  uint32_t keyaddr    = (uint32_t)Key;
 8008ede:	f107 030c 	add.w	r3, r7, #12
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  uint32_t inputaddr  = (uint32_t)Input;
 8008ee8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8008eec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  uint32_t outputaddr = (uint32_t)Output;
 8008ef0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8008ef4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8008ef8:	f107 0310 	add.w	r3, r7, #16
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  uint32_t headeraddr = (uint32_t)Header;
 8008f02:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8008f06:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  uint32_t tagaddr = (uint32_t)AuthTAG;
 8008f0a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8008f0e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  uint64_t headerlength = HLength * 8;/* header length in bits */
 8008f12:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	f04f 0400 	mov.w	r4, #0
 8008f1c:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8008f20:	e882 0018 	stmia.w	r2, {r3, r4}
  uint64_t inputlength = ILength * 8;/* input length in bits */
 8008f24:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008f28:	00db      	lsls	r3, r3, #3
 8008f2a:	f04f 0400 	mov.w	r4, #0
 8008f2e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8008f32:	e882 0018 	stmia.w	r2, {r3, r4}
  uint32_t loopcounter = 0;
 8008f36:	2300      	movs	r3, #0
 8008f38:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8008f3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fe fdab 	bl	8007a9c <CRYP_KeyStructInit>

  switch(Keysize)
 8008f46:	f107 0314 	add.w	r3, r7, #20
 8008f4a:	881b      	ldrh	r3, [r3, #0]
 8008f4c:	2bc0      	cmp	r3, #192	; 0xc0
 8008f4e:	d056      	beq.n	8008ffe <CRYP_AES_GCM+0x15c>
 8008f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f54:	f000 80cc 	beq.w	80090f0 <CRYP_AES_GCM+0x24e>
 8008f58:	2b80      	cmp	r3, #128	; 0x80
 8008f5a:	d000      	beq.n	8008f5e <CRYP_AES_GCM+0xbc>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8008f5c:	e169      	b.n	8009232 <CRYP_AES_GCM+0x390>
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8008f5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008f62:	2200      	movs	r2, #0
 8008f64:	60da      	str	r2, [r3, #12]
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8008f66:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008f70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008f74:	ba1b      	rev	r3, r3
 8008f76:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8008f7a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008f7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f82:	611a      	str	r2, [r3, #16]
    keyaddr+=4;
 8008f84:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008f88:	3304      	adds	r3, #4
 8008f8a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8008f8e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008f98:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008f9c:	ba1b      	rev	r3, r3
 8008f9e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8008fa2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8008fa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008faa:	615a      	str	r2, [r3, #20]
    keyaddr+=4;
 8008fac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8008fb6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008fc0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008fc4:	ba1b      	rev	r3, r3
 8008fc6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8008fca:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8008fce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008fd2:	619a      	str	r2, [r3, #24]
    keyaddr+=4;
 8008fd4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008fd8:	3304      	adds	r3, #4
 8008fda:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8008fde:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008fe8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008fec:	ba1b      	rev	r3, r3
 8008fee:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  return(result);
 8008ff2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8008ff6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ffa:	61da      	str	r2, [r3, #28]
    break;
 8008ffc:	e119      	b.n	8009232 <CRYP_AES_GCM+0x390>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8008ffe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009002:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009006:	60da      	str	r2, [r3, #12]
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8009008:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009016:	ba1b      	rev	r3, r3
 8009018:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  return(result);
 800901c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8009020:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009024:	609a      	str	r2, [r3, #8]
    keyaddr+=4;
 8009026:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800902a:	3304      	adds	r3, #4
 800902c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8009030:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800903a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800903e:	ba1b      	rev	r3, r3
 8009040:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  return(result);
 8009044:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8009048:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800904c:	60da      	str	r2, [r3, #12]
    keyaddr+=4;
 800904e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8009052:	3304      	adds	r3, #4
 8009054:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8009058:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009066:	ba1b      	rev	r3, r3
 8009068:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 800906c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8009070:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009074:	611a      	str	r2, [r3, #16]
    keyaddr+=4;
 8009076:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800907a:	3304      	adds	r3, #4
 800907c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8009080:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800908a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800908e:	ba1b      	rev	r3, r3
 8009090:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 8009094:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009098:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800909c:	615a      	str	r2, [r3, #20]
    keyaddr+=4;
 800909e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80090a2:	3304      	adds	r3, #4
 80090a4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80090a8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80090b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80090b6:	ba1b      	rev	r3, r3
 80090b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  return(result);
 80090bc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80090c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090c4:	619a      	str	r2, [r3, #24]
    keyaddr+=4;
 80090c6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80090ca:	3304      	adds	r3, #4
 80090cc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80090d0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80090da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090de:	ba1b      	rev	r3, r3
 80090e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 80090e4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80090e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090ec:	61da      	str	r2, [r3, #28]
    break;
 80090ee:	e0a0      	b.n	8009232 <CRYP_AES_GCM+0x390>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80090f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80090f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090f8:	60da      	str	r2, [r3, #12]
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80090fa:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009104:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009108:	ba1b      	rev	r3, r3
 800910a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return(result);
 800910e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009112:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009116:	601a      	str	r2, [r3, #0]
    keyaddr+=4;
 8009118:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800911c:	3304      	adds	r3, #4
 800911e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8009122:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800912c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009130:	ba1b      	rev	r3, r3
 8009132:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 8009136:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800913a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800913e:	605a      	str	r2, [r3, #4]
    keyaddr+=4;
 8009140:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8009144:	3304      	adds	r3, #4
 8009146:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800914a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009154:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009158:	ba1b      	rev	r3, r3
 800915a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  return(result);
 800915e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009162:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009166:	609a      	str	r2, [r3, #8]
    keyaddr+=4;
 8009168:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800916c:	3304      	adds	r3, #4
 800916e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8009172:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800917c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009180:	ba1b      	rev	r3, r3
 8009182:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  return(result);
 8009186:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800918a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800918e:	60da      	str	r2, [r3, #12]
    keyaddr+=4;
 8009190:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8009194:	3304      	adds	r3, #4
 8009196:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800919a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80091a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091a8:	ba1b      	rev	r3, r3
 80091aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  return(result);
 80091ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80091b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80091b6:	611a      	str	r2, [r3, #16]
    keyaddr+=4;
 80091b8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80091bc:	3304      	adds	r3, #4
 80091be:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80091c2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80091cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80091d0:	ba1b      	rev	r3, r3
 80091d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  return(result);
 80091d6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80091da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80091de:	615a      	str	r2, [r3, #20]
    keyaddr+=4;
 80091e0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80091e4:	3304      	adds	r3, #4
 80091e6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80091ea:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80091f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091f8:	ba1b      	rev	r3, r3
 80091fa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  return(result);
 80091fe:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8009202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009206:	619a      	str	r2, [r3, #24]
    keyaddr+=4;
 8009208:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800920c:	3304      	adds	r3, #4
 800920e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8009212:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800921c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009220:	ba1b      	rev	r3, r3
 8009222:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  return(result);
 8009226:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800922a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800922e:	61da      	str	r2, [r3, #28]
    break;
 8009230:	bf00      	nop
  }
  
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8009232:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800923c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009240:	ba1b      	rev	r3, r3
 8009242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 8009246:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800924a:	f107 0320 	add.w	r3, r7, #32
 800924e:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 8009250:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8009254:	3304      	adds	r3, #4
 8009256:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 800925a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009268:	ba1b      	rev	r3, r3
 800926a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 800926e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009272:	f107 0320 	add.w	r3, r7, #32
 8009276:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 8009278:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800927c:	3304      	adds	r3, #4
 800927e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8009282:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800928c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009290:	ba1b      	rev	r3, r3
 8009292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  return(result);
 8009296:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800929a:	f107 0320 	add.w	r3, r7, #32
 800929e:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 80092a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80092a4:	3304      	adds	r3, #4
 80092a6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 80092aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80092b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80092b8:	ba1b      	rev	r3, r3
 80092ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 80092be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80092c2:	f107 0320 	add.w	r3, r7, #32
 80092c6:	60da      	str	r2, [r3, #12]
  
  /*------------------ AES Encryption ------------------*/
  if(Mode == MODE_ENCRYPT) /* AES encryption */
 80092c8:	f107 0317 	add.w	r3, r7, #23
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	f040 81df 	bne.w	8009692 <CRYP_AES_GCM+0x7f0>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 80092d4:	f7fe fc52 	bl	8007b7c <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80092d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fe fbb1 	bl	8007a44 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 80092e2:	f107 0320 	add.w	r3, r7, #32
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fe fbfa 	bl	8007ae0 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 80092ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80092f0:	2200      	movs	r2, #0
 80092f2:	601a      	str	r2, [r3, #0]
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 80092f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80092f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80092fc:	605a      	str	r2, [r3, #4]
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80092fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009302:	2280      	movs	r2, #128	; 0x80
 8009304:	609a      	str	r2, [r3, #8]
    CRYP_Init(&AES_CRYP_InitStructure);
 8009306:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800930a:	4618      	mov	r0, r3
 800930c:	f7fe fb32 	bl	8007974 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 8009310:	2000      	movs	r0, #0
 8009312:	f7fe fc17 	bl	8007b44 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8009316:	2001      	movs	r0, #1
 8009318:	f7fe fc40 	bl	8007b9c <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE)
 800931c:	bf00      	nop
 800931e:	f7fe fe29 	bl	8007f74 <CRYP_GetCmdStatus>
 8009322:	4603      	mov	r3, r0
 8009324:	2b01      	cmp	r3, #1
 8009326:	d0fa      	beq.n	800931e <CRYP_AES_GCM+0x47c>
    {
    }
    
    /***************************** header phase *******************************/
    if(HLength != 0)
 8009328:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800932c:	2b00      	cmp	r3, #0
 800932e:	d071      	beq.n	8009414 <CRYP_AES_GCM+0x572>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 8009330:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009334:	f7fe fc06 	bl	8007b44 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8009338:	2001      	movs	r0, #1
 800933a:	f7fe fc2f 	bl	8007b9c <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 800933e:	f7fe fe19 	bl	8007f74 <CRYP_GetCmdStatus>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d101      	bne.n	800934c <CRYP_AES_GCM+0x4aa>
      {
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
 8009348:	2300      	movs	r3, #0
 800934a:	e38d      	b.n	8009a68 <CRYP_AES_GCM+0xbc6>
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 800934c:	2300      	movs	r3, #0
 800934e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8009352:	e037      	b.n	80093c4 <CRYP_AES_GCM+0x522>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8009354:	bf00      	nop
 8009356:	2001      	movs	r0, #1
 8009358:	f7fe fe26 	bl	8007fa8 <CRYP_GetFlagStatus>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d0f9      	beq.n	8009356 <CRYP_AES_GCM+0x4b4>
        {
        }
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8009362:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4618      	mov	r0, r3
 800936a:	f7fe fc35 	bl	8007bd8 <CRYP_DataIn>
        headeraddr+=4;
 800936e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8009372:	3304      	adds	r3, #4
 8009374:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8009378:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4618      	mov	r0, r3
 8009380:	f7fe fc2a 	bl	8007bd8 <CRYP_DataIn>
        headeraddr+=4;
 8009384:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8009388:	3304      	adds	r3, #4
 800938a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800938e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4618      	mov	r0, r3
 8009396:	f7fe fc1f 	bl	8007bd8 <CRYP_DataIn>
        headeraddr+=4;
 800939a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800939e:	3304      	adds	r3, #4
 80093a0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 80093a4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe fc14 	bl	8007bd8 <CRYP_DataIn>
        headeraddr+=4;
 80093b0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80093b4:	3304      	adds	r3, #4
 80093b6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 80093ba:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80093be:	3310      	adds	r3, #16
 80093c0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80093c4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80093c8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d3c1      	bcc.n	8009354 <CRYP_AES_GCM+0x4b2>
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 80093d0:	f107 031c 	add.w	r3, r7, #28
 80093d4:	2200      	movs	r2, #0
 80093d6:	601a      	str	r2, [r3, #0]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80093d8:	2010      	movs	r0, #16
 80093da:	f7fe fde5 	bl	8007fa8 <CRYP_GetFlagStatus>
 80093de:	4603      	mov	r3, r0
 80093e0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
        counter++;
 80093e4:	f107 031c 	add.w	r3, r7, #28
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	1c5a      	adds	r2, r3, #1
 80093ec:	f107 031c 	add.w	r3, r7, #28
 80093f0:	601a      	str	r2, [r3, #0]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80093f2:	f107 031c 	add.w	r3, r7, #28
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093fc:	d003      	beq.n	8009406 <CRYP_AES_GCM+0x564>
 80093fe:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e8      	bne.n	80093d8 <CRYP_AES_GCM+0x536>

      if (busystatus != RESET)
 8009406:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800940a:	2b00      	cmp	r3, #0
 800940c:	d002      	beq.n	8009414 <CRYP_AES_GCM+0x572>
      {
        status = ERROR;
 800940e:	2300      	movs	r3, #0
 8009410:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 8009414:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8009418:	2b00      	cmp	r3, #0
 800941a:	f000 80ab 	beq.w	8009574 <CRYP_AES_GCM+0x6d2>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 800941e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009422:	f7fe fb8f 	bl	8007b44 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 8009426:	2001      	movs	r0, #1
 8009428:	f7fe fbb8 	bl	8007b9c <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 800942c:	f7fe fda2 	bl	8007f74 <CRYP_GetCmdStatus>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <CRYP_AES_GCM+0x598>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8009436:	2300      	movs	r3, #0
 8009438:	e316      	b.n	8009a68 <CRYP_AES_GCM+0xbc6>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 800943a:	2300      	movs	r3, #0
 800943c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8009440:	e08d      	b.n	800955e <CRYP_AES_GCM+0x6bc>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET)
 8009442:	bf00      	nop
 8009444:	2001      	movs	r0, #1
 8009446:	f7fe fdaf 	bl	8007fa8 <CRYP_GetFlagStatus>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d0f9      	beq.n	8009444 <CRYP_AES_GCM+0x5a2>
        {
        }
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009450:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4618      	mov	r0, r3
 8009458:	f7fe fbbe 	bl	8007bd8 <CRYP_DataIn>
        inputaddr+=4;
 800945c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009460:	3304      	adds	r3, #4
 8009462:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009466:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4618      	mov	r0, r3
 800946e:	f7fe fbb3 	bl	8007bd8 <CRYP_DataIn>
        inputaddr+=4;
 8009472:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009476:	3304      	adds	r3, #4
 8009478:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800947c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4618      	mov	r0, r3
 8009484:	f7fe fba8 	bl	8007bd8 <CRYP_DataIn>
        inputaddr+=4;
 8009488:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800948c:	3304      	adds	r3, #4
 800948e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009492:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4618      	mov	r0, r3
 800949a:	f7fe fb9d 	bl	8007bd8 <CRYP_DataIn>
        inputaddr+=4;
 800949e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80094a2:	3304      	adds	r3, #4
 80094a4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        
        /* Wait until the complete message has been processed */
        counter = 0;
 80094a8:	f107 031c 	add.w	r3, r7, #28
 80094ac:	2200      	movs	r2, #0
 80094ae:	601a      	str	r2, [r3, #0]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80094b0:	2010      	movs	r0, #16
 80094b2:	f7fe fd79 	bl	8007fa8 <CRYP_GetFlagStatus>
 80094b6:	4603      	mov	r3, r0
 80094b8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
          counter++;
 80094bc:	f107 031c 	add.w	r3, r7, #28
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	1c5a      	adds	r2, r3, #1
 80094c4:	f107 031c 	add.w	r3, r7, #28
 80094c8:	601a      	str	r2, [r3, #0]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80094ca:	f107 031c 	add.w	r3, r7, #28
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094d4:	d003      	beq.n	80094de <CRYP_AES_GCM+0x63c>
 80094d6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1e8      	bne.n	80094b0 <CRYP_AES_GCM+0x60e>

        if (busystatus != RESET)
 80094de:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d003      	beq.n	80094ee <CRYP_AES_GCM+0x64c>
        {
          status = ERROR;
 80094e6:	2300      	movs	r3, #0
 80094e8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80094ec:	e032      	b.n	8009554 <CRYP_AES_GCM+0x6b2>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 80094ee:	bf00      	nop
 80094f0:	2004      	movs	r0, #4
 80094f2:	f7fe fd59 	bl	8007fa8 <CRYP_GetFlagStatus>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d0f9      	beq.n	80094f0 <CRYP_AES_GCM+0x64e>
          {
          }
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80094fc:	f8d7 417c 	ldr.w	r4, [r7, #380]	; 0x17c
 8009500:	f7fe fb7a 	bl	8007bf8 <CRYP_DataOut>
 8009504:	4603      	mov	r3, r0
 8009506:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8009508:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800950c:	3304      	adds	r3, #4
 800950e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009512:	f8d7 417c 	ldr.w	r4, [r7, #380]	; 0x17c
 8009516:	f7fe fb6f 	bl	8007bf8 <CRYP_DataOut>
 800951a:	4603      	mov	r3, r0
 800951c:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 800951e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8009522:	3304      	adds	r3, #4
 8009524:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8009528:	f8d7 417c 	ldr.w	r4, [r7, #380]	; 0x17c
 800952c:	f7fe fb64 	bl	8007bf8 <CRYP_DataOut>
 8009530:	4603      	mov	r3, r0
 8009532:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8009534:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8009538:	3304      	adds	r3, #4
 800953a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800953e:	f8d7 417c 	ldr.w	r4, [r7, #380]	; 0x17c
 8009542:	f7fe fb59 	bl	8007bf8 <CRYP_DataOut>
 8009546:	4603      	mov	r3, r0
 8009548:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 800954a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800954e:	3304      	adds	r3, #4
 8009550:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8009554:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8009558:	3310      	adds	r3, #16
 800955a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800955e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8009562:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8009566:	429a      	cmp	r2, r3
 8009568:	d204      	bcs.n	8009574 <CRYP_AES_GCM+0x6d2>
 800956a:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800956e:	2b00      	cmp	r3, #0
 8009570:	f47f af67 	bne.w	8009442 <CRYP_AES_GCM+0x5a0>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8009574:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8009578:	f7fe fae4 	bl	8007b44 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 800957c:	2001      	movs	r0, #1
 800957e:	f7fe fb0d 	bl	8007b9c <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8009582:	f7fe fcf7 	bl	8007f74 <CRYP_GetCmdStatus>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <CRYP_AES_GCM+0x6ee>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 800958c:	2300      	movs	r3, #0
 800958e:	e26b      	b.n	8009a68 <CRYP_AES_GCM+0xbc6>
    }
    
    /* Write number of bits concatenated with header in the IN FIFO */
    CRYP_DataIn(__REV(headerlength>>32));
 8009590:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009594:	cb18      	ldmia	r3, {r3, r4}
 8009596:	0023      	movs	r3, r4
 8009598:	603b      	str	r3, [r7, #0]
 800959a:	2300      	movs	r3, #0
 800959c:	607b      	str	r3, [r7, #4]
 800959e:	683a      	ldr	r2, [r7, #0]
 80095a0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80095a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80095a6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	ba1a      	rev	r2, r3
 80095ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80095b2:	601a      	str	r2, [r3, #0]
  return(result);
 80095b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7fe fb0c 	bl	8007bd8 <CRYP_DataIn>
    CRYP_DataIn(__REV(headerlength));
 80095c0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80095c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80095c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095cc:	ba1a      	rev	r2, r3
 80095ce:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80095d2:	601a      	str	r2, [r3, #0]
  return(result);
 80095d4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe fafc 	bl	8007bd8 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength>>32));
 80095e0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80095e4:	cb18      	ldmia	r3, {r3, r4}
 80095e6:	46a2      	mov	sl, r4
 80095e8:	f04f 0b00 	mov.w	fp, #0
 80095ec:	4653      	mov	r3, sl
 80095ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80095f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095f6:	ba1b      	rev	r3, r3
 80095f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return(result);
 80095fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe fae9 	bl	8007bd8 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength));
 8009606:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800960a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800960e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009612:	ba1b      	rev	r3, r3
 8009614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 8009618:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800961c:	4618      	mov	r0, r3
 800961e:	f7fe fadb 	bl	8007bd8 <CRYP_DataIn>
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET)
 8009622:	bf00      	nop
 8009624:	2004      	movs	r0, #4
 8009626:	f7fe fcbf 	bl	8007fa8 <CRYP_GetFlagStatus>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d0f9      	beq.n	8009624 <CRYP_AES_GCM+0x782>
    {
    }
    
    tagaddr = (uint32_t)AuthTAG;
 8009630:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8009634:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    /* Read the Auth TAG in the IN FIFO */
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8009638:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 800963c:	f7fe fadc 	bl	8007bf8 <CRYP_DataOut>
 8009640:	4603      	mov	r3, r0
 8009642:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8009644:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009648:	3304      	adds	r3, #4
 800964a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 800964e:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 8009652:	f7fe fad1 	bl	8007bf8 <CRYP_DataOut>
 8009656:	4603      	mov	r3, r0
 8009658:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 800965a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800965e:	3304      	adds	r3, #4
 8009660:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8009664:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 8009668:	f7fe fac6 	bl	8007bf8 <CRYP_DataOut>
 800966c:	4603      	mov	r3, r0
 800966e:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8009670:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009674:	3304      	adds	r3, #4
 8009676:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 800967a:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 800967e:	f7fe fabb 	bl	8007bf8 <CRYP_DataOut>
 8009682:	4603      	mov	r3, r0
 8009684:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8009686:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800968a:	3304      	adds	r3, #4
 800968c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8009690:	e1e5      	b.n	8009a5e <CRYP_AES_GCM+0xbbc>
  }
  /*------------------ AES Decryption ------------------*/
  else /* AES decryption */
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8009692:	f7fe fa73 	bl	8007b7c <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8009696:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe f9d2 	bl	8007a44 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 80096a0:	f107 0320 	add.w	r3, r7, #32
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7fe fa1b 	bl	8007ae0 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80096aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80096ae:	2204      	movs	r2, #4
 80096b0:	601a      	str	r2, [r3, #0]
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_GCM;
 80096b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80096b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80096ba:	605a      	str	r2, [r3, #4]
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80096bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80096c0:	2280      	movs	r2, #128	; 0x80
 80096c2:	609a      	str	r2, [r3, #8]
    CRYP_Init(&AES_CRYP_InitStructure);
 80096c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fe f953 	bl	8007974 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 80096ce:	2000      	movs	r0, #0
 80096d0:	f7fe fa38 	bl	8007b44 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80096d4:	2001      	movs	r0, #1
 80096d6:	f7fe fa61 	bl	8007b9c <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE);
 80096da:	bf00      	nop
 80096dc:	f7fe fc4a 	bl	8007f74 <CRYP_GetCmdStatus>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d0fa      	beq.n	80096dc <CRYP_AES_GCM+0x83a>
    
    /***************************** header phase *******************************/
    if(HLength != 0)
 80096e6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d071      	beq.n	80097d2 <CRYP_AES_GCM+0x930>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 80096ee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80096f2:	f7fe fa27 	bl	8007b44 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 80096f6:	2001      	movs	r0, #1
 80096f8:	f7fe fa50 	bl	8007b9c <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 80096fc:	f7fe fc3a 	bl	8007f74 <CRYP_GetCmdStatus>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <CRYP_AES_GCM+0x868>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 8009706:	2300      	movs	r3, #0
 8009708:	e1ae      	b.n	8009a68 <CRYP_AES_GCM+0xbc6>
      }
      
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 800970a:	2300      	movs	r3, #0
 800970c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8009710:	e037      	b.n	8009782 <CRYP_AES_GCM+0x8e0>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 8009712:	bf00      	nop
 8009714:	2001      	movs	r0, #1
 8009716:	f7fe fc47 	bl	8007fa8 <CRYP_GetFlagStatus>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d0f9      	beq.n	8009714 <CRYP_AES_GCM+0x872>
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8009720:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4618      	mov	r0, r3
 8009728:	f7fe fa56 	bl	8007bd8 <CRYP_DataIn>
        headeraddr+=4;
 800972c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8009730:	3304      	adds	r3, #4
 8009732:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8009736:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4618      	mov	r0, r3
 800973e:	f7fe fa4b 	bl	8007bd8 <CRYP_DataIn>
        headeraddr+=4;
 8009742:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8009746:	3304      	adds	r3, #4
 8009748:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800974c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fa40 	bl	8007bd8 <CRYP_DataIn>
        headeraddr+=4;
 8009758:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800975c:	3304      	adds	r3, #4
 800975e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 8009762:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4618      	mov	r0, r3
 800976a:	f7fe fa35 	bl	8007bd8 <CRYP_DataIn>
        headeraddr+=4;
 800976e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8009772:	3304      	adds	r3, #4
 8009774:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
      for(loopcounter = 0; (loopcounter < HLength); loopcounter+=16)
 8009778:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800977c:	3310      	adds	r3, #16
 800977e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8009782:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8009786:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800978a:	429a      	cmp	r2, r3
 800978c:	d3c1      	bcc.n	8009712 <CRYP_AES_GCM+0x870>
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 800978e:	f107 031c 	add.w	r3, r7, #28
 8009792:	2200      	movs	r2, #0
 8009794:	601a      	str	r2, [r3, #0]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8009796:	2010      	movs	r0, #16
 8009798:	f7fe fc06 	bl	8007fa8 <CRYP_GetFlagStatus>
 800979c:	4603      	mov	r3, r0
 800979e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
        counter++;
 80097a2:	f107 031c 	add.w	r3, r7, #28
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	f107 031c 	add.w	r3, r7, #28
 80097ae:	601a      	str	r2, [r3, #0]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80097b0:	f107 031c 	add.w	r3, r7, #28
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097ba:	d003      	beq.n	80097c4 <CRYP_AES_GCM+0x922>
 80097bc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1e8      	bne.n	8009796 <CRYP_AES_GCM+0x8f4>

      if (busystatus != RESET)
 80097c4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <CRYP_AES_GCM+0x930>
      {
        status = ERROR;
 80097cc:	2300      	movs	r3, #0
 80097ce:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 80097d2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f000 80ab 	beq.w	8009932 <CRYP_AES_GCM+0xa90>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 80097dc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80097e0:	f7fe f9b0 	bl	8007b44 <CRYP_PhaseConfig>

      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 80097e4:	2001      	movs	r0, #1
 80097e6:	f7fe f9d9 	bl	8007b9c <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 80097ea:	f7fe fbc3 	bl	8007f74 <CRYP_GetCmdStatus>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d101      	bne.n	80097f8 <CRYP_AES_GCM+0x956>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 80097f4:	2300      	movs	r3, #0
 80097f6:	e137      	b.n	8009a68 <CRYP_AES_GCM+0xbc6>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 80097f8:	2300      	movs	r3, #0
 80097fa:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80097fe:	e08d      	b.n	800991c <CRYP_AES_GCM+0xa7a>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 8009800:	bf00      	nop
 8009802:	2001      	movs	r0, #1
 8009804:	f7fe fbd0 	bl	8007fa8 <CRYP_GetFlagStatus>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d0f9      	beq.n	8009802 <CRYP_AES_GCM+0x960>
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800980e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4618      	mov	r0, r3
 8009816:	f7fe f9df 	bl	8007bd8 <CRYP_DataIn>
        inputaddr+=4;
 800981a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800981e:	3304      	adds	r3, #4
 8009820:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009824:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4618      	mov	r0, r3
 800982c:	f7fe f9d4 	bl	8007bd8 <CRYP_DataIn>
        inputaddr+=4;
 8009830:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009834:	3304      	adds	r3, #4
 8009836:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800983a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4618      	mov	r0, r3
 8009842:	f7fe f9c9 	bl	8007bd8 <CRYP_DataIn>
        inputaddr+=4;
 8009846:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800984a:	3304      	adds	r3, #4
 800984c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 8009850:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4618      	mov	r0, r3
 8009858:	f7fe f9be 	bl	8007bd8 <CRYP_DataIn>
        inputaddr+=4;
 800985c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009860:	3304      	adds	r3, #4
 8009862:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        
        /* Wait until the complete message has been processed */
        counter = 0;
 8009866:	f107 031c 	add.w	r3, r7, #28
 800986a:	2200      	movs	r2, #0
 800986c:	601a      	str	r2, [r3, #0]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800986e:	2010      	movs	r0, #16
 8009870:	f7fe fb9a 	bl	8007fa8 <CRYP_GetFlagStatus>
 8009874:	4603      	mov	r3, r0
 8009876:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
          counter++;
 800987a:	f107 031c 	add.w	r3, r7, #28
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	1c5a      	adds	r2, r3, #1
 8009882:	f107 031c 	add.w	r3, r7, #28
 8009886:	601a      	str	r2, [r3, #0]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8009888:	f107 031c 	add.w	r3, r7, #28
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009892:	d003      	beq.n	800989c <CRYP_AES_GCM+0x9fa>
 8009894:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1e8      	bne.n	800986e <CRYP_AES_GCM+0x9cc>

        if (busystatus != RESET)
 800989c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d003      	beq.n	80098ac <CRYP_AES_GCM+0xa0a>
        {
          status = ERROR;
 80098a4:	2300      	movs	r3, #0
 80098a6:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
 80098aa:	e032      	b.n	8009912 <CRYP_AES_GCM+0xa70>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 80098ac:	bf00      	nop
 80098ae:	2004      	movs	r0, #4
 80098b0:	f7fe fb7a 	bl	8007fa8 <CRYP_GetFlagStatus>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0f9      	beq.n	80098ae <CRYP_AES_GCM+0xa0c>
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80098ba:	f8d7 417c 	ldr.w	r4, [r7, #380]	; 0x17c
 80098be:	f7fe f99b 	bl	8007bf8 <CRYP_DataOut>
 80098c2:	4603      	mov	r3, r0
 80098c4:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 80098c6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80098ca:	3304      	adds	r3, #4
 80098cc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80098d0:	f8d7 417c 	ldr.w	r4, [r7, #380]	; 0x17c
 80098d4:	f7fe f990 	bl	8007bf8 <CRYP_DataOut>
 80098d8:	4603      	mov	r3, r0
 80098da:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 80098dc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80098e0:	3304      	adds	r3, #4
 80098e2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80098e6:	f8d7 417c 	ldr.w	r4, [r7, #380]	; 0x17c
 80098ea:	f7fe f985 	bl	8007bf8 <CRYP_DataOut>
 80098ee:	4603      	mov	r3, r0
 80098f0:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 80098f2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80098f6:	3304      	adds	r3, #4
 80098f8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80098fc:	f8d7 417c 	ldr.w	r4, [r7, #380]	; 0x17c
 8009900:	f7fe f97a 	bl	8007bf8 <CRYP_DataOut>
 8009904:	4603      	mov	r3, r0
 8009906:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 8009908:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800990c:	3304      	adds	r3, #4
 800990e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 8009912:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8009916:	3310      	adds	r3, #16
 8009918:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800991c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8009920:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8009924:	429a      	cmp	r2, r3
 8009926:	d204      	bcs.n	8009932 <CRYP_AES_GCM+0xa90>
 8009928:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800992c:	2b00      	cmp	r3, #0
 800992e:	f47f af67 	bne.w	8009800 <CRYP_AES_GCM+0x95e>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 8009932:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8009936:	f7fe f905 	bl	8007b44 <CRYP_PhaseConfig>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 800993a:	2001      	movs	r0, #1
 800993c:	f7fe f92e 	bl	8007b9c <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 8009940:	f7fe fb18 	bl	8007f74 <CRYP_GetCmdStatus>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d101      	bne.n	800994e <CRYP_AES_GCM+0xaac>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 800994a:	2300      	movs	r3, #0
 800994c:	e08c      	b.n	8009a68 <CRYP_AES_GCM+0xbc6>
    }
    
    /* Write number of bits concatenated with header in the IN FIFO */
    CRYP_DataIn(__REV(headerlength>>32));
 800994e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8009952:	cb18      	ldmia	r3, {r3, r4}
 8009954:	46a0      	mov	r8, r4
 8009956:	f04f 0900 	mov.w	r9, #0
 800995a:	4642      	mov	r2, r8
 800995c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009960:	601a      	str	r2, [r3, #0]
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009962:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	ba1a      	rev	r2, r3
 800996a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800996e:	601a      	str	r2, [r3, #0]
  return(result);
 8009970:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe f92e 	bl	8007bd8 <CRYP_DataIn>
    CRYP_DataIn(__REV(headerlength));
 800997c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8009980:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009984:	601a      	str	r2, [r3, #0]
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009986:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	ba1a      	rev	r2, r3
 800998e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009992:	601a      	str	r2, [r3, #0]
  return(result);
 8009994:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe f91c 	bl	8007bd8 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength>>32));
 80099a0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80099a4:	cb18      	ldmia	r3, {r3, r4}
 80099a6:	0025      	movs	r5, r4
 80099a8:	2600      	movs	r6, #0
 80099aa:	462a      	mov	r2, r5
 80099ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80099b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80099b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	ba1a      	rev	r2, r3
 80099ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80099be:	601a      	str	r2, [r3, #0]
  return(result);
 80099c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fe f906 	bl	8007bd8 <CRYP_DataIn>
    CRYP_DataIn(__REV(inputlength));
 80099cc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80099d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80099d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80099d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	ba1a      	rev	r2, r3
 80099de:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80099e2:	601a      	str	r2, [r3, #0]
  return(result);
 80099e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fe f8f4 	bl	8007bd8 <CRYP_DataIn>
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 80099f0:	bf00      	nop
 80099f2:	2004      	movs	r0, #4
 80099f4:	f7fe fad8 	bl	8007fa8 <CRYP_GetFlagStatus>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d0f9      	beq.n	80099f2 <CRYP_AES_GCM+0xb50>
    
    tagaddr = (uint32_t)AuthTAG;
 80099fe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8009a02:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    /* Read the Auth TAG in the IN FIFO */
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8009a06:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 8009a0a:	f7fe f8f5 	bl	8007bf8 <CRYP_DataOut>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8009a12:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009a16:	3304      	adds	r3, #4
 8009a18:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8009a1c:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 8009a20:	f7fe f8ea 	bl	8007bf8 <CRYP_DataOut>
 8009a24:	4603      	mov	r3, r0
 8009a26:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8009a28:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8009a32:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 8009a36:	f7fe f8df 	bl	8007bf8 <CRYP_DataOut>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8009a3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009a42:	3304      	adds	r3, #4
 8009a44:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    *(uint32_t*)(tagaddr) = CRYP_DataOut();
 8009a48:	f8d7 4164 	ldr.w	r4, [r7, #356]	; 0x164
 8009a4c:	f7fe f8d4 	bl	8007bf8 <CRYP_DataOut>
 8009a50:	4603      	mov	r3, r0
 8009a52:	6023      	str	r3, [r4, #0]
    tagaddr+=4;
 8009a54:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009a58:	3304      	adds	r3, #4
 8009a5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8009a5e:	2000      	movs	r0, #0
 8009a60:	f7fe f89c 	bl	8007b9c <CRYP_Cmd>

  return status;
 8009a64:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a74 <CRYP_AES_CCM>:
                         uint8_t *Key, uint16_t Keysize,
                         uint8_t *Input, uint32_t ILength,
                         uint8_t *Header, uint32_t HLength, uint8_t *HBuffer,
                         uint8_t *Output,
                         uint8_t *AuthTAG, uint32_t TAGSize)
{
 8009a74:	b590      	push	{r4, r7, lr}
 8009a76:	b0db      	sub	sp, #364	; 0x16c
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	f107 0008 	add.w	r0, r7, #8
 8009a80:	6001      	str	r1, [r0, #0]
 8009a82:	1d39      	adds	r1, r7, #4
 8009a84:	600a      	str	r2, [r1, #0]
 8009a86:	463a      	mov	r2, r7
 8009a88:	6013      	str	r3, [r2, #0]
 8009a8a:	f107 030f 	add.w	r3, r7, #15
 8009a8e:	4622      	mov	r2, r4
 8009a90:	701a      	strb	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8009a92:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009a96:	2200      	movs	r2, #0
 8009a98:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  ErrorStatus status = SUCCESS;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
  uint32_t keyaddr    = (uint32_t)Key;
 8009aa6:	463b      	mov	r3, r7
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  uint32_t inputaddr  = (uint32_t)Input;
 8009aae:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8009ab2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  uint32_t outputaddr = (uint32_t)Output;
 8009ab6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8009aba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  uint32_t headeraddr = (uint32_t)Header;
 8009abe:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8009ac2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  uint32_t tagaddr = (uint32_t)AuthTAG;
 8009ac6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8009aca:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  uint32_t headersize = HLength;
 8009ace:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8009ad2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  uint32_t loopcounter = 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
  uint32_t bufferidx = 0;
 8009adc:	2300      	movs	r3, #0
 8009ade:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  uint8_t blockb0[16] = {0};/* Block B0 */
 8009ae2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	2300      	movs	r3, #0
 8009aea:	6013      	str	r3, [r2, #0]
 8009aec:	6053      	str	r3, [r2, #4]
 8009aee:	6093      	str	r3, [r2, #8]
 8009af0:	60d3      	str	r3, [r2, #12]
  uint8_t ctr[16] = {0}; /* Counter */
 8009af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009af6:	461a      	mov	r2, r3
 8009af8:	2300      	movs	r3, #0
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	6053      	str	r3, [r2, #4]
 8009afe:	6093      	str	r3, [r2, #8]
 8009b00:	60d3      	str	r3, [r2, #12]
  uint32_t temptag[4] = {0}; /* temporary TAG (MAC) */
 8009b02:	f107 0314 	add.w	r3, r7, #20
 8009b06:	461a      	mov	r2, r3
 8009b08:	2300      	movs	r3, #0
 8009b0a:	6013      	str	r3, [r2, #0]
 8009b0c:	6053      	str	r3, [r2, #4]
 8009b0e:	6093      	str	r3, [r2, #8]
 8009b10:	60d3      	str	r3, [r2, #12]
  uint32_t ctraddr = (uint32_t)ctr;
 8009b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b16:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  uint32_t b0addr = (uint32_t)blockb0;
 8009b1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009b1e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  
  /************************ Formatting the header block ***********************/
  if(headersize != 0)
 8009b22:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 80b1 	beq.w	8009c8e <CRYP_AES_CCM+0x21a>
  {
    /* Check that the associated data (or header) length is lower than 2^16 - 2^8 = 65536 - 256 = 65280 */
    if(headersize < 65280)
 8009b2c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009b30:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8009b34:	d21e      	bcs.n	8009b74 <CRYP_AES_CCM+0x100>
    {
      HBuffer[bufferidx++] = (uint8_t) ((headersize >> 8) & 0xFF);
 8009b36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b3a:	1c5a      	adds	r2, r3, #1
 8009b3c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8009b40:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8009b44:	4413      	add	r3, r2
 8009b46:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009b4a:	0a12      	lsrs	r2, r2, #8
 8009b4c:	b2d2      	uxtb	r2, r2
 8009b4e:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = (uint8_t) ((headersize) & 0xFF);
 8009b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8009b5a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8009b5e:	4413      	add	r3, r2
 8009b60:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009b64:	b2d2      	uxtb	r2, r2
 8009b66:	701a      	strb	r2, [r3, #0]
      headersize += 2;
 8009b68:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009b6c:	3302      	adds	r3, #2
 8009b6e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8009b72:	e042      	b.n	8009bfa <CRYP_AES_CCM+0x186>
    }
    else
    {
      /* header is encoded as 0xff || 0xfe || [headersize]32, i.e., six octets */
      HBuffer[bufferidx++] = 0xFF;
 8009b74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b78:	1c5a      	adds	r2, r3, #1
 8009b7a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8009b7e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8009b82:	4413      	add	r3, r2
 8009b84:	22ff      	movs	r2, #255	; 0xff
 8009b86:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = 0xFE;
 8009b88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009b8c:	1c5a      	adds	r2, r3, #1
 8009b8e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8009b92:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8009b96:	4413      	add	r3, r2
 8009b98:	22fe      	movs	r2, #254	; 0xfe
 8009b9a:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0xff000000;
 8009b9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8009ba6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8009baa:	4413      	add	r3, r2
 8009bac:	2200      	movs	r2, #0
 8009bae:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x00ff0000;
 8009bb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009bb4:	1c5a      	adds	r2, r3, #1
 8009bb6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8009bba:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8009bbe:	4413      	add	r3, r2
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x0000ff00;
 8009bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009bc8:	1c5a      	adds	r2, r3, #1
 8009bca:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8009bce:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8009bd2:	4413      	add	r3, r2
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	701a      	strb	r2, [r3, #0]
      HBuffer[bufferidx++] = headersize & 0x000000ff;
 8009bd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009bdc:	1c5a      	adds	r2, r3, #1
 8009bde:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8009be2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8009be6:	4413      	add	r3, r2
 8009be8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8009bec:	b2d2      	uxtb	r2, r2
 8009bee:	701a      	strb	r2, [r3, #0]
      headersize += 6;
 8009bf0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009bf4:	3306      	adds	r3, #6
 8009bf6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    }
    /* Copy the header buffer in internal buffer "HBuffer" */
    for(loopcounter = 0; loopcounter < headersize; loopcounter++)
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009c00:	e013      	b.n	8009c2a <CRYP_AES_CCM+0x1b6>
    {
      HBuffer[bufferidx++] = Header[loopcounter];
 8009c02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8009c0c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8009c10:	4413      	add	r3, r2
 8009c12:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8009c16:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8009c1a:	440a      	add	r2, r1
 8009c1c:	7812      	ldrb	r2, [r2, #0]
 8009c1e:	701a      	strb	r2, [r3, #0]
    for(loopcounter = 0; loopcounter < headersize; loopcounter++)
 8009c20:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009c24:	3301      	adds	r3, #1
 8009c26:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009c2a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8009c2e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d3e5      	bcc.n	8009c02 <CRYP_AES_CCM+0x18e>
    }
    /* Check if the header size is modulo 16 */
    if ((headersize % 16) != 0)
 8009c36:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009c3a:	f003 030f 	and.w	r3, r3, #15
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d021      	beq.n	8009c86 <CRYP_AES_CCM+0x212>
    {
      /* Padd the header buffer with 0s till the HBuffer length is modulo 16 */
      for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
 8009c42:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009c46:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009c4a:	e00b      	b.n	8009c64 <CRYP_AES_CCM+0x1f0>
      {
        HBuffer[loopcounter] = 0;
 8009c4c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8009c50:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009c54:	4413      	add	r3, r2
 8009c56:	2200      	movs	r2, #0
 8009c58:	701a      	strb	r2, [r3, #0]
      for(loopcounter = headersize; loopcounter <= ((headersize/16) + 1) * 16; loopcounter++)
 8009c5a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009c5e:	3301      	adds	r3, #1
 8009c60:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009c64:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009c68:	f023 030f 	bic.w	r3, r3, #15
 8009c6c:	f103 0210 	add.w	r2, r3, #16
 8009c70:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d2e9      	bcs.n	8009c4c <CRYP_AES_CCM+0x1d8>
      }
      /* Set the header size to modulo 16 */
      headersize = ((headersize/16) + 1) * 16;
 8009c78:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009c7c:	f023 030f 	bic.w	r3, r3, #15
 8009c80:	3310      	adds	r3, #16
 8009c82:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    }
    /* set the pointer headeraddr to HBuffer */
    headeraddr = (uint32_t)HBuffer;
 8009c86:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8009c8a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  }
  /************************* Formatting the block B0 **************************/
  if(headersize != 0)
 8009c8e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d003      	beq.n	8009c9e <CRYP_AES_CCM+0x22a>
  {
    blockb0[0] = 0x40;
 8009c96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009c9a:	2240      	movs	r2, #64	; 0x40
 8009c9c:	701a      	strb	r2, [r3, #0]
  }
  /* Flags byte */
  blockb0[0] |= 0u | (((( (uint8_t) TAGSize - 2) / 2) & 0x07 ) << 3 ) | ( ( (uint8_t) (15 - NonceSize) - 1) & 0x07);
 8009c9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009ca2:	781a      	ldrb	r2, [r3, #0]
 8009ca4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	3b02      	subs	r3, #2
 8009cac:	0fd9      	lsrs	r1, r3, #31
 8009cae:	440b      	add	r3, r1
 8009cb0:	105b      	asrs	r3, r3, #1
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	00db      	lsls	r3, r3, #3
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cbc:	b2d9      	uxtb	r1, r3
 8009cbe:	1d3b      	adds	r3, r7, #4
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	f1c3 030e 	rsb	r3, r3, #14
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	f003 0307 	and.w	r3, r3, #7
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	430b      	orrs	r3, r1
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009cdc:	701a      	strb	r2, [r3, #0]
  
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
 8009cde:	2300      	movs	r3, #0
 8009ce0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009ce4:	e011      	b.n	8009d0a <CRYP_AES_CCM+0x296>
  {
    blockb0[loopcounter+1] = Nonce[loopcounter];
 8009ce6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009cea:	3301      	adds	r3, #1
 8009cec:	f107 0208 	add.w	r2, r7, #8
 8009cf0:	6811      	ldr	r1, [r2, #0]
 8009cf2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8009cf6:	440a      	add	r2, r1
 8009cf8:	7811      	ldrb	r1, [r2, #0]
 8009cfa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009cfe:	54d1      	strb	r1, [r2, r3]
  for (loopcounter = 0; loopcounter < NonceSize; loopcounter++)
 8009d00:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009d04:	3301      	adds	r3, #1
 8009d06:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009d0a:	1d3b      	adds	r3, r7, #4
 8009d0c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d3e7      	bcc.n	8009ce6 <CRYP_AES_CCM+0x272>
  }
  for ( ; loopcounter < 13; loopcounter++)
 8009d16:	e00b      	b.n	8009d30 <CRYP_AES_CCM+0x2bc>
  {
    blockb0[loopcounter+1] = 0;
 8009d18:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009d22:	2100      	movs	r1, #0
 8009d24:	54d1      	strb	r1, [r2, r3]
  for ( ; loopcounter < 13; loopcounter++)
 8009d26:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009d30:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009d34:	2b0c      	cmp	r3, #12
 8009d36:	d9ef      	bls.n	8009d18 <CRYP_AES_CCM+0x2a4>
  }
  
  blockb0[14] = ((ILength >> 8) & 0xFF);
 8009d38:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009d3c:	0a1b      	lsrs	r3, r3, #8
 8009d3e:	b2da      	uxtb	r2, r3
 8009d40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009d44:	739a      	strb	r2, [r3, #14]
  blockb0[15] = (ILength & 0xFF);
 8009d46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009d50:	73da      	strb	r2, [r3, #15]
     Bits 7 and 6 are reserved and shall be set to 0
     Bits 3, 4, and 5 shall also be set to 0, to ensure that all the counter blocks
     are distinct from B0
     Bits 0, 1, and 2 contain the same encoding of q as in B0
  */
  ctr[0] = blockb0[0] & 0x07;
 8009d52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	f003 0307 	and.w	r3, r3, #7
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d62:	701a      	strb	r2, [r3, #0]
  /* byte 1 to NonceSize is the IV (Nonce) */
  for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
 8009d64:	2301      	movs	r3, #1
 8009d66:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009d6a:	e011      	b.n	8009d90 <CRYP_AES_CCM+0x31c>
  {
    ctr[loopcounter] = blockb0[loopcounter];
 8009d6c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009d70:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009d74:	4413      	add	r3, r2
 8009d76:	7819      	ldrb	r1, [r3, #0]
 8009d78:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009d7c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009d80:	4413      	add	r3, r2
 8009d82:	460a      	mov	r2, r1
 8009d84:	701a      	strb	r2, [r3, #0]
  for(loopcounter = 1; loopcounter < NonceSize + 1; loopcounter++)
 8009d86:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009d90:	1d3b      	adds	r3, r7, #4
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d8e6      	bhi.n	8009d6c <CRYP_AES_CCM+0x2f8>
  }
  /* Set the LSB to 1 */
  ctr[15] |= 0x01;
 8009d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009da2:	7bdb      	ldrb	r3, [r3, #15]
 8009da4:	f043 0301 	orr.w	r3, r3, #1
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dae:	73da      	strb	r2, [r3, #15]
  
  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8009db0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fd fe71 	bl	8007a9c <CRYP_KeyStructInit>
  
  switch(Keysize)
 8009dba:	f8b7 3178 	ldrh.w	r3, [r7, #376]	; 0x178
 8009dbe:	2bc0      	cmp	r3, #192	; 0xc0
 8009dc0:	d055      	beq.n	8009e6e <CRYP_AES_CCM+0x3fa>
 8009dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dc6:	f000 80ca 	beq.w	8009f5e <CRYP_AES_CCM+0x4ea>
 8009dca:	2b80      	cmp	r3, #128	; 0x80
 8009dcc:	d000      	beq.n	8009dd0 <CRYP_AES_CCM+0x35c>
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4;
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    break;
    default:
    break;
 8009dce:	e166      	b.n	800a09e <CRYP_AES_CCM+0x62a>
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8009dd6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009de0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009de4:	ba1b      	rev	r3, r3
 8009de6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  return(result);
 8009dea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009dee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009df2:	611a      	str	r2, [r3, #16]
    keyaddr+=4;
 8009df4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009df8:	3304      	adds	r3, #4
 8009dfa:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8009dfe:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009e08:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009e0c:	ba1b      	rev	r3, r3
 8009e0e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  return(result);
 8009e12:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8009e16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009e1a:	615a      	str	r2, [r3, #20]
    keyaddr+=4;
 8009e1c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009e20:	3304      	adds	r3, #4
 8009e22:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8009e26:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e34:	ba1b      	rev	r3, r3
 8009e36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  return(result);
 8009e3a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009e3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009e42:	619a      	str	r2, [r3, #24]
    keyaddr+=4;
 8009e44:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009e48:	3304      	adds	r3, #4
 8009e4a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8009e4e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009e58:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009e5c:	ba1b      	rev	r3, r3
 8009e5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8009e62:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009e66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009e6a:	61da      	str	r2, [r3, #28]
    break;
 8009e6c:	e117      	b.n	800a09e <CRYP_AES_CCM+0x62a>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8009e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8009e76:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009e80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009e84:	ba1b      	rev	r3, r3
 8009e86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  return(result);
 8009e8a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009e8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009e92:	609a      	str	r2, [r3, #8]
    keyaddr+=4;
 8009e94:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009e98:	3304      	adds	r3, #4
 8009e9a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8009e9e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eac:	ba1b      	rev	r3, r3
 8009eae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  return(result);
 8009eb2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8009eb6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009eba:	60da      	str	r2, [r3, #12]
    keyaddr+=4;
 8009ebc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8009ec6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ed4:	ba1b      	rev	r3, r3
 8009ed6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  return(result);
 8009eda:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8009ede:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009ee2:	611a      	str	r2, [r3, #16]
    keyaddr+=4;
 8009ee4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009ee8:	3304      	adds	r3, #4
 8009eea:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8009eee:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009efc:	ba1b      	rev	r3, r3
 8009efe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  return(result);
 8009f02:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8009f06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009f0a:	615a      	str	r2, [r3, #20]
    keyaddr+=4;
 8009f0c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009f10:	3304      	adds	r3, #4
 8009f12:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8009f16:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f24:	ba1b      	rev	r3, r3
 8009f26:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  return(result);
 8009f2a:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8009f2e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009f32:	619a      	str	r2, [r3, #24]
    keyaddr+=4;
 8009f34:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009f38:	3304      	adds	r3, #4
 8009f3a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8009f3e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f4c:	ba1b      	rev	r3, r3
 8009f4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8009f52:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8009f56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009f5a:	61da      	str	r2, [r3, #28]
    break;
 8009f5c:	e09f      	b.n	800a09e <CRYP_AES_CCM+0x62a>
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8009f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8009f66:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009f70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f74:	ba1b      	rev	r3, r3
 8009f76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return(result);
 8009f7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009f82:	601a      	str	r2, [r3, #0]
    keyaddr+=4;
 8009f84:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009f88:	3304      	adds	r3, #4
 8009f8a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8009f8e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009f98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009f9c:	ba1b      	rev	r3, r3
 8009f9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  return(result);
 8009fa2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009fa6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009faa:	605a      	str	r2, [r3, #4]
    keyaddr+=4;
 8009fac:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8009fb6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009fc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009fc4:	ba1b      	rev	r3, r3
 8009fc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return(result);
 8009fca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009fce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009fd2:	609a      	str	r2, [r3, #8]
    keyaddr+=4;
 8009fd4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009fd8:	3304      	adds	r3, #4
 8009fda:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8009fde:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8009fe8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fec:	ba1b      	rev	r3, r3
 8009fee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return(result);
 8009ff2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009ff6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009ffa:	60da      	str	r2, [r3, #12]
    keyaddr+=4;
 8009ffc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a000:	3304      	adds	r3, #4
 800a002:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800a006:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a010:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a014:	ba1b      	rev	r3, r3
 800a016:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 800a01a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a01e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a022:	611a      	str	r2, [r3, #16]
    keyaddr+=4;
 800a024:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a028:	3304      	adds	r3, #4
 800a02a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800a02e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a038:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a03c:	ba1b      	rev	r3, r3
 800a03e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  return(result);
 800a042:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a046:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a04a:	615a      	str	r2, [r3, #20]
    keyaddr+=4;
 800a04c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a050:	3304      	adds	r3, #4
 800a052:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800a056:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a064:	ba1b      	rev	r3, r3
 800a066:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  return(result);
 800a06a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a06e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a072:	619a      	str	r2, [r3, #24]
    keyaddr+=4;
 800a074:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a078:	3304      	adds	r3, #4
 800a07a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800a07e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a08c:	ba1b      	rev	r3, r3
 800a08e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  return(result);
 800a092:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a096:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a09a:	61da      	str	r2, [r3, #28]
    break;
 800a09c:	bf00      	nop
  }
  
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = (__REV(*(uint32_t*)(ctraddr)));
 800a09e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a0a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0ac:	ba1b      	rev	r3, r3
 800a0ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return(result);
 800a0b2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a0b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a0ba:	601a      	str	r2, [r3, #0]
  ctraddr+=4;
 800a0bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  AES_CRYP_IVInitStructure.CRYP_IV0Right= (__REV(*(uint32_t*)(ctraddr)));
 800a0c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a0d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a0d4:	ba1b      	rev	r3, r3
 800a0d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return(result);
 800a0da:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800a0de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a0e2:	605a      	str	r2, [r3, #4]
  ctraddr+=4;
 800a0e4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a0e8:	3304      	adds	r3, #4
 800a0ea:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  AES_CRYP_IVInitStructure.CRYP_IV1Left = (__REV(*(uint32_t*)(ctraddr)));
 800a0ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a0f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0fc:	ba1b      	rev	r3, r3
 800a0fe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  return(result);
 800a102:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a106:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a10a:	609a      	str	r2, [r3, #8]
  ctraddr+=4;
 800a10c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a110:	3304      	adds	r3, #4
 800a112:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  AES_CRYP_IVInitStructure.CRYP_IV1Right= (__REV(*(uint32_t*)(ctraddr)));
 800a116:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a120:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a124:	ba1b      	rev	r3, r3
 800a126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return(result);
 800a12a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a12e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a132:	60da      	str	r2, [r3, #12]
  
  /*------------------ AES Encryption ------------------*/
  if(Mode == MODE_ENCRYPT) /* AES encryption */
 800a134:	f107 030f 	add.w	r3, r7, #15
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	f040 81d1 	bne.w	800a4e2 <CRYP_AES_CCM+0xa6e>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 800a140:	f7fd fd1c 	bl	8007b7c <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800a144:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a148:	4618      	mov	r0, r3
 800a14a:	f7fd fc7b 	bl	8007a44 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 800a14e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a152:	4618      	mov	r0, r3
 800a154:	f7fd fcc4 	bl	8007ae0 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 800a158:	2300      	movs	r3, #0
 800a15a:	67bb      	str	r3, [r7, #120]	; 0x78
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 800a15c:	f04f 1308 	mov.w	r3, #524296	; 0x80008
 800a160:	67fb      	str	r3, [r7, #124]	; 0x7c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800a162:	2380      	movs	r3, #128	; 0x80
 800a164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_Init(&AES_CRYP_InitStructure);
 800a168:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fd fc01 	bl	8007974 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 800a172:	2000      	movs	r0, #0
 800a174:	f7fd fce6 	bl	8007b44 <CRYP_PhaseConfig>
    
    b0addr = (uint32_t)blockb0;
 800a178:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a17c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    /* Write the blockb0 block in the IN FIFO */
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 800a180:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4618      	mov	r0, r3
 800a188:	f7fd fd26 	bl	8007bd8 <CRYP_DataIn>
    b0addr+=4;
 800a18c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a190:	3304      	adds	r3, #4
 800a192:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 800a196:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fd fd1b 	bl	8007bd8 <CRYP_DataIn>
    b0addr+=4;
 800a1a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 800a1ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fd fd10 	bl	8007bd8 <CRYP_DataIn>
    b0addr+=4;
 800a1b8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a1bc:	3304      	adds	r3, #4
 800a1be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 800a1c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7fd fd05 	bl	8007bd8 <CRYP_DataIn>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 800a1ce:	2001      	movs	r0, #1
 800a1d0:	f7fd fce4 	bl	8007b9c <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE);
 800a1d4:	bf00      	nop
 800a1d6:	f7fd fecd 	bl	8007f74 <CRYP_GetCmdStatus>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d0fa      	beq.n	800a1d6 <CRYP_AES_CCM+0x762>
    
    /***************************** header phase *******************************/
    if(headersize != 0)
 800a1e0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d071      	beq.n	800a2cc <CRYP_AES_CCM+0x858>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 800a1e8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a1ec:	f7fd fcaa 	bl	8007b44 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 800a1f0:	2001      	movs	r0, #1
 800a1f2:	f7fd fcd3 	bl	8007b9c <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 800a1f6:	f7fd febd 	bl	8007f74 <CRYP_GetCmdStatus>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d101      	bne.n	800a204 <CRYP_AES_CCM+0x790>
      {
         /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
            the CRYP peripheral (please check the device sales type. */
         return(ERROR);
 800a200:	2300      	movs	r3, #0
 800a202:	e35f      	b.n	800a8c4 <CRYP_AES_CCM+0xe50>
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 800a204:	2300      	movs	r3, #0
 800a206:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800a20a:	e037      	b.n	800a27c <CRYP_AES_CCM+0x808>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 800a20c:	bf00      	nop
 800a20e:	2001      	movs	r0, #1
 800a210:	f7fd feca 	bl	8007fa8 <CRYP_GetFlagStatus>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d0f9      	beq.n	800a20e <CRYP_AES_CCM+0x79a>
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800a21a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4618      	mov	r0, r3
 800a222:	f7fd fcd9 	bl	8007bd8 <CRYP_DataIn>
        headeraddr+=4;
 800a226:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a22a:	3304      	adds	r3, #4
 800a22c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800a230:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4618      	mov	r0, r3
 800a238:	f7fd fcce 	bl	8007bd8 <CRYP_DataIn>
        headeraddr+=4;
 800a23c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a240:	3304      	adds	r3, #4
 800a242:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800a246:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fd fcc3 	bl	8007bd8 <CRYP_DataIn>
        headeraddr+=4;
 800a252:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a256:	3304      	adds	r3, #4
 800a258:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800a25c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4618      	mov	r0, r3
 800a264:	f7fd fcb8 	bl	8007bd8 <CRYP_DataIn>
        headeraddr+=4;
 800a268:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a26c:	3304      	adds	r3, #4
 800a26e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 800a272:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800a276:	3310      	adds	r3, #16
 800a278:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800a27c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800a280:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800a284:	429a      	cmp	r2, r3
 800a286:	d3c1      	bcc.n	800a20c <CRYP_AES_CCM+0x798>
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 800a288:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a28c:	2200      	movs	r2, #0
 800a28e:	601a      	str	r2, [r3, #0]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800a290:	2010      	movs	r0, #16
 800a292:	f7fd fe89 	bl	8007fa8 <CRYP_GetFlagStatus>
 800a296:	4603      	mov	r3, r0
 800a298:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        counter++;
 800a29c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	1c5a      	adds	r2, r3, #1
 800a2a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a2a8:	601a      	str	r2, [r3, #0]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800a2aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2b4:	d003      	beq.n	800a2be <CRYP_AES_CCM+0x84a>
 800a2b6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d1e8      	bne.n	800a290 <CRYP_AES_CCM+0x81c>

      if (busystatus != RESET)
 800a2be:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d002      	beq.n	800a2cc <CRYP_AES_CCM+0x858>
      {
        status = ERROR;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 800a2cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 80ab 	beq.w	800a42c <CRYP_AES_CCM+0x9b8>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 800a2d6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a2da:	f7fd fc33 	bl	8007b44 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 800a2de:	2001      	movs	r0, #1
 800a2e0:	f7fd fc5c 	bl	8007b9c <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 800a2e4:	f7fd fe46 	bl	8007f74 <CRYP_GetCmdStatus>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <CRYP_AES_CCM+0x87e>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	e2e8      	b.n	800a8c4 <CRYP_AES_CCM+0xe50>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800a2f8:	e08d      	b.n	800a416 <CRYP_AES_CCM+0x9a2>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 800a2fa:	bf00      	nop
 800a2fc:	2001      	movs	r0, #1
 800a2fe:	f7fd fe53 	bl	8007fa8 <CRYP_GetFlagStatus>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d0f9      	beq.n	800a2fc <CRYP_AES_CCM+0x888>
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800a308:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fd fc62 	bl	8007bd8 <CRYP_DataIn>
        inputaddr+=4;
 800a314:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800a318:	3304      	adds	r3, #4
 800a31a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800a31e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4618      	mov	r0, r3
 800a326:	f7fd fc57 	bl	8007bd8 <CRYP_DataIn>
        inputaddr+=4;
 800a32a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800a32e:	3304      	adds	r3, #4
 800a330:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800a334:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fd fc4c 	bl	8007bd8 <CRYP_DataIn>
        inputaddr+=4;
 800a340:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800a344:	3304      	adds	r3, #4
 800a346:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800a34a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4618      	mov	r0, r3
 800a352:	f7fd fc41 	bl	8007bd8 <CRYP_DataIn>
        inputaddr+=4;
 800a356:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800a35a:	3304      	adds	r3, #4
 800a35c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        
        /* Wait until the complete message has been processed */
        counter = 0;
 800a360:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a364:	2200      	movs	r2, #0
 800a366:	601a      	str	r2, [r3, #0]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800a368:	2010      	movs	r0, #16
 800a36a:	f7fd fe1d 	bl	8007fa8 <CRYP_GetFlagStatus>
 800a36e:	4603      	mov	r3, r0
 800a370:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
          counter++;
 800a374:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	1c5a      	adds	r2, r3, #1
 800a37c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a380:	601a      	str	r2, [r3, #0]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800a382:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a38c:	d003      	beq.n	800a396 <CRYP_AES_CCM+0x922>
 800a38e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1e8      	bne.n	800a368 <CRYP_AES_CCM+0x8f4>

        if (busystatus != RESET)
 800a396:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d003      	beq.n	800a3a6 <CRYP_AES_CCM+0x932>
        {
          status = ERROR;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 800a3a4:	e032      	b.n	800a40c <CRYP_AES_CCM+0x998>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 800a3a6:	bf00      	nop
 800a3a8:	2004      	movs	r0, #4
 800a3aa:	f7fd fdfd 	bl	8007fa8 <CRYP_GetFlagStatus>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d0f9      	beq.n	800a3a8 <CRYP_AES_CCM+0x934>
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800a3b4:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 800a3b8:	f7fd fc1e 	bl	8007bf8 <CRYP_DataOut>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 800a3c0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800a3ca:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 800a3ce:	f7fd fc13 	bl	8007bf8 <CRYP_DataOut>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 800a3d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a3da:	3304      	adds	r3, #4
 800a3dc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800a3e0:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 800a3e4:	f7fd fc08 	bl	8007bf8 <CRYP_DataOut>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 800a3ec:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a3f0:	3304      	adds	r3, #4
 800a3f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800a3f6:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 800a3fa:	f7fd fbfd 	bl	8007bf8 <CRYP_DataOut>
 800a3fe:	4603      	mov	r3, r0
 800a400:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 800a402:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a406:	3304      	adds	r3, #4
 800a408:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 800a40c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800a410:	3310      	adds	r3, #16
 800a412:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800a416:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800a41a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800a41e:	429a      	cmp	r2, r3
 800a420:	d204      	bcs.n	800a42c <CRYP_AES_CCM+0x9b8>
 800a422:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800a426:	2b00      	cmp	r3, #0
 800a428:	f47f af67 	bne.w	800a2fa <CRYP_AES_CCM+0x886>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 800a42c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800a430:	f7fd fb88 	bl	8007b44 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 800a434:	2001      	movs	r0, #1
 800a436:	f7fd fbb1 	bl	8007b9c <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 800a43a:	f7fd fd9b 	bl	8007f74 <CRYP_GetCmdStatus>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d101      	bne.n	800a448 <CRYP_AES_CCM+0x9d4>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 800a444:	2300      	movs	r3, #0
 800a446:	e23d      	b.n	800a8c4 <CRYP_AES_CCM+0xe50>
    }
    
    ctraddr = (uint32_t)ctr;
 800a448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a44c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    /* Write the counter block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 800a450:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4618      	mov	r0, r3
 800a458:	f7fd fbbe 	bl	8007bd8 <CRYP_DataIn>
    ctraddr+=4;
 800a45c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a460:	3304      	adds	r3, #4
 800a462:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 800a466:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fd fbb3 	bl	8007bd8 <CRYP_DataIn>
    ctraddr+=4;
 800a472:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a476:	3304      	adds	r3, #4
 800a478:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 800a47c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4618      	mov	r0, r3
 800a484:	f7fd fba8 	bl	8007bd8 <CRYP_DataIn>
    ctraddr+=4;
 800a488:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a48c:	3304      	adds	r3, #4
 800a48e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
    CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
 800a492:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7fd fb9b 	bl	8007bd8 <CRYP_DataIn>
    
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 800a4a2:	bf00      	nop
 800a4a4:	2004      	movs	r0, #4
 800a4a6:	f7fd fd7f 	bl	8007fa8 <CRYP_GetFlagStatus>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d0f9      	beq.n	800a4a4 <CRYP_AES_CCM+0xa30>
    
    /* Read the Auth TAG in the IN FIFO */
    temptag[0] = CRYP_DataOut();
 800a4b0:	f7fd fba2 	bl	8007bf8 <CRYP_DataOut>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	f107 0314 	add.w	r3, r7, #20
 800a4ba:	601a      	str	r2, [r3, #0]
    temptag[1] = CRYP_DataOut();
 800a4bc:	f7fd fb9c 	bl	8007bf8 <CRYP_DataOut>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	f107 0314 	add.w	r3, r7, #20
 800a4c6:	605a      	str	r2, [r3, #4]
    temptag[2] = CRYP_DataOut();
 800a4c8:	f7fd fb96 	bl	8007bf8 <CRYP_DataOut>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	f107 0314 	add.w	r3, r7, #20
 800a4d2:	609a      	str	r2, [r3, #8]
    temptag[3] = CRYP_DataOut();
 800a4d4:	f7fd fb90 	bl	8007bf8 <CRYP_DataOut>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	f107 0314 	add.w	r3, r7, #20
 800a4de:	60da      	str	r2, [r3, #12]
 800a4e0:	e1cf      	b.n	800a882 <CRYP_AES_CCM+0xe0e>
  }
  /*------------------ AES Decryption ------------------*/
  else /* AES decryption */
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 800a4e2:	f7fd fb4b 	bl	8007b7c <CRYP_FIFOFlush>
    
    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800a4e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7fd faaa 	bl	8007a44 <CRYP_KeyInit>
    
    /* CRYP Initialization Vectors */
    CRYP_IVInit(&AES_CRYP_IVInitStructure);
 800a4f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fd faf3 	bl	8007ae0 <CRYP_IVInit>
    
    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800a4fa:	2304      	movs	r3, #4
 800a4fc:	67bb      	str	r3, [r7, #120]	; 0x78
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CCM;
 800a4fe:	f04f 1308 	mov.w	r3, #524296	; 0x80008
 800a502:	67fb      	str	r3, [r7, #124]	; 0x7c
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800a504:	2380      	movs	r3, #128	; 0x80
 800a506:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_Init(&AES_CRYP_InitStructure);
 800a50a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fd fa30 	bl	8007974 <CRYP_Init>
    
    /***************************** Init phase *********************************/
    /* Select init phase */
    CRYP_PhaseConfig(CRYP_Phase_Init);
 800a514:	2000      	movs	r0, #0
 800a516:	f7fd fb15 	bl	8007b44 <CRYP_PhaseConfig>
    
    b0addr = (uint32_t)blockb0;
 800a51a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a51e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    /* Write the blockb0 block in the IN FIFO */
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 800a522:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fd fb55 	bl	8007bd8 <CRYP_DataIn>
    b0addr+=4;
 800a52e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a532:	3304      	adds	r3, #4
 800a534:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 800a538:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fd fb4a 	bl	8007bd8 <CRYP_DataIn>
    b0addr+=4;
 800a544:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a548:	3304      	adds	r3, #4
 800a54a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 800a54e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4618      	mov	r0, r3
 800a556:	f7fd fb3f 	bl	8007bd8 <CRYP_DataIn>
    b0addr+=4;
 800a55a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a55e:	3304      	adds	r3, #4
 800a560:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    CRYP_DataIn((*(uint32_t*)(b0addr)));
 800a564:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fd fb34 	bl	8007bd8 <CRYP_DataIn>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 800a570:	2001      	movs	r0, #1
 800a572:	f7fd fb13 	bl	8007b9c <CRYP_Cmd>
    
    /* Wait for CRYPEN bit to be 0 */
    while(CRYP_GetCmdStatus() == ENABLE);
 800a576:	bf00      	nop
 800a578:	f7fd fcfc 	bl	8007f74 <CRYP_GetCmdStatus>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d0fa      	beq.n	800a578 <CRYP_AES_CCM+0xb04>
    
    /***************************** header phase *******************************/
    if(headersize != 0)
 800a582:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800a586:	2b00      	cmp	r3, #0
 800a588:	d071      	beq.n	800a66e <CRYP_AES_CCM+0xbfa>
    {
      /* Select header phase */
      CRYP_PhaseConfig(CRYP_Phase_Header);
 800a58a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a58e:	f7fd fad9 	bl	8007b44 <CRYP_PhaseConfig>
      
      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 800a592:	2001      	movs	r0, #1
 800a594:	f7fd fb02 	bl	8007b9c <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 800a598:	f7fd fcec 	bl	8007f74 <CRYP_GetCmdStatus>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d101      	bne.n	800a5a6 <CRYP_AES_CCM+0xb32>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	e18e      	b.n	800a8c4 <CRYP_AES_CCM+0xe50>
      }
      
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800a5ac:	e037      	b.n	800a61e <CRYP_AES_CCM+0xbaa>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 800a5ae:	bf00      	nop
 800a5b0:	2001      	movs	r0, #1
 800a5b2:	f7fd fcf9 	bl	8007fa8 <CRYP_GetFlagStatus>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d0f9      	beq.n	800a5b0 <CRYP_AES_CCM+0xb3c>
        
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800a5bc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fd fb08 	bl	8007bd8 <CRYP_DataIn>
        headeraddr+=4;
 800a5c8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a5cc:	3304      	adds	r3, #4
 800a5ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800a5d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7fd fafd 	bl	8007bd8 <CRYP_DataIn>
        headeraddr+=4;
 800a5de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800a5e8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fd faf2 	bl	8007bd8 <CRYP_DataIn>
        headeraddr+=4;
 800a5f4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        CRYP_DataIn(*(uint32_t*)(headeraddr));
 800a5fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4618      	mov	r0, r3
 800a606:	f7fd fae7 	bl	8007bd8 <CRYP_DataIn>
        headeraddr+=4;
 800a60a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800a60e:	3304      	adds	r3, #4
 800a610:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
      for(loopcounter = 0; (loopcounter < headersize); loopcounter+=16)
 800a614:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800a618:	3310      	adds	r3, #16
 800a61a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800a61e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800a622:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800a626:	429a      	cmp	r2, r3
 800a628:	d3c1      	bcc.n	800a5ae <CRYP_AES_CCM+0xb3a>
      }
      
      /* Wait until the complete message has been processed */
      counter = 0;
 800a62a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a62e:	2200      	movs	r2, #0
 800a630:	601a      	str	r2, [r3, #0]
      do
      {
        busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800a632:	2010      	movs	r0, #16
 800a634:	f7fd fcb8 	bl	8007fa8 <CRYP_GetFlagStatus>
 800a638:	4603      	mov	r3, r0
 800a63a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        counter++;
 800a63e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	1c5a      	adds	r2, r3, #1
 800a646:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a64a:	601a      	str	r2, [r3, #0]
      }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800a64c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a656:	d003      	beq.n	800a660 <CRYP_AES_CCM+0xbec>
 800a658:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1e8      	bne.n	800a632 <CRYP_AES_CCM+0xbbe>

      if (busystatus != RESET)
 800a660:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a664:	2b00      	cmp	r3, #0
 800a666:	d002      	beq.n	800a66e <CRYP_AES_CCM+0xbfa>
      {
        status = ERROR;
 800a668:	2300      	movs	r3, #0
 800a66a:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
      }
    }
    
    /**************************** payload phase *******************************/
    if(ILength != 0)
 800a66e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800a672:	2b00      	cmp	r3, #0
 800a674:	f000 80ab 	beq.w	800a7ce <CRYP_AES_CCM+0xd5a>
    {
      /* Select payload phase */
      CRYP_PhaseConfig(CRYP_Phase_Payload);
 800a678:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800a67c:	f7fd fa62 	bl	8007b44 <CRYP_PhaseConfig>

      /* Enable Crypto processor */
      CRYP_Cmd(ENABLE);
 800a680:	2001      	movs	r0, #1
 800a682:	f7fd fa8b 	bl	8007b9c <CRYP_Cmd>
      
      if(CRYP_GetCmdStatus() == DISABLE)
 800a686:	f7fd fc75 	bl	8007f74 <CRYP_GetCmdStatus>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d101      	bne.n	800a694 <CRYP_AES_CCM+0xc20>
      {
        /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
           the CRYP peripheral (please check the device sales type. */
        return(ERROR);
 800a690:	2300      	movs	r3, #0
 800a692:	e117      	b.n	800a8c4 <CRYP_AES_CCM+0xe50>
      }
      
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 800a694:	2300      	movs	r3, #0
 800a696:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800a69a:	e08d      	b.n	800a7b8 <CRYP_AES_CCM+0xd44>
      {
        /* Wait until the IFEM flag is reset */
        while(CRYP_GetFlagStatus(CRYP_FLAG_IFEM) == RESET);
 800a69c:	bf00      	nop
 800a69e:	2001      	movs	r0, #1
 800a6a0:	f7fd fc82 	bl	8007fa8 <CRYP_GetFlagStatus>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d0f9      	beq.n	800a69e <CRYP_AES_CCM+0xc2a>
        /* Write the Input block in the IN FIFO */
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800a6aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7fd fa91 	bl	8007bd8 <CRYP_DataIn>
        inputaddr+=4;
 800a6b6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800a6ba:	3304      	adds	r3, #4
 800a6bc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800a6c0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7fd fa86 	bl	8007bd8 <CRYP_DataIn>
        inputaddr+=4;
 800a6cc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800a6d0:	3304      	adds	r3, #4
 800a6d2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800a6d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fd fa7b 	bl	8007bd8 <CRYP_DataIn>
        inputaddr+=4;
 800a6e2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800a6e6:	3304      	adds	r3, #4
 800a6e8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        CRYP_DataIn(*(uint32_t*)(inputaddr));
 800a6ec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fd fa70 	bl	8007bd8 <CRYP_DataIn>
        inputaddr+=4;
 800a6f8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800a6fc:	3304      	adds	r3, #4
 800a6fe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
        
        /* Wait until the complete message has been processed */
        counter = 0;
 800a702:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a706:	2200      	movs	r2, #0
 800a708:	601a      	str	r2, [r3, #0]
        do
        {
          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800a70a:	2010      	movs	r0, #16
 800a70c:	f7fd fc4c 	bl	8007fa8 <CRYP_GetFlagStatus>
 800a710:	4603      	mov	r3, r0
 800a712:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
          counter++;
 800a716:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	1c5a      	adds	r2, r3, #1
 800a71e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a722:	601a      	str	r2, [r3, #0]
        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800a724:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a72e:	d003      	beq.n	800a738 <CRYP_AES_CCM+0xcc4>
 800a730:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1e8      	bne.n	800a70a <CRYP_AES_CCM+0xc96>

        if (busystatus != RESET)
 800a738:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d003      	beq.n	800a748 <CRYP_AES_CCM+0xcd4>
        {
          status = ERROR;
 800a740:	2300      	movs	r3, #0
 800a742:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 800a746:	e032      	b.n	800a7ae <CRYP_AES_CCM+0xd3a>
        }
        else
        {
          /* Wait until the OFNE flag is reset */
          while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 800a748:	bf00      	nop
 800a74a:	2004      	movs	r0, #4
 800a74c:	f7fd fc2c 	bl	8007fa8 <CRYP_GetFlagStatus>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d0f9      	beq.n	800a74a <CRYP_AES_CCM+0xcd6>
          
          /* Read the Output block from the Output FIFO */
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800a756:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 800a75a:	f7fd fa4d 	bl	8007bf8 <CRYP_DataOut>
 800a75e:	4603      	mov	r3, r0
 800a760:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 800a762:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a766:	3304      	adds	r3, #4
 800a768:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800a76c:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 800a770:	f7fd fa42 	bl	8007bf8 <CRYP_DataOut>
 800a774:	4603      	mov	r3, r0
 800a776:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 800a778:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a77c:	3304      	adds	r3, #4
 800a77e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800a782:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 800a786:	f7fd fa37 	bl	8007bf8 <CRYP_DataOut>
 800a78a:	4603      	mov	r3, r0
 800a78c:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 800a78e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a792:	3304      	adds	r3, #4
 800a794:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
          *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800a798:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
 800a79c:	f7fd fa2c 	bl	8007bf8 <CRYP_DataOut>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	6023      	str	r3, [r4, #0]
          outputaddr+=4;
 800a7a4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800a7a8:	3304      	adds	r3, #4
 800a7aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      for(loopcounter = 0; ((loopcounter < ILength) && (status != ERROR)); loopcounter+=16)
 800a7ae:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800a7b2:	3310      	adds	r3, #16
 800a7b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800a7b8:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800a7bc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d204      	bcs.n	800a7ce <CRYP_AES_CCM+0xd5a>
 800a7c4:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f47f af67 	bne.w	800a69c <CRYP_AES_CCM+0xc28>
      }
    }
    
    /***************************** final phase ********************************/
    /* Select final phase */
    CRYP_PhaseConfig(CRYP_Phase_Final);
 800a7ce:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800a7d2:	f7fd f9b7 	bl	8007b44 <CRYP_PhaseConfig>
    
    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 800a7d6:	2001      	movs	r0, #1
 800a7d8:	f7fd f9e0 	bl	8007b9c <CRYP_Cmd>
    
    if(CRYP_GetCmdStatus() == DISABLE)
 800a7dc:	f7fd fbca 	bl	8007f74 <CRYP_GetCmdStatus>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d101      	bne.n	800a7ea <CRYP_AES_CCM+0xd76>
    {
      /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
         the CRYP peripheral (please check the device sales type. */
      return(ERROR);
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	e06c      	b.n	800a8c4 <CRYP_AES_CCM+0xe50>
    }
    
    ctraddr = (uint32_t)ctr;
 800a7ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7ee:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    /* Write the counter block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 800a7f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fd f9ed 	bl	8007bd8 <CRYP_DataIn>
    ctraddr+=4;
 800a7fe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a802:	3304      	adds	r3, #4
 800a804:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 800a808:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fd f9e2 	bl	8007bd8 <CRYP_DataIn>
    ctraddr+=4;
 800a814:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a818:	3304      	adds	r3, #4
 800a81a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    CRYP_DataIn(*(uint32_t*)(ctraddr));
 800a81e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4618      	mov	r0, r3
 800a826:	f7fd f9d7 	bl	8007bd8 <CRYP_DataIn>
    ctraddr+=4;
 800a82a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a82e:	3304      	adds	r3, #4
 800a830:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    /* Reset bit 0 (after 8-bit swap) is equivalent to reset bit 24 (before 8-bit swap) */
    CRYP_DataIn(*(uint32_t*)(ctraddr) & 0xfeffffff);
 800a834:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fd f9ca 	bl	8007bd8 <CRYP_DataIn>
    
    /* Wait until the OFNE flag is reset */
    while(CRYP_GetFlagStatus(CRYP_FLAG_OFNE) == RESET);
 800a844:	bf00      	nop
 800a846:	2004      	movs	r0, #4
 800a848:	f7fd fbae 	bl	8007fa8 <CRYP_GetFlagStatus>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d0f9      	beq.n	800a846 <CRYP_AES_CCM+0xdd2>
    
    /* Read the Authentaication TAG (MAC) in the IN FIFO */
    temptag[0] = CRYP_DataOut();
 800a852:	f7fd f9d1 	bl	8007bf8 <CRYP_DataOut>
 800a856:	4602      	mov	r2, r0
 800a858:	f107 0314 	add.w	r3, r7, #20
 800a85c:	601a      	str	r2, [r3, #0]
    temptag[1] = CRYP_DataOut();
 800a85e:	f7fd f9cb 	bl	8007bf8 <CRYP_DataOut>
 800a862:	4602      	mov	r2, r0
 800a864:	f107 0314 	add.w	r3, r7, #20
 800a868:	605a      	str	r2, [r3, #4]
    temptag[2] = CRYP_DataOut();
 800a86a:	f7fd f9c5 	bl	8007bf8 <CRYP_DataOut>
 800a86e:	4602      	mov	r2, r0
 800a870:	f107 0314 	add.w	r3, r7, #20
 800a874:	609a      	str	r2, [r3, #8]
    temptag[3] = CRYP_DataOut();
 800a876:	f7fd f9bf 	bl	8007bf8 <CRYP_DataOut>
 800a87a:	4602      	mov	r2, r0
 800a87c:	f107 0314 	add.w	r3, r7, #20
 800a880:	60da      	str	r2, [r3, #12]
  }
  
  /* Copy temporary authentication TAG in user TAG buffer */
  for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
 800a882:	2300      	movs	r3, #0
 800a884:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800a888:	e011      	b.n	800a8ae <CRYP_AES_CCM+0xe3a>
  {
    /* Set the authentication TAG buffer */
    *((uint8_t*)tagaddr+loopcounter) = *((uint8_t*)temptag+loopcounter);
 800a88a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800a88e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a892:	4413      	add	r3, r2
 800a894:	4619      	mov	r1, r3
 800a896:	f107 0214 	add.w	r2, r7, #20
 800a89a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800a89e:	4413      	add	r3, r2
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	700b      	strb	r3, [r1, #0]
  for(loopcounter = 0; (loopcounter < TAGSize); loopcounter++)
 800a8a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800a8ae:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800a8b2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d3e7      	bcc.n	800a88a <CRYP_AES_CCM+0xe16>
  }
  
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	f7fd f96e 	bl	8007b9c <CRYP_Cmd>

  return status;
 800a8c0:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd90      	pop	{r4, r7, pc}

0800a8ce <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 800a8ce:	b590      	push	{r4, r7, lr}
 800a8d0:	b09d      	sub	sp, #116	; 0x74
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
 800a8d8:	603b      	str	r3, [r7, #0]
 800a8da:	4603      	mov	r3, r0
 800a8dc:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ErrorStatus status = SUCCESS;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint32_t keyaddr    = (uint32_t)Key;
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	65bb      	str	r3, [r7, #88]	; 0x58
  uint32_t inputaddr  = (uint32_t)Input;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t outputaddr = (uint32_t)Output;
 800a8f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a8f8:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t i = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	663b      	str	r3, [r7, #96]	; 0x60

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 800a8fe:	f107 0318 	add.w	r3, r7, #24
 800a902:	4618      	mov	r0, r3
 800a904:	f7fd f8ca 	bl	8007a9c <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 800a908:	7bfb      	ldrb	r3, [r7, #15]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d102      	bne.n	800a914 <CRYP_DES_ECB+0x46>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800a90e:	2300      	movs	r3, #0
 800a910:	63bb      	str	r3, [r7, #56]	; 0x38
 800a912:	e001      	b.n	800a918 <CRYP_DES_ECB+0x4a>
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 800a914:	2304      	movs	r3, #4
 800a916:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 800a918:	2310      	movs	r3, #16
 800a91a:	63fb      	str	r3, [r7, #60]	; 0x3c
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800a91c:	2380      	movs	r3, #128	; 0x80
 800a91e:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&DES_CRYP_InitStructure);
 800a920:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a924:	4618      	mov	r0, r3
 800a926:	f7fd f825 	bl	8007974 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800a92a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a932:	ba1b      	rev	r3, r3
 800a934:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800a936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a938:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 800a93a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a93c:	3304      	adds	r3, #4
 800a93e:	65bb      	str	r3, [r7, #88]	; 0x58
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800a940:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	657b      	str	r3, [r7, #84]	; 0x54
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a948:	ba1b      	rev	r3, r3
 800a94a:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 800a94c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a94e:	627b      	str	r3, [r7, #36]	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 800a950:	f107 0318 	add.w	r3, r7, #24
 800a954:	4618      	mov	r0, r3
 800a956:	f7fd f875 	bl	8007a44 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 800a95a:	f7fd f90f 	bl	8007b7c <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800a95e:	2001      	movs	r0, #1
 800a960:	f7fd f91c 	bl	8007b9c <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 800a964:	f7fd fb06 	bl	8007f74 <CRYP_GetCmdStatus>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d101      	bne.n	800a972 <CRYP_DES_ECB+0xa4>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 800a96e:	2300      	movs	r3, #0
 800a970:	e04a      	b.n	800aa08 <CRYP_DES_ECB+0x13a>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800a972:	2300      	movs	r3, #0
 800a974:	663b      	str	r3, [r7, #96]	; 0x60
 800a976:	e03a      	b.n	800a9ee <CRYP_DES_ECB+0x120>
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800a978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fd f92b 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 800a982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a984:	3304      	adds	r3, #4
 800a986:	66bb      	str	r3, [r7, #104]	; 0x68
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800a988:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fd f923 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 800a992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a994:	3304      	adds	r3, #4
 800a996:	66bb      	str	r3, [r7, #104]	; 0x68

/* Wait until the complete message has been processed */
    counter = 0;
 800a998:	2300      	movs	r3, #0
 800a99a:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800a99c:	2010      	movs	r0, #16
 800a99e:	f7fd fb03 	bl	8007fa8 <CRYP_GetFlagStatus>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	65fb      	str	r3, [r7, #92]	; 0x5c
      counter++;
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	617b      	str	r3, [r7, #20]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9b2:	d002      	beq.n	800a9ba <CRYP_DES_ECB+0xec>
 800a9b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1f0      	bne.n	800a99c <CRYP_DES_ECB+0xce>

    if (busystatus != RESET)
 800a9ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d003      	beq.n	800a9c8 <CRYP_DES_ECB+0xfa>
   {
       status = ERROR;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800a9c6:	e00f      	b.n	800a9e8 <CRYP_DES_ECB+0x11a>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800a9c8:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 800a9ca:	f7fd f915 	bl	8007bf8 <CRYP_DataOut>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800a9d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	667b      	str	r3, [r7, #100]	; 0x64
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800a9d8:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 800a9da:	f7fd f90d 	bl	8007bf8 <CRYP_DataOut>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800a9e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	667b      	str	r3, [r7, #100]	; 0x64
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800a9e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9ea:	3308      	adds	r3, #8
 800a9ec:	663b      	str	r3, [r7, #96]	; 0x60
 800a9ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d203      	bcs.n	800a9fe <CRYP_DES_ECB+0x130>
 800a9f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1bc      	bne.n	800a978 <CRYP_DES_ECB+0xaa>
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800a9fe:	2000      	movs	r0, #0
 800aa00:	f7fd f8cc 	bl	8007b9c <CRYP_Cmd>

  return status; 
 800aa04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3774      	adds	r7, #116	; 0x74
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd90      	pop	{r4, r7, pc}

0800aa10 <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 800aa10:	b590      	push	{r4, r7, lr}
 800aa12:	b0a5      	sub	sp, #148	; 0x94
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60b9      	str	r1, [r7, #8]
 800aa18:	607a      	str	r2, [r7, #4]
 800aa1a:	603b      	str	r3, [r7, #0]
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	67fb      	str	r3, [r7, #124]	; 0x7c
  ErrorStatus status = SUCCESS;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t keyaddr    = (uint32_t)Key;
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t inputaddr  = (uint32_t)Input;
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t outputaddr = (uint32_t)Output;
 800aa38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t ivaddr     = (uint32_t)InitVectors;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t i = 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 800aa4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7fd f824 	bl	8007a9c <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 800aa54:	7bfb      	ldrb	r3, [r7, #15]
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d102      	bne.n	800aa60 <CRYP_DES_CBC+0x50>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	647b      	str	r3, [r7, #68]	; 0x44
 800aa5e:	e001      	b.n	800aa64 <CRYP_DES_CBC+0x54>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 800aa60:	2304      	movs	r3, #4
 800aa62:	647b      	str	r3, [r7, #68]	; 0x44
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 800aa64:	2318      	movs	r3, #24
 800aa66:	64bb      	str	r3, [r7, #72]	; 0x48
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800aa68:	2380      	movs	r3, #128	; 0x80
 800aa6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  CRYP_Init(&DES_CRYP_InitStructure);
 800aa6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fc ff7f 	bl	8007974 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800aa76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800aa7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa7e:	ba1b      	rev	r3, r3
 800aa80:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800aa82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa84:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 800aa86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa88:	3304      	adds	r3, #4
 800aa8a:	67bb      	str	r3, [r7, #120]	; 0x78
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800aa8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800aa92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa94:	ba1b      	rev	r3, r3
 800aa96:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 800aa98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa9a:	633b      	str	r3, [r7, #48]	; 0x30
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 800aa9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7fc ffcf 	bl	8007a44 <CRYP_KeyInit>

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 800aaa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800aaac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aaae:	ba1b      	rev	r3, r3
 800aab0:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 800aab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aab4:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 800aab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aab8:	3304      	adds	r3, #4
 800aaba:	677b      	str	r3, [r7, #116]	; 0x74
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 800aabc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	673b      	str	r3, [r7, #112]	; 0x70
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800aac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aac4:	ba1b      	rev	r3, r3
 800aac6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800aac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaca:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 800aacc:	f107 0314 	add.w	r3, r7, #20
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7fd f805 	bl	8007ae0 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 800aad6:	f7fd f851 	bl	8007b7c <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800aada:	2001      	movs	r0, #1
 800aadc:	f7fd f85e 	bl	8007b9c <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 800aae0:	f7fd fa48 	bl	8007f74 <CRYP_GetCmdStatus>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <CRYP_DES_CBC+0xde>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 800aaea:	2300      	movs	r3, #0
 800aaec:	e05b      	b.n	800aba6 <CRYP_DES_CBC+0x196>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aaf4:	e048      	b.n	800ab88 <CRYP_DES_CBC+0x178>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800aaf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fd f86b 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 800ab02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab06:	3304      	adds	r3, #4
 800ab08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800ab0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fd f860 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 800ab18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Wait until the complete message has been processed */
    counter = 0;
 800ab22:	2300      	movs	r3, #0
 800ab24:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800ab26:	2010      	movs	r0, #16
 800ab28:	f7fd fa3e 	bl	8007fa8 <CRYP_GetFlagStatus>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	67fb      	str	r3, [r7, #124]	; 0x7c
      counter++;
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	3301      	adds	r3, #1
 800ab34:	613b      	str	r3, [r7, #16]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab3c:	d002      	beq.n	800ab44 <CRYP_DES_CBC+0x134>
 800ab3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1f0      	bne.n	800ab26 <CRYP_DES_CBC+0x116>

    if (busystatus != RESET)
 800ab44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d003      	beq.n	800ab52 <CRYP_DES_CBC+0x142>
   {
       status = ERROR;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800ab50:	e015      	b.n	800ab7e <CRYP_DES_CBC+0x16e>
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800ab52:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 800ab56:	f7fd f84f 	bl	8007bf8 <CRYP_DataOut>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800ab5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab62:	3304      	adds	r3, #4
 800ab64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800ab68:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 800ab6c:	f7fd f844 	bl	8007bf8 <CRYP_DataOut>
 800ab70:	4603      	mov	r3, r0
 800ab72:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800ab74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab78:	3304      	adds	r3, #4
 800ab7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800ab7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab82:	3308      	adds	r3, #8
 800ab84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ab8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d203      	bcs.n	800ab9c <CRYP_DES_CBC+0x18c>
 800ab94:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d1ac      	bne.n	800aaf6 <CRYP_DES_CBC+0xe6>
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	f7fc fffd 	bl	8007b9c <CRYP_Cmd>

  return status; 
 800aba2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3794      	adds	r7, #148	; 0x94
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd90      	pop	{r4, r7, pc}

0800abae <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 800abae:	b590      	push	{r4, r7, lr}
 800abb0:	b0a5      	sub	sp, #148	; 0x94
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
 800abb8:	603b      	str	r3, [r7, #0]
 800abba:	4603      	mov	r3, r0
 800abbc:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800abc2:	2300      	movs	r3, #0
 800abc4:	67fb      	str	r3, [r7, #124]	; 0x7c
  ErrorStatus status = SUCCESS;
 800abc6:	2301      	movs	r3, #1
 800abc8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t keyaddr    = (uint32_t)Key;
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t inputaddr  = (uint32_t)Input;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t outputaddr = (uint32_t)Output;
 800abd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800abda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t i = 0;
 800abde:	2300      	movs	r3, #0
 800abe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 800abe4:	f107 0318 	add.w	r3, r7, #24
 800abe8:	4618      	mov	r0, r3
 800abea:	f7fc ff57 	bl	8007a9c <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 800abee:	7bfb      	ldrb	r3, [r7, #15]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d102      	bne.n	800abfa <CRYP_TDES_ECB+0x4c>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 800abf4:	2300      	movs	r3, #0
 800abf6:	63bb      	str	r3, [r7, #56]	; 0x38
 800abf8:	e001      	b.n	800abfe <CRYP_TDES_ECB+0x50>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800abfa:	2304      	movs	r3, #4
 800abfc:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 800abfe:	2300      	movs	r3, #0
 800ac00:	63fb      	str	r3, [r7, #60]	; 0x3c
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800ac02:	2380      	movs	r3, #128	; 0x80
 800ac04:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_Init(&TDES_CRYP_InitStructure);
 800ac06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fc feb2 	bl	8007974 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800ac10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ac16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac18:	ba1b      	rev	r3, r3
 800ac1a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800ac1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac1e:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 800ac20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac22:	3304      	adds	r3, #4
 800ac24:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800ac26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	657b      	str	r3, [r7, #84]	; 0x54
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ac2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac2e:	ba1b      	rev	r3, r3
 800ac30:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
 800ac32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac34:	627b      	str	r3, [r7, #36]	; 0x24
  keyaddr+=4;
 800ac36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac38:	3304      	adds	r3, #4
 800ac3a:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800ac3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ac42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac44:	ba1b      	rev	r3, r3
 800ac46:	65bb      	str	r3, [r7, #88]	; 0x58
  return(result);
 800ac48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac4a:	62bb      	str	r3, [r7, #40]	; 0x28
  keyaddr+=4;
 800ac4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac4e:	3304      	adds	r3, #4
 800ac50:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800ac52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ac58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac5a:	ba1b      	rev	r3, r3
 800ac5c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800ac5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac60:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 800ac62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac64:	3304      	adds	r3, #4
 800ac66:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800ac68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ac6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac70:	ba1b      	rev	r3, r3
 800ac72:	66bb      	str	r3, [r7, #104]	; 0x68
  return(result);
 800ac74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac76:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 800ac78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac7a:	3304      	adds	r3, #4
 800ac7c:	67bb      	str	r3, [r7, #120]	; 0x78
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800ac7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	677b      	str	r3, [r7, #116]	; 0x74
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ac84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac86:	ba1b      	rev	r3, r3
 800ac88:	673b      	str	r3, [r7, #112]	; 0x70
  return(result);
 800ac8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac8c:	637b      	str	r3, [r7, #52]	; 0x34
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 800ac8e:	f107 0318 	add.w	r3, r7, #24
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fc fed6 	bl	8007a44 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 800ac98:	f7fc ff70 	bl	8007b7c <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800ac9c:	2001      	movs	r0, #1
 800ac9e:	f7fc ff7d 	bl	8007b9c <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 800aca2:	f7fd f967 	bl	8007f74 <CRYP_GetCmdStatus>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d101      	bne.n	800acb0 <CRYP_TDES_ECB+0x102>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 800acac:	2300      	movs	r3, #0
 800acae:	e05a      	b.n	800ad66 <CRYP_TDES_ECB+0x1b8>
  }
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800acb0:	2300      	movs	r3, #0
 800acb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800acb6:	e048      	b.n	800ad4a <CRYP_TDES_ECB+0x19c>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800acb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7fc ff8a 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 800acc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800acc8:	3304      	adds	r3, #4
 800acca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800acce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7fc ff7f 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 800acda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800acde:	3304      	adds	r3, #4
 800ace0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Wait until the complete message has been processed */
    counter = 0;
 800ace4:	2300      	movs	r3, #0
 800ace6:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800ace8:	2010      	movs	r0, #16
 800acea:	f7fd f95d 	bl	8007fa8 <CRYP_GetFlagStatus>
 800acee:	4603      	mov	r3, r0
 800acf0:	67fb      	str	r3, [r7, #124]	; 0x7c
      counter++;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	3301      	adds	r3, #1
 800acf6:	617b      	str	r3, [r7, #20]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acfe:	d002      	beq.n	800ad06 <CRYP_TDES_ECB+0x158>
 800ad00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1f0      	bne.n	800ace8 <CRYP_TDES_ECB+0x13a>

    if (busystatus != RESET)
 800ad06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d003      	beq.n	800ad14 <CRYP_TDES_ECB+0x166>
    {
       status = ERROR;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800ad12:	e015      	b.n	800ad40 <CRYP_TDES_ECB+0x192>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800ad14:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 800ad18:	f7fc ff6e 	bl	8007bf8 <CRYP_DataOut>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800ad20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad24:	3304      	adds	r3, #4
 800ad26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800ad2a:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 800ad2e:	f7fc ff63 	bl	8007bf8 <CRYP_DataOut>
 800ad32:	4603      	mov	r3, r0
 800ad34:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800ad36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ad3a:	3304      	adds	r3, #4
 800ad3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800ad40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ad44:	3308      	adds	r3, #8
 800ad46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ad4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d203      	bcs.n	800ad5c <CRYP_TDES_ECB+0x1ae>
 800ad54:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d1ad      	bne.n	800acb8 <CRYP_TDES_ECB+0x10a>
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	f7fc ff1d 	bl	8007b9c <CRYP_Cmd>

  return status; 
 800ad62:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3794      	adds	r7, #148	; 0x94
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd90      	pop	{r4, r7, pc}

0800ad6e <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 800ad6e:	b590      	push	{r4, r7, lr}
 800ad70:	b0ad      	sub	sp, #180	; 0xb4
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
 800ad78:	603b      	str	r3, [r7, #0]
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800ad82:	2300      	movs	r3, #0
 800ad84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  ErrorStatus status = SUCCESS;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
  uint32_t keyaddr    = (uint32_t)Key;
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  uint32_t inputaddr  = (uint32_t)Input;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t outputaddr = (uint32_t)Output;
 800ad9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ad9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t ivaddr     = (uint32_t)InitVectors;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t i = 0;
 800ada8:	2300      	movs	r3, #0
 800adaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 800adae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7fc fe72 	bl	8007a9c <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 800adb8:	7bfb      	ldrb	r3, [r7, #15]
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d102      	bne.n	800adc4 <CRYP_TDES_CBC+0x56>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 800adbe:	2300      	movs	r3, #0
 800adc0:	647b      	str	r3, [r7, #68]	; 0x44
 800adc2:	e001      	b.n	800adc8 <CRYP_TDES_CBC+0x5a>
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800adc4:	2304      	movs	r3, #4
 800adc6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 800adc8:	2308      	movs	r3, #8
 800adca:	64bb      	str	r3, [r7, #72]	; 0x48
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800adcc:	2380      	movs	r3, #128	; 0x80
 800adce:	64fb      	str	r3, [r7, #76]	; 0x4c

  CRYP_Init(&TDES_CRYP_InitStructure);
 800add0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800add4:	4618      	mov	r0, r3
 800add6:	f7fc fdcd 	bl	8007974 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800adda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ade2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ade4:	ba1b      	rev	r3, r3
 800ade6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800ade8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adea:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 800adec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800adf0:	3304      	adds	r3, #4
 800adf2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800adf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	663b      	str	r3, [r7, #96]	; 0x60
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800adfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae00:	ba1b      	rev	r3, r3
 800ae02:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 800ae04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae06:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 800ae08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800ae12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ae1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae1c:	ba1b      	rev	r3, r3
 800ae1e:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 800ae20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae22:	637b      	str	r3, [r7, #52]	; 0x34
  keyaddr+=4;
 800ae24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae28:	3304      	adds	r3, #4
 800ae2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800ae2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	673b      	str	r3, [r7, #112]	; 0x70
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ae36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae38:	ba1b      	rev	r3, r3
 800ae3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800ae3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae3e:	63bb      	str	r3, [r7, #56]	; 0x38
  keyaddr+=4;
 800ae40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae44:	3304      	adds	r3, #4
 800ae46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800ae4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	67bb      	str	r3, [r7, #120]	; 0x78
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ae52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae54:	ba1b      	rev	r3, r3
 800ae56:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 800ae58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  keyaddr+=4;
 800ae5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae60:	3304      	adds	r3, #4
 800ae62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800ae66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ae70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae74:	ba1b      	rev	r3, r3
 800ae76:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 800ae78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ae7a:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 800ae7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fc fddf 	bl	8007a44 <CRYP_KeyInit>

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 800ae86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ae90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae94:	ba1b      	rev	r3, r3
 800ae96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 800ae9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ae9e:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 800aea0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aea4:	3304      	adds	r3, #4
 800aea6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 800aeaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800aeb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aeb8:	ba1b      	rev	r3, r3
 800aeba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 800aebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aec2:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 800aec4:	f107 0314 	add.w	r3, r7, #20
 800aec8:	4618      	mov	r0, r3
 800aeca:	f7fc fe09 	bl	8007ae0 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 800aece:	f7fc fe55 	bl	8007b7c <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800aed2:	2001      	movs	r0, #1
 800aed4:	f7fc fe62 	bl	8007b9c <CRYP_Cmd>

  if(CRYP_GetCmdStatus() == DISABLE)
 800aed8:	f7fd f84c 	bl	8007f74 <CRYP_GetCmdStatus>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d101      	bne.n	800aee6 <CRYP_TDES_CBC+0x178>
  {
    /* The CRYP peripheral clock is not enabled or the device doesn't embedd 
       the CRYP peripheral (please check the device sales type. */
    return(ERROR);
 800aee2:	2300      	movs	r3, #0
 800aee4:	e05e      	b.n	800afa4 <CRYP_TDES_CBC+0x236>
  }
  
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800aee6:	2300      	movs	r3, #0
 800aee8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aeec:	e04b      	b.n	800af86 <CRYP_TDES_CBC+0x218>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800aeee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7fc fe6f 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 800aefa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aefe:	3304      	adds	r3, #4
 800af00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800af04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7fc fe64 	bl	8007bd8 <CRYP_DataIn>
    inputaddr+=4;
 800af10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800af14:	3304      	adds	r3, #4
 800af16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    /* Wait until the complete message has been processed */
    counter = 0;
 800af1a:	2300      	movs	r3, #0
 800af1c:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800af1e:	2010      	movs	r0, #16
 800af20:	f7fd f842 	bl	8007fa8 <CRYP_GetFlagStatus>
 800af24:	4603      	mov	r3, r0
 800af26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      counter++;
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	3301      	adds	r3, #1
 800af2e:	613b      	str	r3, [r7, #16]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af36:	d003      	beq.n	800af40 <CRYP_TDES_CBC+0x1d2>
 800af38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1ee      	bne.n	800af1e <CRYP_TDES_CBC+0x1b0>

    if (busystatus != RESET)
 800af40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af44:	2b00      	cmp	r3, #0
 800af46:	d003      	beq.n	800af50 <CRYP_TDES_CBC+0x1e2>
   {
       status = ERROR;
 800af48:	2300      	movs	r3, #0
 800af4a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800af4e:	e015      	b.n	800af7c <CRYP_TDES_CBC+0x20e>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800af50:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800af54:	f7fc fe50 	bl	8007bf8 <CRYP_DataOut>
 800af58:	4603      	mov	r3, r0
 800af5a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800af5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800af60:	3304      	adds	r3, #4
 800af62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800af66:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800af6a:	f7fc fe45 	bl	8007bf8 <CRYP_DataOut>
 800af6e:	4603      	mov	r3, r0
 800af70:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800af72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800af76:	3304      	adds	r3, #4
 800af78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800af7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af80:	3308      	adds	r3, #8
 800af82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800af86:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800af8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800af8e:	429a      	cmp	r2, r3
 800af90:	d203      	bcs.n	800af9a <CRYP_TDES_CBC+0x22c>
 800af92:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1a9      	bne.n	800aeee <CRYP_TDES_CBC+0x180>
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800af9a:	2000      	movs	r0, #0
 800af9c:	f7fc fdfe 	bl	8007b9c <CRYP_Cmd>

  return status; 
 800afa0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	37b4      	adds	r7, #180	; 0xb4
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd90      	pop	{r4, r7, pc}

0800afac <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 800afb0:	2101      	movs	r1, #1
 800afb2:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800afb6:	f004 fc15 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 800afba:	2100      	movs	r1, #0
 800afbc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800afc0:	f004 fc10 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 800afc4:	bf00      	nop
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	60fb      	str	r3, [r7, #12]
 800afd6:	2300      	movs	r3, #0
 800afd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 800afda:	4b14      	ldr	r3, [pc, #80]	; (800b02c <DAC_Init+0x64>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 800afe0:	f640 72fe 	movw	r2, #4094	; 0xffe
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	fa02 f303 	lsl.w	r3, r2, r3
 800afea:	43db      	mvns	r3, r3
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	4013      	ands	r3, r2
 800aff0:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800b000:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_OutputBuffer);
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800b006:	4313      	orrs	r3, r2
 800b008:	60bb      	str	r3, [r7, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	fa02 f303 	lsl.w	r3, r2, r3
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	4313      	orrs	r3, r2
 800b016:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 800b018:	4a04      	ldr	r2, [pc, #16]	; (800b02c <DAC_Init+0x64>)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6013      	str	r3, [r2, #0]
}
 800b01e:	bf00      	nop
 800b020:	3714      	adds	r7, #20
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	40007400 	.word	0x40007400

0800b030 <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	60da      	str	r2, [r3, #12]
}
 800b050:	bf00      	nop
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	460b      	mov	r3, r1
 800b066:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800b068:	78fb      	ldrb	r3, [r7, #3]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d009      	beq.n	800b082 <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 800b06e:	490d      	ldr	r1, [pc, #52]	; (800b0a4 <DAC_Cmd+0x48>)
 800b070:	4b0c      	ldr	r3, [pc, #48]	; (800b0a4 <DAC_Cmd+0x48>)
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	2001      	movs	r0, #1
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	fa00 f303 	lsl.w	r3, r0, r3
 800b07c:	4313      	orrs	r3, r2
 800b07e:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
  }
}
 800b080:	e009      	b.n	800b096 <DAC_Cmd+0x3a>
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 800b082:	4908      	ldr	r1, [pc, #32]	; (800b0a4 <DAC_Cmd+0x48>)
 800b084:	4b07      	ldr	r3, [pc, #28]	; (800b0a4 <DAC_Cmd+0x48>)
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	2001      	movs	r0, #1
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	fa00 f303 	lsl.w	r3, r0, r3
 800b090:	43db      	mvns	r3, r3
 800b092:	4013      	ands	r3, r2
 800b094:	600b      	str	r3, [r1, #0]
}
 800b096:	bf00      	nop
 800b098:	370c      	adds	r7, #12
 800b09a:	46bd      	mov	sp, r7
 800b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a0:	4770      	bx	lr
 800b0a2:	bf00      	nop
 800b0a4:	40007400 	.word	0x40007400

0800b0a8 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800b0b4:	78fb      	ldrb	r3, [r7, #3]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00a      	beq.n	800b0d0 <DAC_SoftwareTriggerCmd+0x28>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 800b0ba:	490e      	ldr	r1, [pc, #56]	; (800b0f4 <DAC_SoftwareTriggerCmd+0x4c>)
 800b0bc:	4b0d      	ldr	r3, [pc, #52]	; (800b0f4 <DAC_SoftwareTriggerCmd+0x4c>)
 800b0be:	685a      	ldr	r2, [r3, #4]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	091b      	lsrs	r3, r3, #4
 800b0c4:	2001      	movs	r0, #1
 800b0c6:	fa00 f303 	lsl.w	r3, r0, r3
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	604b      	str	r3, [r1, #4]
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
  }
}
 800b0ce:	e00a      	b.n	800b0e6 <DAC_SoftwareTriggerCmd+0x3e>
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 800b0d0:	4908      	ldr	r1, [pc, #32]	; (800b0f4 <DAC_SoftwareTriggerCmd+0x4c>)
 800b0d2:	4b08      	ldr	r3, [pc, #32]	; (800b0f4 <DAC_SoftwareTriggerCmd+0x4c>)
 800b0d4:	685a      	ldr	r2, [r3, #4]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	091b      	lsrs	r3, r3, #4
 800b0da:	2001      	movs	r0, #1
 800b0dc:	fa00 f303 	lsl.w	r3, r0, r3
 800b0e0:	43db      	mvns	r3, r3
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	604b      	str	r3, [r1, #4]
}
 800b0e6:	bf00      	nop
 800b0e8:	370c      	adds	r7, #12
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	40007400 	.word	0x40007400

0800b0f8 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	4603      	mov	r3, r0
 800b100:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800b102:	79fb      	ldrb	r3, [r7, #7]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d006      	beq.n	800b116 <DAC_DualSoftwareTriggerCmd+0x1e>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 800b108:	4a09      	ldr	r2, [pc, #36]	; (800b130 <DAC_DualSoftwareTriggerCmd+0x38>)
 800b10a:	4b09      	ldr	r3, [pc, #36]	; (800b130 <DAC_DualSoftwareTriggerCmd+0x38>)
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	f043 0303 	orr.w	r3, r3, #3
 800b112:	6053      	str	r3, [r2, #4]
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
  }
}
 800b114:	e005      	b.n	800b122 <DAC_DualSoftwareTriggerCmd+0x2a>
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 800b116:	4a06      	ldr	r2, [pc, #24]	; (800b130 <DAC_DualSoftwareTriggerCmd+0x38>)
 800b118:	4b05      	ldr	r3, [pc, #20]	; (800b130 <DAC_DualSoftwareTriggerCmd+0x38>)
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	f023 0303 	bic.w	r3, r3, #3
 800b120:	6053      	str	r3, [r2, #4]
}
 800b122:	bf00      	nop
 800b124:	370c      	adds	r7, #12
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr
 800b12e:	bf00      	nop
 800b130:	40007400 	.word	0x40007400

0800b134 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	4613      	mov	r3, r2
 800b140:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800b142:	79fb      	ldrb	r3, [r7, #7]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d009      	beq.n	800b15c <DAC_WaveGenerationCmd+0x28>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 800b148:	480c      	ldr	r0, [pc, #48]	; (800b17c <DAC_WaveGenerationCmd+0x48>)
 800b14a:	4b0c      	ldr	r3, [pc, #48]	; (800b17c <DAC_WaveGenerationCmd+0x48>)
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	68b9      	ldr	r1, [r7, #8]
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	fa01 f303 	lsl.w	r3, r1, r3
 800b156:	4313      	orrs	r3, r2
 800b158:	6003      	str	r3, [r0, #0]
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
  }
}
 800b15a:	e009      	b.n	800b170 <DAC_WaveGenerationCmd+0x3c>
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 800b15c:	4807      	ldr	r0, [pc, #28]	; (800b17c <DAC_WaveGenerationCmd+0x48>)
 800b15e:	4b07      	ldr	r3, [pc, #28]	; (800b17c <DAC_WaveGenerationCmd+0x48>)
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	68b9      	ldr	r1, [r7, #8]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	fa01 f303 	lsl.w	r3, r1, r3
 800b16a:	43db      	mvns	r3, r3
 800b16c:	4013      	ands	r3, r2
 800b16e:	6003      	str	r3, [r0, #0]
}
 800b170:	bf00      	nop
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	40007400 	.word	0x40007400

0800b180 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 800b18c:	2300      	movs	r3, #0
 800b18e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800b190:	4b08      	ldr	r3, [pc, #32]	; (800b1b4 <DAC_SetChannel1Data+0x34>)
 800b192:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4413      	add	r3, r2
 800b19a:	3308      	adds	r3, #8
 800b19c:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	887b      	ldrh	r3, [r7, #2]
 800b1a4:	6013      	str	r3, [r2, #0]
}
 800b1a6:	bf00      	nop
 800b1a8:	3714      	adds	r7, #20
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr
 800b1b2:	bf00      	nop
 800b1b4:	40007400 	.word	0x40007400

0800b1b8 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 800b1c8:	4b08      	ldr	r3, [pc, #32]	; (800b1ec <DAC_SetChannel2Data+0x34>)
 800b1ca:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 800b1cc:	68fa      	ldr	r2, [r7, #12]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	3314      	adds	r3, #20
 800b1d4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	461a      	mov	r2, r3
 800b1da:	887b      	ldrh	r3, [r7, #2]
 800b1dc:	6013      	str	r3, [r2, #0]
}
 800b1de:	bf00      	nop
 800b1e0:	3714      	adds	r7, #20
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	40007400 	.word	0x40007400

0800b1f0 <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	807b      	strh	r3, [r7, #2]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 800b200:	2300      	movs	r3, #0
 800b202:	60fb      	str	r3, [r7, #12]
 800b204:	2300      	movs	r3, #0
 800b206:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2b08      	cmp	r3, #8
 800b20c:	d105      	bne.n	800b21a <DAC_SetDualChannelData+0x2a>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 800b20e:	887b      	ldrh	r3, [r7, #2]
 800b210:	021a      	lsls	r2, r3, #8
 800b212:	883b      	ldrh	r3, [r7, #0]
 800b214:	4313      	orrs	r3, r2
 800b216:	60fb      	str	r3, [r7, #12]
 800b218:	e004      	b.n	800b224 <DAC_SetDualChannelData+0x34>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 800b21a:	887b      	ldrh	r3, [r7, #2]
 800b21c:	041a      	lsls	r2, r3, #16
 800b21e:	883b      	ldrh	r3, [r7, #0]
 800b220:	4313      	orrs	r3, r2
 800b222:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 800b224:	4b07      	ldr	r3, [pc, #28]	; (800b244 <DAC_SetDualChannelData+0x54>)
 800b226:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	4413      	add	r3, r2
 800b22e:	3320      	adds	r3, #32
 800b230:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	601a      	str	r2, [r3, #0]
}
 800b238:	bf00      	nop
 800b23a:	3714      	adds	r7, #20
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr
 800b244:	40007400 	.word	0x40007400

0800b248 <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 800b248:	b480      	push	{r7}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800b250:	2300      	movs	r3, #0
 800b252:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 800b254:	4b08      	ldr	r3, [pc, #32]	; (800b278 <DAC_GetDataOutputValue+0x30>)
 800b256:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	089a      	lsrs	r2, r3, #2
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	4413      	add	r3, r2
 800b260:	332c      	adds	r3, #44	; 0x2c
 800b262:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	b29b      	uxth	r3, r3
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3714      	adds	r7, #20
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	40007400 	.word	0x40007400

0800b27c <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800b288:	78fb      	ldrb	r3, [r7, #3]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00a      	beq.n	800b2a4 <DAC_DMACmd+0x28>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 800b28e:	490e      	ldr	r1, [pc, #56]	; (800b2c8 <DAC_DMACmd+0x4c>)
 800b290:	4b0d      	ldr	r3, [pc, #52]	; (800b2c8 <DAC_DMACmd+0x4c>)
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	fa00 f303 	lsl.w	r3, r0, r3
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
  }
}
 800b2a2:	e00a      	b.n	800b2ba <DAC_DMACmd+0x3e>
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 800b2a4:	4908      	ldr	r1, [pc, #32]	; (800b2c8 <DAC_DMACmd+0x4c>)
 800b2a6:	4b08      	ldr	r3, [pc, #32]	; (800b2c8 <DAC_DMACmd+0x4c>)
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	fa00 f303 	lsl.w	r3, r0, r3
 800b2b4:	43db      	mvns	r3, r3
 800b2b6:	4013      	ands	r3, r2
 800b2b8:	600b      	str	r3, [r1, #0]
}
 800b2ba:	bf00      	nop
 800b2bc:	370c      	adds	r7, #12
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop
 800b2c8:	40007400 	.word	0x40007400

0800b2cc <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b085      	sub	sp, #20
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 800b2da:	79fb      	ldrb	r3, [r7, #7]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d009      	beq.n	800b2f4 <DAC_ITConfig+0x28>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 800b2e0:	480c      	ldr	r0, [pc, #48]	; (800b314 <DAC_ITConfig+0x48>)
 800b2e2:	4b0c      	ldr	r3, [pc, #48]	; (800b314 <DAC_ITConfig+0x48>)
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	68b9      	ldr	r1, [r7, #8]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	fa01 f303 	lsl.w	r3, r1, r3
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	6003      	str	r3, [r0, #0]
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
  }
}
 800b2f2:	e009      	b.n	800b308 <DAC_ITConfig+0x3c>
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 800b2f4:	4807      	ldr	r0, [pc, #28]	; (800b314 <DAC_ITConfig+0x48>)
 800b2f6:	4b07      	ldr	r3, [pc, #28]	; (800b314 <DAC_ITConfig+0x48>)
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	68b9      	ldr	r1, [r7, #8]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	fa01 f303 	lsl.w	r3, r1, r3
 800b302:	43db      	mvns	r3, r3
 800b304:	4013      	ands	r3, r2
 800b306:	6003      	str	r3, [r0, #0]
}
 800b308:	bf00      	nop
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr
 800b314:	40007400 	.word	0x40007400

0800b318 <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 800b318:	b480      	push	{r7}
 800b31a:	b085      	sub	sp, #20
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800b322:	2300      	movs	r3, #0
 800b324:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 800b326:	4b0a      	ldr	r3, [pc, #40]	; (800b350 <DAC_GetFlagStatus+0x38>)
 800b328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	fa01 f303 	lsl.w	r3, r1, r3
 800b332:	4013      	ands	r3, r2
 800b334:	2b00      	cmp	r3, #0
 800b336:	d002      	beq.n	800b33e <DAC_GetFlagStatus+0x26>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 800b338:	2301      	movs	r3, #1
 800b33a:	73fb      	strb	r3, [r7, #15]
 800b33c:	e001      	b.n	800b342 <DAC_GetFlagStatus+0x2a>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 800b33e:	2300      	movs	r3, #0
 800b340:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 800b342:	7bfb      	ldrb	r3, [r7, #15]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr
 800b350:	40007400 	.word	0x40007400

0800b354 <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 800b35e:	4906      	ldr	r1, [pc, #24]	; (800b378 <DAC_ClearFlag+0x24>)
 800b360:	683a      	ldr	r2, [r7, #0]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	fa02 f303 	lsl.w	r3, r2, r3
 800b368:	634b      	str	r3, [r1, #52]	; 0x34
}
 800b36a:	bf00      	nop
 800b36c:	370c      	adds	r7, #12
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	40007400 	.word	0x40007400

0800b37c <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800b386:	2300      	movs	r3, #0
 800b388:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 800b38e:	4b10      	ldr	r3, [pc, #64]	; (800b3d0 <DAC_GetITStatus+0x54>)
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	6839      	ldr	r1, [r7, #0]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	fa01 f303 	lsl.w	r3, r1, r3
 800b39a:	4013      	ands	r3, r2
 800b39c:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 800b39e:	4b0c      	ldr	r3, [pc, #48]	; (800b3d0 <DAC_GetITStatus+0x54>)
 800b3a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3a2:	6839      	ldr	r1, [r7, #0]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b3aa:	4013      	ands	r3, r2
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d005      	beq.n	800b3bc <DAC_GetITStatus+0x40>
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d002      	beq.n	800b3bc <DAC_GetITStatus+0x40>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	73fb      	strb	r3, [r7, #15]
 800b3ba:	e001      	b.n	800b3c0 <DAC_GetITStatus+0x44>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3714      	adds	r7, #20
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	40007400 	.word	0x40007400

0800b3d4 <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 800b3de:	4906      	ldr	r1, [pc, #24]	; (800b3f8 <DAC_ClearITPendingBit+0x24>)
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3e8:	634b      	str	r3, [r1, #52]	; 0x34
}
 800b3ea:	bf00      	nop
 800b3ec:	370c      	adds	r7, #12
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	40007400 	.word	0x40007400

0800b3fc <DBGMCU_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE >> 16);
 800b400:	4b03      	ldr	r3, [pc, #12]	; (800b410 <DBGMCU_GetREVID+0x14>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	0c1b      	lsrs	r3, r3, #16
}
 800b406:	4618      	mov	r0, r3
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	e0042000 	.word	0xe0042000

0800b414 <DBGMCU_GetDEVID>:
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 800b414:	b480      	push	{r7}
 800b416:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 800b418:	4b04      	ldr	r3, [pc, #16]	; (800b42c <DBGMCU_GetDEVID+0x18>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800b420:	4618      	mov	r0, r3
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
 800b42a:	bf00      	nop
 800b42c:	e0042000 	.word	0xe0042000

0800b430 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	460b      	mov	r3, r1
 800b43a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b43c:	78fb      	ldrb	r3, [r7, #3]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d006      	beq.n	800b450 <DBGMCU_Config+0x20>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 800b442:	490a      	ldr	r1, [pc, #40]	; (800b46c <DBGMCU_Config+0x3c>)
 800b444:	4b09      	ldr	r3, [pc, #36]	; (800b46c <DBGMCU_Config+0x3c>)
 800b446:	685a      	ldr	r2, [r3, #4]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4313      	orrs	r3, r2
 800b44c:	604b      	str	r3, [r1, #4]
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
  }
}
 800b44e:	e006      	b.n	800b45e <DBGMCU_Config+0x2e>
    DBGMCU->CR &= ~DBGMCU_Periph;
 800b450:	4906      	ldr	r1, [pc, #24]	; (800b46c <DBGMCU_Config+0x3c>)
 800b452:	4b06      	ldr	r3, [pc, #24]	; (800b46c <DBGMCU_Config+0x3c>)
 800b454:	685a      	ldr	r2, [r3, #4]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	43db      	mvns	r3, r3
 800b45a:	4013      	ands	r3, r2
 800b45c:	604b      	str	r3, [r1, #4]
}
 800b45e:	bf00      	nop
 800b460:	370c      	adds	r7, #12
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop
 800b46c:	e0042000 	.word	0xe0042000

0800b470 <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	460b      	mov	r3, r1
 800b47a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800b47c:	78fb      	ldrb	r3, [r7, #3]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d006      	beq.n	800b490 <DBGMCU_APB1PeriphConfig+0x20>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 800b482:	490a      	ldr	r1, [pc, #40]	; (800b4ac <DBGMCU_APB1PeriphConfig+0x3c>)
 800b484:	4b09      	ldr	r3, [pc, #36]	; (800b4ac <DBGMCU_APB1PeriphConfig+0x3c>)
 800b486:	689a      	ldr	r2, [r3, #8]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	608b      	str	r3, [r1, #8]
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
  }
}
 800b48e:	e006      	b.n	800b49e <DBGMCU_APB1PeriphConfig+0x2e>
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 800b490:	4906      	ldr	r1, [pc, #24]	; (800b4ac <DBGMCU_APB1PeriphConfig+0x3c>)
 800b492:	4b06      	ldr	r3, [pc, #24]	; (800b4ac <DBGMCU_APB1PeriphConfig+0x3c>)
 800b494:	689a      	ldr	r2, [r3, #8]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	43db      	mvns	r3, r3
 800b49a:	4013      	ands	r3, r2
 800b49c:	608b      	str	r3, [r1, #8]
}
 800b49e:	bf00      	nop
 800b4a0:	370c      	adds	r7, #12
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	e0042000 	.word	0xe0042000

0800b4b0 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800b4bc:	78fb      	ldrb	r3, [r7, #3]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d006      	beq.n	800b4d0 <DBGMCU_APB2PeriphConfig+0x20>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 800b4c2:	490a      	ldr	r1, [pc, #40]	; (800b4ec <DBGMCU_APB2PeriphConfig+0x3c>)
 800b4c4:	4b09      	ldr	r3, [pc, #36]	; (800b4ec <DBGMCU_APB2PeriphConfig+0x3c>)
 800b4c6:	68da      	ldr	r2, [r3, #12]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	60cb      	str	r3, [r1, #12]
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
  }
}
 800b4ce:	e006      	b.n	800b4de <DBGMCU_APB2PeriphConfig+0x2e>
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 800b4d0:	4906      	ldr	r1, [pc, #24]	; (800b4ec <DBGMCU_APB2PeriphConfig+0x3c>)
 800b4d2:	4b06      	ldr	r3, [pc, #24]	; (800b4ec <DBGMCU_APB2PeriphConfig+0x3c>)
 800b4d4:	68da      	ldr	r2, [r3, #12]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	43db      	mvns	r3, r3
 800b4da:	4013      	ands	r3, r2
 800b4dc:	60cb      	str	r3, [r1, #12]
}
 800b4de:	bf00      	nop
 800b4e0:	370c      	adds	r7, #12
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop
 800b4ec:	e0042000 	.word	0xe0042000

0800b4f0 <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 800b4f4:	4b0c      	ldr	r3, [pc, #48]	; (800b528 <DCMI_DeInit+0x38>)
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 800b4fa:	4b0b      	ldr	r3, [pc, #44]	; (800b528 <DCMI_DeInit+0x38>)
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 800b500:	4b09      	ldr	r3, [pc, #36]	; (800b528 <DCMI_DeInit+0x38>)
 800b502:	221f      	movs	r2, #31
 800b504:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 800b506:	4b08      	ldr	r3, [pc, #32]	; (800b528 <DCMI_DeInit+0x38>)
 800b508:	2200      	movs	r2, #0
 800b50a:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 800b50c:	4b06      	ldr	r3, [pc, #24]	; (800b528 <DCMI_DeInit+0x38>)
 800b50e:	2200      	movs	r2, #0
 800b510:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 800b512:	4b05      	ldr	r3, [pc, #20]	; (800b528 <DCMI_DeInit+0x38>)
 800b514:	2200      	movs	r2, #0
 800b516:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 800b518:	4b03      	ldr	r3, [pc, #12]	; (800b528 <DCMI_DeInit+0x38>)
 800b51a:	2200      	movs	r2, #0
 800b51c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b51e:	bf00      	nop
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr
 800b528:	50050000 	.word	0x50050000

0800b52c <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 800b534:	2300      	movs	r3, #0
 800b536:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 800b538:	4a1b      	ldr	r2, [pc, #108]	; (800b5a8 <DCMI_Init+0x7c>)
 800b53a:	4b1b      	ldr	r3, [pc, #108]	; (800b5a8 <DCMI_Init+0x7c>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b542:	f023 0301 	bic.w	r3, r3, #1
 800b546:	6013      	str	r3, [r2, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 800b548:	4b17      	ldr	r3, [pc, #92]	; (800b5a8 <DCMI_Init+0x7c>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b554:	f023 0302 	bic.w	r3, r3, #2
 800b558:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800b562:	4313      	orrs	r3, r2
 800b564:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_PCKPolarity |
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_CaptureRate |
 800b56a:	4313      	orrs	r3, r2
 800b56c:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_VSPolarity |
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_CaptureRate |
 800b572:	4313      	orrs	r3, r2
 800b574:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_HSPolarity |
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 800b57a:	4313      	orrs	r3, r2
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	895b      	ldrh	r3, [r3, #10]
 800b582:	4313      	orrs	r3, r2
 800b584:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	899b      	ldrh	r3, [r3, #12]
                     DCMI_InitStruct->DCMI_CaptureRate |
 800b58a:	4313      	orrs	r3, r2
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	461a      	mov	r2, r3
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	4313      	orrs	r3, r2
 800b594:	60fb      	str	r3, [r7, #12]

  DCMI->CR = temp;                              
 800b596:	4a04      	ldr	r2, [pc, #16]	; (800b5a8 <DCMI_Init+0x7c>)
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6013      	str	r3, [r2, #0]
}
 800b59c:	bf00      	nop
 800b59e:	3714      	adds	r7, #20
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr
 800b5a8:	50050000 	.word	0x50050000

0800b5ac <DCMI_StructInit>:
  * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	801a      	strh	r2, [r3, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	805a      	strh	r2, [r3, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	809a      	strh	r2, [r3, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	80da      	strh	r2, [r3, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	811a      	strh	r2, [r3, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	815a      	strh	r2, [r3, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	819a      	strh	r2, [r3, #12]
}
 800b5de:	bf00      	nop
 800b5e0:	370c      	adds	r7, #12
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 800b5ea:	b480      	push	{r7}
 800b5ec:	b083      	sub	sp, #12
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 800b5f2:	4a0c      	ldr	r2, [pc, #48]	; (800b624 <DCMI_CROPConfig+0x3a>)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	885b      	ldrh	r3, [r3, #2]
 800b5f8:	4619      	mov	r1, r3
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	881b      	ldrh	r3, [r3, #0]
 800b5fe:	041b      	lsls	r3, r3, #16
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 800b600:	430b      	orrs	r3, r1
 800b602:	6213      	str	r3, [r2, #32]

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 800b604:	4a07      	ldr	r2, [pc, #28]	; (800b624 <DCMI_CROPConfig+0x3a>)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	88db      	ldrh	r3, [r3, #6]
 800b60a:	4619      	mov	r1, r3
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	889b      	ldrh	r3, [r3, #4]
 800b610:	041b      	lsls	r3, r3, #16
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 800b612:	430b      	orrs	r3, r1
 800b614:	6253      	str	r3, [r2, #36]	; 0x24
}
 800b616:	bf00      	nop
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	50050000 	.word	0x50050000

0800b628 <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	4603      	mov	r3, r0
 800b630:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800b632:	79fb      	ldrb	r3, [r7, #7]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d006      	beq.n	800b646 <DCMI_CROPCmd+0x1e>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 800b638:	4a09      	ldr	r2, [pc, #36]	; (800b660 <DCMI_CROPCmd+0x38>)
 800b63a:	4b09      	ldr	r3, [pc, #36]	; (800b660 <DCMI_CROPCmd+0x38>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f043 0304 	orr.w	r3, r3, #4
 800b642:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
  }
}
 800b644:	e005      	b.n	800b652 <DCMI_CROPCmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 800b646:	4a06      	ldr	r2, [pc, #24]	; (800b660 <DCMI_CROPCmd+0x38>)
 800b648:	4b05      	ldr	r3, [pc, #20]	; (800b660 <DCMI_CROPCmd+0x38>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f023 0304 	bic.w	r3, r3, #4
 800b650:	6013      	str	r3, [r2, #0]
}
 800b652:	bf00      	nop
 800b654:	370c      	adds	r7, #12
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	50050000 	.word	0x50050000

0800b664 <DCMI_SetEmbeddedSynchroCodes>:
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800b66c:	490b      	ldr	r1, [pc, #44]	; (800b69c <DCMI_SetEmbeddedSynchroCodes+0x38>)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	461a      	mov	r2, r3
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	785b      	ldrb	r3, [r3, #1]
 800b678:	021b      	lsls	r3, r3, #8
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800b67a:	431a      	orrs	r2, r3
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	789b      	ldrb	r3, [r3, #2]
 800b680:	041b      	lsls	r3, r3, #16
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 800b682:	431a      	orrs	r2, r3
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	78db      	ldrb	r3, [r3, #3]
 800b688:	061b      	lsls	r3, r3, #24
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800b68a:	4313      	orrs	r3, r2
 800b68c:	618b      	str	r3, [r1, #24]
}
 800b68e:	bf00      	nop
 800b690:	370c      	adds	r7, #12
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	50050000 	.word	0x50050000

0800b6a0 <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 800b6aa:	79fb      	ldrb	r3, [r7, #7]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d006      	beq.n	800b6be <DCMI_JPEGCmd+0x1e>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 800b6b0:	4a09      	ldr	r2, [pc, #36]	; (800b6d8 <DCMI_JPEGCmd+0x38>)
 800b6b2:	4b09      	ldr	r3, [pc, #36]	; (800b6d8 <DCMI_JPEGCmd+0x38>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f043 0308 	orr.w	r3, r3, #8
 800b6ba:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
  }
}
 800b6bc:	e005      	b.n	800b6ca <DCMI_JPEGCmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 800b6be:	4a06      	ldr	r2, [pc, #24]	; (800b6d8 <DCMI_JPEGCmd+0x38>)
 800b6c0:	4b05      	ldr	r3, [pc, #20]	; (800b6d8 <DCMI_JPEGCmd+0x38>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f023 0308 	bic.w	r3, r3, #8
 800b6c8:	6013      	str	r3, [r2, #0]
}
 800b6ca:	bf00      	nop
 800b6cc:	370c      	adds	r7, #12
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	50050000 	.word	0x50050000

0800b6dc <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800b6e6:	79fb      	ldrb	r3, [r7, #7]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d006      	beq.n	800b6fa <DCMI_Cmd+0x1e>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 800b6ec:	4a09      	ldr	r2, [pc, #36]	; (800b714 <DCMI_Cmd+0x38>)
 800b6ee:	4b09      	ldr	r3, [pc, #36]	; (800b714 <DCMI_Cmd+0x38>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b6f6:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
  }
}
 800b6f8:	e005      	b.n	800b706 <DCMI_Cmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 800b6fa:	4a06      	ldr	r2, [pc, #24]	; (800b714 <DCMI_Cmd+0x38>)
 800b6fc:	4b05      	ldr	r3, [pc, #20]	; (800b714 <DCMI_Cmd+0x38>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b704:	6013      	str	r3, [r2, #0]
}
 800b706:	bf00      	nop
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	50050000 	.word	0x50050000

0800b718 <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	4603      	mov	r3, r0
 800b720:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800b722:	79fb      	ldrb	r3, [r7, #7]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d006      	beq.n	800b736 <DCMI_CaptureCmd+0x1e>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 800b728:	4a09      	ldr	r2, [pc, #36]	; (800b750 <DCMI_CaptureCmd+0x38>)
 800b72a:	4b09      	ldr	r3, [pc, #36]	; (800b750 <DCMI_CaptureCmd+0x38>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f043 0301 	orr.w	r3, r3, #1
 800b732:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
  }
}
 800b734:	e005      	b.n	800b742 <DCMI_CaptureCmd+0x2a>
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 800b736:	4a06      	ldr	r2, [pc, #24]	; (800b750 <DCMI_CaptureCmd+0x38>)
 800b738:	4b05      	ldr	r3, [pc, #20]	; (800b750 <DCMI_CaptureCmd+0x38>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f023 0301 	bic.w	r3, r3, #1
 800b740:	6013      	str	r3, [r2, #0]
}
 800b742:	bf00      	nop
 800b744:	370c      	adds	r7, #12
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	50050000 	.word	0x50050000

0800b754 <DCMI_ReadData>:
  * @brief  Reads the data stored in the DR register.
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
 800b754:	b480      	push	{r7}
 800b756:	af00      	add	r7, sp, #0
  return DCMI->DR;
 800b758:	4b03      	ldr	r3, [pc, #12]	; (800b768 <DCMI_ReadData+0x14>)
 800b75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	50050000 	.word	0x50050000

0800b76c <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	4603      	mov	r3, r0
 800b774:	460a      	mov	r2, r1
 800b776:	80fb      	strh	r3, [r7, #6]
 800b778:	4613      	mov	r3, r2
 800b77a:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800b77c:	797b      	ldrb	r3, [r7, #5]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d006      	beq.n	800b790 <DCMI_ITConfig+0x24>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 800b782:	490a      	ldr	r1, [pc, #40]	; (800b7ac <DCMI_ITConfig+0x40>)
 800b784:	4b09      	ldr	r3, [pc, #36]	; (800b7ac <DCMI_ITConfig+0x40>)
 800b786:	68da      	ldr	r2, [r3, #12]
 800b788:	88fb      	ldrh	r3, [r7, #6]
 800b78a:	4313      	orrs	r3, r2
 800b78c:	60cb      	str	r3, [r1, #12]
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
  }  
}
 800b78e:	e007      	b.n	800b7a0 <DCMI_ITConfig+0x34>
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 800b790:	4906      	ldr	r1, [pc, #24]	; (800b7ac <DCMI_ITConfig+0x40>)
 800b792:	4b06      	ldr	r3, [pc, #24]	; (800b7ac <DCMI_ITConfig+0x40>)
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	88fa      	ldrh	r2, [r7, #6]
 800b798:	43d2      	mvns	r2, r2
 800b79a:	b292      	uxth	r2, r2
 800b79c:	4013      	ands	r3, r2
 800b79e:	60cb      	str	r3, [r1, #12]
}
 800b7a0:	bf00      	nop
 800b7a2:	370c      	adds	r7, #12
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	50050000 	.word	0x50050000

0800b7b0 <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b087      	sub	sp, #28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 800b7c2:	88fb      	ldrh	r3, [r7, #6]
 800b7c4:	0b1b      	lsrs	r3, r3, #12
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x00) /* The FLAG is in RISR register */
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d103      	bne.n	800b7d8 <DCMI_GetFlagStatus+0x28>
  {
    tempreg= DCMI->RISR;
 800b7d0:	4b0f      	ldr	r3, [pc, #60]	; (800b810 <DCMI_GetFlagStatus+0x60>)
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	613b      	str	r3, [r7, #16]
 800b7d6:	e009      	b.n	800b7ec <DCMI_GetFlagStatus+0x3c>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d103      	bne.n	800b7e6 <DCMI_GetFlagStatus+0x36>
  {
    tempreg = DCMI->SR;
 800b7de:	4b0c      	ldr	r3, [pc, #48]	; (800b810 <DCMI_GetFlagStatus+0x60>)
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	613b      	str	r3, [r7, #16]
 800b7e4:	e002      	b.n	800b7ec <DCMI_GetFlagStatus+0x3c>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 800b7e6:	4b0a      	ldr	r3, [pc, #40]	; (800b810 <DCMI_GetFlagStatus+0x60>)
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 800b7ec:	88fa      	ldrh	r2, [r7, #6]
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d002      	beq.n	800b7fc <DCMI_GetFlagStatus+0x4c>
  {
    bitstatus = SET;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	75fb      	strb	r3, [r7, #23]
 800b7fa:	e001      	b.n	800b800 <DCMI_GetFlagStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 800b800:	7dfb      	ldrb	r3, [r7, #23]
}
 800b802:	4618      	mov	r0, r3
 800b804:	371c      	adds	r7, #28
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
 800b80e:	bf00      	nop
 800b810:	50050000 	.word	0x50050000

0800b814 <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	4603      	mov	r3, r0
 800b81c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 800b81e:	4a04      	ldr	r2, [pc, #16]	; (800b830 <DCMI_ClearFlag+0x1c>)
 800b820:	88fb      	ldrh	r3, [r7, #6]
 800b822:	6153      	str	r3, [r2, #20]
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr
 800b830:	50050000 	.word	0x50050000

0800b834 <DCMI_GetITStatus>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval The new state of DCMI_IT (SET or RESET).
  */
ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
 800b83a:	4603      	mov	r3, r0
 800b83c:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 800b83e:	2300      	movs	r3, #0
 800b840:	73fb      	strb	r3, [r7, #15]
  uint32_t itstatus = 0;
 800b842:	2300      	movs	r3, #0
 800b844:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 800b846:	4b0a      	ldr	r3, [pc, #40]	; (800b870 <DCMI_GetITStatus+0x3c>)
 800b848:	691a      	ldr	r2, [r3, #16]
 800b84a:	88fb      	ldrh	r3, [r7, #6]
 800b84c:	4013      	ands	r3, r2
 800b84e:	60bb      	str	r3, [r7, #8]
  
  if ((itstatus != (uint16_t)RESET))
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d002      	beq.n	800b85c <DCMI_GetITStatus+0x28>
  {
    bitstatus = SET;
 800b856:	2301      	movs	r3, #1
 800b858:	73fb      	strb	r3, [r7, #15]
 800b85a:	e001      	b.n	800b860 <DCMI_GetITStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 800b85c:	2300      	movs	r3, #0
 800b85e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b860:	7bfb      	ldrb	r3, [r7, #15]
}
 800b862:	4618      	mov	r0, r3
 800b864:	3714      	adds	r7, #20
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	50050000 	.word	0x50050000

0800b874 <DCMI_ClearITPendingBit>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval None
  */
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 800b87a:	4603      	mov	r3, r0
 800b87c:	80fb      	strh	r3, [r7, #6]
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 800b87e:	4a04      	ldr	r2, [pc, #16]	; (800b890 <DCMI_ClearITPendingBit+0x1c>)
 800b880:	88fb      	ldrh	r3, [r7, #6]
 800b882:	6153      	str	r3, [r2, #20]
}
 800b884:	bf00      	nop
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr
 800b890:	50050000 	.word	0x50050000

0800b894 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800b894:	b480      	push	{r7}
 800b896:	b083      	sub	sp, #12
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f023 0201 	bic.w	r2, r3, #1
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2221      	movs	r2, #33	; 0x21
 800b8ca:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a46      	ldr	r2, [pc, #280]	; (800b9e8 <DMA_DeInit+0x154>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d103      	bne.n	800b8dc <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800b8d4:	4b45      	ldr	r3, [pc, #276]	; (800b9ec <DMA_DeInit+0x158>)
 800b8d6:	223d      	movs	r2, #61	; 0x3d
 800b8d8:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800b8da:	e07e      	b.n	800b9da <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a44      	ldr	r2, [pc, #272]	; (800b9f0 <DMA_DeInit+0x15c>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d104      	bne.n	800b8ee <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 800b8e4:	4b41      	ldr	r3, [pc, #260]	; (800b9ec <DMA_DeInit+0x158>)
 800b8e6:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800b8ea:	609a      	str	r2, [r3, #8]
}
 800b8ec:	e075      	b.n	800b9da <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4a40      	ldr	r2, [pc, #256]	; (800b9f4 <DMA_DeInit+0x160>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d104      	bne.n	800b900 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800b8f6:	4b3d      	ldr	r3, [pc, #244]	; (800b9ec <DMA_DeInit+0x158>)
 800b8f8:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800b8fc:	609a      	str	r2, [r3, #8]
}
 800b8fe:	e06c      	b.n	800b9da <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a3d      	ldr	r2, [pc, #244]	; (800b9f8 <DMA_DeInit+0x164>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d104      	bne.n	800b912 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 800b908:	4b38      	ldr	r3, [pc, #224]	; (800b9ec <DMA_DeInit+0x158>)
 800b90a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800b90e:	609a      	str	r2, [r3, #8]
}
 800b910:	e063      	b.n	800b9da <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	4a39      	ldr	r2, [pc, #228]	; (800b9fc <DMA_DeInit+0x168>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d103      	bne.n	800b922 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800b91a:	4b34      	ldr	r3, [pc, #208]	; (800b9ec <DMA_DeInit+0x158>)
 800b91c:	4a38      	ldr	r2, [pc, #224]	; (800ba00 <DMA_DeInit+0x16c>)
 800b91e:	60da      	str	r2, [r3, #12]
}
 800b920:	e05b      	b.n	800b9da <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	4a37      	ldr	r2, [pc, #220]	; (800ba04 <DMA_DeInit+0x170>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d103      	bne.n	800b932 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800b92a:	4b30      	ldr	r3, [pc, #192]	; (800b9ec <DMA_DeInit+0x158>)
 800b92c:	4a36      	ldr	r2, [pc, #216]	; (800ba08 <DMA_DeInit+0x174>)
 800b92e:	60da      	str	r2, [r3, #12]
}
 800b930:	e053      	b.n	800b9da <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a35      	ldr	r2, [pc, #212]	; (800ba0c <DMA_DeInit+0x178>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d103      	bne.n	800b942 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800b93a:	4b2c      	ldr	r3, [pc, #176]	; (800b9ec <DMA_DeInit+0x158>)
 800b93c:	4a34      	ldr	r2, [pc, #208]	; (800ba10 <DMA_DeInit+0x17c>)
 800b93e:	60da      	str	r2, [r3, #12]
}
 800b940:	e04b      	b.n	800b9da <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a33      	ldr	r2, [pc, #204]	; (800ba14 <DMA_DeInit+0x180>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d104      	bne.n	800b954 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800b94a:	4b28      	ldr	r3, [pc, #160]	; (800b9ec <DMA_DeInit+0x158>)
 800b94c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800b950:	60da      	str	r2, [r3, #12]
}
 800b952:	e042      	b.n	800b9da <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a30      	ldr	r2, [pc, #192]	; (800ba18 <DMA_DeInit+0x184>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d103      	bne.n	800b964 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 800b95c:	4b2f      	ldr	r3, [pc, #188]	; (800ba1c <DMA_DeInit+0x188>)
 800b95e:	223d      	movs	r2, #61	; 0x3d
 800b960:	609a      	str	r2, [r3, #8]
}
 800b962:	e03a      	b.n	800b9da <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4a2e      	ldr	r2, [pc, #184]	; (800ba20 <DMA_DeInit+0x18c>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d104      	bne.n	800b976 <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 800b96c:	4b2b      	ldr	r3, [pc, #172]	; (800ba1c <DMA_DeInit+0x188>)
 800b96e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800b972:	609a      	str	r2, [r3, #8]
}
 800b974:	e031      	b.n	800b9da <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	4a2a      	ldr	r2, [pc, #168]	; (800ba24 <DMA_DeInit+0x190>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d104      	bne.n	800b988 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800b97e:	4b27      	ldr	r3, [pc, #156]	; (800ba1c <DMA_DeInit+0x188>)
 800b980:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800b984:	609a      	str	r2, [r3, #8]
}
 800b986:	e028      	b.n	800b9da <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4a27      	ldr	r2, [pc, #156]	; (800ba28 <DMA_DeInit+0x194>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d104      	bne.n	800b99a <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 800b990:	4b22      	ldr	r3, [pc, #136]	; (800ba1c <DMA_DeInit+0x188>)
 800b992:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800b996:	609a      	str	r2, [r3, #8]
}
 800b998:	e01f      	b.n	800b9da <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a23      	ldr	r2, [pc, #140]	; (800ba2c <DMA_DeInit+0x198>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d103      	bne.n	800b9aa <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800b9a2:	4b1e      	ldr	r3, [pc, #120]	; (800ba1c <DMA_DeInit+0x188>)
 800b9a4:	4a16      	ldr	r2, [pc, #88]	; (800ba00 <DMA_DeInit+0x16c>)
 800b9a6:	60da      	str	r2, [r3, #12]
}
 800b9a8:	e017      	b.n	800b9da <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4a20      	ldr	r2, [pc, #128]	; (800ba30 <DMA_DeInit+0x19c>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d103      	bne.n	800b9ba <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 800b9b2:	4b1a      	ldr	r3, [pc, #104]	; (800ba1c <DMA_DeInit+0x188>)
 800b9b4:	4a14      	ldr	r2, [pc, #80]	; (800ba08 <DMA_DeInit+0x174>)
 800b9b6:	60da      	str	r2, [r3, #12]
}
 800b9b8:	e00f      	b.n	800b9da <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a1d      	ldr	r2, [pc, #116]	; (800ba34 <DMA_DeInit+0x1a0>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d103      	bne.n	800b9ca <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 800b9c2:	4b16      	ldr	r3, [pc, #88]	; (800ba1c <DMA_DeInit+0x188>)
 800b9c4:	4a12      	ldr	r2, [pc, #72]	; (800ba10 <DMA_DeInit+0x17c>)
 800b9c6:	60da      	str	r2, [r3, #12]
}
 800b9c8:	e007      	b.n	800b9da <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a1a      	ldr	r2, [pc, #104]	; (800ba38 <DMA_DeInit+0x1a4>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d103      	bne.n	800b9da <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800b9d2:	4b12      	ldr	r3, [pc, #72]	; (800ba1c <DMA_DeInit+0x188>)
 800b9d4:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800b9d8:	60da      	str	r2, [r3, #12]
}
 800b9da:	bf00      	nop
 800b9dc:	370c      	adds	r7, #12
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	40026010 	.word	0x40026010
 800b9ec:	40026000 	.word	0x40026000
 800b9f0:	40026028 	.word	0x40026028
 800b9f4:	40026040 	.word	0x40026040
 800b9f8:	40026058 	.word	0x40026058
 800b9fc:	40026070 	.word	0x40026070
 800ba00:	2000003d 	.word	0x2000003d
 800ba04:	40026088 	.word	0x40026088
 800ba08:	20000f40 	.word	0x20000f40
 800ba0c:	400260a0 	.word	0x400260a0
 800ba10:	203d0000 	.word	0x203d0000
 800ba14:	400260b8 	.word	0x400260b8
 800ba18:	40026410 	.word	0x40026410
 800ba1c:	40026400 	.word	0x40026400
 800ba20:	40026428 	.word	0x40026428
 800ba24:	40026440 	.word	0x40026440
 800ba28:	40026458 	.word	0x40026458
 800ba2c:	40026470 	.word	0x40026470
 800ba30:	40026488 	.word	0x40026488
 800ba34:	400264a0 	.word	0x400264a0
 800ba38:	400264b8 	.word	0x400264b8

0800ba3c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b085      	sub	sp, #20
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ba46:	2300      	movs	r3, #0
 800ba48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	4b25      	ldr	r3, [pc, #148]	; (800bae8 <DMA_Init+0xac>)
 800ba54:	4013      	ands	r3, r2
 800ba56:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800ba66:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	699b      	ldr	r3, [r3, #24]
 800ba6c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800ba72:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	6a1b      	ldr	r3, [r3, #32]
 800ba78:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800ba7e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba84:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800ba8a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba90:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	695b      	ldr	r3, [r3, #20]
 800baa2:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f023 0307 	bic.w	r3, r3, #7
 800baaa:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab4:	4313      	orrs	r3, r2
 800bab6:	68fa      	ldr	r2, [r7, #12]
 800bab8:	4313      	orrs	r3, r2
 800baba:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	691a      	ldr	r2, [r3, #16]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	685a      	ldr	r2, [r3, #4]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	689a      	ldr	r2, [r3, #8]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	60da      	str	r2, [r3, #12]
}
 800bada:	bf00      	nop
 800badc:	3714      	adds	r7, #20
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	f01c803f 	.word	0xf01c803f

0800baec <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2200      	movs	r2, #0
 800bb04:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800bb4e:	bf00      	nop
 800bb50:	370c      	adds	r7, #12
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	b083      	sub	sp, #12
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	460b      	mov	r3, r1
 800bb64:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800bb66:	78fb      	ldrb	r3, [r7, #3]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d006      	beq.n	800bb7a <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f043 0201 	orr.w	r2, r3, #1
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800bb78:	e005      	b.n	800bb86 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f023 0201 	bic.w	r2, r3, #1
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	601a      	str	r2, [r3, #0]
}
 800bb86:	bf00      	nop
 800bb88:	370c      	adds	r7, #12
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr

0800bb92 <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 800bb92:	b480      	push	{r7}
 800bb94:	b083      	sub	sp, #12
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d006      	beq.n	800bbb0 <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
  }
}
 800bbae:	e005      	b.n	800bbbc <DMA_PeriphIncOffsetSizeConfig+0x2a>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	601a      	str	r2, [r3, #0]
}
 800bbbc:	bf00      	nop
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d006      	beq.n	800bbe6 <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f043 0220 	orr.w	r2, r3, #32
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
  }
}
 800bbe4:	e005      	b.n	800bbf2 <DMA_FlowControllerConfig+0x2a>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f023 0220 	bic.w	r2, r3, #32
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	601a      	str	r2, [r3, #0]
}
 800bbf2:	bf00      	nop
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 800bbfe:	b480      	push	{r7}
 800bc00:	b083      	sub	sp, #12
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	460b      	mov	r3, r1
 800bc08:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 800bc0a:	887a      	ldrh	r2, [r7, #2]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	605a      	str	r2, [r3, #4]
}
 800bc10:	bf00      	nop
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	b29b      	uxth	r3, r3
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	370c      	adds	r7, #12
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr

0800bc36 <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 800bc36:	b480      	push	{r7}
 800bc38:	b085      	sub	sp, #20
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	60f8      	str	r0, [r7, #12]
 800bc3e:	60b9      	str	r1, [r7, #8]
 800bc40:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d006      	beq.n	800bc56 <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	601a      	str	r2, [r3, #0]
 800bc54:	e005      	b.n	800bc62 <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	68ba      	ldr	r2, [r7, #8]
 800bc66:	611a      	str	r2, [r3, #16]
}
 800bc68:	bf00      	nop
 800bc6a:	3714      	adds	r7, #20
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 800bc80:	78fb      	ldrb	r3, [r7, #3]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d006      	beq.n	800bc94 <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
  }
}
 800bc92:	e005      	b.n	800bca0 <DMA_DoubleBufferModeCmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	601a      	str	r2, [r3, #0]
}
 800bca0:	bf00      	nop
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d003      	beq.n	800bcc6 <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	68ba      	ldr	r2, [r7, #8]
 800bcc2:	611a      	str	r2, [r3, #16]
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
  }
}
 800bcc4:	e002      	b.n	800bccc <DMA_MemoryTargetConfig+0x20>
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	68ba      	ldr	r2, [r7, #8]
 800bcca:	60da      	str	r2, [r3, #12]
}
 800bccc:	bf00      	nop
 800bcce:	3714      	adds	r7, #20
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b085      	sub	sp, #20
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800bce0:	2300      	movs	r3, #0
 800bce2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d002      	beq.n	800bcf6 <DMA_GetCurrentMemoryTarget+0x1e>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	60fb      	str	r3, [r7, #12]
 800bcf4:	e001      	b.n	800bcfa <DMA_GetCurrentMemoryTarget+0x22>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3714      	adds	r7, #20
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800bd10:	2300      	movs	r3, #0
 800bd12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f003 0301 	and.w	r3, r3, #1
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d002      	beq.n	800bd26 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800bd20:	2301      	movs	r3, #1
 800bd22:	73fb      	strb	r3, [r7, #15]
 800bd24:	e001      	b.n	800bd2a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800bd26:	2300      	movs	r3, #0
 800bd28:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800bd2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3714      	adds	r7, #20
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bd40:	2300      	movs	r3, #0
 800bd42:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	695b      	ldr	r3, [r3, #20]
 800bd48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd4c:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3714      	adds	r7, #20
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr

0800bd5c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b087      	sub	sp, #28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800bd66:	2300      	movs	r3, #0
 800bd68:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4a15      	ldr	r2, [pc, #84]	; (800bdc8 <DMA_GetFlagStatus+0x6c>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d802      	bhi.n	800bd7c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800bd76:	4b15      	ldr	r3, [pc, #84]	; (800bdcc <DMA_GetFlagStatus+0x70>)
 800bd78:	613b      	str	r3, [r7, #16]
 800bd7a:	e001      	b.n	800bd80 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800bd7c:	4b14      	ldr	r3, [pc, #80]	; (800bdd0 <DMA_GetFlagStatus+0x74>)
 800bd7e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d003      	beq.n	800bd92 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	60fb      	str	r3, [r7, #12]
 800bd90:	e002      	b.n	800bd98 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800bd9e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800bda2:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800bda4:	68fa      	ldr	r2, [r7, #12]
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	4013      	ands	r3, r2
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d002      	beq.n	800bdb4 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	75fb      	strb	r3, [r7, #23]
 800bdb2:	e001      	b.n	800bdb8 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800bdb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	371c      	adds	r7, #28
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop
 800bdc8:	4002640f 	.word	0x4002640f
 800bdcc:	40026000 	.word	0x40026000
 800bdd0:	40026400 	.word	0x40026400

0800bdd4 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4a10      	ldr	r2, [pc, #64]	; (800be24 <DMA_ClearFlag+0x50>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d802      	bhi.n	800bdec <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800bde6:	4b10      	ldr	r3, [pc, #64]	; (800be28 <DMA_ClearFlag+0x54>)
 800bde8:	60fb      	str	r3, [r7, #12]
 800bdea:	e001      	b.n	800bdf0 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800bdec:	4b0f      	ldr	r3, [pc, #60]	; (800be2c <DMA_ClearFlag+0x58>)
 800bdee:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d007      	beq.n	800be0a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800be00:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 800be08:	e006      	b.n	800be18 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800be10:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	6093      	str	r3, [r2, #8]
}
 800be18:	bf00      	nop
 800be1a:	3714      	adds	r7, #20
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr
 800be24:	4002640f 	.word	0x4002640f
 800be28:	40026000 	.word	0x40026000
 800be2c:	40026400 	.word	0x40026400

0800be30 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	4613      	mov	r3, r2
 800be3c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00f      	beq.n	800be68 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 800be48:	79fb      	ldrb	r3, [r7, #7]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d006      	beq.n	800be5c <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	695b      	ldr	r3, [r3, #20]
 800be52:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	615a      	str	r2, [r3, #20]
 800be5a:	e005      	b.n	800be68 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	695b      	ldr	r3, [r3, #20]
 800be60:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	2b80      	cmp	r3, #128	; 0x80
 800be6c:	d014      	beq.n	800be98 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 800be6e:	79fb      	ldrb	r3, [r7, #7]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d008      	beq.n	800be86 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	f003 031e 	and.w	r3, r3, #30
 800be7e:	431a      	orrs	r2, r3
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 800be84:	e008      	b.n	800be98 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	f003 031e 	and.w	r3, r3, #30
 800be90:	43db      	mvns	r3, r3
 800be92:	401a      	ands	r2, r3
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	601a      	str	r2, [r3, #0]
}
 800be98:	bf00      	nop
 800be9a:	3714      	adds	r7, #20
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b087      	sub	sp, #28
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800beae:	2300      	movs	r3, #0
 800beb0:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 800beb2:	2300      	movs	r3, #0
 800beb4:	60fb      	str	r3, [r7, #12]
 800beb6:	2300      	movs	r3, #0
 800beb8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	4a22      	ldr	r2, [pc, #136]	; (800bf48 <DMA_GetITStatus+0xa4>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d802      	bhi.n	800bec8 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800bec2:	4b22      	ldr	r3, [pc, #136]	; (800bf4c <DMA_GetITStatus+0xa8>)
 800bec4:	613b      	str	r3, [r7, #16]
 800bec6:	e001      	b.n	800becc <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800bec8:	4b21      	ldr	r3, [pc, #132]	; (800bf50 <DMA_GetITStatus+0xac>)
 800beca:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800bed2:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00a      	beq.n	800bef0 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	0adb      	lsrs	r3, r3, #11
 800bede:	f003 031e 	and.w	r3, r3, #30
 800bee2:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	4013      	ands	r3, r2
 800beec:	60bb      	str	r3, [r7, #8]
 800beee:	e004      	b.n	800befa <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	695b      	ldr	r3, [r3, #20]
 800bef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bef8:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d003      	beq.n	800bf0c <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	60fb      	str	r3, [r7, #12]
 800bf0a:	e002      	b.n	800bf12 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800bf18:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800bf1c:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	4013      	ands	r3, r2
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d005      	beq.n	800bf34 <DMA_GetITStatus+0x90>
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d002      	beq.n	800bf34 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	75fb      	strb	r3, [r7, #23]
 800bf32:	e001      	b.n	800bf38 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 800bf34:	2300      	movs	r3, #0
 800bf36:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 800bf38:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	371c      	adds	r7, #28
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
 800bf46:	bf00      	nop
 800bf48:	4002640f 	.word	0x4002640f
 800bf4c:	40026000 	.word	0x40026000
 800bf50:	40026400 	.word	0x40026400

0800bf54 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b085      	sub	sp, #20
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4a10      	ldr	r2, [pc, #64]	; (800bfa4 <DMA_ClearITPendingBit+0x50>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d802      	bhi.n	800bf6c <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800bf66:	4b10      	ldr	r3, [pc, #64]	; (800bfa8 <DMA_ClearITPendingBit+0x54>)
 800bf68:	60fb      	str	r3, [r7, #12]
 800bf6a:	e001      	b.n	800bf70 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800bf6c:	4b0f      	ldr	r3, [pc, #60]	; (800bfac <DMA_ClearITPendingBit+0x58>)
 800bf6e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d007      	beq.n	800bf8a <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800bf80:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 800bf88:	e006      	b.n	800bf98 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800bf90:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	6093      	str	r3, [r2, #8]
}
 800bf98:	bf00      	nop
 800bf9a:	3714      	adds	r7, #20
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr
 800bfa4:	4002640f 	.word	0x4002640f
 800bfa8:	40026000 	.word	0x40026000
 800bfac:	40026400 	.word	0x40026400

0800bfb0 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 800bfb4:	4b09      	ldr	r3, [pc, #36]	; (800bfdc <EXTI_DeInit+0x2c>)
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 800bfba:	4b08      	ldr	r3, [pc, #32]	; (800bfdc <EXTI_DeInit+0x2c>)
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 800bfc0:	4b06      	ldr	r3, [pc, #24]	; (800bfdc <EXTI_DeInit+0x2c>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 800bfc6:	4b05      	ldr	r3, [pc, #20]	; (800bfdc <EXTI_DeInit+0x2c>)
 800bfc8:	2200      	movs	r2, #0
 800bfca:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 800bfcc:	4b03      	ldr	r3, [pc, #12]	; (800bfdc <EXTI_DeInit+0x2c>)
 800bfce:	4a04      	ldr	r2, [pc, #16]	; (800bfe0 <EXTI_DeInit+0x30>)
 800bfd0:	615a      	str	r2, [r3, #20]
}
 800bfd2:	bf00      	nop
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr
 800bfdc:	40013c00 	.word	0x40013c00
 800bfe0:	007fffff 	.word	0x007fffff

0800bfe4 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b085      	sub	sp, #20
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800bfec:	2300      	movs	r3, #0
 800bfee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800bff0:	4b34      	ldr	r3, [pc, #208]	; (800c0c4 <EXTI_Init+0xe0>)
 800bff2:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	799b      	ldrb	r3, [r3, #6]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d04f      	beq.n	800c09c <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800bffc:	4931      	ldr	r1, [pc, #196]	; (800c0c4 <EXTI_Init+0xe0>)
 800bffe:	4b31      	ldr	r3, [pc, #196]	; (800c0c4 <EXTI_Init+0xe0>)
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	43db      	mvns	r3, r3
 800c008:	4013      	ands	r3, r2
 800c00a:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800c00c:	492d      	ldr	r1, [pc, #180]	; (800c0c4 <EXTI_Init+0xe0>)
 800c00e:	4b2d      	ldr	r3, [pc, #180]	; (800c0c4 <EXTI_Init+0xe0>)
 800c010:	685a      	ldr	r2, [r3, #4]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	43db      	mvns	r3, r3
 800c018:	4013      	ands	r3, r2
 800c01a:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	791b      	ldrb	r3, [r3, #4]
 800c020:	461a      	mov	r2, r3
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	4413      	add	r3, r2
 800c026:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	6811      	ldr	r1, [r2, #0]
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	6812      	ldr	r2, [r2, #0]
 800c032:	430a      	orrs	r2, r1
 800c034:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800c036:	4923      	ldr	r1, [pc, #140]	; (800c0c4 <EXTI_Init+0xe0>)
 800c038:	4b22      	ldr	r3, [pc, #136]	; (800c0c4 <EXTI_Init+0xe0>)
 800c03a:	689a      	ldr	r2, [r3, #8]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	43db      	mvns	r3, r3
 800c042:	4013      	ands	r3, r2
 800c044:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800c046:	491f      	ldr	r1, [pc, #124]	; (800c0c4 <EXTI_Init+0xe0>)
 800c048:	4b1e      	ldr	r3, [pc, #120]	; (800c0c4 <EXTI_Init+0xe0>)
 800c04a:	68da      	ldr	r2, [r3, #12]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	43db      	mvns	r3, r3
 800c052:	4013      	ands	r3, r2
 800c054:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	795b      	ldrb	r3, [r3, #5]
 800c05a:	2b10      	cmp	r3, #16
 800c05c:	d10e      	bne.n	800c07c <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800c05e:	4919      	ldr	r1, [pc, #100]	; (800c0c4 <EXTI_Init+0xe0>)
 800c060:	4b18      	ldr	r3, [pc, #96]	; (800c0c4 <EXTI_Init+0xe0>)
 800c062:	689a      	ldr	r2, [r3, #8]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4313      	orrs	r3, r2
 800c06a:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800c06c:	4915      	ldr	r1, [pc, #84]	; (800c0c4 <EXTI_Init+0xe0>)
 800c06e:	4b15      	ldr	r3, [pc, #84]	; (800c0c4 <EXTI_Init+0xe0>)
 800c070:	68da      	ldr	r2, [r3, #12]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4313      	orrs	r3, r2
 800c078:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800c07a:	e01d      	b.n	800c0b8 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 800c07c:	4b11      	ldr	r3, [pc, #68]	; (800c0c4 <EXTI_Init+0xe0>)
 800c07e:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	795b      	ldrb	r3, [r3, #5]
 800c084:	461a      	mov	r2, r3
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	4413      	add	r3, r2
 800c08a:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	6811      	ldr	r1, [r2, #0]
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	6812      	ldr	r2, [r2, #0]
 800c096:	430a      	orrs	r2, r1
 800c098:	601a      	str	r2, [r3, #0]
}
 800c09a:	e00d      	b.n	800c0b8 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	791b      	ldrb	r3, [r3, #4]
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	68fa      	ldr	r2, [r7, #12]
 800c0ac:	6811      	ldr	r1, [r2, #0]
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	6812      	ldr	r2, [r2, #0]
 800c0b2:	43d2      	mvns	r2, r2
 800c0b4:	400a      	ands	r2, r1
 800c0b6:	601a      	str	r2, [r3, #0]
}
 800c0b8:	bf00      	nop
 800c0ba:	3714      	adds	r7, #20
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr
 800c0c4:	40013c00 	.word	0x40013c00

0800c0c8 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	220c      	movs	r2, #12
 800c0e0:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	719a      	strb	r2, [r3, #6]
}
 800c0e8:	bf00      	nop
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 800c0fc:	4905      	ldr	r1, [pc, #20]	; (800c114 <EXTI_GenerateSWInterrupt+0x20>)
 800c0fe:	4b05      	ldr	r3, [pc, #20]	; (800c114 <EXTI_GenerateSWInterrupt+0x20>)
 800c100:	691a      	ldr	r2, [r3, #16]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	4313      	orrs	r3, r2
 800c106:	610b      	str	r3, [r1, #16]
}
 800c108:	bf00      	nop
 800c10a:	370c      	adds	r7, #12
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr
 800c114:	40013c00 	.word	0x40013c00

0800c118 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800c120:	2300      	movs	r3, #0
 800c122:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800c124:	4b08      	ldr	r3, [pc, #32]	; (800c148 <EXTI_GetFlagStatus+0x30>)
 800c126:	695a      	ldr	r2, [r3, #20]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	4013      	ands	r3, r2
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d002      	beq.n	800c136 <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800c130:	2301      	movs	r3, #1
 800c132:	73fb      	strb	r3, [r7, #15]
 800c134:	e001      	b.n	800c13a <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800c136:	2300      	movs	r3, #0
 800c138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c13a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3714      	adds	r7, #20
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr
 800c148:	40013c00 	.word	0x40013c00

0800c14c <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800c154:	4a04      	ldr	r2, [pc, #16]	; (800c168 <EXTI_ClearFlag+0x1c>)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6153      	str	r3, [r2, #20]
}
 800c15a:	bf00      	nop
 800c15c:	370c      	adds	r7, #12
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr
 800c166:	bf00      	nop
 800c168:	40013c00 	.word	0x40013c00

0800c16c <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800c174:	2300      	movs	r3, #0
 800c176:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800c178:	2300      	movs	r3, #0
 800c17a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 800c17c:	4b0c      	ldr	r3, [pc, #48]	; (800c1b0 <EXTI_GetITStatus+0x44>)
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4013      	ands	r3, r2
 800c184:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800c186:	4b0a      	ldr	r3, [pc, #40]	; (800c1b0 <EXTI_GetITStatus+0x44>)
 800c188:	695a      	ldr	r2, [r3, #20]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4013      	ands	r3, r2
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d005      	beq.n	800c19e <EXTI_GetITStatus+0x32>
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d002      	beq.n	800c19e <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 800c198:	2301      	movs	r3, #1
 800c19a:	73fb      	strb	r3, [r7, #15]
 800c19c:	e001      	b.n	800c1a2 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3714      	adds	r7, #20
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr
 800c1b0:	40013c00 	.word	0x40013c00

0800c1b4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800c1bc:	4a04      	ldr	r2, [pc, #16]	; (800c1d0 <EXTI_ClearITPendingBit+0x1c>)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6153      	str	r3, [r2, #20]
}
 800c1c2:	bf00      	nop
 800c1c4:	370c      	adds	r7, #12
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	40013c00 	.word	0x40013c00

0800c1d4 <FLASH_SetLatency>:
  *          For STM32F40xx/41xx and STM32F427x/437x devices this parameter can be   
  *          a value between FLASH_Latency_0 and FLASH_Latency_7.   
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 800c1dc:	4b04      	ldr	r3, [pc, #16]	; (800c1f0 <FLASH_SetLatency+0x1c>)
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	b2d2      	uxtb	r2, r2
 800c1e2:	701a      	strb	r2, [r3, #0]
}
 800c1e4:	bf00      	nop
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr
 800c1f0:	40023c00 	.word	0x40023c00

0800c1f4 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 800c1fe:	79fb      	ldrb	r3, [r7, #7]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d006      	beq.n	800c212 <FLASH_PrefetchBufferCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 800c204:	4a09      	ldr	r2, [pc, #36]	; (800c22c <FLASH_PrefetchBufferCmd+0x38>)
 800c206:	4b09      	ldr	r3, [pc, #36]	; (800c22c <FLASH_PrefetchBufferCmd+0x38>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c20e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
  }
}
 800c210:	e005      	b.n	800c21e <FLASH_PrefetchBufferCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 800c212:	4a06      	ldr	r2, [pc, #24]	; (800c22c <FLASH_PrefetchBufferCmd+0x38>)
 800c214:	4b05      	ldr	r3, [pc, #20]	; (800c22c <FLASH_PrefetchBufferCmd+0x38>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c21c:	6013      	str	r3, [r2, #0]
}
 800c21e:	bf00      	nop
 800c220:	370c      	adds	r7, #12
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr
 800c22a:	bf00      	nop
 800c22c:	40023c00 	.word	0x40023c00

0800c230 <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	4603      	mov	r3, r0
 800c238:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800c23a:	79fb      	ldrb	r3, [r7, #7]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d006      	beq.n	800c24e <FLASH_InstructionCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 800c240:	4a09      	ldr	r2, [pc, #36]	; (800c268 <FLASH_InstructionCacheCmd+0x38>)
 800c242:	4b09      	ldr	r3, [pc, #36]	; (800c268 <FLASH_InstructionCacheCmd+0x38>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c24a:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
  }
}
 800c24c:	e005      	b.n	800c25a <FLASH_InstructionCacheCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 800c24e:	4a06      	ldr	r2, [pc, #24]	; (800c268 <FLASH_InstructionCacheCmd+0x38>)
 800c250:	4b05      	ldr	r3, [pc, #20]	; (800c268 <FLASH_InstructionCacheCmd+0x38>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c258:	6013      	str	r3, [r2, #0]
}
 800c25a:	bf00      	nop
 800c25c:	370c      	adds	r7, #12
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	40023c00 	.word	0x40023c00

0800c26c <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b083      	sub	sp, #12
 800c270:	af00      	add	r7, sp, #0
 800c272:	4603      	mov	r3, r0
 800c274:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800c276:	79fb      	ldrb	r3, [r7, #7]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d006      	beq.n	800c28a <FLASH_DataCacheCmd+0x1e>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 800c27c:	4a09      	ldr	r2, [pc, #36]	; (800c2a4 <FLASH_DataCacheCmd+0x38>)
 800c27e:	4b09      	ldr	r3, [pc, #36]	; (800c2a4 <FLASH_DataCacheCmd+0x38>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c286:	6013      	str	r3, [r2, #0]
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
  }
}
 800c288:	e005      	b.n	800c296 <FLASH_DataCacheCmd+0x2a>
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 800c28a:	4a06      	ldr	r2, [pc, #24]	; (800c2a4 <FLASH_DataCacheCmd+0x38>)
 800c28c:	4b05      	ldr	r3, [pc, #20]	; (800c2a4 <FLASH_DataCacheCmd+0x38>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c294:	6013      	str	r3, [r2, #0]
}
 800c296:	bf00      	nop
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	40023c00 	.word	0x40023c00

0800c2a8 <FLASH_InstructionCacheReset>:
  * @note   This function must be used only when the Instruction Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_ICRST;
 800c2ac:	4a05      	ldr	r2, [pc, #20]	; (800c2c4 <FLASH_InstructionCacheReset+0x1c>)
 800c2ae:	4b05      	ldr	r3, [pc, #20]	; (800c2c4 <FLASH_InstructionCacheReset+0x1c>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c2b6:	6013      	str	r3, [r2, #0]
}
 800c2b8:	bf00      	nop
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c0:	4770      	bx	lr
 800c2c2:	bf00      	nop
 800c2c4:	40023c00 	.word	0x40023c00

0800c2c8 <FLASH_DataCacheReset>:
  * @note   This function must be used only when the Data Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_DCRST;
 800c2cc:	4a05      	ldr	r2, [pc, #20]	; (800c2e4 <FLASH_DataCacheReset+0x1c>)
 800c2ce:	4b05      	ldr	r3, [pc, #20]	; (800c2e4 <FLASH_DataCacheReset+0x1c>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c2d6:	6013      	str	r3, [r2, #0]
}
 800c2d8:	bf00      	nop
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	40023c00 	.word	0x40023c00

0800c2e8 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 800c2ec:	4b07      	ldr	r3, [pc, #28]	; (800c30c <FLASH_Unlock+0x24>)
 800c2ee:	691b      	ldr	r3, [r3, #16]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	da05      	bge.n	800c300 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 800c2f4:	4b05      	ldr	r3, [pc, #20]	; (800c30c <FLASH_Unlock+0x24>)
 800c2f6:	4a06      	ldr	r2, [pc, #24]	; (800c310 <FLASH_Unlock+0x28>)
 800c2f8:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 800c2fa:	4b04      	ldr	r3, [pc, #16]	; (800c30c <FLASH_Unlock+0x24>)
 800c2fc:	4a05      	ldr	r2, [pc, #20]	; (800c314 <FLASH_Unlock+0x2c>)
 800c2fe:	605a      	str	r2, [r3, #4]
  }  
}
 800c300:	bf00      	nop
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	40023c00 	.word	0x40023c00
 800c310:	45670123 	.word	0x45670123
 800c314:	cdef89ab 	.word	0xcdef89ab

0800c318 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 800c318:	b480      	push	{r7}
 800c31a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800c31c:	4a05      	ldr	r2, [pc, #20]	; (800c334 <FLASH_Lock+0x1c>)
 800c31e:	4b05      	ldr	r3, [pc, #20]	; (800c334 <FLASH_Lock+0x1c>)
 800c320:	691b      	ldr	r3, [r3, #16]
 800c322:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c326:	6113      	str	r3, [r2, #16]
}
 800c328:	bf00      	nop
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr
 800c332:	bf00      	nop
 800c334:	40023c00 	.word	0x40023c00

0800c338 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	460b      	mov	r3, r1
 800c342:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 800c344:	2300      	movs	r3, #0
 800c346:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800c348:	2308      	movs	r3, #8
 800c34a:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800c34c:	78fb      	ldrb	r3, [r7, #3]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d102      	bne.n	800c358 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800c352:	2300      	movs	r3, #0
 800c354:	60fb      	str	r3, [r7, #12]
 800c356:	e010      	b.n	800c37a <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 800c358:	78fb      	ldrb	r3, [r7, #3]
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d103      	bne.n	800c366 <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800c35e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c362:	60fb      	str	r3, [r7, #12]
 800c364:	e009      	b.n	800c37a <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 800c366:	78fb      	ldrb	r3, [r7, #3]
 800c368:	2b02      	cmp	r3, #2
 800c36a:	d103      	bne.n	800c374 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800c36c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c370:	60fb      	str	r3, [r7, #12]
 800c372:	e002      	b.n	800c37a <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800c374:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c378:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800c37a:	f000 fb31 	bl	800c9e0 <FLASH_WaitForLastOperation>
 800c37e:	4603      	mov	r3, r0
 800c380:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 800c382:	7afb      	ldrb	r3, [r7, #11]
 800c384:	2b08      	cmp	r3, #8
 800c386:	d12f      	bne.n	800c3e8 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 800c388:	4a1a      	ldr	r2, [pc, #104]	; (800c3f4 <FLASH_EraseSector+0xbc>)
 800c38a:	4b1a      	ldr	r3, [pc, #104]	; (800c3f4 <FLASH_EraseSector+0xbc>)
 800c38c:	691b      	ldr	r3, [r3, #16]
 800c38e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c392:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 800c394:	4917      	ldr	r1, [pc, #92]	; (800c3f4 <FLASH_EraseSector+0xbc>)
 800c396:	4b17      	ldr	r3, [pc, #92]	; (800c3f4 <FLASH_EraseSector+0xbc>)
 800c398:	691a      	ldr	r2, [r3, #16]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	4313      	orrs	r3, r2
 800c39e:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 800c3a0:	4a14      	ldr	r2, [pc, #80]	; (800c3f4 <FLASH_EraseSector+0xbc>)
 800c3a2:	4b14      	ldr	r3, [pc, #80]	; (800c3f4 <FLASH_EraseSector+0xbc>)
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c3aa:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 800c3ac:	4911      	ldr	r1, [pc, #68]	; (800c3f4 <FLASH_EraseSector+0xbc>)
 800c3ae:	4b11      	ldr	r3, [pc, #68]	; (800c3f4 <FLASH_EraseSector+0xbc>)
 800c3b0:	691a      	ldr	r2, [r3, #16]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	f043 0302 	orr.w	r3, r3, #2
 800c3ba:	610b      	str	r3, [r1, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800c3bc:	4a0d      	ldr	r2, [pc, #52]	; (800c3f4 <FLASH_EraseSector+0xbc>)
 800c3be:	4b0d      	ldr	r3, [pc, #52]	; (800c3f4 <FLASH_EraseSector+0xbc>)
 800c3c0:	691b      	ldr	r3, [r3, #16]
 800c3c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3c6:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800c3c8:	f000 fb0a 	bl	800c9e0 <FLASH_WaitForLastOperation>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 800c3d0:	4a08      	ldr	r2, [pc, #32]	; (800c3f4 <FLASH_EraseSector+0xbc>)
 800c3d2:	4b08      	ldr	r3, [pc, #32]	; (800c3f4 <FLASH_EraseSector+0xbc>)
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	f023 0302 	bic.w	r3, r3, #2
 800c3da:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 800c3dc:	4a05      	ldr	r2, [pc, #20]	; (800c3f4 <FLASH_EraseSector+0xbc>)
 800c3de:	4b05      	ldr	r3, [pc, #20]	; (800c3f4 <FLASH_EraseSector+0xbc>)
 800c3e0:	691b      	ldr	r3, [r3, #16]
 800c3e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c3e6:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 800c3e8:	7afb      	ldrb	r3, [r7, #11]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	40023c00 	.word	0x40023c00

0800c3f8 <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	4603      	mov	r3, r0
 800c400:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 800c402:	2300      	movs	r3, #0
 800c404:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800c406:	2308      	movs	r3, #8
 800c408:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800c40a:	f000 fae9 	bl	800c9e0 <FLASH_WaitForLastOperation>
 800c40e:	4603      	mov	r3, r0
 800c410:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800c412:	79fb      	ldrb	r3, [r7, #7]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d102      	bne.n	800c41e <FLASH_EraseAllSectors+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800c418:	2300      	movs	r3, #0
 800c41a:	60fb      	str	r3, [r7, #12]
 800c41c:	e010      	b.n	800c440 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 800c41e:	79fb      	ldrb	r3, [r7, #7]
 800c420:	2b01      	cmp	r3, #1
 800c422:	d103      	bne.n	800c42c <FLASH_EraseAllSectors+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800c424:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c428:	60fb      	str	r3, [r7, #12]
 800c42a:	e009      	b.n	800c440 <FLASH_EraseAllSectors+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 800c42c:	79fb      	ldrb	r3, [r7, #7]
 800c42e:	2b02      	cmp	r3, #2
 800c430:	d103      	bne.n	800c43a <FLASH_EraseAllSectors+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800c432:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c436:	60fb      	str	r3, [r7, #12]
 800c438:	e002      	b.n	800c440 <FLASH_EraseAllSectors+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800c43a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c43e:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 800c440:	7afb      	ldrb	r3, [r7, #11]
 800c442:	2b08      	cmp	r3, #8
 800c444:	d121      	bne.n	800c48a <FLASH_EraseAllSectors+0x92>
    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
#endif /* STM32F427X */

#ifdef STM32F40XX
    FLASH->CR &= CR_PSIZE_MASK;
 800c446:	4a13      	ldr	r2, [pc, #76]	; (800c494 <FLASH_EraseAllSectors+0x9c>)
 800c448:	4b12      	ldr	r3, [pc, #72]	; (800c494 <FLASH_EraseAllSectors+0x9c>)
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c450:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 800c452:	4910      	ldr	r1, [pc, #64]	; (800c494 <FLASH_EraseAllSectors+0x9c>)
 800c454:	4b0f      	ldr	r3, [pc, #60]	; (800c494 <FLASH_EraseAllSectors+0x9c>)
 800c456:	691a      	ldr	r2, [r3, #16]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	4313      	orrs	r3, r2
 800c45c:	610b      	str	r3, [r1, #16]
    FLASH->CR |= FLASH_CR_MER;
 800c45e:	4a0d      	ldr	r2, [pc, #52]	; (800c494 <FLASH_EraseAllSectors+0x9c>)
 800c460:	4b0c      	ldr	r3, [pc, #48]	; (800c494 <FLASH_EraseAllSectors+0x9c>)
 800c462:	691b      	ldr	r3, [r3, #16]
 800c464:	f043 0304 	orr.w	r3, r3, #4
 800c468:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800c46a:	4a0a      	ldr	r2, [pc, #40]	; (800c494 <FLASH_EraseAllSectors+0x9c>)
 800c46c:	4b09      	ldr	r3, [pc, #36]	; (800c494 <FLASH_EraseAllSectors+0x9c>)
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c474:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800c476:	f000 fab3 	bl	800c9e0 <FLASH_WaitForLastOperation>
 800c47a:	4603      	mov	r3, r0
 800c47c:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER);
 800c47e:	4a05      	ldr	r2, [pc, #20]	; (800c494 <FLASH_EraseAllSectors+0x9c>)
 800c480:	4b04      	ldr	r3, [pc, #16]	; (800c494 <FLASH_EraseAllSectors+0x9c>)
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	f023 0304 	bic.w	r3, r3, #4
 800c488:	6113      	str	r3, [r2, #16]
#endif /* STM32F40XX */

  }   
  /* Return the Erase Status */
  return status;
 800c48a:	7afb      	ldrb	r3, [r7, #11]
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3710      	adds	r7, #16
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	40023c00 	.word	0x40023c00

0800c498 <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 800c498:	b590      	push	{r4, r7, lr}
 800c49a:	b087      	sub	sp, #28
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	e9c7 2300 	strd	r2, r3, [r7]
  FLASH_Status status = FLASH_COMPLETE;
 800c4a4:	2308      	movs	r3, #8
 800c4a6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800c4a8:	f000 fa9a 	bl	800c9e0 <FLASH_WaitForLastOperation>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	75fb      	strb	r3, [r7, #23]
  
  if(status == FLASH_COMPLETE)
 800c4b0:	7dfb      	ldrb	r3, [r7, #23]
 800c4b2:	2b08      	cmp	r3, #8
 800c4b4:	d120      	bne.n	800c4f8 <FLASH_ProgramDoubleWord+0x60>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800c4b6:	4a13      	ldr	r2, [pc, #76]	; (800c504 <FLASH_ProgramDoubleWord+0x6c>)
 800c4b8:	4b12      	ldr	r3, [pc, #72]	; (800c504 <FLASH_ProgramDoubleWord+0x6c>)
 800c4ba:	691b      	ldr	r3, [r3, #16]
 800c4bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4c0:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800c4c2:	4a10      	ldr	r2, [pc, #64]	; (800c504 <FLASH_ProgramDoubleWord+0x6c>)
 800c4c4:	4b0f      	ldr	r3, [pc, #60]	; (800c504 <FLASH_ProgramDoubleWord+0x6c>)
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c4cc:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 800c4ce:	4a0d      	ldr	r2, [pc, #52]	; (800c504 <FLASH_ProgramDoubleWord+0x6c>)
 800c4d0:	4b0c      	ldr	r3, [pc, #48]	; (800c504 <FLASH_ProgramDoubleWord+0x6c>)
 800c4d2:	691b      	ldr	r3, [r3, #16]
 800c4d4:	f043 0301 	orr.w	r3, r3, #1
 800c4d8:	6113      	str	r3, [r2, #16]
  
    *(__IO uint64_t*)Address = Data;
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	e897 0018 	ldmia.w	r7, {r3, r4}
 800c4e0:	e882 0018 	stmia.w	r2, {r3, r4}
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800c4e4:	f000 fa7c 	bl	800c9e0 <FLASH_WaitForLastOperation>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	75fb      	strb	r3, [r7, #23]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800c4ec:	4a05      	ldr	r2, [pc, #20]	; (800c504 <FLASH_ProgramDoubleWord+0x6c>)
 800c4ee:	4b05      	ldr	r3, [pc, #20]	; (800c504 <FLASH_ProgramDoubleWord+0x6c>)
 800c4f0:	691b      	ldr	r3, [r3, #16]
 800c4f2:	f023 0301 	bic.w	r3, r3, #1
 800c4f6:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 800c4f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	371c      	adds	r7, #28
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd90      	pop	{r4, r7, pc}
 800c502:	bf00      	nop
 800c504:	40023c00 	.word	0x40023c00

0800c508 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b084      	sub	sp, #16
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 800c512:	2308      	movs	r3, #8
 800c514:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800c516:	f000 fa63 	bl	800c9e0 <FLASH_WaitForLastOperation>
 800c51a:	4603      	mov	r3, r0
 800c51c:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800c51e:	7bfb      	ldrb	r3, [r7, #15]
 800c520:	2b08      	cmp	r3, #8
 800c522:	d11e      	bne.n	800c562 <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800c524:	4a11      	ldr	r2, [pc, #68]	; (800c56c <FLASH_ProgramWord+0x64>)
 800c526:	4b11      	ldr	r3, [pc, #68]	; (800c56c <FLASH_ProgramWord+0x64>)
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c52e:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 800c530:	4a0e      	ldr	r2, [pc, #56]	; (800c56c <FLASH_ProgramWord+0x64>)
 800c532:	4b0e      	ldr	r3, [pc, #56]	; (800c56c <FLASH_ProgramWord+0x64>)
 800c534:	691b      	ldr	r3, [r3, #16]
 800c536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c53a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 800c53c:	4a0b      	ldr	r2, [pc, #44]	; (800c56c <FLASH_ProgramWord+0x64>)
 800c53e:	4b0b      	ldr	r3, [pc, #44]	; (800c56c <FLASH_ProgramWord+0x64>)
 800c540:	691b      	ldr	r3, [r3, #16]
 800c542:	f043 0301 	orr.w	r3, r3, #1
 800c546:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	683a      	ldr	r2, [r7, #0]
 800c54c:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800c54e:	f000 fa47 	bl	800c9e0 <FLASH_WaitForLastOperation>
 800c552:	4603      	mov	r3, r0
 800c554:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800c556:	4a05      	ldr	r2, [pc, #20]	; (800c56c <FLASH_ProgramWord+0x64>)
 800c558:	4b04      	ldr	r3, [pc, #16]	; (800c56c <FLASH_ProgramWord+0x64>)
 800c55a:	691b      	ldr	r3, [r3, #16]
 800c55c:	f023 0301 	bic.w	r3, r3, #1
 800c560:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 800c562:	7bfb      	ldrb	r3, [r7, #15]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	40023c00 	.word	0x40023c00

0800c570 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	460b      	mov	r3, r1
 800c57a:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 800c57c:	2308      	movs	r3, #8
 800c57e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800c580:	f000 fa2e 	bl	800c9e0 <FLASH_WaitForLastOperation>
 800c584:	4603      	mov	r3, r0
 800c586:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800c588:	7bfb      	ldrb	r3, [r7, #15]
 800c58a:	2b08      	cmp	r3, #8
 800c58c:	d11e      	bne.n	800c5cc <FLASH_ProgramHalfWord+0x5c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800c58e:	4a12      	ldr	r2, [pc, #72]	; (800c5d8 <FLASH_ProgramHalfWord+0x68>)
 800c590:	4b11      	ldr	r3, [pc, #68]	; (800c5d8 <FLASH_ProgramHalfWord+0x68>)
 800c592:	691b      	ldr	r3, [r3, #16]
 800c594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c598:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800c59a:	4a0f      	ldr	r2, [pc, #60]	; (800c5d8 <FLASH_ProgramHalfWord+0x68>)
 800c59c:	4b0e      	ldr	r3, [pc, #56]	; (800c5d8 <FLASH_ProgramHalfWord+0x68>)
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5a4:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 800c5a6:	4a0c      	ldr	r2, [pc, #48]	; (800c5d8 <FLASH_ProgramHalfWord+0x68>)
 800c5a8:	4b0b      	ldr	r3, [pc, #44]	; (800c5d8 <FLASH_ProgramHalfWord+0x68>)
 800c5aa:	691b      	ldr	r3, [r3, #16]
 800c5ac:	f043 0301 	orr.w	r3, r3, #1
 800c5b0:	6113      	str	r3, [r2, #16]
  
    *(__IO uint16_t*)Address = Data;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	887a      	ldrh	r2, [r7, #2]
 800c5b6:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800c5b8:	f000 fa12 	bl	800c9e0 <FLASH_WaitForLastOperation>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800c5c0:	4a05      	ldr	r2, [pc, #20]	; (800c5d8 <FLASH_ProgramHalfWord+0x68>)
 800c5c2:	4b05      	ldr	r3, [pc, #20]	; (800c5d8 <FLASH_ProgramHalfWord+0x68>)
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	f023 0301 	bic.w	r3, r3, #1
 800c5ca:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 800c5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	40023c00 	.word	0x40023c00

0800c5dc <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800c5e8:	2308      	movs	r3, #8
 800c5ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800c5ec:	f000 f9f8 	bl	800c9e0 <FLASH_WaitForLastOperation>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800c5f4:	7bfb      	ldrb	r3, [r7, #15]
 800c5f6:	2b08      	cmp	r3, #8
 800c5f8:	d11c      	bne.n	800c634 <FLASH_ProgramByte+0x58>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800c5fa:	4a11      	ldr	r2, [pc, #68]	; (800c640 <FLASH_ProgramByte+0x64>)
 800c5fc:	4b10      	ldr	r3, [pc, #64]	; (800c640 <FLASH_ProgramByte+0x64>)
 800c5fe:	691b      	ldr	r3, [r3, #16]
 800c600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c604:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 800c606:	4a0e      	ldr	r2, [pc, #56]	; (800c640 <FLASH_ProgramByte+0x64>)
 800c608:	4b0d      	ldr	r3, [pc, #52]	; (800c640 <FLASH_ProgramByte+0x64>)
 800c60a:	691b      	ldr	r3, [r3, #16]
 800c60c:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 800c60e:	4a0c      	ldr	r2, [pc, #48]	; (800c640 <FLASH_ProgramByte+0x64>)
 800c610:	4b0b      	ldr	r3, [pc, #44]	; (800c640 <FLASH_ProgramByte+0x64>)
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	f043 0301 	orr.w	r3, r3, #1
 800c618:	6113      	str	r3, [r2, #16]
  
    *(__IO uint8_t*)Address = Data;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	78fa      	ldrb	r2, [r7, #3]
 800c61e:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800c620:	f000 f9de 	bl	800c9e0 <FLASH_WaitForLastOperation>
 800c624:	4603      	mov	r3, r0
 800c626:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800c628:	4a05      	ldr	r2, [pc, #20]	; (800c640 <FLASH_ProgramByte+0x64>)
 800c62a:	4b05      	ldr	r3, [pc, #20]	; (800c640 <FLASH_ProgramByte+0x64>)
 800c62c:	691b      	ldr	r3, [r3, #16]
 800c62e:	f023 0301 	bic.w	r3, r3, #1
 800c632:	6113      	str	r3, [r2, #16]
  } 

  /* Return the Program Status */
  return status;
 800c634:	7bfb      	ldrb	r3, [r7, #15]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	40023c00 	.word	0x40023c00

0800c644 <FLASH_OB_Unlock>:
  * @brief  Unlocks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 800c644:	b480      	push	{r7}
 800c646:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800c648:	4b08      	ldr	r3, [pc, #32]	; (800c66c <FLASH_OB_Unlock+0x28>)
 800c64a:	695b      	ldr	r3, [r3, #20]
 800c64c:	f003 0301 	and.w	r3, r3, #1
 800c650:	2b00      	cmp	r3, #0
 800c652:	d005      	beq.n	800c660 <FLASH_OB_Unlock+0x1c>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800c654:	4b05      	ldr	r3, [pc, #20]	; (800c66c <FLASH_OB_Unlock+0x28>)
 800c656:	4a06      	ldr	r2, [pc, #24]	; (800c670 <FLASH_OB_Unlock+0x2c>)
 800c658:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800c65a:	4b04      	ldr	r3, [pc, #16]	; (800c66c <FLASH_OB_Unlock+0x28>)
 800c65c:	4a05      	ldr	r2, [pc, #20]	; (800c674 <FLASH_OB_Unlock+0x30>)
 800c65e:	609a      	str	r2, [r3, #8]
  }  
}
 800c660:	bf00      	nop
 800c662:	46bd      	mov	sp, r7
 800c664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	40023c00 	.word	0x40023c00
 800c670:	08192a3b 	.word	0x08192a3b
 800c674:	4c5d6e7f 	.word	0x4c5d6e7f

0800c678 <FLASH_OB_Lock>:
  * @brief  Locks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 800c678:	b480      	push	{r7}
 800c67a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800c67c:	4a05      	ldr	r2, [pc, #20]	; (800c694 <FLASH_OB_Lock+0x1c>)
 800c67e:	4b05      	ldr	r3, [pc, #20]	; (800c694 <FLASH_OB_Lock+0x1c>)
 800c680:	695b      	ldr	r3, [r3, #20]
 800c682:	f043 0301 	orr.w	r3, r3, #1
 800c686:	6153      	str	r3, [r2, #20]
}
 800c688:	bf00      	nop
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr
 800c692:	bf00      	nop
 800c694:	40023c00 	.word	0x40023c00

0800c698 <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800c6a4:	2308      	movs	r3, #8
 800c6a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800c6a8:	f000 f99a 	bl	800c9e0 <FLASH_WaitForLastOperation>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800c6b0:	7bfb      	ldrb	r3, [r7, #15]
 800c6b2:	2b08      	cmp	r3, #8
 800c6b4:	d117      	bne.n	800c6e6 <FLASH_OB_WRPConfig+0x4e>
  { 
    if(NewState != DISABLE)
 800c6b6:	78fb      	ldrb	r3, [r7, #3]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00b      	beq.n	800c6d4 <FLASH_OB_WRPConfig+0x3c>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 800c6bc:	490c      	ldr	r1, [pc, #48]	; (800c6f0 <FLASH_OB_WRPConfig+0x58>)
 800c6be:	4b0c      	ldr	r3, [pc, #48]	; (800c6f0 <FLASH_OB_WRPConfig+0x58>)
 800c6c0:	881b      	ldrh	r3, [r3, #0]
 800c6c2:	b29a      	uxth	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	43db      	mvns	r3, r3
 800c6ca:	b29b      	uxth	r3, r3
 800c6cc:	4013      	ands	r3, r2
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	800b      	strh	r3, [r1, #0]
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
    }
  }
}
 800c6d2:	e008      	b.n	800c6e6 <FLASH_OB_WRPConfig+0x4e>
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 800c6d4:	4906      	ldr	r1, [pc, #24]	; (800c6f0 <FLASH_OB_WRPConfig+0x58>)
 800c6d6:	4b06      	ldr	r3, [pc, #24]	; (800c6f0 <FLASH_OB_WRPConfig+0x58>)
 800c6d8:	881b      	ldrh	r3, [r3, #0]
 800c6da:	b29a      	uxth	r2, r3
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	800b      	strh	r3, [r1, #0]
}
 800c6e6:	bf00      	nop
 800c6e8:	3710      	adds	r7, #16
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	40023c16 	.word	0x40023c16

0800c6f4 <FLASH_OB_WRP1Config>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
{ 
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800c700:	2308      	movs	r3, #8
 800c702:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800c704:	f000 f96c 	bl	800c9e0 <FLASH_WaitForLastOperation>
 800c708:	4603      	mov	r3, r0
 800c70a:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800c70c:	7bfb      	ldrb	r3, [r7, #15]
 800c70e:	2b08      	cmp	r3, #8
 800c710:	d117      	bne.n	800c742 <FLASH_OB_WRP1Config+0x4e>
  { 
    if(NewState != DISABLE)
 800c712:	78fb      	ldrb	r3, [r7, #3]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d00b      	beq.n	800c730 <FLASH_OB_WRP1Config+0x3c>
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
 800c718:	490c      	ldr	r1, [pc, #48]	; (800c74c <FLASH_OB_WRP1Config+0x58>)
 800c71a:	4b0c      	ldr	r3, [pc, #48]	; (800c74c <FLASH_OB_WRP1Config+0x58>)
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	b29a      	uxth	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	b29b      	uxth	r3, r3
 800c724:	43db      	mvns	r3, r3
 800c726:	b29b      	uxth	r3, r3
 800c728:	4013      	ands	r3, r2
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	800b      	strh	r3, [r1, #0]
    else
    {
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
    }
  }
}
 800c72e:	e008      	b.n	800c742 <FLASH_OB_WRP1Config+0x4e>
      *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 800c730:	4906      	ldr	r1, [pc, #24]	; (800c74c <FLASH_OB_WRP1Config+0x58>)
 800c732:	4b06      	ldr	r3, [pc, #24]	; (800c74c <FLASH_OB_WRP1Config+0x58>)
 800c734:	881b      	ldrh	r3, [r3, #0]
 800c736:	b29a      	uxth	r2, r3
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	4313      	orrs	r3, r2
 800c73e:	b29b      	uxth	r3, r3
 800c740:	800b      	strh	r3, [r1, #0]
}
 800c742:	bf00      	nop
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	40023c1a 	.word	0x40023c1a

0800c750 <FLASH_OB_RDPConfig>:
  * !!!Warning!!! When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	4603      	mov	r3, r0
 800c758:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 800c75a:	2308      	movs	r3, #8
 800c75c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 800c75e:	f000 f93f 	bl	800c9e0 <FLASH_WaitForLastOperation>
 800c762:	4603      	mov	r3, r0
 800c764:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800c766:	7bfb      	ldrb	r3, [r7, #15]
 800c768:	2b08      	cmp	r3, #8
 800c76a:	d102      	bne.n	800c772 <FLASH_OB_RDPConfig+0x22>
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 800c76c:	4a03      	ldr	r2, [pc, #12]	; (800c77c <FLASH_OB_RDPConfig+0x2c>)
 800c76e:	79fb      	ldrb	r3, [r7, #7]
 800c770:	7013      	strb	r3, [r2, #0]

  }
}
 800c772:	bf00      	nop
 800c774:	3710      	adds	r7, #16
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	40023c15 	.word	0x40023c15

0800c780 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	4603      	mov	r3, r0
 800c788:	71fb      	strb	r3, [r7, #7]
 800c78a:	460b      	mov	r3, r1
 800c78c:	71bb      	strb	r3, [r7, #6]
 800c78e:	4613      	mov	r3, r2
 800c790:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800c792:	23ff      	movs	r3, #255	; 0xff
 800c794:	73fb      	strb	r3, [r7, #15]
  FLASH_Status status = FLASH_COMPLETE; 
 800c796:	2308      	movs	r3, #8
 800c798:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800c79a:	f000 f921 	bl	800c9e0 <FLASH_WaitForLastOperation>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	73bb      	strb	r3, [r7, #14]
  
  if(status == FLASH_COMPLETE)
 800c7a2:	7bbb      	ldrb	r3, [r7, #14]
 800c7a4:	2b08      	cmp	r3, #8
 800c7a6:	d111      	bne.n	800c7cc <FLASH_OB_UserConfig+0x4c>
  { 
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
 800c7a8:	4b0a      	ldr	r3, [pc, #40]	; (800c7d4 <FLASH_OB_UserConfig+0x54>)
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	f003 030f 	and.w	r3, r3, #15
 800c7b2:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 800c7b4:	4907      	ldr	r1, [pc, #28]	; (800c7d4 <FLASH_OB_UserConfig+0x54>)
 800c7b6:	79ba      	ldrb	r2, [r7, #6]
 800c7b8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	b2da      	uxtb	r2, r3
 800c7be:	797b      	ldrb	r3, [r7, #5]
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	b2da      	uxtb	r2, r3
 800c7c4:	79fb      	ldrb	r3, [r7, #7]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	700b      	strb	r3, [r1, #0]
  }  
}
 800c7cc:	bf00      	nop
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	40023c14 	.word	0x40023c14

0800c7d8 <FLASH_OB_BORConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval None
  */
void FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b083      	sub	sp, #12
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	4603      	mov	r3, r0
 800c7e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800c7e2:	4a0b      	ldr	r2, [pc, #44]	; (800c810 <FLASH_OB_BORConfig+0x38>)
 800c7e4:	4b0a      	ldr	r3, [pc, #40]	; (800c810 <FLASH_OB_BORConfig+0x38>)
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	f023 030c 	bic.w	r3, r3, #12
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 800c7f2:	4907      	ldr	r1, [pc, #28]	; (800c810 <FLASH_OB_BORConfig+0x38>)
 800c7f4:	4b06      	ldr	r3, [pc, #24]	; (800c810 <FLASH_OB_BORConfig+0x38>)
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	79fb      	ldrb	r3, [r7, #7]
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	700b      	strb	r3, [r1, #0]

}
 800c802:	bf00      	nop
 800c804:	370c      	adds	r7, #12
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	40023c14 	.word	0x40023c14

0800c814 <FLASH_OB_Launch>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_OB_Launch(void)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 800c81a:	2308      	movs	r3, #8
 800c81c:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800c81e:	4a08      	ldr	r2, [pc, #32]	; (800c840 <FLASH_OB_Launch+0x2c>)
 800c820:	4b07      	ldr	r3, [pc, #28]	; (800c840 <FLASH_OB_Launch+0x2c>)
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	b2db      	uxtb	r3, r3
 800c826:	f043 0302 	orr.w	r3, r3, #2
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800c82e:	f000 f8d7 	bl	800c9e0 <FLASH_WaitForLastOperation>
 800c832:	4603      	mov	r3, r0
 800c834:	71fb      	strb	r3, [r7, #7]

  return status;
 800c836:	79fb      	ldrb	r3, [r7, #7]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3708      	adds	r7, #8
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	40023c14 	.word	0x40023c14

0800c844 <FLASH_OB_GetUser>:
  * @param  None
  * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
 800c844:	b480      	push	{r7}
 800c846:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 800c848:	4b04      	ldr	r3, [pc, #16]	; (800c85c <FLASH_OB_GetUser+0x18>)
 800c84a:	695b      	ldr	r3, [r3, #20]
 800c84c:	095b      	lsrs	r3, r3, #5
 800c84e:	b2db      	uxtb	r3, r3
}
 800c850:	4618      	mov	r0, r3
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr
 800c85a:	bf00      	nop
 800c85c:	40023c00 	.word	0x40023c00

0800c860 <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
 800c860:	b480      	push	{r7}
 800c862:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800c864:	4b03      	ldr	r3, [pc, #12]	; (800c874 <FLASH_OB_GetWRP+0x14>)
 800c866:	881b      	ldrh	r3, [r3, #0]
 800c868:	b29b      	uxth	r3, r3
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr
 800c874:	40023c16 	.word	0x40023c16

0800c878 <FLASH_OB_GetWRP1>:
  * @note   This function can be used only for STM32F427x/437x devices.  
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP1(void)
{
 800c878:	b480      	push	{r7}
 800c87a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
 800c87c:	4b03      	ldr	r3, [pc, #12]	; (800c88c <FLASH_OB_GetWRP1+0x14>)
 800c87e:	881b      	ldrh	r3, [r3, #0]
 800c880:	b29b      	uxth	r3, r3
}
 800c882:	4618      	mov	r0, r3
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr
 800c88c:	40023c1a 	.word	0x40023c1a

0800c890 <FLASH_OB_GetRDP>:
  * @retval FLASH ReadOut Protection Status:
  *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
  *           - RESET, when OB_RDP_Level_0 is set
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 800c896:	2300      	movs	r3, #0
 800c898:	71fb      	strb	r3, [r7, #7]

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 800c89a:	4b08      	ldr	r3, [pc, #32]	; (800c8bc <FLASH_OB_GetRDP+0x2c>)
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	2baa      	cmp	r3, #170	; 0xaa
 800c8a2:	d002      	beq.n	800c8aa <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = SET;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	71fb      	strb	r3, [r7, #7]
 800c8a8:	e001      	b.n	800c8ae <FLASH_OB_GetRDP+0x1e>
  }
  else
  {
    readstatus = RESET;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 800c8ae:	79fb      	ldrb	r3, [r7, #7]
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	370c      	adds	r7, #12
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ba:	4770      	bx	lr
 800c8bc:	40023c15 	.word	0x40023c15

0800c8c0 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800c8c4:	4b05      	ldr	r3, [pc, #20]	; (800c8dc <FLASH_OB_GetBOR+0x1c>)
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	f003 030c 	and.w	r3, r3, #12
 800c8ce:	b2db      	uxtb	r3, r3
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	40023c14 	.word	0x40023c14

0800c8e0 <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 800c8ec:	78fb      	ldrb	r3, [r7, #3]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d006      	beq.n	800c900 <FLASH_ITConfig+0x20>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 800c8f2:	490a      	ldr	r1, [pc, #40]	; (800c91c <FLASH_ITConfig+0x3c>)
 800c8f4:	4b09      	ldr	r3, [pc, #36]	; (800c91c <FLASH_ITConfig+0x3c>)
 800c8f6:	691a      	ldr	r2, [r3, #16]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	610b      	str	r3, [r1, #16]
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
  }
}
 800c8fe:	e006      	b.n	800c90e <FLASH_ITConfig+0x2e>
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 800c900:	4906      	ldr	r1, [pc, #24]	; (800c91c <FLASH_ITConfig+0x3c>)
 800c902:	4b06      	ldr	r3, [pc, #24]	; (800c91c <FLASH_ITConfig+0x3c>)
 800c904:	691a      	ldr	r2, [r3, #16]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	43db      	mvns	r3, r3
 800c90a:	4013      	ands	r3, r2
 800c90c:	610b      	str	r3, [r1, #16]
}
 800c90e:	bf00      	nop
 800c910:	370c      	adds	r7, #12
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	40023c00 	.word	0x40023c00

0800c920 <FLASH_GetFlagStatus>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_BSY: FLASH Busy flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 800c920:	b480      	push	{r7}
 800c922:	b085      	sub	sp, #20
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800c928:	2300      	movs	r3, #0
 800c92a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 800c92c:	4b08      	ldr	r3, [pc, #32]	; (800c950 <FLASH_GetFlagStatus+0x30>)
 800c92e:	68da      	ldr	r2, [r3, #12]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4013      	ands	r3, r2
 800c934:	2b00      	cmp	r3, #0
 800c936:	d002      	beq.n	800c93e <FLASH_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800c938:	2301      	movs	r3, #1
 800c93a:	73fb      	strb	r3, [r7, #15]
 800c93c:	e001      	b.n	800c942 <FLASH_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800c93e:	2300      	movs	r3, #0
 800c940:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 800c942:	7bfb      	ldrb	r3, [r7, #15]
}
 800c944:	4618      	mov	r0, r3
 800c946:	3714      	adds	r7, #20
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr
 800c950:	40023c00 	.word	0x40023c00

0800c954 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag  
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 800c95c:	4a04      	ldr	r2, [pc, #16]	; (800c970 <FLASH_ClearFlag+0x1c>)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	60d3      	str	r3, [r2, #12]
}
 800c962:	bf00      	nop
 800c964:	370c      	adds	r7, #12
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop
 800c970:	40023c00 	.word	0x40023c00

0800c974 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 800c974:	b480      	push	{r7}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 800c97a:	2308      	movs	r3, #8
 800c97c:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800c97e:	4b17      	ldr	r3, [pc, #92]	; (800c9dc <FLASH_GetStatus+0x68>)
 800c980:	68db      	ldr	r3, [r3, #12]
 800c982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c98a:	d102      	bne.n	800c992 <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY;
 800c98c:	2301      	movs	r3, #1
 800c98e:	71fb      	strb	r3, [r7, #7]
 800c990:	e01c      	b.n	800c9cc <FLASH_GetStatus+0x58>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 800c992:	4b12      	ldr	r3, [pc, #72]	; (800c9dc <FLASH_GetStatus+0x68>)
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	f003 0310 	and.w	r3, r3, #16
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d002      	beq.n	800c9a4 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP;
 800c99e:	2305      	movs	r3, #5
 800c9a0:	71fb      	strb	r3, [r7, #7]
 800c9a2:	e013      	b.n	800c9cc <FLASH_GetStatus+0x58>
    }
    else
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 800c9a4:	4b0d      	ldr	r3, [pc, #52]	; (800c9dc <FLASH_GetStatus+0x68>)
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d002      	beq.n	800c9b6 <FLASH_GetStatus+0x42>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 800c9b0:	2306      	movs	r3, #6
 800c9b2:	71fb      	strb	r3, [r7, #7]
 800c9b4:	e00a      	b.n	800c9cc <FLASH_GetStatus+0x58>
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 800c9b6:	4b09      	ldr	r3, [pc, #36]	; (800c9dc <FLASH_GetStatus+0x68>)
 800c9b8:	68db      	ldr	r3, [r3, #12]
 800c9ba:	f003 0302 	and.w	r3, r3, #2
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d002      	beq.n	800c9c8 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_OPERATION;
 800c9c2:	2307      	movs	r3, #7
 800c9c4:	71fb      	strb	r3, [r7, #7]
 800c9c6:	e001      	b.n	800c9cc <FLASH_GetStatus+0x58>
        }
        else
        {
          flashstatus = FLASH_COMPLETE;
 800c9c8:	2308      	movs	r3, #8
 800c9ca:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 800c9cc:	79fb      	ldrb	r3, [r7, #7]
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	370c      	adds	r7, #12
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	40023c00 	.word	0x40023c00

0800c9e0 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 800c9e6:	2308      	movs	r3, #8
 800c9e8:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 800c9ea:	f7ff ffc3 	bl	800c974 <FLASH_GetStatus>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 800c9f2:	e003      	b.n	800c9fc <FLASH_WaitForLastOperation+0x1c>
  {
    status = FLASH_GetStatus();
 800c9f4:	f7ff ffbe 	bl	800c974 <FLASH_GetStatus>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY)
 800c9fc:	79fb      	ldrb	r3, [r7, #7]
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d0f7      	beq.n	800c9f4 <FLASH_WaitForLastOperation+0x14>
  }
  /* Return the operation status */
  return status;
 800ca04:	79fb      	ldrb	r3, [r7, #7]
 800ca06:	b2db      	uxtb	r3, r3
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3708      	adds	r7, #8
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <FSMC_NORSRAMDeInit>:
  *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d107      	bne.n	800ca2e <FSMC_NORSRAMDeInit+0x1e>
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 800ca1e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	f243 01db 	movw	r1, #12507	; 0x30db
 800ca28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800ca2c:	e006      	b.n	800ca3c <FSMC_NORSRAMDeInit+0x2c>
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 800ca2e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f243 01d2 	movw	r1, #12498	; 0x30d2
 800ca38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 800ca3c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	3301      	adds	r3, #1
 800ca44:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ca48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 800ca4c:	4a05      	ldr	r2, [pc, #20]	; (800ca64 <FSMC_NORSRAMDeInit+0x54>)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ca54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800ca58:	bf00      	nop
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr
 800ca64:	a0000104 	.word	0xa0000104

0800ca68 <FSMC_NORSRAMInit>:
  *         that contains the configuration information for the FSMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 800ca70:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	6851      	ldr	r1, [r2, #4]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	6892      	ldr	r2, [r2, #8]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 800ca80:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	68d2      	ldr	r2, [r2, #12]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 800ca86:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	6912      	ldr	r2, [r2, #16]
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 800ca8c:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	6952      	ldr	r2, [r2, #20]
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 800ca92:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	6992      	ldr	r2, [r2, #24]
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 800ca98:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	69d2      	ldr	r2, [r2, #28]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 800ca9e:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 800caa0:	687a      	ldr	r2, [r7, #4]
 800caa2:	6a12      	ldr	r2, [r2, #32]
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 800caa4:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 800caaa:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	6a92      	ldr	r2, [r2, #40]	; 0x28
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 800cab0:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 800cab6:	4311      	orrs	r1, r2
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	6b12      	ldr	r2, [r2, #48]	; 0x30
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 800cabc:	430a      	orrs	r2, r1
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 800cabe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	2b08      	cmp	r3, #8
 800cac8:	d10d      	bne.n	800cae6 <FSMC_NORSRAMInit+0x7e>
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 800caca:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	6812      	ldr	r2, [r2, #0]
 800cada:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800cade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 800cae6:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	3301      	adds	r3, #1
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800caf4:	6811      	ldr	r1, [r2, #0]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cafa:	6852      	ldr	r2, [r2, #4]
 800cafc:	0112      	lsls	r2, r2, #4
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 800cafe:	4311      	orrs	r1, r2
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 800cb00:	687a      	ldr	r2, [r7, #4]
 800cb02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cb04:	6892      	ldr	r2, [r2, #8]
 800cb06:	0212      	lsls	r2, r2, #8
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 800cb08:	4311      	orrs	r1, r2
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cb0e:	68d2      	ldr	r2, [r2, #12]
 800cb10:	0412      	lsls	r2, r2, #16
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 800cb12:	4311      	orrs	r1, r2
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cb18:	6912      	ldr	r2, [r2, #16]
 800cb1a:	0512      	lsls	r2, r2, #20
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 800cb1c:	4311      	orrs	r1, r2
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cb22:	6952      	ldr	r2, [r2, #20]
 800cb24:	0612      	lsls	r2, r2, #24
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 800cb26:	4311      	orrs	r1, r2
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cb2c:	6992      	ldr	r2, [r2, #24]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 800cb2e:	430a      	orrs	r2, r1
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 800cb30:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb3c:	d120      	bne.n	800cb80 <FSMC_NORSRAMInit+0x118>
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 800cb3e:	4817      	ldr	r0, [pc, #92]	; (800cb9c <FSMC_NORSRAMInit+0x134>)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cb48:	6811      	ldr	r1, [r2, #0]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cb4e:	6852      	ldr	r2, [r2, #4]
 800cb50:	0112      	lsls	r2, r2, #4
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 800cb52:	4311      	orrs	r1, r2
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cb58:	6892      	ldr	r2, [r2, #8]
 800cb5a:	0212      	lsls	r2, r2, #8
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 800cb5c:	4311      	orrs	r1, r2
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cb62:	6912      	ldr	r2, [r2, #16]
 800cb64:	0512      	lsls	r2, r2, #20
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 800cb66:	4311      	orrs	r1, r2
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cb6c:	6952      	ldr	r2, [r2, #20]
 800cb6e:	0612      	lsls	r2, r2, #24
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 800cb70:	4311      	orrs	r1, r2
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cb76:	6992      	ldr	r2, [r2, #24]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 800cb78:	430a      	orrs	r2, r1
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 800cb7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
  }
}
 800cb7e:	e006      	b.n	800cb8e <FSMC_NORSRAMInit+0x126>
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 800cb80:	4a06      	ldr	r2, [pc, #24]	; (800cb9c <FSMC_NORSRAMInit+0x134>)
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800cb8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800cb8e:	bf00      	nop
 800cb90:	370c      	adds	r7, #12
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	a0000104 	.word	0xa0000104

0800cba0 <FSMC_NORSRAMStructInit>:
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2202      	movs	r2, #2
 800cbb2:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	61da      	str	r2, [r3, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	621a      	str	r2, [r3, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cbe4:	625a      	str	r2, [r3, #36]	; 0x24
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cbec:	629a      	str	r2, [r3, #40]	; 0x28
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	62da      	str	r2, [r3, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	631a      	str	r2, [r3, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbfe:	220f      	movs	r2, #15
 800cc00:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc06:	220f      	movs	r2, #15
 800cc08:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc0e:	22ff      	movs	r2, #255	; 0xff
 800cc10:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc16:	220f      	movs	r2, #15
 800cc18:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc1e:	220f      	movs	r2, #15
 800cc20:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc26:	220f      	movs	r2, #15
 800cc28:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc2e:	2200      	movs	r2, #0
 800cc30:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc36:	220f      	movs	r2, #15
 800cc38:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc3e:	220f      	movs	r2, #15
 800cc40:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc46:	22ff      	movs	r2, #255	; 0xff
 800cc48:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc4e:	220f      	movs	r2, #15
 800cc50:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc56:	220f      	movs	r2, #15
 800cc58:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc5e:	220f      	movs	r2, #15
 800cc60:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc66:	2200      	movs	r2, #0
 800cc68:	619a      	str	r2, [r3, #24]
}
 800cc6a:	bf00      	nop
 800cc6c:	370c      	adds	r7, #12
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr

0800cc76 <FSMC_NORSRAMCmd>:
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 800cc76:	b480      	push	{r7}
 800cc78:	b083      	sub	sp, #12
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
 800cc7e:	460b      	mov	r3, r1
 800cc80:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800cc82:	78fb      	ldrb	r3, [r7, #3]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d00c      	beq.n	800cca2 <FSMC_NORSRAMCmd+0x2c>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 800cc88:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800cc8c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc96:	f043 0201 	orr.w	r2, r3, #1
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
  }
}
 800cca0:	e00b      	b.n	800ccba <FSMC_NORSRAMCmd+0x44>
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 800cca2:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800cca6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ccb0:	4b05      	ldr	r3, [pc, #20]	; (800ccc8 <FSMC_NORSRAMCmd+0x52>)
 800ccb2:	4013      	ands	r3, r2
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 800ccba:	bf00      	nop
 800ccbc:	370c      	adds	r7, #12
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc4:	4770      	bx	lr
 800ccc6:	bf00      	nop
 800ccc8:	000ffffe 	.word	0x000ffffe

0800cccc <FSMC_NANDDeInit>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND 
  * @retval None
  */
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2b10      	cmp	r3, #16
 800ccd8:	d10e      	bne.n	800ccf8 <FSMC_NANDDeInit+0x2c>
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 800ccda:	4b11      	ldr	r3, [pc, #68]	; (800cd20 <FSMC_NANDDeInit+0x54>)
 800ccdc:	2218      	movs	r2, #24
 800ccde:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->SR2 = 0x00000040;
 800cce0:	4b0f      	ldr	r3, [pc, #60]	; (800cd20 <FSMC_NANDDeInit+0x54>)
 800cce2:	2240      	movs	r2, #64	; 0x40
 800cce4:	605a      	str	r2, [r3, #4]
    FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
 800cce6:	4b0e      	ldr	r3, [pc, #56]	; (800cd20 <FSMC_NANDDeInit+0x54>)
 800cce8:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800ccec:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
 800ccee:	4b0c      	ldr	r3, [pc, #48]	; (800cd20 <FSMC_NANDDeInit+0x54>)
 800ccf0:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800ccf4:	60da      	str	r2, [r3, #12]
    FSMC_Bank3->PCR3 = 0x00000018;
    FSMC_Bank3->SR3 = 0x00000040;
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
  }  
}
 800ccf6:	e00d      	b.n	800cd14 <FSMC_NANDDeInit+0x48>
    FSMC_Bank3->PCR3 = 0x00000018;
 800ccf8:	4b0a      	ldr	r3, [pc, #40]	; (800cd24 <FSMC_NANDDeInit+0x58>)
 800ccfa:	2218      	movs	r2, #24
 800ccfc:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
 800ccfe:	4b09      	ldr	r3, [pc, #36]	; (800cd24 <FSMC_NANDDeInit+0x58>)
 800cd00:	2240      	movs	r2, #64	; 0x40
 800cd02:	605a      	str	r2, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 800cd04:	4b07      	ldr	r3, [pc, #28]	; (800cd24 <FSMC_NANDDeInit+0x58>)
 800cd06:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800cd0a:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 800cd0c:	4b05      	ldr	r3, [pc, #20]	; (800cd24 <FSMC_NANDDeInit+0x58>)
 800cd0e:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800cd12:	60da      	str	r2, [r3, #12]
}
 800cd14:	bf00      	nop
 800cd16:	370c      	adds	r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1e:	4770      	bx	lr
 800cd20:	a0000060 	.word	0xa0000060
 800cd24:	a0000080 	.word	0xa0000080

0800cd28 <FSMC_NANDInit>:
  * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FSMC NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b087      	sub	sp, #28
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 800cd30:	2300      	movs	r3, #0
 800cd32:	617b      	str	r3, [r7, #20]
 800cd34:	2300      	movs	r3, #0
 800cd36:	613b      	str	r3, [r7, #16]
 800cd38:	2300      	movs	r3, #0
 800cd3a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	689b      	ldr	r3, [r3, #8]
            PCR_MEMORYTYPE_NAND |
 800cd44:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECC |
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	68db      	ldr	r3, [r3, #12]
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 800cd4a:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	691b      	ldr	r3, [r3, #16]
            FSMC_NANDInitStruct->FSMC_ECC |
 800cd50:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	695b      	ldr	r3, [r3, #20]
 800cd56:	025b      	lsls	r3, r3, #9
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 800cd58:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	699b      	ldr	r3, [r3, #24]
 800cd5e:	035b      	lsls	r3, r3, #13
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 800cd60:	4313      	orrs	r3, r2
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 800cd62:	f043 0308 	orr.w	r3, r3, #8
 800cd66:	617b      	str	r3, [r7, #20]
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	69db      	ldr	r3, [r3, #28]
 800cd6c:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	69db      	ldr	r3, [r3, #28]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	021b      	lsls	r3, r3, #8
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800cd76:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	69db      	ldr	r3, [r3, #28]
 800cd7c:	689b      	ldr	r3, [r3, #8]
 800cd7e:	041b      	lsls	r3, r3, #16
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800cd80:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	69db      	ldr	r3, [r3, #28]
 800cd86:	68db      	ldr	r3, [r3, #12]
 800cd88:	061b      	lsls	r3, r3, #24
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	613b      	str	r3, [r7, #16]
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6a1b      	ldr	r3, [r3, #32]
 800cd92:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6a1b      	ldr	r3, [r3, #32]
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	021b      	lsls	r3, r3, #8
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800cd9c:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6a1b      	ldr	r3, [r3, #32]
 800cda2:	689b      	ldr	r3, [r3, #8]
 800cda4:	041b      	lsls	r3, r3, #16
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800cda6:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6a1b      	ldr	r3, [r3, #32]
 800cdac:	68db      	ldr	r3, [r3, #12]
 800cdae:	061b      	lsls	r3, r3, #24
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	60fb      	str	r3, [r7, #12]
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b10      	cmp	r3, #16
 800cdba:	d109      	bne.n	800cdd0 <FSMC_NANDInit+0xa8>
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 800cdbc:	4a0c      	ldr	r2, [pc, #48]	; (800cdf0 <FSMC_NANDInit+0xc8>)
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	6013      	str	r3, [r2, #0]
    FSMC_Bank2->PMEM2 = tmppmem;
 800cdc2:	4a0b      	ldr	r2, [pc, #44]	; (800cdf0 <FSMC_NANDInit+0xc8>)
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	6093      	str	r3, [r2, #8]
    FSMC_Bank2->PATT2 = tmppatt;
 800cdc8:	4a09      	ldr	r2, [pc, #36]	; (800cdf0 <FSMC_NANDInit+0xc8>)
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	60d3      	str	r3, [r2, #12]
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
    FSMC_Bank3->PMEM3 = tmppmem;
    FSMC_Bank3->PATT3 = tmppatt;
  }
}
 800cdce:	e008      	b.n	800cde2 <FSMC_NANDInit+0xba>
    FSMC_Bank3->PCR3 = tmppcr;
 800cdd0:	4a08      	ldr	r2, [pc, #32]	; (800cdf4 <FSMC_NANDInit+0xcc>)
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	6013      	str	r3, [r2, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 800cdd6:	4a07      	ldr	r2, [pc, #28]	; (800cdf4 <FSMC_NANDInit+0xcc>)
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	6093      	str	r3, [r2, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 800cddc:	4a05      	ldr	r2, [pc, #20]	; (800cdf4 <FSMC_NANDInit+0xcc>)
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	60d3      	str	r3, [r2, #12]
}
 800cde2:	bf00      	nop
 800cde4:	371c      	adds	r7, #28
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	a0000060 	.word	0xa0000060
 800cdf4:	a0000080 	.word	0xa0000080

0800cdf8 <FSMC_NANDStructInit>:
  * @param  FSMC_NANDInitStruct: pointer to a FSMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2210      	movs	r2, #16
 800ce04:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2200      	movs	r2, #0
 800ce16:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	611a      	str	r2, [r3, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	615a      	str	r2, [r3, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2200      	movs	r2, #0
 800ce28:	619a      	str	r2, [r3, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	69db      	ldr	r3, [r3, #28]
 800ce2e:	22fc      	movs	r2, #252	; 0xfc
 800ce30:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	69db      	ldr	r3, [r3, #28]
 800ce36:	22fc      	movs	r2, #252	; 0xfc
 800ce38:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	69db      	ldr	r3, [r3, #28]
 800ce3e:	22fc      	movs	r2, #252	; 0xfc
 800ce40:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	69db      	ldr	r3, [r3, #28]
 800ce46:	22fc      	movs	r2, #252	; 0xfc
 800ce48:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6a1b      	ldr	r3, [r3, #32]
 800ce4e:	22fc      	movs	r2, #252	; 0xfc
 800ce50:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6a1b      	ldr	r3, [r3, #32]
 800ce56:	22fc      	movs	r2, #252	; 0xfc
 800ce58:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6a1b      	ldr	r3, [r3, #32]
 800ce5e:	22fc      	movs	r2, #252	; 0xfc
 800ce60:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6a1b      	ldr	r3, [r3, #32]
 800ce66:	22fc      	movs	r2, #252	; 0xfc
 800ce68:	60da      	str	r2, [r3, #12]
}
 800ce6a:	bf00      	nop
 800ce6c:	370c      	adds	r7, #12
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr

0800ce76 <FSMC_NANDCmd>:
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 800ce76:	b480      	push	{r7}
 800ce78:	b083      	sub	sp, #12
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
 800ce7e:	460b      	mov	r3, r1
 800ce80:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800ce82:	78fb      	ldrb	r3, [r7, #3]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d010      	beq.n	800ceaa <FSMC_NANDCmd+0x34>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2b10      	cmp	r3, #16
 800ce8c:	d106      	bne.n	800ce9c <FSMC_NANDCmd+0x26>
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 800ce8e:	4a12      	ldr	r2, [pc, #72]	; (800ced8 <FSMC_NANDCmd+0x62>)
 800ce90:	4b11      	ldr	r3, [pc, #68]	; (800ced8 <FSMC_NANDCmd+0x62>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f043 0304 	orr.w	r3, r3, #4
 800ce98:	6013      	str	r3, [r2, #0]
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
    }
  }
}
 800ce9a:	e016      	b.n	800ceca <FSMC_NANDCmd+0x54>
      FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 800ce9c:	4a0f      	ldr	r2, [pc, #60]	; (800cedc <FSMC_NANDCmd+0x66>)
 800ce9e:	4b0f      	ldr	r3, [pc, #60]	; (800cedc <FSMC_NANDCmd+0x66>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f043 0304 	orr.w	r3, r3, #4
 800cea6:	6013      	str	r3, [r2, #0]
}
 800cea8:	e00f      	b.n	800ceca <FSMC_NANDCmd+0x54>
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2b10      	cmp	r3, #16
 800ceae:	d106      	bne.n	800cebe <FSMC_NANDCmd+0x48>
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 800ceb0:	4909      	ldr	r1, [pc, #36]	; (800ced8 <FSMC_NANDCmd+0x62>)
 800ceb2:	4b09      	ldr	r3, [pc, #36]	; (800ced8 <FSMC_NANDCmd+0x62>)
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	4b0a      	ldr	r3, [pc, #40]	; (800cee0 <FSMC_NANDCmd+0x6a>)
 800ceb8:	4013      	ands	r3, r2
 800ceba:	600b      	str	r3, [r1, #0]
}
 800cebc:	e005      	b.n	800ceca <FSMC_NANDCmd+0x54>
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 800cebe:	4907      	ldr	r1, [pc, #28]	; (800cedc <FSMC_NANDCmd+0x66>)
 800cec0:	4b06      	ldr	r3, [pc, #24]	; (800cedc <FSMC_NANDCmd+0x66>)
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	4b06      	ldr	r3, [pc, #24]	; (800cee0 <FSMC_NANDCmd+0x6a>)
 800cec6:	4013      	ands	r3, r2
 800cec8:	600b      	str	r3, [r1, #0]
}
 800ceca:	bf00      	nop
 800cecc:	370c      	adds	r7, #12
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	a0000060 	.word	0xa0000060
 800cedc:	a0000080 	.word	0xa0000080
 800cee0:	000ffffb 	.word	0x000ffffb

0800cee4 <FSMC_NANDECCCmd>:
  * @param  NewState: new state of the FSMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	460b      	mov	r3, r1
 800ceee:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800cef0:	78fb      	ldrb	r3, [r7, #3]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d010      	beq.n	800cf18 <FSMC_NANDECCCmd+0x34>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2b10      	cmp	r3, #16
 800cefa:	d106      	bne.n	800cf0a <FSMC_NANDECCCmd+0x26>
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 800cefc:	4a11      	ldr	r2, [pc, #68]	; (800cf44 <FSMC_NANDECCCmd+0x60>)
 800cefe:	4b11      	ldr	r3, [pc, #68]	; (800cf44 <FSMC_NANDECCCmd+0x60>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf06:	6013      	str	r3, [r2, #0]
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
    }
  }
}
 800cf08:	e016      	b.n	800cf38 <FSMC_NANDECCCmd+0x54>
      FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 800cf0a:	4a0f      	ldr	r2, [pc, #60]	; (800cf48 <FSMC_NANDECCCmd+0x64>)
 800cf0c:	4b0e      	ldr	r3, [pc, #56]	; (800cf48 <FSMC_NANDECCCmd+0x64>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf14:	6013      	str	r3, [r2, #0]
}
 800cf16:	e00f      	b.n	800cf38 <FSMC_NANDECCCmd+0x54>
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2b10      	cmp	r3, #16
 800cf1c:	d106      	bne.n	800cf2c <FSMC_NANDECCCmd+0x48>
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 800cf1e:	4909      	ldr	r1, [pc, #36]	; (800cf44 <FSMC_NANDECCCmd+0x60>)
 800cf20:	4b08      	ldr	r3, [pc, #32]	; (800cf44 <FSMC_NANDECCCmd+0x60>)
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	4b09      	ldr	r3, [pc, #36]	; (800cf4c <FSMC_NANDECCCmd+0x68>)
 800cf26:	4013      	ands	r3, r2
 800cf28:	600b      	str	r3, [r1, #0]
}
 800cf2a:	e005      	b.n	800cf38 <FSMC_NANDECCCmd+0x54>
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 800cf2c:	4906      	ldr	r1, [pc, #24]	; (800cf48 <FSMC_NANDECCCmd+0x64>)
 800cf2e:	4b06      	ldr	r3, [pc, #24]	; (800cf48 <FSMC_NANDECCCmd+0x64>)
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	4b06      	ldr	r3, [pc, #24]	; (800cf4c <FSMC_NANDECCCmd+0x68>)
 800cf34:	4013      	ands	r3, r2
 800cf36:	600b      	str	r3, [r1, #0]
}
 800cf38:	bf00      	nop
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr
 800cf44:	a0000060 	.word	0xa0000060
 800cf48:	a0000080 	.word	0xa0000080
 800cf4c:	000fffbf 	.word	0x000fffbf

0800cf50 <FSMC_GetECC>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b085      	sub	sp, #20
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	60fb      	str	r3, [r7, #12]
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2b10      	cmp	r3, #16
 800cf60:	d103      	bne.n	800cf6a <FSMC_GetECC+0x1a>
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 800cf62:	4b07      	ldr	r3, [pc, #28]	; (800cf80 <FSMC_GetECC+0x30>)
 800cf64:	695b      	ldr	r3, [r3, #20]
 800cf66:	60fb      	str	r3, [r7, #12]
 800cf68:	e002      	b.n	800cf70 <FSMC_GetECC+0x20>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 800cf6a:	4b06      	ldr	r3, [pc, #24]	; (800cf84 <FSMC_GetECC+0x34>)
 800cf6c:	695b      	ldr	r3, [r3, #20]
 800cf6e:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 800cf70:	68fb      	ldr	r3, [r7, #12]
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3714      	adds	r7, #20
 800cf76:	46bd      	mov	sp, r7
 800cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7c:	4770      	bx	lr
 800cf7e:	bf00      	nop
 800cf80:	a0000060 	.word	0xa0000060
 800cf84:	a0000080 	.word	0xa0000080

0800cf88 <FSMC_PCCARDDeInit>:
  * @brief  De-initializes the FSMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	af00      	add	r7, sp, #0
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 800cf8c:	4b0b      	ldr	r3, [pc, #44]	; (800cfbc <FSMC_PCCARDDeInit+0x34>)
 800cf8e:	2218      	movs	r2, #24
 800cf90:	601a      	str	r2, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
 800cf92:	4b0a      	ldr	r3, [pc, #40]	; (800cfbc <FSMC_PCCARDDeInit+0x34>)
 800cf94:	2200      	movs	r2, #0
 800cf96:	605a      	str	r2, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 800cf98:	4b08      	ldr	r3, [pc, #32]	; (800cfbc <FSMC_PCCARDDeInit+0x34>)
 800cf9a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800cf9e:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 800cfa0:	4b06      	ldr	r3, [pc, #24]	; (800cfbc <FSMC_PCCARDDeInit+0x34>)
 800cfa2:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800cfa6:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 800cfa8:	4b04      	ldr	r3, [pc, #16]	; (800cfbc <FSMC_PCCARDDeInit+0x34>)
 800cfaa:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800cfae:	611a      	str	r2, [r3, #16]
}
 800cfb0:	bf00      	nop
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop
 800cfbc:	a00000a0 	.word	0xa00000a0

0800cfc0 <FSMC_PCCARDInit>:
  * @param  FSMC_PCCARDInitStruct : pointer to a FSMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FSMC PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 800cfc8:	4927      	ldr	r1, [pc, #156]	; (800d068 <FSMC_PCCARDInit+0xa8>)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681a      	ldr	r2, [r3, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	025b      	lsls	r3, r3, #9
                     FSMC_MemoryDataWidth_16b |  
 800cfd4:	431a      	orrs	r2, r3
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	035b      	lsls	r3, r3, #13
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	f043 0310 	orr.w	r3, r3, #16
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 800cfe2:	600b      	str	r3, [r1, #0]
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800cfe4:	4920      	ldr	r1, [pc, #128]	; (800d068 <FSMC_PCCARDInit+0xa8>)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	681a      	ldr	r2, [r3, #0]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	021b      	lsls	r3, r3, #8
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800cff4:	431a      	orrs	r2, r3
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	689b      	ldr	r3, [r3, #8]
 800cffc:	041b      	lsls	r3, r3, #16
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800cffe:	431a      	orrs	r2, r3
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	68db      	ldr	r3, [r3, #12]
 800d004:	68db      	ldr	r3, [r3, #12]
 800d006:	061b      	lsls	r3, r3, #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800d008:	4313      	orrs	r3, r2
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800d00a:	608b      	str	r3, [r1, #8]
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800d00c:	4916      	ldr	r1, [pc, #88]	; (800d068 <FSMC_PCCARDInit+0xa8>)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	691b      	ldr	r3, [r3, #16]
 800d012:	681a      	ldr	r2, [r3, #0]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	691b      	ldr	r3, [r3, #16]
 800d018:	685b      	ldr	r3, [r3, #4]
 800d01a:	021b      	lsls	r3, r3, #8
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800d01c:	431a      	orrs	r2, r3
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	691b      	ldr	r3, [r3, #16]
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	041b      	lsls	r3, r3, #16
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800d026:	431a      	orrs	r2, r3
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	691b      	ldr	r3, [r3, #16]
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	061b      	lsls	r3, r3, #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800d030:	4313      	orrs	r3, r2
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800d032:	60cb      	str	r3, [r1, #12]
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 800d034:	490c      	ldr	r1, [pc, #48]	; (800d068 <FSMC_PCCARDInit+0xa8>)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	695b      	ldr	r3, [r3, #20]
 800d03a:	681a      	ldr	r2, [r3, #0]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	695b      	ldr	r3, [r3, #20]
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	021b      	lsls	r3, r3, #8
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 800d044:	431a      	orrs	r2, r3
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	695b      	ldr	r3, [r3, #20]
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	041b      	lsls	r3, r3, #16
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800d04e:	431a      	orrs	r2, r3
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	695b      	ldr	r3, [r3, #20]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	061b      	lsls	r3, r3, #24
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800d058:	4313      	orrs	r3, r2
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 800d05a:	610b      	str	r3, [r1, #16]
}
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr
 800d068:	a00000a0 	.word	0xa00000a0

0800d06c <FSMC_PCCARDStructInit>:
  * @param  FSMC_PCCARDInitStruct: pointer to a FSMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2200      	movs	r2, #0
 800d07e:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	68db      	ldr	r3, [r3, #12]
 800d08a:	22fc      	movs	r2, #252	; 0xfc
 800d08c:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	22fc      	movs	r2, #252	; 0xfc
 800d094:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	68db      	ldr	r3, [r3, #12]
 800d09a:	22fc      	movs	r2, #252	; 0xfc
 800d09c:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	68db      	ldr	r3, [r3, #12]
 800d0a2:	22fc      	movs	r2, #252	; 0xfc
 800d0a4:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	691b      	ldr	r3, [r3, #16]
 800d0aa:	22fc      	movs	r2, #252	; 0xfc
 800d0ac:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	691b      	ldr	r3, [r3, #16]
 800d0b2:	22fc      	movs	r2, #252	; 0xfc
 800d0b4:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	691b      	ldr	r3, [r3, #16]
 800d0ba:	22fc      	movs	r2, #252	; 0xfc
 800d0bc:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	691b      	ldr	r3, [r3, #16]
 800d0c2:	22fc      	movs	r2, #252	; 0xfc
 800d0c4:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	695b      	ldr	r3, [r3, #20]
 800d0ca:	22fc      	movs	r2, #252	; 0xfc
 800d0cc:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	695b      	ldr	r3, [r3, #20]
 800d0d2:	22fc      	movs	r2, #252	; 0xfc
 800d0d4:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	695b      	ldr	r3, [r3, #20]
 800d0da:	22fc      	movs	r2, #252	; 0xfc
 800d0dc:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	695b      	ldr	r3, [r3, #20]
 800d0e2:	22fc      	movs	r2, #252	; 0xfc
 800d0e4:	60da      	str	r2, [r3, #12]
}
 800d0e6:	bf00      	nop
 800d0e8:	370c      	adds	r7, #12
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr

0800d0f2 <FSMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
 800d0f2:	b480      	push	{r7}
 800d0f4:	b083      	sub	sp, #12
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d0fc:	79fb      	ldrb	r3, [r7, #7]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d006      	beq.n	800d110 <FSMC_PCCARDCmd+0x1e>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 800d102:	4a09      	ldr	r2, [pc, #36]	; (800d128 <FSMC_PCCARDCmd+0x36>)
 800d104:	4b08      	ldr	r3, [pc, #32]	; (800d128 <FSMC_PCCARDCmd+0x36>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f043 0304 	orr.w	r3, r3, #4
 800d10c:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
  }
}
 800d10e:	e005      	b.n	800d11c <FSMC_PCCARDCmd+0x2a>
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 800d110:	4905      	ldr	r1, [pc, #20]	; (800d128 <FSMC_PCCARDCmd+0x36>)
 800d112:	4b05      	ldr	r3, [pc, #20]	; (800d128 <FSMC_PCCARDCmd+0x36>)
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	4b05      	ldr	r3, [pc, #20]	; (800d12c <FSMC_PCCARDCmd+0x3a>)
 800d118:	4013      	ands	r3, r2
 800d11a:	600b      	str	r3, [r1, #0]
}
 800d11c:	bf00      	nop
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr
 800d128:	a00000a0 	.word	0xa00000a0
 800d12c:	000ffffb 	.word	0x000ffffb

0800d130 <FSMC_ITConfig>:
  * @param  NewState: new state of the specified FSMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
{
 800d130:	b480      	push	{r7}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	4613      	mov	r3, r2
 800d13c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d13e:	79fb      	ldrb	r3, [r7, #7]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d01b      	beq.n	800d17c <FSMC_ITConfig+0x4c>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2b10      	cmp	r3, #16
 800d148:	d106      	bne.n	800d158 <FSMC_ITConfig+0x28>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 800d14a:	491e      	ldr	r1, [pc, #120]	; (800d1c4 <FSMC_ITConfig+0x94>)
 800d14c:	4b1d      	ldr	r3, [pc, #116]	; (800d1c4 <FSMC_ITConfig+0x94>)
 800d14e:	685a      	ldr	r2, [r3, #4]
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	4313      	orrs	r3, r2
 800d154:	604b      	str	r3, [r1, #4]
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
    }
  }
}
 800d156:	e02f      	b.n	800d1b8 <FSMC_ITConfig+0x88>
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d15e:	d106      	bne.n	800d16e <FSMC_ITConfig+0x3e>
      FSMC_Bank3->SR3 |= FSMC_IT;
 800d160:	4919      	ldr	r1, [pc, #100]	; (800d1c8 <FSMC_ITConfig+0x98>)
 800d162:	4b19      	ldr	r3, [pc, #100]	; (800d1c8 <FSMC_ITConfig+0x98>)
 800d164:	685a      	ldr	r2, [r3, #4]
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	4313      	orrs	r3, r2
 800d16a:	604b      	str	r3, [r1, #4]
}
 800d16c:	e024      	b.n	800d1b8 <FSMC_ITConfig+0x88>
      FSMC_Bank4->SR4 |= FSMC_IT;    
 800d16e:	4917      	ldr	r1, [pc, #92]	; (800d1cc <FSMC_ITConfig+0x9c>)
 800d170:	4b16      	ldr	r3, [pc, #88]	; (800d1cc <FSMC_ITConfig+0x9c>)
 800d172:	685a      	ldr	r2, [r3, #4]
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	4313      	orrs	r3, r2
 800d178:	604b      	str	r3, [r1, #4]
}
 800d17a:	e01d      	b.n	800d1b8 <FSMC_ITConfig+0x88>
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2b10      	cmp	r3, #16
 800d180:	d107      	bne.n	800d192 <FSMC_ITConfig+0x62>
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 800d182:	4910      	ldr	r1, [pc, #64]	; (800d1c4 <FSMC_ITConfig+0x94>)
 800d184:	4b0f      	ldr	r3, [pc, #60]	; (800d1c4 <FSMC_ITConfig+0x94>)
 800d186:	685a      	ldr	r2, [r3, #4]
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	43db      	mvns	r3, r3
 800d18c:	4013      	ands	r3, r2
 800d18e:	604b      	str	r3, [r1, #4]
}
 800d190:	e012      	b.n	800d1b8 <FSMC_ITConfig+0x88>
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d198:	d107      	bne.n	800d1aa <FSMC_ITConfig+0x7a>
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 800d19a:	490b      	ldr	r1, [pc, #44]	; (800d1c8 <FSMC_ITConfig+0x98>)
 800d19c:	4b0a      	ldr	r3, [pc, #40]	; (800d1c8 <FSMC_ITConfig+0x98>)
 800d19e:	685a      	ldr	r2, [r3, #4]
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	43db      	mvns	r3, r3
 800d1a4:	4013      	ands	r3, r2
 800d1a6:	604b      	str	r3, [r1, #4]
}
 800d1a8:	e006      	b.n	800d1b8 <FSMC_ITConfig+0x88>
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 800d1aa:	4908      	ldr	r1, [pc, #32]	; (800d1cc <FSMC_ITConfig+0x9c>)
 800d1ac:	4b07      	ldr	r3, [pc, #28]	; (800d1cc <FSMC_ITConfig+0x9c>)
 800d1ae:	685a      	ldr	r2, [r3, #4]
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	43db      	mvns	r3, r3
 800d1b4:	4013      	ands	r3, r2
 800d1b6:	604b      	str	r3, [r1, #4]
}
 800d1b8:	bf00      	nop
 800d1ba:	3714      	adds	r7, #20
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr
 800d1c4:	a0000060 	.word	0xa0000060
 800d1c8:	a0000080 	.word	0xa0000080
 800d1cc:	a00000a0 	.word	0xa00000a0

0800d1d0 <FSMC_GetFlagStatus>:
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FSMC_FLAG_FEMPT: Fifo empty Flag. 
  * @retval The new state of FSMC_FLAG (SET or RESET).
  */
FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b085      	sub	sp, #20
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2b10      	cmp	r3, #16
 800d1e6:	d103      	bne.n	800d1f0 <FSMC_GetFlagStatus+0x20>
  {
    tmpsr = FSMC_Bank2->SR2;
 800d1e8:	4b0f      	ldr	r3, [pc, #60]	; (800d228 <FSMC_GetFlagStatus+0x58>)
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	60bb      	str	r3, [r7, #8]
 800d1ee:	e00a      	b.n	800d206 <FSMC_GetFlagStatus+0x36>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1f6:	d103      	bne.n	800d200 <FSMC_GetFlagStatus+0x30>
  {
    tmpsr = FSMC_Bank3->SR3;
 800d1f8:	4b0c      	ldr	r3, [pc, #48]	; (800d22c <FSMC_GetFlagStatus+0x5c>)
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	60bb      	str	r3, [r7, #8]
 800d1fe:	e002      	b.n	800d206 <FSMC_GetFlagStatus+0x36>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 800d200:	4b0b      	ldr	r3, [pc, #44]	; (800d230 <FSMC_GetFlagStatus+0x60>)
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	60bb      	str	r3, [r7, #8]
  } 
  
  /* Get the flag status */
  if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
 800d206:	68ba      	ldr	r2, [r7, #8]
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	4013      	ands	r3, r2
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d002      	beq.n	800d216 <FSMC_GetFlagStatus+0x46>
  {
    bitstatus = SET;
 800d210:	2301      	movs	r3, #1
 800d212:	73fb      	strb	r3, [r7, #15]
 800d214:	e001      	b.n	800d21a <FSMC_GetFlagStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
 800d216:	2300      	movs	r3, #0
 800d218:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800d21a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3714      	adds	r7, #20
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr
 800d228:	a0000060 	.word	0xa0000060
 800d22c:	a0000080 	.word	0xa0000080
 800d230:	a00000a0 	.word	0xa00000a0

0800d234 <FSMC_ClearFlag>:
  *            @arg FSMC_FLAG_Level: Level detection Flag.
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  * @retval None
  */
void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	2b10      	cmp	r3, #16
 800d242:	d107      	bne.n	800d254 <FSMC_ClearFlag+0x20>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 800d244:	4910      	ldr	r1, [pc, #64]	; (800d288 <FSMC_ClearFlag+0x54>)
 800d246:	4b10      	ldr	r3, [pc, #64]	; (800d288 <FSMC_ClearFlag+0x54>)
 800d248:	685a      	ldr	r2, [r3, #4]
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	43db      	mvns	r3, r3
 800d24e:	4013      	ands	r3, r2
 800d250:	604b      	str	r3, [r1, #4]
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
  }
}
 800d252:	e012      	b.n	800d27a <FSMC_ClearFlag+0x46>
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d25a:	d107      	bne.n	800d26c <FSMC_ClearFlag+0x38>
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 800d25c:	490b      	ldr	r1, [pc, #44]	; (800d28c <FSMC_ClearFlag+0x58>)
 800d25e:	4b0b      	ldr	r3, [pc, #44]	; (800d28c <FSMC_ClearFlag+0x58>)
 800d260:	685a      	ldr	r2, [r3, #4]
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	43db      	mvns	r3, r3
 800d266:	4013      	ands	r3, r2
 800d268:	604b      	str	r3, [r1, #4]
}
 800d26a:	e006      	b.n	800d27a <FSMC_ClearFlag+0x46>
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 800d26c:	4908      	ldr	r1, [pc, #32]	; (800d290 <FSMC_ClearFlag+0x5c>)
 800d26e:	4b08      	ldr	r3, [pc, #32]	; (800d290 <FSMC_ClearFlag+0x5c>)
 800d270:	685a      	ldr	r2, [r3, #4]
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	43db      	mvns	r3, r3
 800d276:	4013      	ands	r3, r2
 800d278:	604b      	str	r3, [r1, #4]
}
 800d27a:	bf00      	nop
 800d27c:	370c      	adds	r7, #12
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	a0000060 	.word	0xa0000060
 800d28c:	a0000080 	.word	0xa0000080
 800d290:	a00000a0 	.word	0xa00000a0

0800d294 <FSMC_GetITStatus>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt. 
  * @retval The new state of FSMC_IT (SET or RESET).
  */
ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 800d294:	b480      	push	{r7}
 800d296:	b087      	sub	sp, #28
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	613b      	str	r3, [r7, #16]
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	60fb      	str	r3, [r7, #12]
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2b10      	cmp	r3, #16
 800d2b2:	d103      	bne.n	800d2bc <FSMC_GetITStatus+0x28>
  {
    tmpsr = FSMC_Bank2->SR2;
 800d2b4:	4b14      	ldr	r3, [pc, #80]	; (800d308 <FSMC_GetITStatus+0x74>)
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	613b      	str	r3, [r7, #16]
 800d2ba:	e00a      	b.n	800d2d2 <FSMC_GetITStatus+0x3e>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2c2:	d103      	bne.n	800d2cc <FSMC_GetITStatus+0x38>
  {
    tmpsr = FSMC_Bank3->SR3;
 800d2c4:	4b11      	ldr	r3, [pc, #68]	; (800d30c <FSMC_GetITStatus+0x78>)
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	613b      	str	r3, [r7, #16]
 800d2ca:	e002      	b.n	800d2d2 <FSMC_GetITStatus+0x3e>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 800d2cc:	4b10      	ldr	r3, [pc, #64]	; (800d310 <FSMC_GetITStatus+0x7c>)
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	613b      	str	r3, [r7, #16]
  } 
  
  itstatus = tmpsr & FSMC_IT;
 800d2d2:	693a      	ldr	r2, [r7, #16]
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	4013      	ands	r3, r2
 800d2d8:	60fb      	str	r3, [r7, #12]
  
  itenable = tmpsr & (FSMC_IT >> 3);
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	08da      	lsrs	r2, r3, #3
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	4013      	ands	r3, r2
 800d2e2:	60bb      	str	r3, [r7, #8]
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d005      	beq.n	800d2f6 <FSMC_GetITStatus+0x62>
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d002      	beq.n	800d2f6 <FSMC_GetITStatus+0x62>
  {
    bitstatus = SET;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	75fb      	strb	r3, [r7, #23]
 800d2f4:	e001      	b.n	800d2fa <FSMC_GetITStatus+0x66>
  }
  else
  {
    bitstatus = RESET;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus; 
 800d2fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	371c      	adds	r7, #28
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr
 800d308:	a0000060 	.word	0xa0000060
 800d30c:	a0000080 	.word	0xa0000080
 800d310:	a00000a0 	.word	0xa00000a0

0800d314 <FSMC_ClearITPendingBit>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt.
  * @retval None
  */
void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2b10      	cmp	r3, #16
 800d322:	d108      	bne.n	800d336 <FSMC_ClearITPendingBit+0x22>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 800d324:	4911      	ldr	r1, [pc, #68]	; (800d36c <FSMC_ClearITPendingBit+0x58>)
 800d326:	4b11      	ldr	r3, [pc, #68]	; (800d36c <FSMC_ClearITPendingBit+0x58>)
 800d328:	685a      	ldr	r2, [r3, #4]
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	08db      	lsrs	r3, r3, #3
 800d32e:	43db      	mvns	r3, r3
 800d330:	4013      	ands	r3, r2
 800d332:	604b      	str	r3, [r1, #4]
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
  }
}
 800d334:	e014      	b.n	800d360 <FSMC_ClearITPendingBit+0x4c>
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d33c:	d108      	bne.n	800d350 <FSMC_ClearITPendingBit+0x3c>
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 800d33e:	490c      	ldr	r1, [pc, #48]	; (800d370 <FSMC_ClearITPendingBit+0x5c>)
 800d340:	4b0b      	ldr	r3, [pc, #44]	; (800d370 <FSMC_ClearITPendingBit+0x5c>)
 800d342:	685a      	ldr	r2, [r3, #4]
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	08db      	lsrs	r3, r3, #3
 800d348:	43db      	mvns	r3, r3
 800d34a:	4013      	ands	r3, r2
 800d34c:	604b      	str	r3, [r1, #4]
}
 800d34e:	e007      	b.n	800d360 <FSMC_ClearITPendingBit+0x4c>
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 800d350:	4908      	ldr	r1, [pc, #32]	; (800d374 <FSMC_ClearITPendingBit+0x60>)
 800d352:	4b08      	ldr	r3, [pc, #32]	; (800d374 <FSMC_ClearITPendingBit+0x60>)
 800d354:	685a      	ldr	r2, [r3, #4]
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	08db      	lsrs	r3, r3, #3
 800d35a:	43db      	mvns	r3, r3
 800d35c:	4013      	ands	r3, r2
 800d35e:	604b      	str	r3, [r1, #4]
}
 800d360:	bf00      	nop
 800d362:	370c      	adds	r7, #12
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr
 800d36c:	a0000060 	.word	0xa0000060
 800d370:	a0000080 	.word	0xa0000080
 800d374:	a00000a0 	.word	0xa00000a0

0800d378 <GPIO_DeInit>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices. 
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	4a3c      	ldr	r2, [pc, #240]	; (800d474 <GPIO_DeInit+0xfc>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d108      	bne.n	800d39a <GPIO_DeInit+0x22>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800d388:	2101      	movs	r1, #1
 800d38a:	2001      	movs	r0, #1
 800d38c:	f002 f9ca 	bl	800f724 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800d390:	2100      	movs	r1, #0
 800d392:	2001      	movs	r0, #1
 800d394:	f002 f9c6 	bl	800f724 <RCC_AHB1PeriphResetCmd>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
    }
  }
}
 800d398:	e068      	b.n	800d46c <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOB)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	4a36      	ldr	r2, [pc, #216]	; (800d478 <GPIO_DeInit+0x100>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d108      	bne.n	800d3b4 <GPIO_DeInit+0x3c>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800d3a2:	2101      	movs	r1, #1
 800d3a4:	2002      	movs	r0, #2
 800d3a6:	f002 f9bd 	bl	800f724 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	2002      	movs	r0, #2
 800d3ae:	f002 f9b9 	bl	800f724 <RCC_AHB1PeriphResetCmd>
}
 800d3b2:	e05b      	b.n	800d46c <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOC)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	4a31      	ldr	r2, [pc, #196]	; (800d47c <GPIO_DeInit+0x104>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d108      	bne.n	800d3ce <GPIO_DeInit+0x56>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800d3bc:	2101      	movs	r1, #1
 800d3be:	2004      	movs	r0, #4
 800d3c0:	f002 f9b0 	bl	800f724 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800d3c4:	2100      	movs	r1, #0
 800d3c6:	2004      	movs	r0, #4
 800d3c8:	f002 f9ac 	bl	800f724 <RCC_AHB1PeriphResetCmd>
}
 800d3cc:	e04e      	b.n	800d46c <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOD)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	4a2b      	ldr	r2, [pc, #172]	; (800d480 <GPIO_DeInit+0x108>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d108      	bne.n	800d3e8 <GPIO_DeInit+0x70>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800d3d6:	2101      	movs	r1, #1
 800d3d8:	2008      	movs	r0, #8
 800d3da:	f002 f9a3 	bl	800f724 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800d3de:	2100      	movs	r1, #0
 800d3e0:	2008      	movs	r0, #8
 800d3e2:	f002 f99f 	bl	800f724 <RCC_AHB1PeriphResetCmd>
}
 800d3e6:	e041      	b.n	800d46c <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOE)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	4a26      	ldr	r2, [pc, #152]	; (800d484 <GPIO_DeInit+0x10c>)
 800d3ec:	4293      	cmp	r3, r2
 800d3ee:	d108      	bne.n	800d402 <GPIO_DeInit+0x8a>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800d3f0:	2101      	movs	r1, #1
 800d3f2:	2010      	movs	r0, #16
 800d3f4:	f002 f996 	bl	800f724 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	2010      	movs	r0, #16
 800d3fc:	f002 f992 	bl	800f724 <RCC_AHB1PeriphResetCmd>
}
 800d400:	e034      	b.n	800d46c <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOF)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	4a20      	ldr	r2, [pc, #128]	; (800d488 <GPIO_DeInit+0x110>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d108      	bne.n	800d41c <GPIO_DeInit+0xa4>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800d40a:	2101      	movs	r1, #1
 800d40c:	2020      	movs	r0, #32
 800d40e:	f002 f989 	bl	800f724 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800d412:	2100      	movs	r1, #0
 800d414:	2020      	movs	r0, #32
 800d416:	f002 f985 	bl	800f724 <RCC_AHB1PeriphResetCmd>
}
 800d41a:	e027      	b.n	800d46c <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOG)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	4a1b      	ldr	r2, [pc, #108]	; (800d48c <GPIO_DeInit+0x114>)
 800d420:	4293      	cmp	r3, r2
 800d422:	d108      	bne.n	800d436 <GPIO_DeInit+0xbe>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800d424:	2101      	movs	r1, #1
 800d426:	2040      	movs	r0, #64	; 0x40
 800d428:	f002 f97c 	bl	800f724 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800d42c:	2100      	movs	r1, #0
 800d42e:	2040      	movs	r0, #64	; 0x40
 800d430:	f002 f978 	bl	800f724 <RCC_AHB1PeriphResetCmd>
}
 800d434:	e01a      	b.n	800d46c <GPIO_DeInit+0xf4>
  else if (GPIOx == GPIOH)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	4a15      	ldr	r2, [pc, #84]	; (800d490 <GPIO_DeInit+0x118>)
 800d43a:	4293      	cmp	r3, r2
 800d43c:	d108      	bne.n	800d450 <GPIO_DeInit+0xd8>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800d43e:	2101      	movs	r1, #1
 800d440:	2080      	movs	r0, #128	; 0x80
 800d442:	f002 f96f 	bl	800f724 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800d446:	2100      	movs	r1, #0
 800d448:	2080      	movs	r0, #128	; 0x80
 800d44a:	f002 f96b 	bl	800f724 <RCC_AHB1PeriphResetCmd>
}
 800d44e:	e00d      	b.n	800d46c <GPIO_DeInit+0xf4>
    if (GPIOx == GPIOI)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	4a10      	ldr	r2, [pc, #64]	; (800d494 <GPIO_DeInit+0x11c>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d109      	bne.n	800d46c <GPIO_DeInit+0xf4>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800d458:	2101      	movs	r1, #1
 800d45a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d45e:	f002 f961 	bl	800f724 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800d462:	2100      	movs	r1, #0
 800d464:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d468:	f002 f95c 	bl	800f724 <RCC_AHB1PeriphResetCmd>
}
 800d46c:	bf00      	nop
 800d46e:	3708      	adds	r7, #8
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}
 800d474:	40020000 	.word	0x40020000
 800d478:	40020400 	.word	0x40020400
 800d47c:	40020800 	.word	0x40020800
 800d480:	40020c00 	.word	0x40020c00
 800d484:	40021000 	.word	0x40021000
 800d488:	40021400 	.word	0x40021400
 800d48c:	40021800 	.word	0x40021800
 800d490:	40021c00 	.word	0x40021c00
 800d494:	40022000 	.word	0x40022000

0800d498 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800d498:	b480      	push	{r7}
 800d49a:	b087      	sub	sp, #28
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	617b      	str	r3, [r7, #20]
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	613b      	str	r3, [r7, #16]
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	617b      	str	r3, [r7, #20]
 800d4b2:	e076      	b.n	800d5a2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d4bc:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	681a      	ldr	r2, [r3, #0]
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	4013      	ands	r3, r2
 800d4c6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d165      	bne.n	800d59c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681a      	ldr	r2, [r3, #0]
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	005b      	lsls	r3, r3, #1
 800d4d8:	2103      	movs	r1, #3
 800d4da:	fa01 f303 	lsl.w	r3, r1, r3
 800d4de:	43db      	mvns	r3, r3
 800d4e0:	401a      	ands	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	791b      	ldrb	r3, [r3, #4]
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	005b      	lsls	r3, r3, #1
 800d4f4:	fa01 f303 	lsl.w	r3, r1, r3
 800d4f8:	431a      	orrs	r2, r3
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	791b      	ldrb	r3, [r3, #4]
 800d502:	2b01      	cmp	r3, #1
 800d504:	d003      	beq.n	800d50e <GPIO_Init+0x76>
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	791b      	ldrb	r3, [r3, #4]
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	d12e      	bne.n	800d56c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	689a      	ldr	r2, [r3, #8]
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	005b      	lsls	r3, r3, #1
 800d516:	2103      	movs	r1, #3
 800d518:	fa01 f303 	lsl.w	r3, r1, r3
 800d51c:	43db      	mvns	r3, r3
 800d51e:	401a      	ands	r2, r3
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	689a      	ldr	r2, [r3, #8]
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	795b      	ldrb	r3, [r3, #5]
 800d52c:	4619      	mov	r1, r3
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	005b      	lsls	r3, r3, #1
 800d532:	fa01 f303 	lsl.w	r3, r1, r3
 800d536:	431a      	orrs	r2, r3
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	685a      	ldr	r2, [r3, #4]
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	b29b      	uxth	r3, r3
 800d544:	4619      	mov	r1, r3
 800d546:	2301      	movs	r3, #1
 800d548:	408b      	lsls	r3, r1
 800d54a:	43db      	mvns	r3, r3
 800d54c:	401a      	ands	r2, r3
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	7992      	ldrb	r2, [r2, #6]
 800d55a:	4611      	mov	r1, r2
 800d55c:	697a      	ldr	r2, [r7, #20]
 800d55e:	b292      	uxth	r2, r2
 800d560:	fa01 f202 	lsl.w	r2, r1, r2
 800d564:	b292      	uxth	r2, r2
 800d566:	431a      	orrs	r2, r3
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	68da      	ldr	r2, [r3, #12]
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	b29b      	uxth	r3, r3
 800d574:	005b      	lsls	r3, r3, #1
 800d576:	2103      	movs	r1, #3
 800d578:	fa01 f303 	lsl.w	r3, r1, r3
 800d57c:	43db      	mvns	r3, r3
 800d57e:	401a      	ands	r2, r3
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	68da      	ldr	r2, [r3, #12]
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	79db      	ldrb	r3, [r3, #7]
 800d58c:	4619      	mov	r1, r3
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	005b      	lsls	r3, r3, #1
 800d592:	fa01 f303 	lsl.w	r3, r1, r3
 800d596:	431a      	orrs	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	3301      	adds	r3, #1
 800d5a0:	617b      	str	r3, [r7, #20]
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	2b0f      	cmp	r3, #15
 800d5a6:	d985      	bls.n	800d4b4 <GPIO_Init+0x1c>
    }
  }
}
 800d5a8:	bf00      	nop
 800d5aa:	371c      	adds	r7, #28
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr

0800d5b4 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	71da      	strb	r2, [r3, #7]
}
 800d5dc:	bf00      	nop
 800d5de:	370c      	adds	r7, #12
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b085      	sub	sp, #20
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 800d5f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d5f8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 800d5fa:	887a      	ldrh	r2, [r7, #2]
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	4313      	orrs	r3, r2
 800d600:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800d602:	68fa      	ldr	r2, [r7, #12]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800d608:	887a      	ldrh	r2, [r7, #2]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800d60e:	68fa      	ldr	r2, [r7, #12]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	69db      	ldr	r3, [r3, #28]
 800d618:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	69db      	ldr	r3, [r3, #28]
 800d61e:	60fb      	str	r3, [r7, #12]
}
 800d620:	bf00      	nop
 800d622:	3714      	adds	r7, #20
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b085      	sub	sp, #20
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	460b      	mov	r3, r1
 800d636:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800d638:	2300      	movs	r3, #0
 800d63a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	691a      	ldr	r2, [r3, #16]
 800d640:	887b      	ldrh	r3, [r7, #2]
 800d642:	4013      	ands	r3, r2
 800d644:	2b00      	cmp	r3, #0
 800d646:	d002      	beq.n	800d64e <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800d648:	2301      	movs	r3, #1
 800d64a:	73fb      	strb	r3, [r7, #15]
 800d64c:	e001      	b.n	800d652 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800d64e:	2300      	movs	r3, #0
 800d650:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d652:	7bfb      	ldrb	r3, [r7, #15]
}
 800d654:	4618      	mov	r0, r3
 800d656:	3714      	adds	r7, #20
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <GPIO_ReadInputData>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices. 
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	691b      	ldr	r3, [r3, #16]
 800d66c:	b29b      	uxth	r3, r3
}
 800d66e:	4618      	mov	r0, r3
 800d670:	370c      	adds	r7, #12
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr

0800d67a <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d67a:	b480      	push	{r7}
 800d67c:	b085      	sub	sp, #20
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
 800d682:	460b      	mov	r3, r1
 800d684:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800d686:	2300      	movs	r3, #0
 800d688:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	695a      	ldr	r2, [r3, #20]
 800d68e:	887b      	ldrh	r3, [r7, #2]
 800d690:	4013      	ands	r3, r2
 800d692:	2b00      	cmp	r3, #0
 800d694:	d002      	beq.n	800d69c <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800d696:	2301      	movs	r3, #1
 800d698:	73fb      	strb	r3, [r7, #15]
 800d69a:	e001      	b.n	800d6a0 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800d69c:	2300      	movs	r3, #0
 800d69e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3714      	adds	r7, #20
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr

0800d6ae <GPIO_ReadOutputData>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for 
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 800d6ae:	b480      	push	{r7}
 800d6b0:	b083      	sub	sp, #12
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	695b      	ldr	r3, [r3, #20]
 800d6ba:	b29b      	uxth	r3, r3
}
 800d6bc:	4618      	mov	r0, r3
 800d6be:	370c      	adds	r7, #12
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	887a      	ldrh	r2, [r7, #2]
 800d6d8:	831a      	strh	r2, [r3, #24]
}
 800d6da:	bf00      	nop
 800d6dc:	370c      	adds	r7, #12
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr

0800d6e6 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d6e6:	b480      	push	{r7}
 800d6e8:	b083      	sub	sp, #12
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	887a      	ldrh	r2, [r7, #2]
 800d6f6:	835a      	strh	r2, [r3, #26]
}
 800d6f8:	bf00      	nop
 800d6fa:	370c      	adds	r7, #12
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr

0800d704 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800d704:	b480      	push	{r7}
 800d706:	b083      	sub	sp, #12
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	460b      	mov	r3, r1
 800d70e:	807b      	strh	r3, [r7, #2]
 800d710:	4613      	mov	r3, r2
 800d712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800d714:	787b      	ldrb	r3, [r7, #1]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d003      	beq.n	800d722 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	887a      	ldrh	r2, [r7, #2]
 800d71e:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 800d720:	e002      	b.n	800d728 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	887a      	ldrh	r2, [r7, #2]
 800d726:	835a      	strh	r2, [r3, #26]
}
 800d728:	bf00      	nop
 800d72a:	370c      	adds	r7, #12
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <GPIO_Write>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 800d734:	b480      	push	{r7}
 800d736:	b083      	sub	sp, #12
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	460b      	mov	r3, r1
 800d73e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800d740:	887a      	ldrh	r2, [r7, #2]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	615a      	str	r2, [r3, #20]
}
 800d746:	bf00      	nop
 800d748:	370c      	adds	r7, #12
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr

0800d752 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d752:	b480      	push	{r7}
 800d754:	b083      	sub	sp, #12
 800d756:	af00      	add	r7, sp, #0
 800d758:	6078      	str	r0, [r7, #4]
 800d75a:	460b      	mov	r3, r1
 800d75c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	695a      	ldr	r2, [r3, #20]
 800d762:	887b      	ldrh	r3, [r7, #2]
 800d764:	405a      	eors	r2, r3
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	615a      	str	r2, [r3, #20]
}
 800d76a:	bf00      	nop
 800d76c:	370c      	adds	r7, #12
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr

0800d776 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800d776:	b480      	push	{r7}
 800d778:	b085      	sub	sp, #20
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
 800d77e:	460b      	mov	r3, r1
 800d780:	807b      	strh	r3, [r7, #2]
 800d782:	4613      	mov	r3, r2
 800d784:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800d786:	2300      	movs	r3, #0
 800d788:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800d78a:	2300      	movs	r3, #0
 800d78c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800d78e:	787a      	ldrb	r2, [r7, #1]
 800d790:	887b      	ldrh	r3, [r7, #2]
 800d792:	f003 0307 	and.w	r3, r3, #7
 800d796:	009b      	lsls	r3, r3, #2
 800d798:	fa02 f303 	lsl.w	r3, r2, r3
 800d79c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800d79e:	887b      	ldrh	r3, [r7, #2]
 800d7a0:	08db      	lsrs	r3, r3, #3
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	887b      	ldrh	r3, [r7, #2]
 800d7a8:	08db      	lsrs	r3, r3, #3
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	3208      	adds	r2, #8
 800d7b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d7b6:	887b      	ldrh	r3, [r7, #2]
 800d7b8:	f003 0307 	and.w	r3, r3, #7
 800d7bc:	009b      	lsls	r3, r3, #2
 800d7be:	210f      	movs	r1, #15
 800d7c0:	fa01 f303 	lsl.w	r3, r1, r3
 800d7c4:	43db      	mvns	r3, r3
 800d7c6:	ea02 0103 	and.w	r1, r2, r3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f100 0208 	add.w	r2, r0, #8
 800d7d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800d7d4:	887b      	ldrh	r3, [r7, #2]
 800d7d6:	08db      	lsrs	r3, r3, #3
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	461a      	mov	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	3208      	adds	r2, #8
 800d7e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800d7ea:	887b      	ldrh	r3, [r7, #2]
 800d7ec:	08db      	lsrs	r3, r3, #3
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	3208      	adds	r2, #8
 800d7f6:	68b9      	ldr	r1, [r7, #8]
 800d7f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800d7fc:	bf00      	nop
 800d7fe:	3714      	adds	r7, #20
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <HASH_DeInit>:
  * @brief  De-initializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	af00      	add	r7, sp, #0
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 800d80c:	2101      	movs	r1, #1
 800d80e:	2020      	movs	r0, #32
 800d810:	f001 ffa8 	bl	800f764 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 800d814:	2100      	movs	r1, #0
 800d816:	2020      	movs	r0, #32
 800d818:	f001 ffa4 	bl	800f764 <RCC_AHB2PeriphResetCmd>
}
 800d81c:	bf00      	nop
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <HASH_Init>:
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 800d820:	b480      	push	{r7}
 800d822:	b083      	sub	sp, #12
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 800d828:	4a18      	ldr	r2, [pc, #96]	; (800d88c <HASH_Init+0x6c>)
 800d82a:	4b18      	ldr	r3, [pc, #96]	; (800d88c <HASH_Init+0x6c>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d836:	6013      	str	r3, [r2, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800d838:	4814      	ldr	r0, [pc, #80]	; (800d88c <HASH_Init+0x6c>)
 800d83a:	4b14      	ldr	r3, [pc, #80]	; (800d88c <HASH_Init+0x6c>)
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6819      	ldr	r1, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	689b      	ldr	r3, [r3, #8]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800d846:	4319      	orrs	r1, r3
               HASH_InitStruct->HASH_AlgoMode);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	685b      	ldr	r3, [r3, #4]
               HASH_InitStruct->HASH_DataType | \
 800d84c:	430b      	orrs	r3, r1
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800d84e:	4313      	orrs	r3, r2
 800d850:	6003      	str	r3, [r0, #0]
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	2b40      	cmp	r3, #64	; 0x40
 800d858:	d10c      	bne.n	800d874 <HASH_Init+0x54>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 800d85a:	4a0c      	ldr	r2, [pc, #48]	; (800d88c <HASH_Init+0x6c>)
 800d85c:	4b0b      	ldr	r3, [pc, #44]	; (800d88c <HASH_Init+0x6c>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d864:	6013      	str	r3, [r2, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 800d866:	4909      	ldr	r1, [pc, #36]	; (800d88c <HASH_Init+0x6c>)
 800d868:	4b08      	ldr	r3, [pc, #32]	; (800d88c <HASH_Init+0x6c>)
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	4313      	orrs	r3, r2
 800d872:	600b      	str	r3, [r1, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 800d874:	4a05      	ldr	r2, [pc, #20]	; (800d88c <HASH_Init+0x6c>)
 800d876:	4b05      	ldr	r3, [pc, #20]	; (800d88c <HASH_Init+0x6c>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f043 0304 	orr.w	r3, r3, #4
 800d87e:	6013      	str	r3, [r2, #0]
}
 800d880:	bf00      	nop
 800d882:	370c      	adds	r7, #12
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr
 800d88c:	50060400 	.word	0x50060400

0800d890 <HASH_StructInit>:
  *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
  *          Data type selected is 32b and HMAC Key Type is short key.  
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
 800d890:	b480      	push	{r7}
 800d892:	b083      	sub	sp, #12
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	601a      	str	r2, [r3, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	605a      	str	r2, [r3, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	609a      	str	r2, [r3, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	60da      	str	r2, [r3, #12]
}
 800d8b0:	bf00      	nop
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <HASH_Reset>:
  *         interrupt and HASH_FLAG_DCIS flag. 
  * @param  None
  * @retval None
  */
void HASH_Reset(void)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	af00      	add	r7, sp, #0
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 800d8c0:	4a05      	ldr	r2, [pc, #20]	; (800d8d8 <HASH_Reset+0x1c>)
 800d8c2:	4b05      	ldr	r3, [pc, #20]	; (800d8d8 <HASH_Reset+0x1c>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f043 0304 	orr.w	r3, r3, #4
 800d8ca:	6013      	str	r3, [r2, #0]
}
 800d8cc:	bf00      	nop
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	50060400 	.word	0x50060400

0800d8dc <HASH_SetLastWordValidBitsNbr>:
  * @note   The Number of valid bits must be set before to start the message 
  *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
  * @retval None
  */
void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 800d8e6:	4a09      	ldr	r2, [pc, #36]	; (800d90c <HASH_SetLastWordValidBitsNbr+0x30>)
 800d8e8:	4b08      	ldr	r3, [pc, #32]	; (800d90c <HASH_SetLastWordValidBitsNbr+0x30>)
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	f023 031f 	bic.w	r3, r3, #31
 800d8f0:	6093      	str	r3, [r2, #8]
  HASH->STR |= ValidNumber;
 800d8f2:	4906      	ldr	r1, [pc, #24]	; (800d90c <HASH_SetLastWordValidBitsNbr+0x30>)
 800d8f4:	4b05      	ldr	r3, [pc, #20]	; (800d90c <HASH_SetLastWordValidBitsNbr+0x30>)
 800d8f6:	689a      	ldr	r2, [r3, #8]
 800d8f8:	88fb      	ldrh	r3, [r7, #6]
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	608b      	str	r3, [r1, #8]
}
 800d8fe:	bf00      	nop
 800d900:	370c      	adds	r7, #12
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr
 800d90a:	bf00      	nop
 800d90c:	50060400 	.word	0x50060400

0800d910 <HASH_DataIn>:
  * @brief  Writes data in the Data Input FIFO
  * @param  Data: new data of the message to be processed.
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 800d918:	4a04      	ldr	r2, [pc, #16]	; (800d92c <HASH_DataIn+0x1c>)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6053      	str	r3, [r2, #4]
}
 800d91e:	bf00      	nop
 800d920:	370c      	adds	r7, #12
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
 800d92a:	bf00      	nop
 800d92c:	50060400 	.word	0x50060400

0800d930 <HASH_GetInFIFOWordsNbr>:
  * @brief  Returns the number of words already pushed into the IN FIFO.
  * @param  None
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
 800d930:	b480      	push	{r7}
 800d932:	af00      	add	r7, sp, #0
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 800d934:	4b05      	ldr	r3, [pc, #20]	; (800d94c <HASH_GetInFIFOWordsNbr+0x1c>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	0a1b      	lsrs	r3, r3, #8
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	f003 030f 	and.w	r3, r3, #15
 800d940:	b2db      	uxtb	r3, r3
}
 800d942:	4618      	mov	r0, r3
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr
 800d94c:	50060400 	.word	0x50060400

0800d950 <HASH_GetDigest>:
  * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
  *         hold the message digest result 
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 800d958:	4b12      	ldr	r3, [pc, #72]	; (800d9a4 <HASH_GetDigest+0x54>)
 800d95a:	68da      	ldr	r2, [r3, #12]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	601a      	str	r2, [r3, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 800d960:	4b10      	ldr	r3, [pc, #64]	; (800d9a4 <HASH_GetDigest+0x54>)
 800d962:	691a      	ldr	r2, [r3, #16]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	605a      	str	r2, [r3, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 800d968:	4b0e      	ldr	r3, [pc, #56]	; (800d9a4 <HASH_GetDigest+0x54>)
 800d96a:	695a      	ldr	r2, [r3, #20]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	609a      	str	r2, [r3, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 800d970:	4b0c      	ldr	r3, [pc, #48]	; (800d9a4 <HASH_GetDigest+0x54>)
 800d972:	699a      	ldr	r2, [r3, #24]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	60da      	str	r2, [r3, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 800d978:	4b0a      	ldr	r3, [pc, #40]	; (800d9a4 <HASH_GetDigest+0x54>)
 800d97a:	69da      	ldr	r2, [r3, #28]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	611a      	str	r2, [r3, #16]
  HASH_MessageDigest->Data[5] = HASH_DIGEST->HR[5];
 800d980:	4b09      	ldr	r3, [pc, #36]	; (800d9a8 <HASH_GetDigest+0x58>)
 800d982:	695a      	ldr	r2, [r3, #20]
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	615a      	str	r2, [r3, #20]
  HASH_MessageDigest->Data[6] = HASH_DIGEST->HR[6];
 800d988:	4b07      	ldr	r3, [pc, #28]	; (800d9a8 <HASH_GetDigest+0x58>)
 800d98a:	699a      	ldr	r2, [r3, #24]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	619a      	str	r2, [r3, #24]
  HASH_MessageDigest->Data[7] = HASH_DIGEST->HR[7];
 800d990:	4b05      	ldr	r3, [pc, #20]	; (800d9a8 <HASH_GetDigest+0x58>)
 800d992:	69da      	ldr	r2, [r3, #28]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	61da      	str	r2, [r3, #28]
}
 800d998:	bf00      	nop
 800d99a:	370c      	adds	r7, #12
 800d99c:	46bd      	mov	sp, r7
 800d99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a2:	4770      	bx	lr
 800d9a4:	50060400 	.word	0x50060400
 800d9a8:	50060710 	.word	0x50060710

0800d9ac <HASH_StartDigest>:
  * @brief  Starts the message padding and calculation of the final message     
  * @param  None
  * @retval None
  */
void HASH_StartDigest(void)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	af00      	add	r7, sp, #0
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 800d9b0:	4a05      	ldr	r2, [pc, #20]	; (800d9c8 <HASH_StartDigest+0x1c>)
 800d9b2:	4b05      	ldr	r3, [pc, #20]	; (800d9c8 <HASH_StartDigest+0x1c>)
 800d9b4:	689b      	ldr	r3, [r3, #8]
 800d9b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9ba:	6093      	str	r3, [r2, #8]
}
 800d9bc:	bf00      	nop
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr
 800d9c6:	bf00      	nop
 800d9c8:	50060400 	.word	0x50060400

0800d9cc <HASH_SaveContext>:
  * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
  *         the repository for current context.
  * @retval None
  */
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b085      	sub	sp, #20
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	73fb      	strb	r3, [r7, #15]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 800d9d8:	4b12      	ldr	r3, [pc, #72]	; (800da24 <HASH_SaveContext+0x58>)
 800d9da:	6a1a      	ldr	r2, [r3, #32]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	601a      	str	r2, [r3, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 800d9e0:	4b10      	ldr	r3, [pc, #64]	; (800da24 <HASH_SaveContext+0x58>)
 800d9e2:	689a      	ldr	r2, [r3, #8]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	605a      	str	r2, [r3, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 800d9e8:	4b0e      	ldr	r3, [pc, #56]	; (800da24 <HASH_SaveContext+0x58>)
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	609a      	str	r2, [r3, #8]
  for(i=0; i<=53;i++)
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	73fb      	strb	r3, [r7, #15]
 800d9f4:	e00d      	b.n	800da12 <HASH_SaveContext+0x46>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 800d9f6:	7bfb      	ldrb	r3, [r7, #15]
 800d9f8:	490a      	ldr	r1, [pc, #40]	; (800da24 <HASH_SaveContext+0x58>)
 800d9fa:	7bfa      	ldrb	r2, [r7, #15]
 800d9fc:	323e      	adds	r2, #62	; 0x3e
 800d9fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800da02:	6879      	ldr	r1, [r7, #4]
 800da04:	3302      	adds	r3, #2
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	440b      	add	r3, r1
 800da0a:	605a      	str	r2, [r3, #4]
  for(i=0; i<=53;i++)
 800da0c:	7bfb      	ldrb	r3, [r7, #15]
 800da0e:	3301      	adds	r3, #1
 800da10:	73fb      	strb	r3, [r7, #15]
 800da12:	7bfb      	ldrb	r3, [r7, #15]
 800da14:	2b35      	cmp	r3, #53	; 0x35
 800da16:	d9ee      	bls.n	800d9f6 <HASH_SaveContext+0x2a>
  }   
}
 800da18:	bf00      	nop
 800da1a:	3714      	adds	r7, #20
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr
 800da24:	50060400 	.word	0x50060400

0800da28 <HASH_RestoreContext>:
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 800da28:	b480      	push	{r7}
 800da2a:	b085      	sub	sp, #20
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800da30:	2300      	movs	r3, #0
 800da32:	73fb      	strb	r3, [r7, #15]
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 800da34:	4a16      	ldr	r2, [pc, #88]	; (800da90 <HASH_RestoreContext+0x68>)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	6213      	str	r3, [r2, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 800da3c:	4a14      	ldr	r2, [pc, #80]	; (800da90 <HASH_RestoreContext+0x68>)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	6093      	str	r3, [r2, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 800da44:	4a12      	ldr	r2, [pc, #72]	; (800da90 <HASH_RestoreContext+0x68>)
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	689b      	ldr	r3, [r3, #8]
 800da4a:	6013      	str	r3, [r2, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 800da4c:	4a10      	ldr	r2, [pc, #64]	; (800da90 <HASH_RestoreContext+0x68>)
 800da4e:	4b10      	ldr	r3, [pc, #64]	; (800da90 <HASH_RestoreContext+0x68>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f043 0304 	orr.w	r3, r3, #4
 800da56:	6013      	str	r3, [r2, #0]
  
   /* continue restoring context registers */     
  for(i=0; i<=53;i++)
 800da58:	2300      	movs	r3, #0
 800da5a:	73fb      	strb	r3, [r7, #15]
 800da5c:	e00e      	b.n	800da7c <HASH_RestoreContext+0x54>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 800da5e:	480c      	ldr	r0, [pc, #48]	; (800da90 <HASH_RestoreContext+0x68>)
 800da60:	7bf9      	ldrb	r1, [r7, #15]
 800da62:	7bfb      	ldrb	r3, [r7, #15]
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	3302      	adds	r3, #2
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	4413      	add	r3, r2
 800da6c:	685a      	ldr	r2, [r3, #4]
 800da6e:	f101 033e 	add.w	r3, r1, #62	; 0x3e
 800da72:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for(i=0; i<=53;i++)
 800da76:	7bfb      	ldrb	r3, [r7, #15]
 800da78:	3301      	adds	r3, #1
 800da7a:	73fb      	strb	r3, [r7, #15]
 800da7c:	7bfb      	ldrb	r3, [r7, #15]
 800da7e:	2b35      	cmp	r3, #53	; 0x35
 800da80:	d9ed      	bls.n	800da5e <HASH_RestoreContext+0x36>
  }   
}
 800da82:	bf00      	nop
 800da84:	3714      	adds	r7, #20
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr
 800da8e:	bf00      	nop
 800da90:	50060400 	.word	0x50060400

0800da94 <HASH_AutoStartDigest>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_AutoStartDigest(FunctionalState NewState)
{
 800da94:	b480      	push	{r7}
 800da96:	b083      	sub	sp, #12
 800da98:	af00      	add	r7, sp, #0
 800da9a:	4603      	mov	r3, r0
 800da9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800da9e:	79fb      	ldrb	r3, [r7, #7]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d006      	beq.n	800dab2 <HASH_AutoStartDigest+0x1e>
  {
    /* Enable the auto start of the final message digest at the end of DMA transfer */
    HASH->CR &= ~HASH_CR_MDMAT;
 800daa4:	4a09      	ldr	r2, [pc, #36]	; (800dacc <HASH_AutoStartDigest+0x38>)
 800daa6:	4b09      	ldr	r3, [pc, #36]	; (800dacc <HASH_AutoStartDigest+0x38>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800daae:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the auto start of the final message digest at the end of DMA transfer */
    HASH->CR |= HASH_CR_MDMAT;
  }
}
 800dab0:	e005      	b.n	800dabe <HASH_AutoStartDigest+0x2a>
    HASH->CR |= HASH_CR_MDMAT;
 800dab2:	4a06      	ldr	r2, [pc, #24]	; (800dacc <HASH_AutoStartDigest+0x38>)
 800dab4:	4b05      	ldr	r3, [pc, #20]	; (800dacc <HASH_AutoStartDigest+0x38>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800dabc:	6013      	str	r3, [r2, #0]
}
 800dabe:	bf00      	nop
 800dac0:	370c      	adds	r7, #12
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr
 800daca:	bf00      	nop
 800dacc:	50060400 	.word	0x50060400

0800dad0 <HASH_DMACmd>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_DMACmd(FunctionalState NewState)
{
 800dad0:	b480      	push	{r7}
 800dad2:	b083      	sub	sp, #12
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	4603      	mov	r3, r0
 800dad8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800dada:	79fb      	ldrb	r3, [r7, #7]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d006      	beq.n	800daee <HASH_DMACmd+0x1e>
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 800dae0:	4a09      	ldr	r2, [pc, #36]	; (800db08 <HASH_DMACmd+0x38>)
 800dae2:	4b09      	ldr	r3, [pc, #36]	; (800db08 <HASH_DMACmd+0x38>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f043 0308 	orr.w	r3, r3, #8
 800daea:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
  }
}
 800daec:	e005      	b.n	800dafa <HASH_DMACmd+0x2a>
    HASH->CR &= ~HASH_CR_DMAE;
 800daee:	4a06      	ldr	r2, [pc, #24]	; (800db08 <HASH_DMACmd+0x38>)
 800daf0:	4b05      	ldr	r3, [pc, #20]	; (800db08 <HASH_DMACmd+0x38>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f023 0308 	bic.w	r3, r3, #8
 800daf8:	6013      	str	r3, [r2, #0]
}
 800dafa:	bf00      	nop
 800dafc:	370c      	adds	r7, #12
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr
 800db06:	bf00      	nop
 800db08:	50060400 	.word	0x50060400

0800db0c <HASH_ITConfig>:
  * @param  NewState: new state of the specified HASH interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_ITConfig(uint32_t HASH_IT, FunctionalState NewState)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	460b      	mov	r3, r1
 800db16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800db18:	78fb      	ldrb	r3, [r7, #3]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d006      	beq.n	800db2c <HASH_ITConfig+0x20>
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 800db1e:	490a      	ldr	r1, [pc, #40]	; (800db48 <HASH_ITConfig+0x3c>)
 800db20:	4b09      	ldr	r3, [pc, #36]	; (800db48 <HASH_ITConfig+0x3c>)
 800db22:	6a1a      	ldr	r2, [r3, #32]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	4313      	orrs	r3, r2
 800db28:	620b      	str	r3, [r1, #32]
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint32_t)(~HASH_IT);
  }
}
 800db2a:	e006      	b.n	800db3a <HASH_ITConfig+0x2e>
    HASH->IMR &= (uint32_t)(~HASH_IT);
 800db2c:	4906      	ldr	r1, [pc, #24]	; (800db48 <HASH_ITConfig+0x3c>)
 800db2e:	4b06      	ldr	r3, [pc, #24]	; (800db48 <HASH_ITConfig+0x3c>)
 800db30:	6a1a      	ldr	r2, [r3, #32]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	43db      	mvns	r3, r3
 800db36:	4013      	ands	r3, r2
 800db38:	620b      	str	r3, [r1, #32]
}
 800db3a:	bf00      	nop
 800db3c:	370c      	adds	r7, #12
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr
 800db46:	bf00      	nop
 800db48:	50060400 	.word	0x50060400

0800db4c <HASH_GetFlagStatus>:
  *            @arg HASH_FLAG_DMAS: DMAS Status flag
  *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
  * @retval The new state of HASH_FLAG (SET or RESET)
  */
FlagStatus HASH_GetFlagStatus(uint32_t HASH_FLAG)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b085      	sub	sp, #20
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800db54:	2300      	movs	r3, #0
 800db56:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 800db58:	2300      	movs	r3, #0
 800db5a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint32_t)RESET ) 
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800db62:	2b00      	cmp	r3, #0
 800db64:	d003      	beq.n	800db6e <HASH_GetFlagStatus+0x22>
  {
    tempreg = HASH->CR;
 800db66:	4b0c      	ldr	r3, [pc, #48]	; (800db98 <HASH_GetFlagStatus+0x4c>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	60bb      	str	r3, [r7, #8]
 800db6c:	e002      	b.n	800db74 <HASH_GetFlagStatus+0x28>
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 800db6e:	4b0a      	ldr	r3, [pc, #40]	; (800db98 <HASH_GetFlagStatus+0x4c>)
 800db70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db72:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint32_t)RESET)
 800db74:	68ba      	ldr	r2, [r7, #8]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	4013      	ands	r3, r2
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d002      	beq.n	800db84 <HASH_GetFlagStatus+0x38>
  {
    /* HASH is set */
    bitstatus = SET;
 800db7e:	2301      	movs	r3, #1
 800db80:	73fb      	strb	r3, [r7, #15]
 800db82:	e001      	b.n	800db88 <HASH_GetFlagStatus+0x3c>
  }
  else
  {
    /* HASH_FLAG is reset */
    bitstatus = RESET;
 800db84:	2300      	movs	r3, #0
 800db86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
 800db88:	7bfb      	ldrb	r3, [r7, #15]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3714      	adds	r7, #20
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop
 800db98:	50060400 	.word	0x50060400

0800db9c <HASH_ClearFlag>:
  *            @arg HASH_FLAG_DINIS: Data Input Flag
  *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
  * @retval None
  */
void HASH_ClearFlag(uint32_t HASH_FLAG)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 800dba4:	4a04      	ldr	r2, [pc, #16]	; (800dbb8 <HASH_ClearFlag+0x1c>)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	43db      	mvns	r3, r3
 800dbaa:	6253      	str	r3, [r2, #36]	; 0x24
}
 800dbac:	bf00      	nop
 800dbae:	370c      	adds	r7, #12
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr
 800dbb8:	50060400 	.word	0x50060400

0800dbbc <HASH_GetITStatus>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval The new state of HASH_IT (SET or RESET).
  */
ITStatus HASH_GetITStatus(uint32_t HASH_IT)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b085      	sub	sp, #20
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 800dbcc:	4b0b      	ldr	r3, [pc, #44]	; (800dbfc <HASH_GetITStatus+0x40>)
 800dbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd0:	60bb      	str	r3, [r7, #8]

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 800dbd2:	4b0a      	ldr	r3, [pc, #40]	; (800dbfc <HASH_GetITStatus+0x40>)
 800dbd4:	6a1a      	ldr	r2, [r3, #32]
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	401a      	ands	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	4013      	ands	r3, r2
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d002      	beq.n	800dbe8 <HASH_GetITStatus+0x2c>
  {
    /* HASH_IT is set */
    bitstatus = SET;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	73fb      	strb	r3, [r7, #15]
 800dbe6:	e001      	b.n	800dbec <HASH_GetITStatus+0x30>
  }
  else
  {
    /* HASH_IT is reset */
    bitstatus = RESET;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the HASH_IT status */
  return bitstatus;
 800dbec:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3714      	adds	r7, #20
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr
 800dbfa:	bf00      	nop
 800dbfc:	50060400 	.word	0x50060400

0800dc00 <HASH_ClearITPendingBit>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval None
  */
void HASH_ClearITPendingBit(uint32_t HASH_IT)
{
 800dc00:	b480      	push	{r7}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint32_t)(~HASH_IT);
 800dc08:	4a04      	ldr	r2, [pc, #16]	; (800dc1c <HASH_ClearITPendingBit+0x1c>)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	43db      	mvns	r3, r3
 800dc0e:	6253      	str	r3, [r2, #36]	; 0x24
}
 800dc10:	bf00      	nop
 800dc12:	370c      	adds	r7, #12
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr
 800dc1c:	50060400 	.word	0x50060400

0800dc20 <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b0a0      	sub	sp, #128	; 0x80
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	837b      	strh	r3, [r7, #26]
  uint32_t i = 0;
 800dc30:	2300      	movs	r3, #0
 800dc32:	67fb      	str	r3, [r7, #124]	; 0x7c
  __IO uint32_t counter = 0;
 800dc34:	2300      	movs	r3, #0
 800dc36:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	673b      	str	r3, [r7, #112]	; 0x70
  ErrorStatus status = SUCCESS;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  uint32_t inputaddr  = (uint32_t)Input;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t outputaddr = (uint32_t)Output;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	66fb      	str	r3, [r7, #108]	; 0x6c


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	f003 0303 	and.w	r3, r3, #3
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	00db      	lsls	r3, r3, #3
 800dc56:	b29b      	uxth	r3, r3
 800dc58:	837b      	strh	r3, [r7, #26]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800dc5a:	f7ff fdd5 	bl	800d808 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 800dc5e:	2380      	movs	r3, #128	; 0x80
 800dc60:	63fb      	str	r3, [r7, #60]	; 0x3c
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 800dc62:	2300      	movs	r3, #0
 800dc64:	643b      	str	r3, [r7, #64]	; 0x40
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800dc66:	2320      	movs	r3, #32
 800dc68:	647b      	str	r3, [r7, #68]	; 0x44
  HASH_Init(&MD5_HASH_InitStructure);
 800dc6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7ff fdd6 	bl	800d820 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800dc74:	8b7b      	ldrh	r3, [r7, #26]
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f7ff fe2f 	bl	800d8dc <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800dc7e:	2300      	movs	r3, #0
 800dc80:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dc82:	e00a      	b.n	800dc9a <HASH_MD5+0x7a>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800dc84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7ff fe41 	bl	800d910 <HASH_DataIn>
    inputaddr+=4;
 800dc8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc90:	3304      	adds	r3, #4
 800dc92:	677b      	str	r3, [r7, #116]	; 0x74
  for(i=0; i<Ilen; i+=4)
 800dc94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc96:	3304      	adds	r3, #4
 800dc98:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dc9a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d3f0      	bcc.n	800dc84 <HASH_MD5+0x64>
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800dca2:	f7ff fe83 	bl	800d9ac <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800dca6:	2008      	movs	r0, #8
 800dca8:	f7ff ff50 	bl	800db4c <HASH_GetFlagStatus>
 800dcac:	4603      	mov	r3, r0
 800dcae:	673b      	str	r3, [r7, #112]	; 0x70
    counter++;
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	617b      	str	r3, [r7, #20]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcbc:	d002      	beq.n	800dcc4 <HASH_MD5+0xa4>
 800dcbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d1f0      	bne.n	800dca6 <HASH_MD5+0x86>

  if (busystatus != RESET)
 800dcc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d003      	beq.n	800dcd2 <HASH_MD5+0xb2>
  {
     status = ERROR;
 800dcca:	2300      	movs	r3, #0
 800dccc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800dcd0:	e02d      	b.n	800dd2e <HASH_MD5+0x10e>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 800dcd2:	f107 031c 	add.w	r3, r7, #28
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7ff fe3a 	bl	800d950 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800dcdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcde:	69fa      	ldr	r2, [r7, #28]
 800dce0:	653a      	str	r2, [r7, #80]	; 0x50
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800dce2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dce4:	ba12      	rev	r2, r2
 800dce6:	64fa      	str	r2, [r7, #76]	; 0x4c
  return(result);
 800dce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dcea:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800dcec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcee:	3304      	adds	r3, #4
 800dcf0:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800dcf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcf4:	6a3a      	ldr	r2, [r7, #32]
 800dcf6:	65ba      	str	r2, [r7, #88]	; 0x58
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800dcf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dcfa:	ba12      	rev	r2, r2
 800dcfc:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 800dcfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd00:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800dd02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd04:	3304      	adds	r3, #4
 800dd06:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800dd08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd0c:	663a      	str	r2, [r7, #96]	; 0x60
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800dd0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dd10:	ba12      	rev	r2, r2
 800dd12:	65fa      	str	r2, [r7, #92]	; 0x5c
  return(result);
 800dd14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dd16:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800dd18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd1a:	3304      	adds	r3, #4
 800dd1c:	66fb      	str	r3, [r7, #108]	; 0x6c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800dd1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd22:	66ba      	str	r2, [r7, #104]	; 0x68
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800dd24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dd26:	ba12      	rev	r2, r2
 800dd28:	667a      	str	r2, [r7, #100]	; 0x64
  return(result);
 800dd2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dd2c:	601a      	str	r2, [r3, #0]
  }
  return status; 
 800dd2e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3780      	adds	r7, #128	; 0x80
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}

0800dd3a <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 800dd3a:	b580      	push	{r7, lr}
 800dd3c:	b0a0      	sub	sp, #128	; 0x80
 800dd3e:	af00      	add	r7, sp, #0
 800dd40:	60f8      	str	r0, [r7, #12]
 800dd42:	60b9      	str	r1, [r7, #8]
 800dd44:	607a      	str	r2, [r7, #4]
 800dd46:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	82fb      	strh	r3, [r7, #22]
  __IO uint16_t nbvalidbitskey = 0;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	82bb      	strh	r3, [r7, #20]
  uint32_t i = 0;
 800dd50:	2300      	movs	r3, #0
 800dd52:	67fb      	str	r3, [r7, #124]	; 0x7c
  __IO uint32_t counter = 0;
 800dd54:	2300      	movs	r3, #0
 800dd56:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  ErrorStatus status = SUCCESS;
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  uint32_t keyaddr    = (uint32_t)Key;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t inputaddr  = (uint32_t)Input;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t outputaddr = (uint32_t)Output;
 800dd6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd6e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	f003 0303 	and.w	r3, r3, #3
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	00db      	lsls	r3, r3, #3
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	82fb      	strh	r3, [r7, #22]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	f003 0303 	and.w	r3, r3, #3
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	00db      	lsls	r3, r3, #3
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	82bb      	strh	r3, [r7, #20]
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 800dd90:	f7ff fd3a 	bl	800d808 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 800dd94:	2380      	movs	r3, #128	; 0x80
 800dd96:	63bb      	str	r3, [r7, #56]	; 0x38
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800dd98:	2340      	movs	r3, #64	; 0x40
 800dd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800dd9c:	2320      	movs	r3, #32
 800dd9e:	643b      	str	r3, [r7, #64]	; 0x40
  if(Keylen > 64)
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	2b40      	cmp	r3, #64	; 0x40
 800dda4:	d903      	bls.n	800ddae <HMAC_MD5+0x74>
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800dda6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ddaa:	647b      	str	r3, [r7, #68]	; 0x44
 800ddac:	e001      	b.n	800ddb2 <HMAC_MD5+0x78>
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	647b      	str	r3, [r7, #68]	; 0x44
  }
  HASH_Init(&MD5_HASH_InitStructure);
 800ddb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7ff fd32 	bl	800d820 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800ddbc:	8abb      	ldrh	r3, [r7, #20]
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7ff fd8b 	bl	800d8dc <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ddca:	e00a      	b.n	800dde2 <HMAC_MD5+0xa8>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800ddcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7ff fd9d 	bl	800d910 <HASH_DataIn>
    keyaddr+=4;
 800ddd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ddd8:	3304      	adds	r3, #4
 800ddda:	677b      	str	r3, [r7, #116]	; 0x74
  for(i=0; i<Keylen; i+=4)
 800dddc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ddde:	3304      	adds	r3, #4
 800dde0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dde2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	d3f0      	bcc.n	800ddcc <HMAC_MD5+0x92>
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 800ddea:	f7ff fddf 	bl	800d9ac <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800ddee:	2008      	movs	r0, #8
 800ddf0:	f7ff feac 	bl	800db4c <HASH_GetFlagStatus>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	66fb      	str	r3, [r7, #108]	; 0x6c
    counter++;
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	613b      	str	r3, [r7, #16]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de04:	d002      	beq.n	800de0c <HMAC_MD5+0xd2>
 800de06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d1f0      	bne.n	800ddee <HMAC_MD5+0xb4>

  if (busystatus != RESET)
 800de0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d003      	beq.n	800de1a <HMAC_MD5+0xe0>
  {
     status = ERROR;
 800de12:	2300      	movs	r3, #0
 800de14:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800de18:	e091      	b.n	800df3e <HMAC_MD5+0x204>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800de1a:	8afb      	ldrh	r3, [r7, #22]
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	4618      	mov	r0, r3
 800de20:	f7ff fd5c 	bl	800d8dc <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800de24:	2300      	movs	r3, #0
 800de26:	67fb      	str	r3, [r7, #124]	; 0x7c
 800de28:	e00a      	b.n	800de40 <HMAC_MD5+0x106>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800de2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4618      	mov	r0, r3
 800de30:	f7ff fd6e 	bl	800d910 <HASH_DataIn>
      inputaddr+=4;
 800de34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de36:	3304      	adds	r3, #4
 800de38:	673b      	str	r3, [r7, #112]	; 0x70
    for(i=0; i<Ilen; i+=4)
 800de3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de3c:	3304      	adds	r3, #4
 800de3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800de40:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	429a      	cmp	r2, r3
 800de46:	d3f0      	bcc.n	800de2a <HMAC_MD5+0xf0>
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 800de48:	f7ff fdb0 	bl	800d9ac <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 800de4c:	2300      	movs	r3, #0
 800de4e:	613b      	str	r3, [r7, #16]
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800de50:	2008      	movs	r0, #8
 800de52:	f7ff fe7b 	bl	800db4c <HASH_GetFlagStatus>
 800de56:	4603      	mov	r3, r0
 800de58:	66fb      	str	r3, [r7, #108]	; 0x6c
       counter++;
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	3301      	adds	r3, #1
 800de5e:	613b      	str	r3, [r7, #16]
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de66:	d002      	beq.n	800de6e <HMAC_MD5+0x134>
 800de68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d1f0      	bne.n	800de50 <HMAC_MD5+0x116>

    if (busystatus != RESET)
 800de6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de70:	2b00      	cmp	r3, #0
 800de72:	d003      	beq.n	800de7c <HMAC_MD5+0x142>
    {
      status = ERROR;
 800de74:	2300      	movs	r3, #0
 800de76:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800de7a:	e060      	b.n	800df3e <HMAC_MD5+0x204>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800de7c:	8abb      	ldrh	r3, [r7, #20]
 800de7e:	b29b      	uxth	r3, r3
 800de80:	4618      	mov	r0, r3
 800de82:	f7ff fd2b 	bl	800d8dc <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	677b      	str	r3, [r7, #116]	; 0x74
      for(i=0; i<Keylen; i+=4)
 800de8a:	2300      	movs	r3, #0
 800de8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800de8e:	e00a      	b.n	800dea6 <HMAC_MD5+0x16c>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800de90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	4618      	mov	r0, r3
 800de96:	f7ff fd3b 	bl	800d910 <HASH_DataIn>
        keyaddr+=4;
 800de9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de9c:	3304      	adds	r3, #4
 800de9e:	677b      	str	r3, [r7, #116]	; 0x74
      for(i=0; i<Keylen; i+=4)
 800dea0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dea2:	3304      	adds	r3, #4
 800dea4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dea6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d3f0      	bcc.n	800de90 <HMAC_MD5+0x156>
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 800deae:	f7ff fd7d 	bl	800d9ac <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 800deb2:	2300      	movs	r3, #0
 800deb4:	613b      	str	r3, [r7, #16]
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800deb6:	2008      	movs	r0, #8
 800deb8:	f7ff fe48 	bl	800db4c <HASH_GetFlagStatus>
 800debc:	4603      	mov	r3, r0
 800debe:	66fb      	str	r3, [r7, #108]	; 0x6c
          counter++;
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	3301      	adds	r3, #1
 800dec4:	613b      	str	r3, [r7, #16]
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800decc:	d002      	beq.n	800ded4 <HMAC_MD5+0x19a>
 800dece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d1f0      	bne.n	800deb6 <HMAC_MD5+0x17c>

      if (busystatus != RESET)
 800ded4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d003      	beq.n	800dee2 <HMAC_MD5+0x1a8>
      {
         status = ERROR;
 800deda:	2300      	movs	r3, #0
 800dedc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800dee0:	e02d      	b.n	800df3e <HMAC_MD5+0x204>
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 800dee2:	f107 0318 	add.w	r3, r7, #24
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7ff fd32 	bl	800d950 <HASH_GetDigest>
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800deec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800deee:	69ba      	ldr	r2, [r7, #24]
 800def0:	64fa      	str	r2, [r7, #76]	; 0x4c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800def2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800def4:	ba12      	rev	r2, r2
 800def6:	64ba      	str	r2, [r7, #72]	; 0x48
  return(result);
 800def8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800defa:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800defc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800defe:	3304      	adds	r3, #4
 800df00:	66bb      	str	r3, [r7, #104]	; 0x68
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800df02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df04:	69fa      	ldr	r2, [r7, #28]
 800df06:	657a      	str	r2, [r7, #84]	; 0x54
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800df08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800df0a:	ba12      	rev	r2, r2
 800df0c:	653a      	str	r2, [r7, #80]	; 0x50
  return(result);
 800df0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df10:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800df12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df14:	3304      	adds	r3, #4
 800df16:	66bb      	str	r3, [r7, #104]	; 0x68
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800df18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df1a:	6a3a      	ldr	r2, [r7, #32]
 800df1c:	65fa      	str	r2, [r7, #92]	; 0x5c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800df1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800df20:	ba12      	rev	r2, r2
 800df22:	65ba      	str	r2, [r7, #88]	; 0x58
  return(result);
 800df24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df26:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800df28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df2a:	3304      	adds	r3, #4
 800df2c:	66bb      	str	r3, [r7, #104]	; 0x68
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800df2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df32:	667a      	str	r2, [r7, #100]	; 0x64
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800df34:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800df36:	ba12      	rev	r2, r2
 800df38:	663a      	str	r2, [r7, #96]	; 0x60
  return(result);
 800df3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800df3c:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return status;  
 800df3e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 800df42:	4618      	mov	r0, r3
 800df44:	3780      	adds	r7, #128	; 0x80
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}

0800df4a <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 800df4a:	b580      	push	{r7, lr}
 800df4c:	b0a2      	sub	sp, #136	; 0x88
 800df4e:	af00      	add	r7, sp, #0
 800df50:	60f8      	str	r0, [r7, #12]
 800df52:	60b9      	str	r1, [r7, #8]
 800df54:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	837b      	strh	r3, [r7, #26]
  uint32_t i = 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  __IO uint32_t counter = 0;
 800df60:	2300      	movs	r3, #0
 800df62:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800df64:	2300      	movs	r3, #0
 800df66:	67bb      	str	r3, [r7, #120]	; 0x78
  ErrorStatus status = SUCCESS;
 800df68:	2301      	movs	r3, #1
 800df6a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  uint32_t inputaddr  = (uint32_t)Input;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t outputaddr = (uint32_t)Output;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	677b      	str	r3, [r7, #116]	; 0x74

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	b29b      	uxth	r3, r3
 800df7a:	f003 0303 	and.w	r3, r3, #3
 800df7e:	b29b      	uxth	r3, r3
 800df80:	00db      	lsls	r3, r3, #3
 800df82:	b29b      	uxth	r3, r3
 800df84:	837b      	strh	r3, [r7, #26]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800df86:	f7ff fc3f 	bl	800d808 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800df8a:	2300      	movs	r3, #0
 800df8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 800df8e:	2300      	movs	r3, #0
 800df90:	643b      	str	r3, [r7, #64]	; 0x40
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800df92:	2320      	movs	r3, #32
 800df94:	647b      	str	r3, [r7, #68]	; 0x44
  HASH_Init(&SHA1_HASH_InitStructure);
 800df96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7ff fc40 	bl	800d820 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800dfa0:	8b7b      	ldrh	r3, [r7, #26]
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7ff fc99 	bl	800d8dc <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800dfaa:	2300      	movs	r3, #0
 800dfac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dfb0:	e00c      	b.n	800dfcc <HASH_SHA1+0x82>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800dfb2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f7ff fcaa 	bl	800d910 <HASH_DataIn>
    inputaddr+=4;
 800dfbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dfbe:	3304      	adds	r3, #4
 800dfc0:	67fb      	str	r3, [r7, #124]	; 0x7c
  for(i=0; i<Ilen; i+=4)
 800dfc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dfc6:	3304      	adds	r3, #4
 800dfc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dfcc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d3ed      	bcc.n	800dfb2 <HASH_SHA1+0x68>
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800dfd6:	f7ff fce9 	bl	800d9ac <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800dfda:	2008      	movs	r0, #8
 800dfdc:	f7ff fdb6 	bl	800db4c <HASH_GetFlagStatus>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	67bb      	str	r3, [r7, #120]	; 0x78
    counter++;
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	617b      	str	r3, [r7, #20]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dff0:	d002      	beq.n	800dff8 <HASH_SHA1+0xae>
 800dff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d1f0      	bne.n	800dfda <HASH_SHA1+0x90>

  if (busystatus != RESET)
 800dff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d003      	beq.n	800e006 <HASH_SHA1+0xbc>
  {
     status = ERROR;
 800dffe:	2300      	movs	r3, #0
 800e000:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800e004:	e038      	b.n	800e078 <HASH_SHA1+0x12e>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 800e006:	f107 031c 	add.w	r3, r7, #28
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7ff fca0 	bl	800d950 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 800e010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e012:	69fa      	ldr	r2, [r7, #28]
 800e014:	653a      	str	r2, [r7, #80]	; 0x50
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800e016:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e018:	ba12      	rev	r2, r2
 800e01a:	64fa      	str	r2, [r7, #76]	; 0x4c
  return(result);
 800e01c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e01e:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800e020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e022:	3304      	adds	r3, #4
 800e024:	677b      	str	r3, [r7, #116]	; 0x74
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800e026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e028:	6a3a      	ldr	r2, [r7, #32]
 800e02a:	65ba      	str	r2, [r7, #88]	; 0x58
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800e02c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e02e:	ba12      	rev	r2, r2
 800e030:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 800e032:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e034:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800e036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e038:	3304      	adds	r3, #4
 800e03a:	677b      	str	r3, [r7, #116]	; 0x74
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 800e03c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e03e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e040:	663a      	str	r2, [r7, #96]	; 0x60
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800e042:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e044:	ba12      	rev	r2, r2
 800e046:	65fa      	str	r2, [r7, #92]	; 0x5c
  return(result);
 800e048:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e04a:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800e04c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e04e:	3304      	adds	r3, #4
 800e050:	677b      	str	r3, [r7, #116]	; 0x74
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800e052:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e056:	66ba      	str	r2, [r7, #104]	; 0x68
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800e058:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e05a:	ba12      	rev	r2, r2
 800e05c:	667a      	str	r2, [r7, #100]	; 0x64
  return(result);
 800e05e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e060:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800e062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e064:	3304      	adds	r3, #4
 800e066:	677b      	str	r3, [r7, #116]	; 0x74
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800e068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e06a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e06c:	673a      	str	r2, [r7, #112]	; 0x70
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800e06e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e070:	ba12      	rev	r2, r2
 800e072:	66fa      	str	r2, [r7, #108]	; 0x6c
  return(result);
 800e074:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e076:	601a      	str	r2, [r3, #0]
  }
  return status;
 800e078:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3788      	adds	r7, #136	; 0x88
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b0a2      	sub	sp, #136	; 0x88
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	60b9      	str	r1, [r7, #8]
 800e08e:	607a      	str	r2, [r7, #4]
 800e090:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800e092:	2300      	movs	r3, #0
 800e094:	82fb      	strh	r3, [r7, #22]
  __IO uint16_t nbvalidbitskey = 0;
 800e096:	2300      	movs	r3, #0
 800e098:	82bb      	strh	r3, [r7, #20]
  uint32_t i = 0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  __IO uint32_t counter = 0;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	677b      	str	r3, [r7, #116]	; 0x74
  ErrorStatus status = SUCCESS;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  uint32_t keyaddr    = (uint32_t)Key;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t inputaddr  = (uint32_t)Input;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	67bb      	str	r3, [r7, #120]	; 0x78
  uint32_t outputaddr = (uint32_t)Output;
 800e0b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0ba:	673b      	str	r3, [r7, #112]	; 0x70

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	f003 0303 	and.w	r3, r3, #3
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	00db      	lsls	r3, r3, #3
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	82fb      	strh	r3, [r7, #22]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	f003 0303 	and.w	r3, r3, #3
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	00db      	lsls	r3, r3, #3
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	82bb      	strh	r3, [r7, #20]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800e0dc:	f7ff fb94 	bl	800d808 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	63bb      	str	r3, [r7, #56]	; 0x38
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800e0e4:	2340      	movs	r3, #64	; 0x40
 800e0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800e0e8:	2320      	movs	r3, #32
 800e0ea:	643b      	str	r3, [r7, #64]	; 0x40
  if(Keylen > 64)
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	2b40      	cmp	r3, #64	; 0x40
 800e0f0:	d903      	bls.n	800e0fa <HMAC_SHA1+0x76>
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800e0f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e0f6:	647b      	str	r3, [r7, #68]	; 0x44
 800e0f8:	e001      	b.n	800e0fe <HMAC_SHA1+0x7a>
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	647b      	str	r3, [r7, #68]	; 0x44
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 800e0fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e102:	4618      	mov	r0, r3
 800e104:	f7ff fb8c 	bl	800d820 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800e108:	8abb      	ldrh	r3, [r7, #20]
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7ff fbe5 	bl	800d8dc <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800e112:	2300      	movs	r3, #0
 800e114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e118:	e00c      	b.n	800e134 <HMAC_SHA1+0xb0>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800e11a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	4618      	mov	r0, r3
 800e120:	f7ff fbf6 	bl	800d910 <HASH_DataIn>
    keyaddr+=4;
 800e124:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e126:	3304      	adds	r3, #4
 800e128:	67fb      	str	r3, [r7, #124]	; 0x7c
  for(i=0; i<Keylen; i+=4)
 800e12a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e12e:	3304      	adds	r3, #4
 800e130:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e134:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d3ed      	bcc.n	800e11a <HMAC_SHA1+0x96>
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800e13e:	f7ff fc35 	bl	800d9ac <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800e142:	2008      	movs	r0, #8
 800e144:	f7ff fd02 	bl	800db4c <HASH_GetFlagStatus>
 800e148:	4603      	mov	r3, r0
 800e14a:	677b      	str	r3, [r7, #116]	; 0x74
    counter++;
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	3301      	adds	r3, #1
 800e150:	613b      	str	r3, [r7, #16]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e158:	d002      	beq.n	800e160 <HMAC_SHA1+0xdc>
 800e15a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d1f0      	bne.n	800e142 <HMAC_SHA1+0xbe>

  if (busystatus != RESET)
 800e160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e162:	2b00      	cmp	r3, #0
 800e164:	d003      	beq.n	800e16e <HMAC_SHA1+0xea>
  {
     status = ERROR;
 800e166:	2300      	movs	r3, #0
 800e168:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800e16c:	e0a4      	b.n	800e2b8 <HMAC_SHA1+0x234>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800e16e:	8afb      	ldrh	r3, [r7, #22]
 800e170:	b29b      	uxth	r3, r3
 800e172:	4618      	mov	r0, r3
 800e174:	f7ff fbb2 	bl	800d8dc <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800e178:	2300      	movs	r3, #0
 800e17a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e17e:	e00c      	b.n	800e19a <HMAC_SHA1+0x116>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800e180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4618      	mov	r0, r3
 800e186:	f7ff fbc3 	bl	800d910 <HASH_DataIn>
      inputaddr+=4;
 800e18a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e18c:	3304      	adds	r3, #4
 800e18e:	67bb      	str	r3, [r7, #120]	; 0x78
    for(i=0; i<Ilen; i+=4)
 800e190:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e194:	3304      	adds	r3, #4
 800e196:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e19a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d3ed      	bcc.n	800e180 <HMAC_SHA1+0xfc>
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 800e1a4:	f7ff fc02 	bl	800d9ac <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800e1ac:	2008      	movs	r0, #8
 800e1ae:	f7ff fccd 	bl	800db4c <HASH_GetFlagStatus>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	677b      	str	r3, [r7, #116]	; 0x74
      counter++;
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	613b      	str	r3, [r7, #16]
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1c2:	d002      	beq.n	800e1ca <HMAC_SHA1+0x146>
 800e1c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d1f0      	bne.n	800e1ac <HMAC_SHA1+0x128>

    if (busystatus != RESET)
 800e1ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d003      	beq.n	800e1d8 <HMAC_SHA1+0x154>
    {
      status = ERROR;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800e1d6:	e06f      	b.n	800e2b8 <HMAC_SHA1+0x234>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800e1d8:	8abb      	ldrh	r3, [r7, #20]
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7ff fb7d 	bl	800d8dc <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	67fb      	str	r3, [r7, #124]	; 0x7c
      for(i=0; i<Keylen; i+=4)
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e1ec:	e00c      	b.n	800e208 <HMAC_SHA1+0x184>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800e1ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7ff fb8c 	bl	800d910 <HASH_DataIn>
        keyaddr+=4;
 800e1f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e1fa:	3304      	adds	r3, #4
 800e1fc:	67fb      	str	r3, [r7, #124]	; 0x7c
      for(i=0; i<Keylen; i+=4)
 800e1fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e202:	3304      	adds	r3, #4
 800e204:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e208:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d3ed      	bcc.n	800e1ee <HMAC_SHA1+0x16a>
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 800e212:	f7ff fbcb 	bl	800d9ac <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 800e216:	2300      	movs	r3, #0
 800e218:	613b      	str	r3, [r7, #16]
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800e21a:	2008      	movs	r0, #8
 800e21c:	f7ff fc96 	bl	800db4c <HASH_GetFlagStatus>
 800e220:	4603      	mov	r3, r0
 800e222:	677b      	str	r3, [r7, #116]	; 0x74
        counter++;
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	3301      	adds	r3, #1
 800e228:	613b      	str	r3, [r7, #16]
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e230:	d002      	beq.n	800e238 <HMAC_SHA1+0x1b4>
 800e232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e234:	2b00      	cmp	r3, #0
 800e236:	d1f0      	bne.n	800e21a <HMAC_SHA1+0x196>

      if (busystatus != RESET)
 800e238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d003      	beq.n	800e246 <HMAC_SHA1+0x1c2>
      {
        status = ERROR;
 800e23e:	2300      	movs	r3, #0
 800e240:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800e244:	e038      	b.n	800e2b8 <HMAC_SHA1+0x234>
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 800e246:	f107 0318 	add.w	r3, r7, #24
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7ff fb80 	bl	800d950 <HASH_GetDigest>
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 800e250:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e252:	69ba      	ldr	r2, [r7, #24]
 800e254:	64fa      	str	r2, [r7, #76]	; 0x4c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800e256:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e258:	ba12      	rev	r2, r2
 800e25a:	64ba      	str	r2, [r7, #72]	; 0x48
  return(result);
 800e25c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e25e:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800e260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e262:	3304      	adds	r3, #4
 800e264:	673b      	str	r3, [r7, #112]	; 0x70
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800e266:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e268:	69fa      	ldr	r2, [r7, #28]
 800e26a:	657a      	str	r2, [r7, #84]	; 0x54
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800e26c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e26e:	ba12      	rev	r2, r2
 800e270:	653a      	str	r2, [r7, #80]	; 0x50
  return(result);
 800e272:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e274:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800e276:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e278:	3304      	adds	r3, #4
 800e27a:	673b      	str	r3, [r7, #112]	; 0x70
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 800e27c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e27e:	6a3a      	ldr	r2, [r7, #32]
 800e280:	65fa      	str	r2, [r7, #92]	; 0x5c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800e282:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e284:	ba12      	rev	r2, r2
 800e286:	65ba      	str	r2, [r7, #88]	; 0x58
  return(result);
 800e288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e28a:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800e28c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e28e:	3304      	adds	r3, #4
 800e290:	673b      	str	r3, [r7, #112]	; 0x70
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800e292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e296:	667a      	str	r2, [r7, #100]	; 0x64
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800e298:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e29a:	ba12      	rev	r2, r2
 800e29c:	663a      	str	r2, [r7, #96]	; 0x60
  return(result);
 800e29e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e2a0:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800e2a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e2a4:	3304      	adds	r3, #4
 800e2a6:	673b      	str	r3, [r7, #112]	; 0x70
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800e2a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e2aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2ac:	66fa      	str	r2, [r7, #108]	; 0x6c
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800e2ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e2b0:	ba12      	rev	r2, r2
 800e2b2:	66ba      	str	r2, [r7, #104]	; 0x68
  return(result);
 800e2b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e2b6:	601a      	str	r2, [r3, #0]
      }
    }  
  }
  return status;  
 800e2b8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3788      	adds	r7, #136	; 0x88
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	4a17      	ldr	r2, [pc, #92]	; (800e32c <I2C_DeInit+0x68>)
 800e2d0:	4293      	cmp	r3, r2
 800e2d2:	d10a      	bne.n	800e2ea <I2C_DeInit+0x26>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800e2d4:	2101      	movs	r1, #1
 800e2d6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800e2da:	f001 fa83 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800e2de:	2100      	movs	r1, #0
 800e2e0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800e2e4:	f001 fa7e 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
    }
  }
}
 800e2e8:	e01c      	b.n	800e324 <I2C_DeInit+0x60>
  else if (I2Cx == I2C2)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	4a10      	ldr	r2, [pc, #64]	; (800e330 <I2C_DeInit+0x6c>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d10a      	bne.n	800e308 <I2C_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800e2f2:	2101      	movs	r1, #1
 800e2f4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800e2f8:	f001 fa74 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800e2fc:	2100      	movs	r1, #0
 800e2fe:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800e302:	f001 fa6f 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 800e306:	e00d      	b.n	800e324 <I2C_DeInit+0x60>
    if (I2Cx == I2C3)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	4a0a      	ldr	r2, [pc, #40]	; (800e334 <I2C_DeInit+0x70>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d109      	bne.n	800e324 <I2C_DeInit+0x60>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 800e310:	2101      	movs	r1, #1
 800e312:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800e316:	f001 fa65 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800e31a:	2100      	movs	r1, #0
 800e31c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800e320:	f001 fa60 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 800e324:	bf00      	nop
 800e326:	3708      	adds	r7, #8
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}
 800e32c:	40005400 	.word	0x40005400
 800e330:	40005800 	.word	0x40005800
 800e334:	40005c00 	.word	0x40005c00

0800e338 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b08a      	sub	sp, #40	; 0x28
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800e342:	2300      	movs	r3, #0
 800e344:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e346:	2300      	movs	r3, #0
 800e348:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800e34a:	2304      	movs	r3, #4
 800e34c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800e34e:	4b57      	ldr	r3, [pc, #348]	; (800e4ac <I2C_Init+0x174>)
 800e350:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	889b      	ldrh	r3, [r3, #4]
 800e356:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800e358:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e35a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800e35e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800e360:	f107 030c 	add.w	r3, r7, #12
 800e364:	4618      	mov	r0, r3
 800e366:	f001 f827 	bl	800f3b8 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800e36e:	69fb      	ldr	r3, [r7, #28]
 800e370:	4a4f      	ldr	r2, [pc, #316]	; (800e4b0 <I2C_Init+0x178>)
 800e372:	fba2 2303 	umull	r2, r3, r2, r3
 800e376:	0c9b      	lsrs	r3, r3, #18
 800e378:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800e37a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e37c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e37e:	4313      	orrs	r3, r2
 800e380:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e386:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	881b      	ldrh	r3, [r3, #0]
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	f023 0301 	bic.w	r3, r3, #1
 800e392:	b29a      	uxth	r2, r3
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800e398:	2300      	movs	r3, #0
 800e39a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4a44      	ldr	r2, [pc, #272]	; (800e4b4 <I2C_Init+0x17c>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d815      	bhi.n	800e3d2 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	005b      	lsls	r3, r3, #1
 800e3ac:	69fa      	ldr	r2, [r7, #28]
 800e3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3b2:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800e3b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3b6:	2b03      	cmp	r3, #3
 800e3b8:	d801      	bhi.n	800e3be <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800e3ba:	2304      	movs	r3, #4
 800e3bc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800e3be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e3c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3c2:	4313      	orrs	r3, r2
 800e3c4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800e3c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	b29a      	uxth	r2, r3
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	841a      	strh	r2, [r3, #32]
 800e3d0:	e040      	b.n	800e454 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	88db      	ldrh	r3, [r3, #6]
 800e3d6:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d109      	bne.n	800e3f2 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	005b      	lsls	r3, r3, #1
 800e3e6:	4413      	add	r3, r2
 800e3e8:	69fa      	ldr	r2, [r7, #28]
 800e3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e3f0:	e00e      	b.n	800e410 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	4613      	mov	r3, r2
 800e3f8:	009b      	lsls	r3, r3, #2
 800e3fa:	4413      	add	r3, r2
 800e3fc:	009a      	lsls	r2, r3, #2
 800e3fe:	4413      	add	r3, r2
 800e400:	69fa      	ldr	r2, [r7, #28]
 800e402:	fbb2 f3f3 	udiv	r3, r2, r3
 800e406:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800e408:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e40a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e40e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800e410:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e416:	2b00      	cmp	r3, #0
 800e418:	d103      	bne.n	800e422 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800e41a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e41c:	f043 0301 	orr.w	r3, r3, #1
 800e420:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800e422:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e424:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e426:	4313      	orrs	r3, r2
 800e428:	b29b      	uxth	r3, r3
 800e42a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e42e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e432:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800e434:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e436:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800e43a:	fb02 f303 	mul.w	r3, r2, r3
 800e43e:	4a1e      	ldr	r2, [pc, #120]	; (800e4b8 <I2C_Init+0x180>)
 800e440:	fb82 1203 	smull	r1, r2, r2, r3
 800e444:	1192      	asrs	r2, r2, #6
 800e446:	17db      	asrs	r3, r3, #31
 800e448:	1ad3      	subs	r3, r2, r3
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	3301      	adds	r3, #1
 800e44e:	b29a      	uxth	r2, r3
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e458:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	881b      	ldrh	r3, [r3, #0]
 800e45e:	b29b      	uxth	r3, r3
 800e460:	f043 0301 	orr.w	r3, r3, #1
 800e464:	b29a      	uxth	r2, r3
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	881b      	ldrh	r3, [r3, #0]
 800e46e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 800e470:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e472:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800e476:	f023 0302 	bic.w	r3, r3, #2
 800e47a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	889a      	ldrh	r2, [r3, #4]
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	895b      	ldrh	r3, [r3, #10]
 800e484:	4313      	orrs	r3, r2
 800e486:	b29a      	uxth	r2, r3
 800e488:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e48a:	4313      	orrs	r3, r2
 800e48c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e492:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	899a      	ldrh	r2, [r3, #12]
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	891b      	ldrh	r3, [r3, #8]
 800e49c:	4313      	orrs	r3, r2
 800e49e:	b29a      	uxth	r2, r3
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	811a      	strh	r2, [r3, #8]
}
 800e4a4:	bf00      	nop
 800e4a6:	3728      	adds	r7, #40	; 0x28
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	007a1200 	.word	0x007a1200
 800e4b0:	431bde83 	.word	0x431bde83
 800e4b4:	000186a0 	.word	0x000186a0
 800e4b8:	10624dd3 	.word	0x10624dd3

0800e4bc <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b083      	sub	sp, #12
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4ca:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800e4d8:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e4ec:	819a      	strh	r2, [r3, #12]
}
 800e4ee:	bf00      	nop
 800e4f0:	370c      	adds	r7, #12
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f8:	4770      	bx	lr

0800e4fa <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e4fa:	b480      	push	{r7}
 800e4fc:	b083      	sub	sp, #12
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
 800e502:	460b      	mov	r3, r1
 800e504:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e506:	78fb      	ldrb	r3, [r7, #3]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d008      	beq.n	800e51e <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	881b      	ldrh	r3, [r3, #0]
 800e510:	b29b      	uxth	r3, r3
 800e512:	f043 0301 	orr.w	r3, r3, #1
 800e516:	b29a      	uxth	r2, r3
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
  }
}
 800e51c:	e007      	b.n	800e52e <I2C_Cmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	881b      	ldrh	r3, [r3, #0]
 800e522:	b29b      	uxth	r3, r3
 800e524:	f023 0301 	bic.w	r3, r3, #1
 800e528:	b29a      	uxth	r2, r3
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	801a      	strh	r2, [r3, #0]
}
 800e52e:	bf00      	nop
 800e530:	370c      	adds	r7, #12
 800e532:	46bd      	mov	sp, r7
 800e534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e538:	4770      	bx	lr

0800e53a <I2C_AnalogFilterCmd>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_AnalogFilterCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e53a:	b480      	push	{r7}
 800e53c:	b083      	sub	sp, #12
 800e53e:	af00      	add	r7, sp, #0
 800e540:	6078      	str	r0, [r7, #4]
 800e542:	460b      	mov	r3, r1
 800e544:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e546:	78fb      	ldrb	r3, [r7, #3]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d008      	beq.n	800e55e <I2C_AnalogFilterCmd+0x24>
  {
    /* Enable the analog filter */
    I2Cx->FLTR &= (uint16_t)~((uint16_t)I2C_FLTR_ANOFF);    
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e550:	b29b      	uxth	r3, r3
 800e552:	f023 0310 	bic.w	r3, r3, #16
 800e556:	b29a      	uxth	r2, r3
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	849a      	strh	r2, [r3, #36]	; 0x24
  else
  {
    /* Disable the analog filter */
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
  }
}
 800e55c:	e007      	b.n	800e56e <I2C_AnalogFilterCmd+0x34>
    I2Cx->FLTR |= I2C_FLTR_ANOFF;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e562:	b29b      	uxth	r3, r3
 800e564:	f043 0310 	orr.w	r3, r3, #16
 800e568:	b29a      	uxth	r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800e56e:	bf00      	nop
 800e570:	370c      	adds	r7, #12
 800e572:	46bd      	mov	sp, r7
 800e574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e578:	4770      	bx	lr

0800e57a <I2C_DigitalFilterConfig>:
  * @note   This function should be called before initializing and enabling
            the I2C Peripheral.
  * @retval None
  */
void I2C_DigitalFilterConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DigitalFilter)
{
 800e57a:	b480      	push	{r7}
 800e57c:	b085      	sub	sp, #20
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
 800e582:	460b      	mov	r3, r1
 800e584:	807b      	strh	r3, [r7, #2]
  uint16_t tmpreg = 0;
 800e586:	2300      	movs	r3, #0
 800e588:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIGITAL_FILTER(I2C_DigitalFilter));
  
  /* Get the old register value */
  tmpreg = I2Cx->FLTR;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e58e:	81fb      	strh	r3, [r7, #14]
  
  /* Reset I2Cx DNF bit [3:0] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_FLTR_DNF);
 800e590:	89fb      	ldrh	r3, [r7, #14]
 800e592:	f023 030f 	bic.w	r3, r3, #15
 800e596:	81fb      	strh	r3, [r7, #14]
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= (uint16_t)((uint16_t)I2C_DigitalFilter & I2C_FLTR_DNF);
 800e598:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e59c:	f003 030f 	and.w	r3, r3, #15
 800e5a0:	b21a      	sxth	r2, r3
 800e5a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	b21b      	sxth	r3, r3
 800e5aa:	81fb      	strh	r3, [r7, #14]
  
  /* Store the new register value */
  I2Cx->FLTR = tmpreg;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	89fa      	ldrh	r2, [r7, #14]
 800e5b0:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800e5b2:	bf00      	nop
 800e5b4:	3714      	adds	r7, #20
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr

0800e5be <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e5be:	b480      	push	{r7}
 800e5c0:	b083      	sub	sp, #12
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e5ca:	78fb      	ldrb	r3, [r7, #3]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d008      	beq.n	800e5e2 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	881b      	ldrh	r3, [r3, #0]
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e5da:	b29a      	uxth	r2, r3
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
  }
}
 800e5e0:	e007      	b.n	800e5f2 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	881b      	ldrh	r3, [r3, #0]
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e5ec:	b29a      	uxth	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	801a      	strh	r2, [r3, #0]
}
 800e5f2:	bf00      	nop
 800e5f4:	370c      	adds	r7, #12
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr

0800e5fe <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e5fe:	b480      	push	{r7}
 800e600:	b083      	sub	sp, #12
 800e602:	af00      	add	r7, sp, #0
 800e604:	6078      	str	r0, [r7, #4]
 800e606:	460b      	mov	r3, r1
 800e608:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e60a:	78fb      	ldrb	r3, [r7, #3]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d008      	beq.n	800e622 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	881b      	ldrh	r3, [r3, #0]
 800e614:	b29b      	uxth	r3, r3
 800e616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 800e620:	e007      	b.n	800e632 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	881b      	ldrh	r3, [r3, #0]
 800e626:	b29b      	uxth	r3, r3
 800e628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e62c:	b29a      	uxth	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	801a      	strh	r2, [r3, #0]
}
 800e632:	bf00      	nop
 800e634:	370c      	adds	r7, #12
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr

0800e63e <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 800e63e:	b480      	push	{r7}
 800e640:	b083      	sub	sp, #12
 800e642:	af00      	add	r7, sp, #0
 800e644:	6078      	str	r0, [r7, #4]
 800e646:	460b      	mov	r3, r1
 800e648:	70fb      	strb	r3, [r7, #3]
 800e64a:	4613      	mov	r3, r2
 800e64c:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800e64e:	78bb      	ldrb	r3, [r7, #2]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d004      	beq.n	800e65e <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800e654:	78fb      	ldrb	r3, [r7, #3]
 800e656:	f043 0301 	orr.w	r3, r3, #1
 800e65a:	70fb      	strb	r3, [r7, #3]
 800e65c:	e003      	b.n	800e666 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800e65e:	78fb      	ldrb	r3, [r7, #3]
 800e660:	f023 0301 	bic.w	r3, r3, #1
 800e664:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 800e666:	78fb      	ldrb	r3, [r7, #3]
 800e668:	b29a      	uxth	r2, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	821a      	strh	r2, [r3, #16]
}
 800e66e:	bf00      	nop
 800e670:	370c      	adds	r7, #12
 800e672:	46bd      	mov	sp, r7
 800e674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e678:	4770      	bx	lr

0800e67a <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e67a:	b480      	push	{r7}
 800e67c:	b083      	sub	sp, #12
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
 800e682:	460b      	mov	r3, r1
 800e684:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e686:	78fb      	ldrb	r3, [r7, #3]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d008      	beq.n	800e69e <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	881b      	ldrh	r3, [r3, #0]
 800e690:	b29b      	uxth	r3, r3
 800e692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e696:	b29a      	uxth	r2, r3
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
  }
}
 800e69c:	e007      	b.n	800e6ae <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	881b      	ldrh	r3, [r3, #0]
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e6a8:	b29a      	uxth	r2, r3
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	801a      	strh	r2, [r3, #0]
}
 800e6ae:	bf00      	nop
 800e6b0:	370c      	adds	r7, #12
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr

0800e6ba <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 800e6ba:	b480      	push	{r7}
 800e6bc:	b085      	sub	sp, #20
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	899b      	ldrh	r3, [r3, #12]
 800e6ce:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800e6d0:	89fb      	ldrh	r3, [r7, #14]
 800e6d2:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800e6d6:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800e6d8:	78fb      	ldrb	r3, [r7, #3]
 800e6da:	b21b      	sxth	r3, r3
 800e6dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800e6e0:	b21a      	sxth	r2, r3
 800e6e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e6e6:	4313      	orrs	r3, r2
 800e6e8:	b21b      	sxth	r3, r3
 800e6ea:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	89fa      	ldrh	r2, [r7, #14]
 800e6f0:	819a      	strh	r2, [r3, #12]
}
 800e6f2:	bf00      	nop
 800e6f4:	3714      	adds	r7, #20
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr

0800e6fe <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e6fe:	b480      	push	{r7}
 800e700:	b083      	sub	sp, #12
 800e702:	af00      	add	r7, sp, #0
 800e704:	6078      	str	r0, [r7, #4]
 800e706:	460b      	mov	r3, r1
 800e708:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e70a:	78fb      	ldrb	r3, [r7, #3]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d008      	beq.n	800e722 <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	899b      	ldrh	r3, [r3, #12]
 800e714:	b29b      	uxth	r3, r3
 800e716:	f043 0301 	orr.w	r3, r3, #1
 800e71a:	b29a      	uxth	r2, r3
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
  }
}
 800e720:	e007      	b.n	800e732 <I2C_DualAddressCmd+0x34>
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	899b      	ldrh	r3, [r3, #12]
 800e726:	b29b      	uxth	r3, r3
 800e728:	f023 0301 	bic.w	r3, r3, #1
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	819a      	strh	r2, [r3, #12]
}
 800e732:	bf00      	nop
 800e734:	370c      	adds	r7, #12
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr

0800e73e <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e73e:	b480      	push	{r7}
 800e740:	b083      	sub	sp, #12
 800e742:	af00      	add	r7, sp, #0
 800e744:	6078      	str	r0, [r7, #4]
 800e746:	460b      	mov	r3, r1
 800e748:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e74a:	78fb      	ldrb	r3, [r7, #3]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d008      	beq.n	800e762 <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	881b      	ldrh	r3, [r3, #0]
 800e754:	b29b      	uxth	r3, r3
 800e756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e75a:	b29a      	uxth	r2, r3
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
  }
}
 800e760:	e007      	b.n	800e772 <I2C_GeneralCallCmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	881b      	ldrh	r3, [r3, #0]
 800e766:	b29b      	uxth	r3, r3
 800e768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e76c:	b29a      	uxth	r2, r3
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	801a      	strh	r2, [r3, #0]
}
 800e772:	bf00      	nop
 800e774:	370c      	adds	r7, #12
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr

0800e77e <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e77e:	b480      	push	{r7}
 800e780:	b083      	sub	sp, #12
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
 800e786:	460b      	mov	r3, r1
 800e788:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e78a:	78fb      	ldrb	r3, [r7, #3]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d00a      	beq.n	800e7a6 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	881b      	ldrh	r3, [r3, #0]
 800e794:	b29b      	uxth	r3, r3
 800e796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e79a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e79e:	b29a      	uxth	r2, r3
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
  }
}
 800e7a4:	e007      	b.n	800e7b6 <I2C_SoftwareResetCmd+0x38>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	881b      	ldrh	r3, [r3, #0]
 800e7aa:	b29b      	uxth	r3, r3
 800e7ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e7b0:	b29a      	uxth	r2, r3
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	801a      	strh	r2, [r3, #0]
}
 800e7b6:	bf00      	nop
 800e7b8:	370c      	adds	r7, #12
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr

0800e7c2 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e7c2:	b480      	push	{r7}
 800e7c4:	b083      	sub	sp, #12
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 800e7ce:	78fb      	ldrb	r3, [r7, #3]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d108      	bne.n	800e7e6 <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	881b      	ldrh	r3, [r3, #0]
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7de:	b29a      	uxth	r2, r3
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
  }
}
 800e7e4:	e007      	b.n	800e7f6 <I2C_StretchClockCmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	881b      	ldrh	r3, [r3, #0]
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	801a      	strh	r2, [r3, #0]
}
 800e7f6:	bf00      	nop
 800e7f8:	370c      	adds	r7, #12
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr

0800e802 <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 800e802:	b480      	push	{r7}
 800e804:	b083      	sub	sp, #12
 800e806:	af00      	add	r7, sp, #0
 800e808:	6078      	str	r0, [r7, #4]
 800e80a:	460b      	mov	r3, r1
 800e80c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800e80e:	887b      	ldrh	r3, [r7, #2]
 800e810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e814:	d008      	beq.n	800e828 <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	8b9b      	ldrh	r3, [r3, #28]
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e820:	b29a      	uxth	r2, r3
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	839a      	strh	r2, [r3, #28]
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
  }
}
 800e826:	e007      	b.n	800e838 <I2C_FastModeDutyCycleConfig+0x36>
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	8b9b      	ldrh	r3, [r3, #28]
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e832:	b29a      	uxth	r2, r3
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	839a      	strh	r2, [r3, #28]
}
 800e838:	bf00      	nop
 800e83a:	370c      	adds	r7, #12
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr

0800e844 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	460b      	mov	r3, r1
 800e84e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800e850:	887b      	ldrh	r3, [r7, #2]
 800e852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e856:	d108      	bne.n	800e86a <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	881b      	ldrh	r3, [r3, #0]
 800e85c:	b29b      	uxth	r3, r3
 800e85e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e862:	b29a      	uxth	r2, r3
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
  }
}
 800e868:	e007      	b.n	800e87a <I2C_NACKPositionConfig+0x36>
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	881b      	ldrh	r3, [r3, #0]
 800e86e:	b29b      	uxth	r3, r3
 800e870:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e874:	b29a      	uxth	r2, r3
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	801a      	strh	r2, [r3, #0]
}
 800e87a:	bf00      	nop
 800e87c:	370c      	adds	r7, #12
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr

0800e886 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 800e886:	b480      	push	{r7}
 800e888:	b083      	sub	sp, #12
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	6078      	str	r0, [r7, #4]
 800e88e:	460b      	mov	r3, r1
 800e890:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800e892:	887b      	ldrh	r3, [r7, #2]
 800e894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e898:	d108      	bne.n	800e8ac <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	881b      	ldrh	r3, [r3, #0]
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
  }
}
 800e8aa:	e007      	b.n	800e8bc <I2C_SMBusAlertConfig+0x36>
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	881b      	ldrh	r3, [r3, #0]
 800e8b0:	b29b      	uxth	r3, r3
 800e8b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	801a      	strh	r2, [r3, #0]
}
 800e8bc:	bf00      	nop
 800e8be:	370c      	adds	r7, #12
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr

0800e8c8 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e8d4:	78fb      	ldrb	r3, [r7, #3]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d008      	beq.n	800e8ec <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	881b      	ldrh	r3, [r3, #0]
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	f043 0310 	orr.w	r3, r3, #16
 800e8e4:	b29a      	uxth	r2, r3
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
  }
}
 800e8ea:	e007      	b.n	800e8fc <I2C_ARPCmd+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	881b      	ldrh	r3, [r3, #0]
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	f023 0310 	bic.w	r3, r3, #16
 800e8f6:	b29a      	uxth	r2, r3
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	801a      	strh	r2, [r3, #0]
}
 800e8fc:	bf00      	nop
 800e8fe:	370c      	adds	r7, #12
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr

0800e908 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800e908:	b480      	push	{r7}
 800e90a:	b083      	sub	sp, #12
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	460b      	mov	r3, r1
 800e912:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800e914:	78fb      	ldrb	r3, [r7, #3]
 800e916:	b29a      	uxth	r2, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	821a      	strh	r2, [r3, #16]
}
 800e91c:	bf00      	nop
 800e91e:	370c      	adds	r7, #12
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr

0800e928 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800e928:	b480      	push	{r7}
 800e92a:	b083      	sub	sp, #12
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	8a1b      	ldrh	r3, [r3, #16]
 800e934:	b29b      	uxth	r3, r3
 800e936:	b2db      	uxtb	r3, r3
}
 800e938:	4618      	mov	r0, r3
 800e93a:	370c      	adds	r7, #12
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr

0800e944 <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	460b      	mov	r3, r1
 800e94e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e950:	78fb      	ldrb	r3, [r7, #3]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d008      	beq.n	800e968 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	881b      	ldrh	r3, [r3, #0]
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e960:	b29a      	uxth	r2, r3
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
  }
}
 800e966:	e007      	b.n	800e978 <I2C_TransmitPEC+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	881b      	ldrh	r3, [r3, #0]
 800e96c:	b29b      	uxth	r3, r3
 800e96e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e972:	b29a      	uxth	r2, r3
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	801a      	strh	r2, [r3, #0]
}
 800e978:	bf00      	nop
 800e97a:	370c      	adds	r7, #12
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr

0800e984 <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 800e984:	b480      	push	{r7}
 800e986:	b083      	sub	sp, #12
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	460b      	mov	r3, r1
 800e98e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800e990:	887b      	ldrh	r3, [r7, #2]
 800e992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e996:	d108      	bne.n	800e9aa <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	881b      	ldrh	r3, [r3, #0]
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e9a2:	b29a      	uxth	r2, r3
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
  }
}
 800e9a8:	e007      	b.n	800e9ba <I2C_PECPositionConfig+0x36>
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	881b      	ldrh	r3, [r3, #0]
 800e9ae:	b29b      	uxth	r3, r3
 800e9b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e9b4:	b29a      	uxth	r2, r3
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	801a      	strh	r2, [r3, #0]
}
 800e9ba:	bf00      	nop
 800e9bc:	370c      	adds	r7, #12
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr

0800e9c6 <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800e9c6:	b480      	push	{r7}
 800e9c8:	b083      	sub	sp, #12
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	6078      	str	r0, [r7, #4]
 800e9ce:	460b      	mov	r3, r1
 800e9d0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e9d2:	78fb      	ldrb	r3, [r7, #3]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d008      	beq.n	800e9ea <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	881b      	ldrh	r3, [r3, #0]
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	f043 0320 	orr.w	r3, r3, #32
 800e9e2:	b29a      	uxth	r2, r3
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
  }
}
 800e9e8:	e007      	b.n	800e9fa <I2C_CalculatePEC+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	881b      	ldrh	r3, [r3, #0]
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	f023 0320 	bic.w	r3, r3, #32
 800e9f4:	b29a      	uxth	r2, r3
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	801a      	strh	r2, [r3, #0]
}
 800e9fa:	bf00      	nop
 800e9fc:	370c      	adds	r7, #12
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea04:	4770      	bx	lr

0800ea06 <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 800ea06:	b480      	push	{r7}
 800ea08:	b083      	sub	sp, #12
 800ea0a:	af00      	add	r7, sp, #0
 800ea0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	8b1b      	ldrh	r3, [r3, #24]
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	0a1b      	lsrs	r3, r3, #8
 800ea16:	b29b      	uxth	r3, r3
 800ea18:	b2db      	uxtb	r3, r3
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	370c      	adds	r7, #12
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr

0800ea26 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800ea26:	b480      	push	{r7}
 800ea28:	b083      	sub	sp, #12
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]
 800ea2e:	460b      	mov	r3, r1
 800ea30:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ea32:	78fb      	ldrb	r3, [r7, #3]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d008      	beq.n	800ea4a <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	889b      	ldrh	r3, [r3, #4]
 800ea3c:	b29b      	uxth	r3, r3
 800ea3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ea42:	b29a      	uxth	r2, r3
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
  }
}
 800ea48:	e007      	b.n	800ea5a <I2C_DMACmd+0x34>
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	889b      	ldrh	r3, [r3, #4]
 800ea4e:	b29b      	uxth	r3, r3
 800ea50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ea54:	b29a      	uxth	r2, r3
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	809a      	strh	r2, [r3, #4]
}
 800ea5a:	bf00      	nop
 800ea5c:	370c      	adds	r7, #12
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr

0800ea66 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800ea66:	b480      	push	{r7}
 800ea68:	b083      	sub	sp, #12
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
 800ea6e:	460b      	mov	r3, r1
 800ea70:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ea72:	78fb      	ldrb	r3, [r7, #3]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d008      	beq.n	800ea8a <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	889b      	ldrh	r3, [r3, #4]
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ea82:	b29a      	uxth	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
  }
}
 800ea88:	e007      	b.n	800ea9a <I2C_DMALastTransferCmd+0x34>
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	889b      	ldrh	r3, [r3, #4]
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea94:	b29a      	uxth	r2, r3
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	809a      	strh	r2, [r3, #4]
}
 800ea9a:	bf00      	nop
 800ea9c:	370c      	adds	r7, #12
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr

0800eaa6 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 800eaa6:	b480      	push	{r7}
 800eaa8:	b085      	sub	sp, #20
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
 800eaae:	460b      	mov	r3, r1
 800eab0:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 800eab2:	2300      	movs	r3, #0
 800eab4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 800eaba:	78fa      	ldrb	r2, [r7, #3]
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	4413      	add	r3, r2
 800eac0:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	881b      	ldrh	r3, [r3, #0]
 800eac6:	b29b      	uxth	r3, r3
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3714      	adds	r7, #20
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr

0800ead4 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b083      	sub	sp, #12
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	460b      	mov	r3, r1
 800eade:	807b      	strh	r3, [r7, #2]
 800eae0:	4613      	mov	r3, r2
 800eae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 800eae4:	787b      	ldrb	r3, [r7, #1]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d008      	beq.n	800eafc <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	889b      	ldrh	r3, [r3, #4]
 800eaee:	b29a      	uxth	r2, r3
 800eaf0:	887b      	ldrh	r3, [r7, #2]
 800eaf2:	4313      	orrs	r3, r2
 800eaf4:	b29a      	uxth	r2, r3
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
  }
}
 800eafa:	e009      	b.n	800eb10 <I2C_ITConfig+0x3c>
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	889b      	ldrh	r3, [r3, #4]
 800eb00:	b29a      	uxth	r2, r3
 800eb02:	887b      	ldrh	r3, [r7, #2]
 800eb04:	43db      	mvns	r3, r3
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	4013      	ands	r3, r2
 800eb0a:	b29a      	uxth	r2, r3
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	809a      	strh	r2, [r3, #4]
}
 800eb10:	bf00      	nop
 800eb12:	370c      	adds	r7, #12
 800eb14:	46bd      	mov	sp, r7
 800eb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1a:	4770      	bx	lr

0800eb1c <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b087      	sub	sp, #28
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800eb26:	2300      	movs	r3, #0
 800eb28:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	60fb      	str	r3, [r7, #12]
 800eb2e:	2300      	movs	r3, #0
 800eb30:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800eb32:	2300      	movs	r3, #0
 800eb34:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	8a9b      	ldrh	r3, [r3, #20]
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	8b1b      	ldrh	r3, [r3, #24]
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	041b      	lsls	r3, r3, #16
 800eb4a:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800eb4c:	68fa      	ldr	r2, [r7, #12]
 800eb4e:	68bb      	ldr	r3, [r7, #8]
 800eb50:	4313      	orrs	r3, r2
 800eb52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800eb56:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800eb58:	693a      	ldr	r2, [r7, #16]
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	401a      	ands	r2, r3
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d102      	bne.n	800eb6a <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800eb64:	2301      	movs	r3, #1
 800eb66:	75fb      	strb	r3, [r7, #23]
 800eb68:	e001      	b.n	800eb6e <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800eb6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	371c      	adds	r7, #28
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b087      	sub	sp, #28
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 800eb84:	2300      	movs	r3, #0
 800eb86:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	613b      	str	r3, [r7, #16]
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	8a9b      	ldrh	r3, [r3, #20]
 800eb94:	b29b      	uxth	r3, r3
 800eb96:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	8b1b      	ldrh	r3, [r3, #24]
 800eb9c:	b29b      	uxth	r3, r3
 800eb9e:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	041b      	lsls	r3, r3, #16
 800eba4:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800eba6:	693a      	ldr	r2, [r7, #16]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	4313      	orrs	r3, r2
 800ebac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ebb0:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 800ebb2:	697b      	ldr	r3, [r7, #20]
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	371c      	adds	r7, #28
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr

0800ebc0 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b087      	sub	sp, #28
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	613b      	str	r3, [r7, #16]
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	0f1b      	lsrs	r3, r3, #28
 800ebde:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ebe6:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d003      	beq.n	800ebf6 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	3314      	adds	r3, #20
 800ebf2:	60fb      	str	r3, [r7, #12]
 800ebf4:	e005      	b.n	800ec02 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	0c1b      	lsrs	r3, r3, #16
 800ebfa:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	3318      	adds	r3, #24
 800ec00:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	4013      	ands	r3, r2
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d002      	beq.n	800ec14 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800ec0e:	2301      	movs	r3, #1
 800ec10:	75fb      	strb	r3, [r7, #23]
 800ec12:	e001      	b.n	800ec18 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800ec14:	2300      	movs	r3, #0
 800ec16:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800ec18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	371c      	adds	r7, #28
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr

0800ec26 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800ec26:	b480      	push	{r7}
 800ec28:	b085      	sub	sp, #20
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
 800ec2e:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800ec30:	2300      	movs	r3, #0
 800ec32:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ec3a:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	43db      	mvns	r3, r3
 800ec42:	b29a      	uxth	r2, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	829a      	strh	r2, [r3, #20]
}
 800ec48:	bf00      	nop
 800ec4a:	3714      	adds	r7, #20
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec52:	4770      	bx	lr

0800ec54 <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800ec54:	b480      	push	{r7}
 800ec56:	b085      	sub	sp, #20
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800ec62:	2300      	movs	r3, #0
 800ec64:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	0c1b      	lsrs	r3, r3, #16
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	8892      	ldrh	r2, [r2, #4]
 800ec6e:	b292      	uxth	r2, r2
 800ec70:	4013      	ands	r3, r2
 800ec72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ec76:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ec7e:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	8a9b      	ldrh	r3, [r3, #20]
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	461a      	mov	r2, r3
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	4013      	ands	r3, r2
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d005      	beq.n	800ec9c <I2C_GetITStatus+0x48>
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d002      	beq.n	800ec9c <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 800ec96:	2301      	movs	r3, #1
 800ec98:	73fb      	strb	r3, [r7, #15]
 800ec9a:	e001      	b.n	800eca0 <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 800eca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3714      	adds	r7, #20
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr

0800ecae <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800ecae:	b480      	push	{r7}
 800ecb0:	b085      	sub	sp, #20
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
 800ecb6:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ecc2:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	43db      	mvns	r3, r3
 800ecca:	b29a      	uxth	r2, r3
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	829a      	strh	r2, [r3, #20]
}
 800ecd0:	bf00      	nop
 800ecd2:	3714      	adds	r7, #20
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr

0800ecdc <IWDG_WriteAccessCmd>:
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b083      	sub	sp, #12
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	4603      	mov	r3, r0
 800ece4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 800ece6:	4a04      	ldr	r2, [pc, #16]	; (800ecf8 <IWDG_WriteAccessCmd+0x1c>)
 800ece8:	88fb      	ldrh	r3, [r7, #6]
 800ecea:	6013      	str	r3, [r2, #0]
}
 800ecec:	bf00      	nop
 800ecee:	370c      	adds	r7, #12
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr
 800ecf8:	40003000 	.word	0x40003000

0800ecfc <IWDG_SetPrescaler>:
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	4603      	mov	r3, r0
 800ed04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 800ed06:	4a04      	ldr	r2, [pc, #16]	; (800ed18 <IWDG_SetPrescaler+0x1c>)
 800ed08:	79fb      	ldrb	r3, [r7, #7]
 800ed0a:	6053      	str	r3, [r2, #4]
}
 800ed0c:	bf00      	nop
 800ed0e:	370c      	adds	r7, #12
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr
 800ed18:	40003000 	.word	0x40003000

0800ed1c <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b083      	sub	sp, #12
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	4603      	mov	r3, r0
 800ed24:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 800ed26:	4a04      	ldr	r2, [pc, #16]	; (800ed38 <IWDG_SetReload+0x1c>)
 800ed28:	88fb      	ldrh	r3, [r7, #6]
 800ed2a:	6093      	str	r3, [r2, #8]
}
 800ed2c:	bf00      	nop
 800ed2e:	370c      	adds	r7, #12
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr
 800ed38:	40003000 	.word	0x40003000

0800ed3c <IWDG_ReloadCounter>:
  *         (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 800ed40:	4b04      	ldr	r3, [pc, #16]	; (800ed54 <IWDG_ReloadCounter+0x18>)
 800ed42:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ed46:	601a      	str	r2, [r3, #0]
}
 800ed48:	bf00      	nop
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr
 800ed52:	bf00      	nop
 800ed54:	40003000 	.word	0x40003000

0800ed58 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 800ed5c:	4b04      	ldr	r3, [pc, #16]	; (800ed70 <IWDG_Enable+0x18>)
 800ed5e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800ed62:	601a      	str	r2, [r3, #0]
}
 800ed64:	bf00      	nop
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr
 800ed6e:	bf00      	nop
 800ed70:	40003000 	.word	0x40003000

0800ed74 <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b085      	sub	sp, #20
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 800ed82:	4b09      	ldr	r3, [pc, #36]	; (800eda8 <IWDG_GetFlagStatus+0x34>)
 800ed84:	68da      	ldr	r2, [r3, #12]
 800ed86:	88fb      	ldrh	r3, [r7, #6]
 800ed88:	4013      	ands	r3, r2
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d002      	beq.n	800ed94 <IWDG_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 800ed8e:	2301      	movs	r3, #1
 800ed90:	73fb      	strb	r3, [r7, #15]
 800ed92:	e001      	b.n	800ed98 <IWDG_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 800ed94:	2300      	movs	r3, #0
 800ed96:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800ed98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3714      	adds	r7, #20
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda4:	4770      	bx	lr
 800eda6:	bf00      	nop
 800eda8:	40003000 	.word	0x40003000

0800edac <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 800edb0:	2101      	movs	r1, #1
 800edb2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800edb6:	f000 fd15 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 800edba:	2100      	movs	r1, #0
 800edbc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800edc0:	f000 fd10 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 800edc4:	bf00      	nop
 800edc6:	bd80      	pop	{r7, pc}

0800edc8 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
 800edce:	4603      	mov	r3, r0
 800edd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 800edd2:	4a04      	ldr	r2, [pc, #16]	; (800ede4 <PWR_BackupAccessCmd+0x1c>)
 800edd4:	79fb      	ldrb	r3, [r7, #7]
 800edd6:	6013      	str	r3, [r2, #0]
}
 800edd8:	bf00      	nop
 800edda:	370c      	adds	r7, #12
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr
 800ede4:	420e0020 	.word	0x420e0020

0800ede8 <PWR_PVDLevelConfig>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 800ede8:	b480      	push	{r7}
 800edea:	b085      	sub	sp, #20
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800edf0:	2300      	movs	r3, #0
 800edf2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 800edf4:	4b09      	ldr	r3, [pc, #36]	; (800ee1c <PWR_PVDLevelConfig+0x34>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800ee00:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 800ee02:	68fa      	ldr	r2, [r7, #12]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	4313      	orrs	r3, r2
 800ee08:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800ee0a:	4a04      	ldr	r2, [pc, #16]	; (800ee1c <PWR_PVDLevelConfig+0x34>)
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	6013      	str	r3, [r2, #0]
}
 800ee10:	bf00      	nop
 800ee12:	3714      	adds	r7, #20
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr
 800ee1c:	40007000 	.word	0x40007000

0800ee20 <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b083      	sub	sp, #12
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	4603      	mov	r3, r0
 800ee28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 800ee2a:	4a04      	ldr	r2, [pc, #16]	; (800ee3c <PWR_PVDCmd+0x1c>)
 800ee2c:	79fb      	ldrb	r3, [r7, #7]
 800ee2e:	6013      	str	r3, [r2, #0]
}
 800ee30:	bf00      	nop
 800ee32:	370c      	adds	r7, #12
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr
 800ee3c:	420e0010 	.word	0x420e0010

0800ee40 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b083      	sub	sp, #12
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	4603      	mov	r3, r0
 800ee48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 800ee4a:	4a04      	ldr	r2, [pc, #16]	; (800ee5c <PWR_WakeUpPinCmd+0x1c>)
 800ee4c:	79fb      	ldrb	r3, [r7, #7]
 800ee4e:	6013      	str	r3, [r2, #0]
}
 800ee50:	bf00      	nop
 800ee52:	370c      	adds	r7, #12
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr
 800ee5c:	420e00a0 	.word	0x420e00a0

0800ee60 <PWR_BackupRegulatorCmd>:
  * @param  NewState: new state of the Backup Regulator.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	4603      	mov	r3, r0
 800ee68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 800ee6a:	4a04      	ldr	r2, [pc, #16]	; (800ee7c <PWR_BackupRegulatorCmd+0x1c>)
 800ee6c:	79fb      	ldrb	r3, [r7, #7]
 800ee6e:	6013      	str	r3, [r2, #0]
}
 800ee70:	bf00      	nop
 800ee72:	370c      	adds	r7, #12
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr
 800ee7c:	420e00a4 	.word	0x420e00a4

0800ee80 <PWR_MainRegulatorModeConfig>:
  *            @arg PWR_Regulator_Voltage_Scale3: Regulator voltage output Scale 3 mode, 
  *                                                System frequency up to 120 MHz
  * @retval None
  */
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b085      	sub	sp, #20
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg = 0;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	60fb      	str	r3, [r7, #12]
	
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  tmpreg = PWR->CR;
 800ee8c:	4b09      	ldr	r3, [pc, #36]	; (800eeb4 <PWR_MainRegulatorModeConfig+0x34>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	60fb      	str	r3, [r7, #12]
  
  /* Clear VOS[15:14] bits */
  tmpreg &= CR_VOS_MASK;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ee98:	60fb      	str	r3, [r7, #12]
  
  /* Set VOS[15:14] bits according to PWR_Regulator_Voltage value */
  tmpreg |= PWR_Regulator_Voltage;
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800eea2:	4a04      	ldr	r2, [pc, #16]	; (800eeb4 <PWR_MainRegulatorModeConfig+0x34>)
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	6013      	str	r3, [r2, #0]
}
 800eea8:	bf00      	nop
 800eeaa:	3714      	adds	r7, #20
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr
 800eeb4:	40007000 	.word	0x40007000

0800eeb8 <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b083      	sub	sp, #12
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	4603      	mov	r3, r0
 800eec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 800eec2:	4a04      	ldr	r2, [pc, #16]	; (800eed4 <PWR_FlashPowerDownCmd+0x1c>)
 800eec4:	79fb      	ldrb	r3, [r7, #7]
 800eec6:	6013      	str	r3, [r2, #0]
}
 800eec8:	bf00      	nop
 800eeca:	370c      	adds	r7, #12
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr
 800eed4:	420e0024 	.word	0x420e0024

0800eed8 <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b085      	sub	sp, #20
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	460b      	mov	r3, r1
 800eee2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800eee4:	2300      	movs	r3, #0
 800eee6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 800eee8:	4b12      	ldr	r3, [pc, #72]	; (800ef34 <PWR_EnterSTOPMode+0x5c>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	f023 0303 	bic.w	r3, r3, #3
 800eef4:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800eef6:	68fa      	ldr	r2, [r7, #12]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	4313      	orrs	r3, r2
 800eefc:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800eefe:	4a0d      	ldr	r2, [pc, #52]	; (800ef34 <PWR_EnterSTOPMode+0x5c>)
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800ef04:	4a0c      	ldr	r2, [pc, #48]	; (800ef38 <PWR_EnterSTOPMode+0x60>)
 800ef06:	4b0c      	ldr	r3, [pc, #48]	; (800ef38 <PWR_EnterSTOPMode+0x60>)
 800ef08:	691b      	ldr	r3, [r3, #16]
 800ef0a:	f043 0304 	orr.w	r3, r3, #4
 800ef0e:	6113      	str	r3, [r2, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800ef10:	78fb      	ldrb	r3, [r7, #3]
 800ef12:	2b01      	cmp	r3, #1
 800ef14:	d101      	bne.n	800ef1a <PWR_EnterSTOPMode+0x42>
  __ASM volatile ("wfi");
 800ef16:	bf30      	wfi
 800ef18:	e000      	b.n	800ef1c <PWR_EnterSTOPMode+0x44>
  __ASM volatile ("wfe");
 800ef1a:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 800ef1c:	4a06      	ldr	r2, [pc, #24]	; (800ef38 <PWR_EnterSTOPMode+0x60>)
 800ef1e:	4b06      	ldr	r3, [pc, #24]	; (800ef38 <PWR_EnterSTOPMode+0x60>)
 800ef20:	691b      	ldr	r3, [r3, #16]
 800ef22:	f023 0304 	bic.w	r3, r3, #4
 800ef26:	6113      	str	r3, [r2, #16]
}
 800ef28:	bf00      	nop
 800ef2a:	3714      	adds	r7, #20
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr
 800ef34:	40007000 	.word	0x40007000
 800ef38:	e000ed00 	.word	0xe000ed00

0800ef3c <PWR_EnterSTANDBYMode>:
  *          - WKUP pin 1 (PA0) if enabled.       
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	af00      	add	r7, sp, #0
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 800ef40:	4a0b      	ldr	r2, [pc, #44]	; (800ef70 <PWR_EnterSTANDBYMode+0x34>)
 800ef42:	4b0b      	ldr	r3, [pc, #44]	; (800ef70 <PWR_EnterSTANDBYMode+0x34>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f043 0304 	orr.w	r3, r3, #4
 800ef4a:	6013      	str	r3, [r2, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 800ef4c:	4a08      	ldr	r2, [pc, #32]	; (800ef70 <PWR_EnterSTANDBYMode+0x34>)
 800ef4e:	4b08      	ldr	r3, [pc, #32]	; (800ef70 <PWR_EnterSTANDBYMode+0x34>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f043 0302 	orr.w	r3, r3, #2
 800ef56:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800ef58:	4a06      	ldr	r2, [pc, #24]	; (800ef74 <PWR_EnterSTANDBYMode+0x38>)
 800ef5a:	4b06      	ldr	r3, [pc, #24]	; (800ef74 <PWR_EnterSTANDBYMode+0x38>)
 800ef5c:	691b      	ldr	r3, [r3, #16]
 800ef5e:	f043 0304 	orr.w	r3, r3, #4
 800ef62:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfi");
 800ef64:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 800ef66:	bf00      	nop
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6e:	4770      	bx	lr
 800ef70:	40007000 	.word	0x40007000
 800ef74:	e000ed00 	.word	0xe000ed00

0800ef78 <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
  *                 scaling output selection is ready. 
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b085      	sub	sp, #20
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800ef80:	2300      	movs	r3, #0
 800ef82:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 800ef84:	4b08      	ldr	r3, [pc, #32]	; (800efa8 <PWR_GetFlagStatus+0x30>)
 800ef86:	685a      	ldr	r2, [r3, #4]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	4013      	ands	r3, r2
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d002      	beq.n	800ef96 <PWR_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 800ef90:	2301      	movs	r3, #1
 800ef92:	73fb      	strb	r3, [r7, #15]
 800ef94:	e001      	b.n	800ef9a <PWR_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800ef96:	2300      	movs	r3, #0
 800ef98:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800ef9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3714      	adds	r7, #20
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr
 800efa8:	40007000 	.word	0x40007000

0800efac <PWR_ClearFlag>:
  *            @arg PWR_FLAG_WU: Wake Up flag
  *            @arg PWR_FLAG_SB: StandBy flag
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 800efac:	b480      	push	{r7}
 800efae:	b083      	sub	sp, #12
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 800efb4:	4906      	ldr	r1, [pc, #24]	; (800efd0 <PWR_ClearFlag+0x24>)
 800efb6:	4b06      	ldr	r3, [pc, #24]	; (800efd0 <PWR_ClearFlag+0x24>)
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	009b      	lsls	r3, r3, #2
 800efbe:	4313      	orrs	r3, r2
 800efc0:	600b      	str	r3, [r1, #0]
}
 800efc2:	bf00      	nop
 800efc4:	370c      	adds	r7, #12
 800efc6:	46bd      	mov	sp, r7
 800efc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efcc:	4770      	bx	lr
 800efce:	bf00      	nop
 800efd0:	40007000 	.word	0x40007000

0800efd4 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800efd4:	b480      	push	{r7}
 800efd6:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800efd8:	4a12      	ldr	r2, [pc, #72]	; (800f024 <RCC_DeInit+0x50>)
 800efda:	4b12      	ldr	r3, [pc, #72]	; (800f024 <RCC_DeInit+0x50>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f043 0301 	orr.w	r3, r3, #1
 800efe2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800efe4:	4b0f      	ldr	r3, [pc, #60]	; (800f024 <RCC_DeInit+0x50>)
 800efe6:	2200      	movs	r2, #0
 800efe8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 800efea:	4a0e      	ldr	r2, [pc, #56]	; (800f024 <RCC_DeInit+0x50>)
 800efec:	4b0d      	ldr	r3, [pc, #52]	; (800f024 <RCC_DeInit+0x50>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 800eff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eff8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800effa:	4b0a      	ldr	r3, [pc, #40]	; (800f024 <RCC_DeInit+0x50>)
 800effc:	4a0a      	ldr	r2, [pc, #40]	; (800f028 <RCC_DeInit+0x54>)
 800effe:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800f000:	4b08      	ldr	r3, [pc, #32]	; (800f024 <RCC_DeInit+0x50>)
 800f002:	4a0a      	ldr	r2, [pc, #40]	; (800f02c <RCC_DeInit+0x58>)
 800f004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800f008:	4a06      	ldr	r2, [pc, #24]	; (800f024 <RCC_DeInit+0x50>)
 800f00a:	4b06      	ldr	r3, [pc, #24]	; (800f024 <RCC_DeInit+0x50>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f012:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800f014:	4b03      	ldr	r3, [pc, #12]	; (800f024 <RCC_DeInit+0x50>)
 800f016:	2200      	movs	r2, #0
 800f018:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 800f01a:	bf00      	nop
 800f01c:	46bd      	mov	sp, r7
 800f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f022:	4770      	bx	lr
 800f024:	40023800 	.word	0x40023800
 800f028:	24003010 	.word	0x24003010
 800f02c:	20003000 	.word	0x20003000

0800f030 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 800f030:	b480      	push	{r7}
 800f032:	b083      	sub	sp, #12
 800f034:	af00      	add	r7, sp, #0
 800f036:	4603      	mov	r3, r0
 800f038:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800f03a:	4b06      	ldr	r3, [pc, #24]	; (800f054 <RCC_HSEConfig+0x24>)
 800f03c:	2200      	movs	r2, #0
 800f03e:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800f040:	4a04      	ldr	r2, [pc, #16]	; (800f054 <RCC_HSEConfig+0x24>)
 800f042:	79fb      	ldrb	r3, [r7, #7]
 800f044:	7013      	strb	r3, [r2, #0]
}
 800f046:	bf00      	nop
 800f048:	370c      	adds	r7, #12
 800f04a:	46bd      	mov	sp, r7
 800f04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f050:	4770      	bx	lr
 800f052:	bf00      	nop
 800f054:	40023802 	.word	0x40023802

0800f058 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b082      	sub	sp, #8
 800f05c:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 800f05e:	2300      	movs	r3, #0
 800f060:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800f062:	2300      	movs	r3, #0
 800f064:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 800f066:	2300      	movs	r3, #0
 800f068:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800f06a:	2031      	movs	r0, #49	; 0x31
 800f06c:	f000 fcc0 	bl	800f9f0 <RCC_GetFlagStatus>
 800f070:	4603      	mov	r3, r0
 800f072:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	3301      	adds	r3, #1
 800f078:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800f080:	d002      	beq.n	800f088 <RCC_WaitForHSEStartUp+0x30>
 800f082:	79bb      	ldrb	r3, [r7, #6]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d0f0      	beq.n	800f06a <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800f088:	2031      	movs	r0, #49	; 0x31
 800f08a:	f000 fcb1 	bl	800f9f0 <RCC_GetFlagStatus>
 800f08e:	4603      	mov	r3, r0
 800f090:	2b00      	cmp	r3, #0
 800f092:	d002      	beq.n	800f09a <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 800f094:	2301      	movs	r3, #1
 800f096:	71fb      	strb	r3, [r7, #7]
 800f098:	e001      	b.n	800f09e <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 800f09a:	2300      	movs	r3, #0
 800f09c:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 800f09e:	79fb      	ldrb	r3, [r7, #7]
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3708      	adds	r7, #8
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}

0800f0a8 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b085      	sub	sp, #20
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800f0b6:	4b0a      	ldr	r3, [pc, #40]	; (800f0e0 <RCC_AdjustHSICalibrationValue+0x38>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800f0c2:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800f0c4:	79fb      	ldrb	r3, [r7, #7]
 800f0c6:	00db      	lsls	r3, r3, #3
 800f0c8:	68fa      	ldr	r2, [r7, #12]
 800f0ca:	4313      	orrs	r3, r2
 800f0cc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 800f0ce:	4a04      	ldr	r2, [pc, #16]	; (800f0e0 <RCC_AdjustHSICalibrationValue+0x38>)
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	6013      	str	r3, [r2, #0]
}
 800f0d4:	bf00      	nop
 800f0d6:	3714      	adds	r7, #20
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0de:	4770      	bx	lr
 800f0e0:	40023800 	.word	0x40023800

0800f0e4 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800f0ee:	4a04      	ldr	r2, [pc, #16]	; (800f100 <RCC_HSICmd+0x1c>)
 800f0f0:	79fb      	ldrb	r3, [r7, #7]
 800f0f2:	6013      	str	r3, [r2, #0]
}
 800f0f4:	bf00      	nop
 800f0f6:	370c      	adds	r7, #12
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr
 800f100:	42470000 	.word	0x42470000

0800f104 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 800f104:	b480      	push	{r7}
 800f106:	b083      	sub	sp, #12
 800f108:	af00      	add	r7, sp, #0
 800f10a:	4603      	mov	r3, r0
 800f10c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800f10e:	4b0d      	ldr	r3, [pc, #52]	; (800f144 <RCC_LSEConfig+0x40>)
 800f110:	2200      	movs	r2, #0
 800f112:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800f114:	4b0b      	ldr	r3, [pc, #44]	; (800f144 <RCC_LSEConfig+0x40>)
 800f116:	2200      	movs	r2, #0
 800f118:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800f11a:	79fb      	ldrb	r3, [r7, #7]
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d002      	beq.n	800f126 <RCC_LSEConfig+0x22>
 800f120:	2b04      	cmp	r3, #4
 800f122:	d004      	beq.n	800f12e <RCC_LSEConfig+0x2a>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;
    default:
      break;
 800f124:	e007      	b.n	800f136 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800f126:	4b07      	ldr	r3, [pc, #28]	; (800f144 <RCC_LSEConfig+0x40>)
 800f128:	2201      	movs	r2, #1
 800f12a:	701a      	strb	r2, [r3, #0]
      break;
 800f12c:	e003      	b.n	800f136 <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800f12e:	4b05      	ldr	r3, [pc, #20]	; (800f144 <RCC_LSEConfig+0x40>)
 800f130:	2205      	movs	r2, #5
 800f132:	701a      	strb	r2, [r3, #0]
      break;
 800f134:	bf00      	nop
  }
}
 800f136:	bf00      	nop
 800f138:	370c      	adds	r7, #12
 800f13a:	46bd      	mov	sp, r7
 800f13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f140:	4770      	bx	lr
 800f142:	bf00      	nop
 800f144:	40023870 	.word	0x40023870

0800f148 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 800f148:	b480      	push	{r7}
 800f14a:	b083      	sub	sp, #12
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	4603      	mov	r3, r0
 800f150:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800f152:	4a04      	ldr	r2, [pc, #16]	; (800f164 <RCC_LSICmd+0x1c>)
 800f154:	79fb      	ldrb	r3, [r7, #7]
 800f156:	6013      	str	r3, [r2, #0]
}
 800f158:	bf00      	nop
 800f15a:	370c      	adds	r7, #12
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr
 800f164:	42470e80 	.word	0x42470e80

0800f168 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 800f168:	b480      	push	{r7}
 800f16a:	b085      	sub	sp, #20
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	60f8      	str	r0, [r7, #12]
 800f170:	60b9      	str	r1, [r7, #8]
 800f172:	607a      	str	r2, [r7, #4]
 800f174:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800f176:	490b      	ldr	r1, [pc, #44]	; (800f1a4 <RCC_PLLConfig+0x3c>)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	019a      	lsls	r2, r3, #6
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	431a      	orrs	r2, r3
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	085b      	lsrs	r3, r3, #1
 800f184:	3b01      	subs	r3, #1
 800f186:	041b      	lsls	r3, r3, #16
 800f188:	431a      	orrs	r2, r3
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	431a      	orrs	r2, r3
                 (PLLQ << 24);
 800f18e:	69bb      	ldr	r3, [r7, #24]
 800f190:	061b      	lsls	r3, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800f192:	4313      	orrs	r3, r2
 800f194:	604b      	str	r3, [r1, #4]
}
 800f196:	bf00      	nop
 800f198:	3714      	adds	r7, #20
 800f19a:	46bd      	mov	sp, r7
 800f19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a0:	4770      	bx	lr
 800f1a2:	bf00      	nop
 800f1a4:	40023800 	.word	0x40023800

0800f1a8 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800f1b2:	4a04      	ldr	r2, [pc, #16]	; (800f1c4 <RCC_PLLCmd+0x1c>)
 800f1b4:	79fb      	ldrb	r3, [r7, #7]
 800f1b6:	6013      	str	r3, [r2, #0]
}
 800f1b8:	bf00      	nop
 800f1ba:	370c      	adds	r7, #12
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr
 800f1c4:	42470060 	.word	0x42470060

0800f1c8 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b083      	sub	sp, #12
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 800f1d2:	4907      	ldr	r1, [pc, #28]	; (800f1f0 <RCC_PLLI2SConfig+0x28>)
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	019a      	lsls	r2, r3, #6
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	071b      	lsls	r3, r3, #28
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 800f1e2:	bf00      	nop
 800f1e4:	370c      	adds	r7, #12
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ec:	4770      	bx	lr
 800f1ee:	bf00      	nop
 800f1f0:	40023800 	.word	0x40023800

0800f1f4 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b083      	sub	sp, #12
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800f1fe:	4a04      	ldr	r2, [pc, #16]	; (800f210 <RCC_PLLI2SCmd+0x1c>)
 800f200:	79fb      	ldrb	r3, [r7, #7]
 800f202:	6013      	str	r3, [r2, #0]
}
 800f204:	bf00      	nop
 800f206:	370c      	adds	r7, #12
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr
 800f210:	42470068 	.word	0x42470068

0800f214 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 800f214:	b480      	push	{r7}
 800f216:	b083      	sub	sp, #12
 800f218:	af00      	add	r7, sp, #0
 800f21a:	4603      	mov	r3, r0
 800f21c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800f21e:	4a04      	ldr	r2, [pc, #16]	; (800f230 <RCC_ClockSecuritySystemCmd+0x1c>)
 800f220:	79fb      	ldrb	r3, [r7, #7]
 800f222:	6013      	str	r3, [r2, #0]
}
 800f224:	bf00      	nop
 800f226:	370c      	adds	r7, #12
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr
 800f230:	4247004c 	.word	0x4247004c

0800f234 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 800f234:	b480      	push	{r7}
 800f236:	b085      	sub	sp, #20
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f23e:	2300      	movs	r3, #0
 800f240:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 800f242:	4b0b      	ldr	r3, [pc, #44]	; (800f270 <RCC_MCO1Config+0x3c>)
 800f244:	689b      	ldr	r3, [r3, #8]
 800f246:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 800f24e:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 800f250:	687a      	ldr	r2, [r7, #4]
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	4313      	orrs	r3, r2
 800f256:	68fa      	ldr	r2, [r7, #12]
 800f258:	4313      	orrs	r3, r2
 800f25a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800f25c:	4a04      	ldr	r2, [pc, #16]	; (800f270 <RCC_MCO1Config+0x3c>)
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	6093      	str	r3, [r2, #8]
}
 800f262:	bf00      	nop
 800f264:	3714      	adds	r7, #20
 800f266:	46bd      	mov	sp, r7
 800f268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26c:	4770      	bx	lr
 800f26e:	bf00      	nop
 800f270:	40023800 	.word	0x40023800

0800f274 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 800f274:	b480      	push	{r7}
 800f276:	b085      	sub	sp, #20
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
 800f27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f27e:	2300      	movs	r3, #0
 800f280:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 800f282:	4b0b      	ldr	r3, [pc, #44]	; (800f2b0 <RCC_MCO2Config+0x3c>)
 800f284:	689b      	ldr	r3, [r3, #8]
 800f286:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800f28e:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800f290:	687a      	ldr	r2, [r7, #4]
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	4313      	orrs	r3, r2
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	4313      	orrs	r3, r2
 800f29a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800f29c:	4a04      	ldr	r2, [pc, #16]	; (800f2b0 <RCC_MCO2Config+0x3c>)
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	6093      	str	r3, [r2, #8]
}
 800f2a2:	bf00      	nop
 800f2a4:	3714      	adds	r7, #20
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr
 800f2ae:	bf00      	nop
 800f2b0:	40023800 	.word	0x40023800

0800f2b4 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b085      	sub	sp, #20
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 800f2c0:	4b09      	ldr	r3, [pc, #36]	; (800f2e8 <RCC_SYSCLKConfig+0x34>)
 800f2c2:	689b      	ldr	r3, [r3, #8]
 800f2c4:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	f023 0303 	bic.w	r3, r3, #3
 800f2cc:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800f2ce:	68fa      	ldr	r2, [r7, #12]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	4313      	orrs	r3, r2
 800f2d4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f2d6:	4a04      	ldr	r2, [pc, #16]	; (800f2e8 <RCC_SYSCLKConfig+0x34>)
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	6093      	str	r3, [r2, #8]
}
 800f2dc:	bf00      	nop
 800f2de:	3714      	adds	r7, #20
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr
 800f2e8:	40023800 	.word	0x40023800

0800f2ec <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800f2f0:	4b05      	ldr	r3, [pc, #20]	; (800f308 <RCC_GetSYSCLKSource+0x1c>)
 800f2f2:	689b      	ldr	r3, [r3, #8]
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	f003 030c 	and.w	r3, r3, #12
 800f2fa:	b2db      	uxtb	r3, r3
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr
 800f306:	bf00      	nop
 800f308:	40023800 	.word	0x40023800

0800f30c <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800f30c:	b480      	push	{r7}
 800f30e:	b085      	sub	sp, #20
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f314:	2300      	movs	r3, #0
 800f316:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800f318:	4b09      	ldr	r3, [pc, #36]	; (800f340 <RCC_HCLKConfig+0x34>)
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f324:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800f326:	68fa      	ldr	r2, [r7, #12]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	4313      	orrs	r3, r2
 800f32c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f32e:	4a04      	ldr	r2, [pc, #16]	; (800f340 <RCC_HCLKConfig+0x34>)
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	6093      	str	r3, [r2, #8]
}
 800f334:	bf00      	nop
 800f336:	3714      	adds	r7, #20
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr
 800f340:	40023800 	.word	0x40023800

0800f344 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 800f344:	b480      	push	{r7}
 800f346:	b085      	sub	sp, #20
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f34c:	2300      	movs	r3, #0
 800f34e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800f350:	4b09      	ldr	r3, [pc, #36]	; (800f378 <RCC_PCLK1Config+0x34>)
 800f352:	689b      	ldr	r3, [r3, #8]
 800f354:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800f35c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800f35e:	68fa      	ldr	r2, [r7, #12]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	4313      	orrs	r3, r2
 800f364:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f366:	4a04      	ldr	r2, [pc, #16]	; (800f378 <RCC_PCLK1Config+0x34>)
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	6093      	str	r3, [r2, #8]
}
 800f36c:	bf00      	nop
 800f36e:	3714      	adds	r7, #20
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr
 800f378:	40023800 	.word	0x40023800

0800f37c <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 800f37c:	b480      	push	{r7}
 800f37e:	b085      	sub	sp, #20
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f384:	2300      	movs	r3, #0
 800f386:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800f388:	4b0a      	ldr	r3, [pc, #40]	; (800f3b4 <RCC_PCLK2Config+0x38>)
 800f38a:	689b      	ldr	r3, [r3, #8]
 800f38c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800f394:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	00db      	lsls	r3, r3, #3
 800f39a:	68fa      	ldr	r2, [r7, #12]
 800f39c:	4313      	orrs	r3, r2
 800f39e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800f3a0:	4a04      	ldr	r2, [pc, #16]	; (800f3b4 <RCC_PCLK2Config+0x38>)
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	6093      	str	r3, [r2, #8]
}
 800f3a6:	bf00      	nop
 800f3a8:	3714      	adds	r7, #20
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr
 800f3b2:	bf00      	nop
 800f3b4:	40023800 	.word	0x40023800

0800f3b8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b089      	sub	sp, #36	; 0x24
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	61bb      	str	r3, [r7, #24]
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	617b      	str	r3, [r7, #20]
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	61fb      	str	r3, [r7, #28]
 800f3cc:	2302      	movs	r3, #2
 800f3ce:	613b      	str	r3, [r7, #16]
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	60fb      	str	r3, [r7, #12]
 800f3d4:	2302      	movs	r3, #2
 800f3d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800f3d8:	4b47      	ldr	r3, [pc, #284]	; (800f4f8 <RCC_GetClocksFreq+0x140>)
 800f3da:	689b      	ldr	r3, [r3, #8]
 800f3dc:	f003 030c 	and.w	r3, r3, #12
 800f3e0:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800f3e2:	69bb      	ldr	r3, [r7, #24]
 800f3e4:	2b04      	cmp	r3, #4
 800f3e6:	d007      	beq.n	800f3f8 <RCC_GetClocksFreq+0x40>
 800f3e8:	2b08      	cmp	r3, #8
 800f3ea:	d009      	beq.n	800f400 <RCC_GetClocksFreq+0x48>
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d13d      	bne.n	800f46c <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	4a42      	ldr	r2, [pc, #264]	; (800f4fc <RCC_GetClocksFreq+0x144>)
 800f3f4:	601a      	str	r2, [r3, #0]
      break;
 800f3f6:	e03d      	b.n	800f474 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	4a41      	ldr	r2, [pc, #260]	; (800f500 <RCC_GetClocksFreq+0x148>)
 800f3fc:	601a      	str	r2, [r3, #0]
      break;
 800f3fe:	e039      	b.n	800f474 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800f400:	4b3d      	ldr	r3, [pc, #244]	; (800f4f8 <RCC_GetClocksFreq+0x140>)
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	0d9b      	lsrs	r3, r3, #22
 800f406:	f003 0301 	and.w	r3, r3, #1
 800f40a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f40c:	4b3a      	ldr	r3, [pc, #232]	; (800f4f8 <RCC_GetClocksFreq+0x140>)
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f414:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d00c      	beq.n	800f436 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800f41c:	4a38      	ldr	r2, [pc, #224]	; (800f500 <RCC_GetClocksFreq+0x148>)
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	fbb2 f3f3 	udiv	r3, r2, r3
 800f424:	4a34      	ldr	r2, [pc, #208]	; (800f4f8 <RCC_GetClocksFreq+0x140>)
 800f426:	6852      	ldr	r2, [r2, #4]
 800f428:	0992      	lsrs	r2, r2, #6
 800f42a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f42e:	fb02 f303 	mul.w	r3, r2, r3
 800f432:	61fb      	str	r3, [r7, #28]
 800f434:	e00b      	b.n	800f44e <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800f436:	4a31      	ldr	r2, [pc, #196]	; (800f4fc <RCC_GetClocksFreq+0x144>)
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f43e:	4a2e      	ldr	r2, [pc, #184]	; (800f4f8 <RCC_GetClocksFreq+0x140>)
 800f440:	6852      	ldr	r2, [r2, #4]
 800f442:	0992      	lsrs	r2, r2, #6
 800f444:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f448:	fb02 f303 	mul.w	r3, r2, r3
 800f44c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800f44e:	4b2a      	ldr	r3, [pc, #168]	; (800f4f8 <RCC_GetClocksFreq+0x140>)
 800f450:	685b      	ldr	r3, [r3, #4]
 800f452:	0c1b      	lsrs	r3, r3, #16
 800f454:	f003 0303 	and.w	r3, r3, #3
 800f458:	3301      	adds	r3, #1
 800f45a:	005b      	lsls	r3, r3, #1
 800f45c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800f45e:	69fa      	ldr	r2, [r7, #28]
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	fbb2 f2f3 	udiv	r2, r2, r3
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	601a      	str	r2, [r3, #0]
      break;
 800f46a:	e003      	b.n	800f474 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	4a23      	ldr	r2, [pc, #140]	; (800f4fc <RCC_GetClocksFreq+0x144>)
 800f470:	601a      	str	r2, [r3, #0]
      break;
 800f472:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800f474:	4b20      	ldr	r3, [pc, #128]	; (800f4f8 <RCC_GetClocksFreq+0x140>)
 800f476:	689b      	ldr	r3, [r3, #8]
 800f478:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f47c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800f47e:	69bb      	ldr	r3, [r7, #24]
 800f480:	091b      	lsrs	r3, r3, #4
 800f482:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800f484:	4a1f      	ldr	r2, [pc, #124]	; (800f504 <RCC_GetClocksFreq+0x14c>)
 800f486:	69bb      	ldr	r3, [r7, #24]
 800f488:	4413      	add	r3, r2
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	b2db      	uxtb	r3, r3
 800f48e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681a      	ldr	r2, [r3, #0]
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	40da      	lsrs	r2, r3
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800f49c:	4b16      	ldr	r3, [pc, #88]	; (800f4f8 <RCC_GetClocksFreq+0x140>)
 800f49e:	689b      	ldr	r3, [r3, #8]
 800f4a0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800f4a4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800f4a6:	69bb      	ldr	r3, [r7, #24]
 800f4a8:	0a9b      	lsrs	r3, r3, #10
 800f4aa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800f4ac:	4a15      	ldr	r2, [pc, #84]	; (800f504 <RCC_GetClocksFreq+0x14c>)
 800f4ae:	69bb      	ldr	r3, [r7, #24]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	685a      	ldr	r2, [r3, #4]
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	40da      	lsrs	r2, r3
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800f4c4:	4b0c      	ldr	r3, [pc, #48]	; (800f4f8 <RCC_GetClocksFreq+0x140>)
 800f4c6:	689b      	ldr	r3, [r3, #8]
 800f4c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f4cc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800f4ce:	69bb      	ldr	r3, [r7, #24]
 800f4d0:	0b5b      	lsrs	r3, r3, #13
 800f4d2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800f4d4:	4a0b      	ldr	r2, [pc, #44]	; (800f504 <RCC_GetClocksFreq+0x14c>)
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	4413      	add	r3, r2
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	b2db      	uxtb	r3, r3
 800f4de:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	685a      	ldr	r2, [r3, #4]
 800f4e4:	697b      	ldr	r3, [r7, #20]
 800f4e6:	40da      	lsrs	r2, r3
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	60da      	str	r2, [r3, #12]
}
 800f4ec:	bf00      	nop
 800f4ee:	3724      	adds	r7, #36	; 0x24
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f6:	4770      	bx	lr
 800f4f8:	40023800 	.word	0x40023800
 800f4fc:	00f42400 	.word	0x00f42400
 800f500:	017d7840 	.word	0x017d7840
 800f504:	2000000c 	.word	0x2000000c

0800f508 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 800f508:	b480      	push	{r7}
 800f50a:	b085      	sub	sp, #20
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f510:	2300      	movs	r3, #0
 800f512:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f51a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f51e:	d111      	bne.n	800f544 <RCC_RTCCLKConfig+0x3c>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 800f520:	4b0f      	ldr	r3, [pc, #60]	; (800f560 <RCC_RTCCLKConfig+0x58>)
 800f522:	689b      	ldr	r3, [r3, #8]
 800f524:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800f52c:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f538:	68fa      	ldr	r2, [r7, #12]
 800f53a:	4313      	orrs	r3, r2
 800f53c:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 800f53e:	4a08      	ldr	r2, [pc, #32]	; (800f560 <RCC_RTCCLKConfig+0x58>)
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	6093      	str	r3, [r2, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 800f544:	4906      	ldr	r1, [pc, #24]	; (800f560 <RCC_RTCCLKConfig+0x58>)
 800f546:	4b06      	ldr	r3, [pc, #24]	; (800f560 <RCC_RTCCLKConfig+0x58>)
 800f548:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f550:	4313      	orrs	r3, r2
 800f552:	670b      	str	r3, [r1, #112]	; 0x70
}
 800f554:	bf00      	nop
 800f556:	3714      	adds	r7, #20
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr
 800f560:	40023800 	.word	0x40023800

0800f564 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800f564:	b480      	push	{r7}
 800f566:	b083      	sub	sp, #12
 800f568:	af00      	add	r7, sp, #0
 800f56a:	4603      	mov	r3, r0
 800f56c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800f56e:	4a04      	ldr	r2, [pc, #16]	; (800f580 <RCC_RTCCLKCmd+0x1c>)
 800f570:	79fb      	ldrb	r3, [r7, #7]
 800f572:	6013      	str	r3, [r2, #0]
}
 800f574:	bf00      	nop
 800f576:	370c      	adds	r7, #12
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr
 800f580:	42470e3c 	.word	0x42470e3c

0800f584 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 800f584:	b480      	push	{r7}
 800f586:	b083      	sub	sp, #12
 800f588:	af00      	add	r7, sp, #0
 800f58a:	4603      	mov	r3, r0
 800f58c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800f58e:	4a04      	ldr	r2, [pc, #16]	; (800f5a0 <RCC_BackupResetCmd+0x1c>)
 800f590:	79fb      	ldrb	r3, [r7, #7]
 800f592:	6013      	str	r3, [r2, #0]
}
 800f594:	bf00      	nop
 800f596:	370c      	adds	r7, #12
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr
 800f5a0:	42470e40 	.word	0x42470e40

0800f5a4 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b083      	sub	sp, #12
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 800f5ac:	4a04      	ldr	r2, [pc, #16]	; (800f5c0 <RCC_I2SCLKConfig+0x1c>)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6013      	str	r3, [r2, #0]
}
 800f5b2:	bf00      	nop
 800f5b4:	370c      	adds	r7, #12
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5bc:	4770      	bx	lr
 800f5be:	bf00      	nop
 800f5c0:	4247015c 	.word	0x4247015c

0800f5c4 <RCC_TIMCLKPresConfig>:
  *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
  *                 to division by 8 or more.
  * @retval None
  */
void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	b083      	sub	sp, #12
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));

  *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
 800f5cc:	4a04      	ldr	r2, [pc, #16]	; (800f5e0 <RCC_TIMCLKPresConfig+0x1c>)
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6013      	str	r3, [r2, #0]
  
}
 800f5d2:	bf00      	nop
 800f5d4:	370c      	adds	r7, #12
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5dc:	4770      	bx	lr
 800f5de:	bf00      	nop
 800f5e0:	424711e0 	.word	0x424711e0

0800f5e4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b083      	sub	sp, #12
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	460b      	mov	r3, r1
 800f5ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f5f0:	78fb      	ldrb	r3, [r7, #3]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d006      	beq.n	800f604 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800f5f6:	490a      	ldr	r1, [pc, #40]	; (800f620 <RCC_AHB1PeriphClockCmd+0x3c>)
 800f5f8:	4b09      	ldr	r3, [pc, #36]	; (800f620 <RCC_AHB1PeriphClockCmd+0x3c>)
 800f5fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4313      	orrs	r3, r2
 800f600:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800f602:	e006      	b.n	800f612 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800f604:	4906      	ldr	r1, [pc, #24]	; (800f620 <RCC_AHB1PeriphClockCmd+0x3c>)
 800f606:	4b06      	ldr	r3, [pc, #24]	; (800f620 <RCC_AHB1PeriphClockCmd+0x3c>)
 800f608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	43db      	mvns	r3, r3
 800f60e:	4013      	ands	r3, r2
 800f610:	630b      	str	r3, [r1, #48]	; 0x30
}
 800f612:	bf00      	nop
 800f614:	370c      	adds	r7, #12
 800f616:	46bd      	mov	sp, r7
 800f618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61c:	4770      	bx	lr
 800f61e:	bf00      	nop
 800f620:	40023800 	.word	0x40023800

0800f624 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800f624:	b480      	push	{r7}
 800f626:	b083      	sub	sp, #12
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	460b      	mov	r3, r1
 800f62e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f630:	78fb      	ldrb	r3, [r7, #3]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d006      	beq.n	800f644 <RCC_AHB2PeriphClockCmd+0x20>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800f636:	490a      	ldr	r1, [pc, #40]	; (800f660 <RCC_AHB2PeriphClockCmd+0x3c>)
 800f638:	4b09      	ldr	r3, [pc, #36]	; (800f660 <RCC_AHB2PeriphClockCmd+0x3c>)
 800f63a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	4313      	orrs	r3, r2
 800f640:	634b      	str	r3, [r1, #52]	; 0x34
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
  }
}
 800f642:	e006      	b.n	800f652 <RCC_AHB2PeriphClockCmd+0x2e>
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800f644:	4906      	ldr	r1, [pc, #24]	; (800f660 <RCC_AHB2PeriphClockCmd+0x3c>)
 800f646:	4b06      	ldr	r3, [pc, #24]	; (800f660 <RCC_AHB2PeriphClockCmd+0x3c>)
 800f648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	43db      	mvns	r3, r3
 800f64e:	4013      	ands	r3, r2
 800f650:	634b      	str	r3, [r1, #52]	; 0x34
}
 800f652:	bf00      	nop
 800f654:	370c      	adds	r7, #12
 800f656:	46bd      	mov	sp, r7
 800f658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65c:	4770      	bx	lr
 800f65e:	bf00      	nop
 800f660:	40023800 	.word	0x40023800

0800f664 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800f664:	b480      	push	{r7}
 800f666:	b083      	sub	sp, #12
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	460b      	mov	r3, r1
 800f66e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f670:	78fb      	ldrb	r3, [r7, #3]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d006      	beq.n	800f684 <RCC_AHB3PeriphClockCmd+0x20>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800f676:	490a      	ldr	r1, [pc, #40]	; (800f6a0 <RCC_AHB3PeriphClockCmd+0x3c>)
 800f678:	4b09      	ldr	r3, [pc, #36]	; (800f6a0 <RCC_AHB3PeriphClockCmd+0x3c>)
 800f67a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	4313      	orrs	r3, r2
 800f680:	638b      	str	r3, [r1, #56]	; 0x38
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
  }
}
 800f682:	e006      	b.n	800f692 <RCC_AHB3PeriphClockCmd+0x2e>
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800f684:	4906      	ldr	r1, [pc, #24]	; (800f6a0 <RCC_AHB3PeriphClockCmd+0x3c>)
 800f686:	4b06      	ldr	r3, [pc, #24]	; (800f6a0 <RCC_AHB3PeriphClockCmd+0x3c>)
 800f688:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	43db      	mvns	r3, r3
 800f68e:	4013      	ands	r3, r2
 800f690:	638b      	str	r3, [r1, #56]	; 0x38
}
 800f692:	bf00      	nop
 800f694:	370c      	adds	r7, #12
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop
 800f6a0:	40023800 	.word	0x40023800

0800f6a4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b083      	sub	sp, #12
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f6b0:	78fb      	ldrb	r3, [r7, #3]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d006      	beq.n	800f6c4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800f6b6:	490a      	ldr	r1, [pc, #40]	; (800f6e0 <RCC_APB1PeriphClockCmd+0x3c>)
 800f6b8:	4b09      	ldr	r3, [pc, #36]	; (800f6e0 <RCC_APB1PeriphClockCmd+0x3c>)
 800f6ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800f6c2:	e006      	b.n	800f6d2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800f6c4:	4906      	ldr	r1, [pc, #24]	; (800f6e0 <RCC_APB1PeriphClockCmd+0x3c>)
 800f6c6:	4b06      	ldr	r3, [pc, #24]	; (800f6e0 <RCC_APB1PeriphClockCmd+0x3c>)
 800f6c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	43db      	mvns	r3, r3
 800f6ce:	4013      	ands	r3, r2
 800f6d0:	640b      	str	r3, [r1, #64]	; 0x40
}
 800f6d2:	bf00      	nop
 800f6d4:	370c      	adds	r7, #12
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr
 800f6de:	bf00      	nop
 800f6e0:	40023800 	.word	0x40023800

0800f6e4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b083      	sub	sp, #12
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	460b      	mov	r3, r1
 800f6ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f6f0:	78fb      	ldrb	r3, [r7, #3]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d006      	beq.n	800f704 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800f6f6:	490a      	ldr	r1, [pc, #40]	; (800f720 <RCC_APB2PeriphClockCmd+0x3c>)
 800f6f8:	4b09      	ldr	r3, [pc, #36]	; (800f720 <RCC_APB2PeriphClockCmd+0x3c>)
 800f6fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4313      	orrs	r3, r2
 800f700:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800f702:	e006      	b.n	800f712 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800f704:	4906      	ldr	r1, [pc, #24]	; (800f720 <RCC_APB2PeriphClockCmd+0x3c>)
 800f706:	4b06      	ldr	r3, [pc, #24]	; (800f720 <RCC_APB2PeriphClockCmd+0x3c>)
 800f708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	43db      	mvns	r3, r3
 800f70e:	4013      	ands	r3, r2
 800f710:	644b      	str	r3, [r1, #68]	; 0x44
}
 800f712:	bf00      	nop
 800f714:	370c      	adds	r7, #12
 800f716:	46bd      	mov	sp, r7
 800f718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop
 800f720:	40023800 	.word	0x40023800

0800f724 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	460b      	mov	r3, r1
 800f72e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f730:	78fb      	ldrb	r3, [r7, #3]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d006      	beq.n	800f744 <RCC_AHB1PeriphResetCmd+0x20>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800f736:	490a      	ldr	r1, [pc, #40]	; (800f760 <RCC_AHB1PeriphResetCmd+0x3c>)
 800f738:	4b09      	ldr	r3, [pc, #36]	; (800f760 <RCC_AHB1PeriphResetCmd+0x3c>)
 800f73a:	691a      	ldr	r2, [r3, #16]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	4313      	orrs	r3, r2
 800f740:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
  }
}
 800f742:	e006      	b.n	800f752 <RCC_AHB1PeriphResetCmd+0x2e>
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 800f744:	4906      	ldr	r1, [pc, #24]	; (800f760 <RCC_AHB1PeriphResetCmd+0x3c>)
 800f746:	4b06      	ldr	r3, [pc, #24]	; (800f760 <RCC_AHB1PeriphResetCmd+0x3c>)
 800f748:	691a      	ldr	r2, [r3, #16]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	43db      	mvns	r3, r3
 800f74e:	4013      	ands	r3, r2
 800f750:	610b      	str	r3, [r1, #16]
}
 800f752:	bf00      	nop
 800f754:	370c      	adds	r7, #12
 800f756:	46bd      	mov	sp, r7
 800f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75c:	4770      	bx	lr
 800f75e:	bf00      	nop
 800f760:	40023800 	.word	0x40023800

0800f764 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800f764:	b480      	push	{r7}
 800f766:	b083      	sub	sp, #12
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
 800f76c:	460b      	mov	r3, r1
 800f76e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f770:	78fb      	ldrb	r3, [r7, #3]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d006      	beq.n	800f784 <RCC_AHB2PeriphResetCmd+0x20>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800f776:	490a      	ldr	r1, [pc, #40]	; (800f7a0 <RCC_AHB2PeriphResetCmd+0x3c>)
 800f778:	4b09      	ldr	r3, [pc, #36]	; (800f7a0 <RCC_AHB2PeriphResetCmd+0x3c>)
 800f77a:	695a      	ldr	r2, [r3, #20]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	4313      	orrs	r3, r2
 800f780:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
  }
}
 800f782:	e006      	b.n	800f792 <RCC_AHB2PeriphResetCmd+0x2e>
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 800f784:	4906      	ldr	r1, [pc, #24]	; (800f7a0 <RCC_AHB2PeriphResetCmd+0x3c>)
 800f786:	4b06      	ldr	r3, [pc, #24]	; (800f7a0 <RCC_AHB2PeriphResetCmd+0x3c>)
 800f788:	695a      	ldr	r2, [r3, #20]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	43db      	mvns	r3, r3
 800f78e:	4013      	ands	r3, r2
 800f790:	614b      	str	r3, [r1, #20]
}
 800f792:	bf00      	nop
 800f794:	370c      	adds	r7, #12
 800f796:	46bd      	mov	sp, r7
 800f798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79c:	4770      	bx	lr
 800f79e:	bf00      	nop
 800f7a0:	40023800 	.word	0x40023800

0800f7a4 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b083      	sub	sp, #12
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f7b0:	78fb      	ldrb	r3, [r7, #3]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d006      	beq.n	800f7c4 <RCC_AHB3PeriphResetCmd+0x20>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800f7b6:	490a      	ldr	r1, [pc, #40]	; (800f7e0 <RCC_AHB3PeriphResetCmd+0x3c>)
 800f7b8:	4b09      	ldr	r3, [pc, #36]	; (800f7e0 <RCC_AHB3PeriphResetCmd+0x3c>)
 800f7ba:	699a      	ldr	r2, [r3, #24]
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4313      	orrs	r3, r2
 800f7c0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
  }
}
 800f7c2:	e006      	b.n	800f7d2 <RCC_AHB3PeriphResetCmd+0x2e>
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 800f7c4:	4906      	ldr	r1, [pc, #24]	; (800f7e0 <RCC_AHB3PeriphResetCmd+0x3c>)
 800f7c6:	4b06      	ldr	r3, [pc, #24]	; (800f7e0 <RCC_AHB3PeriphResetCmd+0x3c>)
 800f7c8:	699a      	ldr	r2, [r3, #24]
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	43db      	mvns	r3, r3
 800f7ce:	4013      	ands	r3, r2
 800f7d0:	618b      	str	r3, [r1, #24]
}
 800f7d2:	bf00      	nop
 800f7d4:	370c      	adds	r7, #12
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7dc:	4770      	bx	lr
 800f7de:	bf00      	nop
 800f7e0:	40023800 	.word	0x40023800

0800f7e4 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800f7e4:	b480      	push	{r7}
 800f7e6:	b083      	sub	sp, #12
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
 800f7ec:	460b      	mov	r3, r1
 800f7ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f7f0:	78fb      	ldrb	r3, [r7, #3]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d006      	beq.n	800f804 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800f7f6:	490a      	ldr	r1, [pc, #40]	; (800f820 <RCC_APB1PeriphResetCmd+0x3c>)
 800f7f8:	4b09      	ldr	r3, [pc, #36]	; (800f820 <RCC_APB1PeriphResetCmd+0x3c>)
 800f7fa:	6a1a      	ldr	r2, [r3, #32]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	4313      	orrs	r3, r2
 800f800:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 800f802:	e006      	b.n	800f812 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800f804:	4906      	ldr	r1, [pc, #24]	; (800f820 <RCC_APB1PeriphResetCmd+0x3c>)
 800f806:	4b06      	ldr	r3, [pc, #24]	; (800f820 <RCC_APB1PeriphResetCmd+0x3c>)
 800f808:	6a1a      	ldr	r2, [r3, #32]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	43db      	mvns	r3, r3
 800f80e:	4013      	ands	r3, r2
 800f810:	620b      	str	r3, [r1, #32]
}
 800f812:	bf00      	nop
 800f814:	370c      	adds	r7, #12
 800f816:	46bd      	mov	sp, r7
 800f818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81c:	4770      	bx	lr
 800f81e:	bf00      	nop
 800f820:	40023800 	.word	0x40023800

0800f824 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800f824:	b480      	push	{r7}
 800f826:	b083      	sub	sp, #12
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	460b      	mov	r3, r1
 800f82e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f830:	78fb      	ldrb	r3, [r7, #3]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d006      	beq.n	800f844 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800f836:	490a      	ldr	r1, [pc, #40]	; (800f860 <RCC_APB2PeriphResetCmd+0x3c>)
 800f838:	4b09      	ldr	r3, [pc, #36]	; (800f860 <RCC_APB2PeriphResetCmd+0x3c>)
 800f83a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	4313      	orrs	r3, r2
 800f840:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 800f842:	e006      	b.n	800f852 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800f844:	4906      	ldr	r1, [pc, #24]	; (800f860 <RCC_APB2PeriphResetCmd+0x3c>)
 800f846:	4b06      	ldr	r3, [pc, #24]	; (800f860 <RCC_APB2PeriphResetCmd+0x3c>)
 800f848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	43db      	mvns	r3, r3
 800f84e:	4013      	ands	r3, r2
 800f850:	624b      	str	r3, [r1, #36]	; 0x24
}
 800f852:	bf00      	nop
 800f854:	370c      	adds	r7, #12
 800f856:	46bd      	mov	sp, r7
 800f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85c:	4770      	bx	lr
 800f85e:	bf00      	nop
 800f860:	40023800 	.word	0x40023800

0800f864 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800f864:	b480      	push	{r7}
 800f866:	b083      	sub	sp, #12
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	460b      	mov	r3, r1
 800f86e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f870:	78fb      	ldrb	r3, [r7, #3]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d006      	beq.n	800f884 <RCC_AHB1PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800f876:	490a      	ldr	r1, [pc, #40]	; (800f8a0 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 800f878:	4b09      	ldr	r3, [pc, #36]	; (800f8a0 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 800f87a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	4313      	orrs	r3, r2
 800f880:	650b      	str	r3, [r1, #80]	; 0x50
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
  }
}
 800f882:	e006      	b.n	800f892 <RCC_AHB1PeriphClockLPModeCmd+0x2e>
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 800f884:	4906      	ldr	r1, [pc, #24]	; (800f8a0 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 800f886:	4b06      	ldr	r3, [pc, #24]	; (800f8a0 <RCC_AHB1PeriphClockLPModeCmd+0x3c>)
 800f888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	43db      	mvns	r3, r3
 800f88e:	4013      	ands	r3, r2
 800f890:	650b      	str	r3, [r1, #80]	; 0x50
}
 800f892:	bf00      	nop
 800f894:	370c      	adds	r7, #12
 800f896:	46bd      	mov	sp, r7
 800f898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89c:	4770      	bx	lr
 800f89e:	bf00      	nop
 800f8a0:	40023800 	.word	0x40023800

0800f8a4 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800f8a4:	b480      	push	{r7}
 800f8a6:	b083      	sub	sp, #12
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f8b0:	78fb      	ldrb	r3, [r7, #3]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d006      	beq.n	800f8c4 <RCC_AHB2PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800f8b6:	490a      	ldr	r1, [pc, #40]	; (800f8e0 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 800f8b8:	4b09      	ldr	r3, [pc, #36]	; (800f8e0 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 800f8ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	654b      	str	r3, [r1, #84]	; 0x54
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
  }
}
 800f8c2:	e006      	b.n	800f8d2 <RCC_AHB2PeriphClockLPModeCmd+0x2e>
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800f8c4:	4906      	ldr	r1, [pc, #24]	; (800f8e0 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 800f8c6:	4b06      	ldr	r3, [pc, #24]	; (800f8e0 <RCC_AHB2PeriphClockLPModeCmd+0x3c>)
 800f8c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	43db      	mvns	r3, r3
 800f8ce:	4013      	ands	r3, r2
 800f8d0:	654b      	str	r3, [r1, #84]	; 0x54
}
 800f8d2:	bf00      	nop
 800f8d4:	370c      	adds	r7, #12
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8dc:	4770      	bx	lr
 800f8de:	bf00      	nop
 800f8e0:	40023800 	.word	0x40023800

0800f8e4 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	460b      	mov	r3, r1
 800f8ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f8f0:	78fb      	ldrb	r3, [r7, #3]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d006      	beq.n	800f904 <RCC_AHB3PeriphClockLPModeCmd+0x20>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800f8f6:	490a      	ldr	r1, [pc, #40]	; (800f920 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 800f8f8:	4b09      	ldr	r3, [pc, #36]	; (800f920 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 800f8fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	4313      	orrs	r3, r2
 800f900:	658b      	str	r3, [r1, #88]	; 0x58
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
  }
}
 800f902:	e006      	b.n	800f912 <RCC_AHB3PeriphClockLPModeCmd+0x2e>
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 800f904:	4906      	ldr	r1, [pc, #24]	; (800f920 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 800f906:	4b06      	ldr	r3, [pc, #24]	; (800f920 <RCC_AHB3PeriphClockLPModeCmd+0x3c>)
 800f908:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	43db      	mvns	r3, r3
 800f90e:	4013      	ands	r3, r2
 800f910:	658b      	str	r3, [r1, #88]	; 0x58
}
 800f912:	bf00      	nop
 800f914:	370c      	adds	r7, #12
 800f916:	46bd      	mov	sp, r7
 800f918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91c:	4770      	bx	lr
 800f91e:	bf00      	nop
 800f920:	40023800 	.word	0x40023800

0800f924 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800f924:	b480      	push	{r7}
 800f926:	b083      	sub	sp, #12
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	460b      	mov	r3, r1
 800f92e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f930:	78fb      	ldrb	r3, [r7, #3]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d006      	beq.n	800f944 <RCC_APB1PeriphClockLPModeCmd+0x20>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800f936:	490a      	ldr	r1, [pc, #40]	; (800f960 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 800f938:	4b09      	ldr	r3, [pc, #36]	; (800f960 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 800f93a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	4313      	orrs	r3, r2
 800f940:	660b      	str	r3, [r1, #96]	; 0x60
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
  }
}
 800f942:	e006      	b.n	800f952 <RCC_APB1PeriphClockLPModeCmd+0x2e>
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800f944:	4906      	ldr	r1, [pc, #24]	; (800f960 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 800f946:	4b06      	ldr	r3, [pc, #24]	; (800f960 <RCC_APB1PeriphClockLPModeCmd+0x3c>)
 800f948:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	43db      	mvns	r3, r3
 800f94e:	4013      	ands	r3, r2
 800f950:	660b      	str	r3, [r1, #96]	; 0x60
}
 800f952:	bf00      	nop
 800f954:	370c      	adds	r7, #12
 800f956:	46bd      	mov	sp, r7
 800f958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95c:	4770      	bx	lr
 800f95e:	bf00      	nop
 800f960:	40023800 	.word	0x40023800

0800f964 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800f964:	b480      	push	{r7}
 800f966:	b083      	sub	sp, #12
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	460b      	mov	r3, r1
 800f96e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f970:	78fb      	ldrb	r3, [r7, #3]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d006      	beq.n	800f984 <RCC_APB2PeriphClockLPModeCmd+0x20>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800f976:	490a      	ldr	r1, [pc, #40]	; (800f9a0 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 800f978:	4b09      	ldr	r3, [pc, #36]	; (800f9a0 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 800f97a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	4313      	orrs	r3, r2
 800f980:	664b      	str	r3, [r1, #100]	; 0x64
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
  }
}
 800f982:	e006      	b.n	800f992 <RCC_APB2PeriphClockLPModeCmd+0x2e>
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 800f984:	4906      	ldr	r1, [pc, #24]	; (800f9a0 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 800f986:	4b06      	ldr	r3, [pc, #24]	; (800f9a0 <RCC_APB2PeriphClockLPModeCmd+0x3c>)
 800f988:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	43db      	mvns	r3, r3
 800f98e:	4013      	ands	r3, r2
 800f990:	664b      	str	r3, [r1, #100]	; 0x64
}
 800f992:	bf00      	nop
 800f994:	370c      	adds	r7, #12
 800f996:	46bd      	mov	sp, r7
 800f998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99c:	4770      	bx	lr
 800f99e:	bf00      	nop
 800f9a0:	40023800 	.word	0x40023800

0800f9a4 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b083      	sub	sp, #12
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	460a      	mov	r2, r1
 800f9ae:	71fb      	strb	r3, [r7, #7]
 800f9b0:	4613      	mov	r3, r2
 800f9b2:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f9b4:	79bb      	ldrb	r3, [r7, #6]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d008      	beq.n	800f9cc <RCC_ITConfig+0x28>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800f9ba:	490c      	ldr	r1, [pc, #48]	; (800f9ec <RCC_ITConfig+0x48>)
 800f9bc:	4b0b      	ldr	r3, [pc, #44]	; (800f9ec <RCC_ITConfig+0x48>)
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	b2da      	uxtb	r2, r3
 800f9c2:	79fb      	ldrb	r3, [r7, #7]
 800f9c4:	4313      	orrs	r3, r2
 800f9c6:	b2db      	uxtb	r3, r3
 800f9c8:	700b      	strb	r3, [r1, #0]
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
  }
}
 800f9ca:	e009      	b.n	800f9e0 <RCC_ITConfig+0x3c>
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800f9cc:	4907      	ldr	r1, [pc, #28]	; (800f9ec <RCC_ITConfig+0x48>)
 800f9ce:	4b07      	ldr	r3, [pc, #28]	; (800f9ec <RCC_ITConfig+0x48>)
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	b2da      	uxtb	r2, r3
 800f9d4:	79fb      	ldrb	r3, [r7, #7]
 800f9d6:	43db      	mvns	r3, r3
 800f9d8:	b2db      	uxtb	r3, r3
 800f9da:	4013      	ands	r3, r2
 800f9dc:	b2db      	uxtb	r3, r3
 800f9de:	700b      	strb	r3, [r1, #0]
}
 800f9e0:	bf00      	nop
 800f9e2:	370c      	adds	r7, #12
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr
 800f9ec:	4002380d 	.word	0x4002380d

0800f9f0 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b087      	sub	sp, #28
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800fa02:	2300      	movs	r3, #0
 800fa04:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800fa06:	79fb      	ldrb	r3, [r7, #7]
 800fa08:	095b      	lsrs	r3, r3, #5
 800fa0a:	b2db      	uxtb	r3, r3
 800fa0c:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	d103      	bne.n	800fa1c <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 800fa14:	4b12      	ldr	r3, [pc, #72]	; (800fa60 <RCC_GetFlagStatus+0x70>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	617b      	str	r3, [r7, #20]
 800fa1a:	e009      	b.n	800fa30 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	2b02      	cmp	r3, #2
 800fa20:	d103      	bne.n	800fa2a <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800fa22:	4b0f      	ldr	r3, [pc, #60]	; (800fa60 <RCC_GetFlagStatus+0x70>)
 800fa24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa26:	617b      	str	r3, [r7, #20]
 800fa28:	e002      	b.n	800fa30 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800fa2a:	4b0d      	ldr	r3, [pc, #52]	; (800fa60 <RCC_GetFlagStatus+0x70>)
 800fa2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa2e:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800fa30:	79fb      	ldrb	r3, [r7, #7]
 800fa32:	f003 031f 	and.w	r3, r3, #31
 800fa36:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800fa38:	697a      	ldr	r2, [r7, #20]
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	fa22 f303 	lsr.w	r3, r2, r3
 800fa40:	f003 0301 	and.w	r3, r3, #1
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d002      	beq.n	800fa4e <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	74fb      	strb	r3, [r7, #19]
 800fa4c:	e001      	b.n	800fa52 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800fa52:	7cfb      	ldrb	r3, [r7, #19]
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	371c      	adds	r7, #28
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr
 800fa60:	40023800 	.word	0x40023800

0800fa64 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 800fa64:	b480      	push	{r7}
 800fa66:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 800fa68:	4a05      	ldr	r2, [pc, #20]	; (800fa80 <RCC_ClearFlag+0x1c>)
 800fa6a:	4b05      	ldr	r3, [pc, #20]	; (800fa80 <RCC_ClearFlag+0x1c>)
 800fa6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fa72:	6753      	str	r3, [r2, #116]	; 0x74
}
 800fa74:	bf00      	nop
 800fa76:	46bd      	mov	sp, r7
 800fa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7c:	4770      	bx	lr
 800fa7e:	bf00      	nop
 800fa80:	40023800 	.word	0x40023800

0800fa84 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt             
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 800fa84:	b480      	push	{r7}
 800fa86:	b085      	sub	sp, #20
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800fa92:	4b09      	ldr	r3, [pc, #36]	; (800fab8 <RCC_GetITStatus+0x34>)
 800fa94:	68da      	ldr	r2, [r3, #12]
 800fa96:	79fb      	ldrb	r3, [r7, #7]
 800fa98:	4013      	ands	r3, r2
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d002      	beq.n	800faa4 <RCC_GetITStatus+0x20>
  {
    bitstatus = SET;
 800fa9e:	2301      	movs	r3, #1
 800faa0:	73fb      	strb	r3, [r7, #15]
 800faa2:	e001      	b.n	800faa8 <RCC_GetITStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 800faa4:	2300      	movs	r3, #0
 800faa6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 800faa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800faaa:	4618      	mov	r0, r3
 800faac:	3714      	adds	r7, #20
 800faae:	46bd      	mov	sp, r7
 800fab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab4:	4770      	bx	lr
 800fab6:	bf00      	nop
 800fab8:	40023800 	.word	0x40023800

0800fabc <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	4603      	mov	r3, r0
 800fac4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800fac6:	4a04      	ldr	r2, [pc, #16]	; (800fad8 <RCC_ClearITPendingBit+0x1c>)
 800fac8:	79fb      	ldrb	r3, [r7, #7]
 800faca:	7013      	strb	r3, [r2, #0]
}
 800facc:	bf00      	nop
 800face:	370c      	adds	r7, #12
 800fad0:	46bd      	mov	sp, r7
 800fad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad6:	4770      	bx	lr
 800fad8:	4002380e 	.word	0x4002380e

0800fadc <RNG_DeInit>:
  * @brief  De-initializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 800fae0:	2101      	movs	r1, #1
 800fae2:	2040      	movs	r0, #64	; 0x40
 800fae4:	f7ff fe3e 	bl	800f764 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 800fae8:	2100      	movs	r1, #0
 800faea:	2040      	movs	r0, #64	; 0x40
 800faec:	f7ff fe3a 	bl	800f764 <RCC_AHB2PeriphResetCmd>
}
 800faf0:	bf00      	nop
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 800faf4:	b480      	push	{r7}
 800faf6:	b083      	sub	sp, #12
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	4603      	mov	r3, r0
 800fafc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fafe:	79fb      	ldrb	r3, [r7, #7]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d006      	beq.n	800fb12 <RNG_Cmd+0x1e>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 800fb04:	4a09      	ldr	r2, [pc, #36]	; (800fb2c <RNG_Cmd+0x38>)
 800fb06:	4b09      	ldr	r3, [pc, #36]	; (800fb2c <RNG_Cmd+0x38>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	f043 0304 	orr.w	r3, r3, #4
 800fb0e:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
  }
}
 800fb10:	e005      	b.n	800fb1e <RNG_Cmd+0x2a>
    RNG->CR &= ~RNG_CR_RNGEN;
 800fb12:	4a06      	ldr	r2, [pc, #24]	; (800fb2c <RNG_Cmd+0x38>)
 800fb14:	4b05      	ldr	r3, [pc, #20]	; (800fb2c <RNG_Cmd+0x38>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	f023 0304 	bic.w	r3, r3, #4
 800fb1c:	6013      	str	r3, [r2, #0]
}
 800fb1e:	bf00      	nop
 800fb20:	370c      	adds	r7, #12
 800fb22:	46bd      	mov	sp, r7
 800fb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb28:	4770      	bx	lr
 800fb2a:	bf00      	nop
 800fb2c:	50060800 	.word	0x50060800

0800fb30 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 800fb30:	b480      	push	{r7}
 800fb32:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 800fb34:	4b03      	ldr	r3, [pc, #12]	; (800fb44 <RNG_GetRandomNumber+0x14>)
 800fb36:	689b      	ldr	r3, [r3, #8]
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr
 800fb42:	bf00      	nop
 800fb44:	50060800 	.word	0x50060800

0800fb48 <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b083      	sub	sp, #12
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	4603      	mov	r3, r0
 800fb50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fb52:	79fb      	ldrb	r3, [r7, #7]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d006      	beq.n	800fb66 <RNG_ITConfig+0x1e>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 800fb58:	4a09      	ldr	r2, [pc, #36]	; (800fb80 <RNG_ITConfig+0x38>)
 800fb5a:	4b09      	ldr	r3, [pc, #36]	; (800fb80 <RNG_ITConfig+0x38>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	f043 0308 	orr.w	r3, r3, #8
 800fb62:	6013      	str	r3, [r2, #0]
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
  }
}
 800fb64:	e005      	b.n	800fb72 <RNG_ITConfig+0x2a>
    RNG->CR &= ~RNG_CR_IE;
 800fb66:	4a06      	ldr	r2, [pc, #24]	; (800fb80 <RNG_ITConfig+0x38>)
 800fb68:	4b05      	ldr	r3, [pc, #20]	; (800fb80 <RNG_ITConfig+0x38>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	f023 0308 	bic.w	r3, r3, #8
 800fb70:	6013      	str	r3, [r2, #0]
}
 800fb72:	bf00      	nop
 800fb74:	370c      	adds	r7, #12
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop
 800fb80:	50060800 	.word	0x50060800

0800fb84 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b085      	sub	sp, #20
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 800fb92:	4b09      	ldr	r3, [pc, #36]	; (800fbb8 <RNG_GetFlagStatus+0x34>)
 800fb94:	685a      	ldr	r2, [r3, #4]
 800fb96:	79fb      	ldrb	r3, [r7, #7]
 800fb98:	4013      	ands	r3, r2
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d002      	beq.n	800fba4 <RNG_GetFlagStatus+0x20>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 800fb9e:	2301      	movs	r3, #1
 800fba0:	73fb      	strb	r3, [r7, #15]
 800fba2:	e001      	b.n	800fba8 <RNG_GetFlagStatus+0x24>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 800fba4:	2300      	movs	r3, #0
 800fba6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 800fba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3714      	adds	r7, #20
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr
 800fbb6:	bf00      	nop
 800fbb8:	50060800 	.word	0x50060800

0800fbbc <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b083      	sub	sp, #12
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 800fbc6:	4a05      	ldr	r2, [pc, #20]	; (800fbdc <RNG_ClearFlag+0x20>)
 800fbc8:	79fb      	ldrb	r3, [r7, #7]
 800fbca:	011b      	lsls	r3, r3, #4
 800fbcc:	43db      	mvns	r3, r3
 800fbce:	6053      	str	r3, [r2, #4]
}
 800fbd0:	bf00      	nop
 800fbd2:	370c      	adds	r7, #12
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbda:	4770      	bx	lr
 800fbdc:	50060800 	.word	0x50060800

0800fbe0 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	b085      	sub	sp, #20
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800fbea:	2300      	movs	r3, #0
 800fbec:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 800fbee:	4b09      	ldr	r3, [pc, #36]	; (800fc14 <RNG_GetITStatus+0x34>)
 800fbf0:	685a      	ldr	r2, [r3, #4]
 800fbf2:	79fb      	ldrb	r3, [r7, #7]
 800fbf4:	4013      	ands	r3, r2
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d002      	beq.n	800fc00 <RNG_GetITStatus+0x20>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	73fb      	strb	r3, [r7, #15]
 800fbfe:	e001      	b.n	800fc04 <RNG_GetITStatus+0x24>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 800fc00:	2300      	movs	r3, #0
 800fc02:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 800fc04:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3714      	adds	r7, #20
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr
 800fc12:	bf00      	nop
 800fc14:	50060800 	.word	0x50060800

0800fc18 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b083      	sub	sp, #12
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	4603      	mov	r3, r0
 800fc20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 800fc22:	4a05      	ldr	r2, [pc, #20]	; (800fc38 <RNG_ClearITPendingBit+0x20>)
 800fc24:	79fb      	ldrb	r3, [r7, #7]
 800fc26:	43db      	mvns	r3, r3
 800fc28:	b2db      	uxtb	r3, r3
 800fc2a:	6053      	str	r3, [r2, #4]
}
 800fc2c:	bf00      	nop
 800fc2e:	370c      	adds	r7, #12
 800fc30:	46bd      	mov	sp, r7
 800fc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc36:	4770      	bx	lr
 800fc38:	50060800 	.word	0x50060800

0800fc3c <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b084      	sub	sp, #16
 800fc40:	af00      	add	r7, sp, #0
  __IO uint32_t wutcounter = 0x00;
 800fc42:	2300      	movs	r3, #0
 800fc44:	607b      	str	r3, [r7, #4]
  uint32_t wutwfstatus = 0x00;
 800fc46:	2300      	movs	r3, #0
 800fc48:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800fc4e:	4b36      	ldr	r3, [pc, #216]	; (800fd28 <RTC_DeInit+0xec>)
 800fc50:	22ca      	movs	r2, #202	; 0xca
 800fc52:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800fc54:	4b34      	ldr	r3, [pc, #208]	; (800fd28 <RTC_DeInit+0xec>)
 800fc56:	2253      	movs	r2, #83	; 0x53
 800fc58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800fc5a:	f000 f8d3 	bl	800fe04 <RTC_EnterInitMode>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d102      	bne.n	800fc6a <RTC_DeInit+0x2e>
  {
    status = ERROR;
 800fc64:	2300      	movs	r3, #0
 800fc66:	73fb      	strb	r3, [r7, #15]
 800fc68:	e055      	b.n	800fd16 <RTC_DeInit+0xda>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 800fc6a:	4b2f      	ldr	r3, [pc, #188]	; (800fd28 <RTC_DeInit+0xec>)
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	601a      	str	r2, [r3, #0]
    RTC->DR = (uint32_t)0x00002101;
 800fc70:	4b2d      	ldr	r3, [pc, #180]	; (800fd28 <RTC_DeInit+0xec>)
 800fc72:	f242 1201 	movw	r2, #8449	; 0x2101
 800fc76:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 800fc78:	4a2b      	ldr	r2, [pc, #172]	; (800fd28 <RTC_DeInit+0xec>)
 800fc7a:	4b2b      	ldr	r3, [pc, #172]	; (800fd28 <RTC_DeInit+0xec>)
 800fc7c:	689b      	ldr	r3, [r3, #8]
 800fc7e:	f003 0307 	and.w	r3, r3, #7
 800fc82:	6093      	str	r3, [r2, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800fc84:	4b28      	ldr	r3, [pc, #160]	; (800fd28 <RTC_DeInit+0xec>)
 800fc86:	68db      	ldr	r3, [r3, #12]
 800fc88:	f003 0304 	and.w	r3, r3, #4
 800fc8c:	60bb      	str	r3, [r7, #8]
      wutcounter++;  
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	3301      	adds	r3, #1
 800fc92:	607b      	str	r3, [r7, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc9a:	d002      	beq.n	800fca2 <RTC_DeInit+0x66>
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d0f0      	beq.n	800fc84 <RTC_DeInit+0x48>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800fca2:	4b21      	ldr	r3, [pc, #132]	; (800fd28 <RTC_DeInit+0xec>)
 800fca4:	68db      	ldr	r3, [r3, #12]
 800fca6:	f003 0304 	and.w	r3, r3, #4
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d102      	bne.n	800fcb4 <RTC_DeInit+0x78>
    {
      status = ERROR;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	73fb      	strb	r3, [r7, #15]
 800fcb2:	e030      	b.n	800fd16 <RTC_DeInit+0xda>
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 800fcb4:	4b1c      	ldr	r3, [pc, #112]	; (800fd28 <RTC_DeInit+0xec>)
 800fcb6:	689b      	ldr	r3, [r3, #8]
 800fcb8:	4b1b      	ldr	r3, [pc, #108]	; (800fd28 <RTC_DeInit+0xec>)
 800fcba:	2200      	movs	r2, #0
 800fcbc:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 800fcbe:	4b1a      	ldr	r3, [pc, #104]	; (800fd28 <RTC_DeInit+0xec>)
 800fcc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcc4:	615a      	str	r2, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 800fcc6:	4b18      	ldr	r3, [pc, #96]	; (800fd28 <RTC_DeInit+0xec>)
 800fcc8:	4a18      	ldr	r2, [pc, #96]	; (800fd2c <RTC_DeInit+0xf0>)
 800fcca:	611a      	str	r2, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 800fccc:	4b16      	ldr	r3, [pc, #88]	; (800fd28 <RTC_DeInit+0xec>)
 800fcce:	2200      	movs	r2, #0
 800fcd0:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 800fcd2:	4b15      	ldr	r3, [pc, #84]	; (800fd28 <RTC_DeInit+0xec>)
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 800fcd8:	4b13      	ldr	r3, [pc, #76]	; (800fd28 <RTC_DeInit+0xec>)
 800fcda:	2200      	movs	r2, #0
 800fcdc:	621a      	str	r2, [r3, #32]
      RTC->SHIFTR = (uint32_t)0x00000000;
 800fcde:	4b12      	ldr	r3, [pc, #72]	; (800fd28 <RTC_DeInit+0xec>)
 800fce0:	2200      	movs	r2, #0
 800fce2:	62da      	str	r2, [r3, #44]	; 0x2c
      RTC->CALR = (uint32_t)0x00000000;
 800fce4:	4b10      	ldr	r3, [pc, #64]	; (800fd28 <RTC_DeInit+0xec>)
 800fce6:	2200      	movs	r2, #0
 800fce8:	63da      	str	r2, [r3, #60]	; 0x3c
      RTC->ALRMASSR = (uint32_t)0x00000000;
 800fcea:	4b0f      	ldr	r3, [pc, #60]	; (800fd28 <RTC_DeInit+0xec>)
 800fcec:	2200      	movs	r2, #0
 800fcee:	645a      	str	r2, [r3, #68]	; 0x44
      RTC->ALRMBSSR = (uint32_t)0x00000000;
 800fcf0:	4b0d      	ldr	r3, [pc, #52]	; (800fd28 <RTC_DeInit+0xec>)
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 800fcf6:	4b0c      	ldr	r3, [pc, #48]	; (800fd28 <RTC_DeInit+0xec>)
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 800fcfc:	4b0a      	ldr	r3, [pc, #40]	; (800fd28 <RTC_DeInit+0xec>)
 800fcfe:	2200      	movs	r2, #0
 800fd00:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 800fd02:	f000 f8c9 	bl	800fe98 <RTC_WaitForSynchro>
 800fd06:	4603      	mov	r3, r0
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d102      	bne.n	800fd12 <RTC_DeInit+0xd6>
      {
        status = ERROR;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	73fb      	strb	r3, [r7, #15]
 800fd10:	e001      	b.n	800fd16 <RTC_DeInit+0xda>
      }
      else
      {
        status = SUCCESS;      
 800fd12:	2301      	movs	r3, #1
 800fd14:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800fd16:	4b04      	ldr	r3, [pc, #16]	; (800fd28 <RTC_DeInit+0xec>)
 800fd18:	22ff      	movs	r2, #255	; 0xff
 800fd1a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800fd1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3710      	adds	r7, #16
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}
 800fd26:	bf00      	nop
 800fd28:	40002800 	.word	0x40002800
 800fd2c:	007f00ff 	.word	0x007f00ff

0800fd30 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b084      	sub	sp, #16
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800fd3c:	4b19      	ldr	r3, [pc, #100]	; (800fda4 <RTC_Init+0x74>)
 800fd3e:	22ca      	movs	r2, #202	; 0xca
 800fd40:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800fd42:	4b18      	ldr	r3, [pc, #96]	; (800fda4 <RTC_Init+0x74>)
 800fd44:	2253      	movs	r2, #83	; 0x53
 800fd46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800fd48:	f000 f85c 	bl	800fe04 <RTC_EnterInitMode>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d102      	bne.n	800fd58 <RTC_Init+0x28>
  {
    status = ERROR;
 800fd52:	2300      	movs	r3, #0
 800fd54:	73fb      	strb	r3, [r7, #15]
 800fd56:	e01c      	b.n	800fd92 <RTC_Init+0x62>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 800fd58:	4a12      	ldr	r2, [pc, #72]	; (800fda4 <RTC_Init+0x74>)
 800fd5a:	4b12      	ldr	r3, [pc, #72]	; (800fda4 <RTC_Init+0x74>)
 800fd5c:	689b      	ldr	r3, [r3, #8]
 800fd5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd62:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 800fd64:	490f      	ldr	r1, [pc, #60]	; (800fda4 <RTC_Init+0x74>)
 800fd66:	4b0f      	ldr	r3, [pc, #60]	; (800fda4 <RTC_Init+0x74>)
 800fd68:	689a      	ldr	r2, [r3, #8]
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	608b      	str	r3, [r1, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 800fd72:	4a0c      	ldr	r2, [pc, #48]	; (800fda4 <RTC_Init+0x74>)
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	689b      	ldr	r3, [r3, #8]
 800fd78:	6113      	str	r3, [r2, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 800fd7a:	490a      	ldr	r1, [pc, #40]	; (800fda4 <RTC_Init+0x74>)
 800fd7c:	4b09      	ldr	r3, [pc, #36]	; (800fda4 <RTC_Init+0x74>)
 800fd7e:	691a      	ldr	r2, [r3, #16]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	685b      	ldr	r3, [r3, #4]
 800fd84:	041b      	lsls	r3, r3, #16
 800fd86:	4313      	orrs	r3, r2
 800fd88:	610b      	str	r3, [r1, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800fd8a:	f000 f875 	bl	800fe78 <RTC_ExitInitMode>

    status = SUCCESS;    
 800fd8e:	2301      	movs	r3, #1
 800fd90:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800fd92:	4b04      	ldr	r3, [pc, #16]	; (800fda4 <RTC_Init+0x74>)
 800fd94:	22ff      	movs	r2, #255	; 0xff
 800fd96:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800fd98:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3710      	adds	r7, #16
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop
 800fda4:	40002800 	.word	0x40002800

0800fda8 <RTC_StructInit>:
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b083      	sub	sp, #12
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	601a      	str	r2, [r3, #0]
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	227f      	movs	r2, #127	; 0x7f
 800fdba:	605a      	str	r2, [r3, #4]

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	22ff      	movs	r2, #255	; 0xff
 800fdc0:	609a      	str	r2, [r3, #8]
}
 800fdc2:	bf00      	nop
 800fdc4:	370c      	adds	r7, #12
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdcc:	4770      	bx	lr

0800fdce <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 800fdce:	b480      	push	{r7}
 800fdd0:	b083      	sub	sp, #12
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800fdd8:	79fb      	ldrb	r3, [r7, #7]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d003      	beq.n	800fde6 <RTC_WriteProtectionCmd+0x18>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 800fdde:	4b08      	ldr	r3, [pc, #32]	; (800fe00 <RTC_WriteProtectionCmd+0x32>)
 800fde0:	22ff      	movs	r2, #255	; 0xff
 800fde2:	625a      	str	r2, [r3, #36]	; 0x24
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
    RTC->WPR = 0x53;    
  }
}
 800fde4:	e005      	b.n	800fdf2 <RTC_WriteProtectionCmd+0x24>
    RTC->WPR = 0xCA;
 800fde6:	4b06      	ldr	r3, [pc, #24]	; (800fe00 <RTC_WriteProtectionCmd+0x32>)
 800fde8:	22ca      	movs	r2, #202	; 0xca
 800fdea:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 800fdec:	4b04      	ldr	r3, [pc, #16]	; (800fe00 <RTC_WriteProtectionCmd+0x32>)
 800fdee:	2253      	movs	r2, #83	; 0x53
 800fdf0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800fdf2:	bf00      	nop
 800fdf4:	370c      	adds	r7, #12
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfc:	4770      	bx	lr
 800fdfe:	bf00      	nop
 800fe00:	40002800 	.word	0x40002800

0800fe04 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 800fe04:	b480      	push	{r7}
 800fe06:	b085      	sub	sp, #20
 800fe08:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 800fe12:	2300      	movs	r3, #0
 800fe14:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800fe16:	4b17      	ldr	r3, [pc, #92]	; (800fe74 <RTC_EnterInitMode+0x70>)
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d11e      	bne.n	800fe60 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 800fe22:	4b14      	ldr	r3, [pc, #80]	; (800fe74 <RTC_EnterInitMode+0x70>)
 800fe24:	f04f 32ff 	mov.w	r2, #4294967295
 800fe28:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 800fe2a:	4b12      	ldr	r3, [pc, #72]	; (800fe74 <RTC_EnterInitMode+0x70>)
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe32:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	3301      	adds	r3, #1
 800fe38:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe40:	d002      	beq.n	800fe48 <RTC_EnterInitMode+0x44>
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d0f0      	beq.n	800fe2a <RTC_EnterInitMode+0x26>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 800fe48:	4b0a      	ldr	r3, [pc, #40]	; (800fe74 <RTC_EnterInitMode+0x70>)
 800fe4a:	68db      	ldr	r3, [r3, #12]
 800fe4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d002      	beq.n	800fe5a <RTC_EnterInitMode+0x56>
    {
      status = SUCCESS;
 800fe54:	2301      	movs	r3, #1
 800fe56:	73fb      	strb	r3, [r7, #15]
 800fe58:	e004      	b.n	800fe64 <RTC_EnterInitMode+0x60>
    }
    else
    {
      status = ERROR;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	73fb      	strb	r3, [r7, #15]
 800fe5e:	e001      	b.n	800fe64 <RTC_EnterInitMode+0x60>
    }        
  }
  else
  {
    status = SUCCESS;  
 800fe60:	2301      	movs	r3, #1
 800fe62:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 800fe64:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3714      	adds	r7, #20
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe70:	4770      	bx	lr
 800fe72:	bf00      	nop
 800fe74:	40002800 	.word	0x40002800

0800fe78 <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 800fe78:	b480      	push	{r7}
 800fe7a:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800fe7c:	4a05      	ldr	r2, [pc, #20]	; (800fe94 <RTC_ExitInitMode+0x1c>)
 800fe7e:	4b05      	ldr	r3, [pc, #20]	; (800fe94 <RTC_ExitInitMode+0x1c>)
 800fe80:	68db      	ldr	r3, [r3, #12]
 800fe82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe86:	60d3      	str	r3, [r2, #12]
}
 800fe88:	bf00      	nop
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr
 800fe92:	bf00      	nop
 800fe94:	40002800 	.word	0x40002800

0800fe98 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b085      	sub	sp, #20
 800fe9c:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800fea2:	2300      	movs	r3, #0
 800fea4:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 800fea6:	2300      	movs	r3, #0
 800fea8:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800feaa:	4b18      	ldr	r3, [pc, #96]	; (800ff0c <RTC_WaitForSynchro+0x74>)
 800feac:	22ca      	movs	r2, #202	; 0xca
 800feae:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800feb0:	4b16      	ldr	r3, [pc, #88]	; (800ff0c <RTC_WaitForSynchro+0x74>)
 800feb2:	2253      	movs	r2, #83	; 0x53
 800feb4:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 800feb6:	4a15      	ldr	r2, [pc, #84]	; (800ff0c <RTC_WaitForSynchro+0x74>)
 800feb8:	4b14      	ldr	r3, [pc, #80]	; (800ff0c <RTC_WaitForSynchro+0x74>)
 800feba:	68db      	ldr	r3, [r3, #12]
 800febc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fec0:	60d3      	str	r3, [r2, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 800fec2:	4b12      	ldr	r3, [pc, #72]	; (800ff0c <RTC_WaitForSynchro+0x74>)
 800fec4:	68db      	ldr	r3, [r3, #12]
 800fec6:	f003 0320 	and.w	r3, r3, #32
 800feca:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	3301      	adds	r3, #1
 800fed0:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fed8:	d002      	beq.n	800fee0 <RTC_WaitForSynchro+0x48>
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d0f0      	beq.n	800fec2 <RTC_WaitForSynchro+0x2a>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 800fee0:	4b0a      	ldr	r3, [pc, #40]	; (800ff0c <RTC_WaitForSynchro+0x74>)
 800fee2:	68db      	ldr	r3, [r3, #12]
 800fee4:	f003 0320 	and.w	r3, r3, #32
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d002      	beq.n	800fef2 <RTC_WaitForSynchro+0x5a>
  {
    status = SUCCESS;
 800feec:	2301      	movs	r3, #1
 800feee:	73fb      	strb	r3, [r7, #15]
 800fef0:	e001      	b.n	800fef6 <RTC_WaitForSynchro+0x5e>
  }
  else
  {
    status = ERROR;
 800fef2:	2300      	movs	r3, #0
 800fef4:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800fef6:	4b05      	ldr	r3, [pc, #20]	; (800ff0c <RTC_WaitForSynchro+0x74>)
 800fef8:	22ff      	movs	r2, #255	; 0xff
 800fefa:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 800fefc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3714      	adds	r7, #20
 800ff02:	46bd      	mov	sp, r7
 800ff04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff08:	4770      	bx	lr
 800ff0a:	bf00      	nop
 800ff0c:	40002800 	.word	0x40002800

0800ff10 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b084      	sub	sp, #16
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	4603      	mov	r3, r0
 800ff18:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800ff1e:	4b15      	ldr	r3, [pc, #84]	; (800ff74 <RTC_RefClockCmd+0x64>)
 800ff20:	22ca      	movs	r2, #202	; 0xca
 800ff22:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800ff24:	4b13      	ldr	r3, [pc, #76]	; (800ff74 <RTC_RefClockCmd+0x64>)
 800ff26:	2253      	movs	r2, #83	; 0x53
 800ff28:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800ff2a:	f7ff ff6b 	bl	800fe04 <RTC_EnterInitMode>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d102      	bne.n	800ff3a <RTC_RefClockCmd+0x2a>
  {
    status = ERROR;
 800ff34:	2300      	movs	r3, #0
 800ff36:	73fb      	strb	r3, [r7, #15]
 800ff38:	e013      	b.n	800ff62 <RTC_RefClockCmd+0x52>
  } 
  else
  {  
    if (NewState != DISABLE)
 800ff3a:	79fb      	ldrb	r3, [r7, #7]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d006      	beq.n	800ff4e <RTC_RefClockCmd+0x3e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 800ff40:	4a0c      	ldr	r2, [pc, #48]	; (800ff74 <RTC_RefClockCmd+0x64>)
 800ff42:	4b0c      	ldr	r3, [pc, #48]	; (800ff74 <RTC_RefClockCmd+0x64>)
 800ff44:	689b      	ldr	r3, [r3, #8]
 800ff46:	f043 0310 	orr.w	r3, r3, #16
 800ff4a:	6093      	str	r3, [r2, #8]
 800ff4c:	e005      	b.n	800ff5a <RTC_RefClockCmd+0x4a>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 800ff4e:	4a09      	ldr	r2, [pc, #36]	; (800ff74 <RTC_RefClockCmd+0x64>)
 800ff50:	4b08      	ldr	r3, [pc, #32]	; (800ff74 <RTC_RefClockCmd+0x64>)
 800ff52:	689b      	ldr	r3, [r3, #8]
 800ff54:	f023 0310 	bic.w	r3, r3, #16
 800ff58:	6093      	str	r3, [r2, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800ff5a:	f7ff ff8d 	bl	800fe78 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800ff5e:	2301      	movs	r3, #1
 800ff60:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800ff62:	4b04      	ldr	r3, [pc, #16]	; (800ff74 <RTC_RefClockCmd+0x64>)
 800ff64:	22ff      	movs	r2, #255	; 0xff
 800ff66:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
 800ff68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3710      	adds	r7, #16
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}
 800ff72:	bf00      	nop
 800ff74:	40002800 	.word	0x40002800

0800ff78 <RTC_BypassShadowCmd>:
  * @param  NewState: new state of the Bypass Shadow feature.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
*/
void RTC_BypassShadowCmd(FunctionalState NewState)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	4603      	mov	r3, r0
 800ff80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800ff82:	4b0f      	ldr	r3, [pc, #60]	; (800ffc0 <RTC_BypassShadowCmd+0x48>)
 800ff84:	22ca      	movs	r2, #202	; 0xca
 800ff86:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800ff88:	4b0d      	ldr	r3, [pc, #52]	; (800ffc0 <RTC_BypassShadowCmd+0x48>)
 800ff8a:	2253      	movs	r2, #83	; 0x53
 800ff8c:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 800ff8e:	79fb      	ldrb	r3, [r7, #7]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d006      	beq.n	800ffa2 <RTC_BypassShadowCmd+0x2a>
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800ff94:	4a0a      	ldr	r2, [pc, #40]	; (800ffc0 <RTC_BypassShadowCmd+0x48>)
 800ff96:	4b0a      	ldr	r3, [pc, #40]	; (800ffc0 <RTC_BypassShadowCmd+0x48>)
 800ff98:	689b      	ldr	r3, [r3, #8]
 800ff9a:	f043 0320 	orr.w	r3, r3, #32
 800ff9e:	6093      	str	r3, [r2, #8]
 800ffa0:	e005      	b.n	800ffae <RTC_BypassShadowCmd+0x36>
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 800ffa2:	4a07      	ldr	r2, [pc, #28]	; (800ffc0 <RTC_BypassShadowCmd+0x48>)
 800ffa4:	4b06      	ldr	r3, [pc, #24]	; (800ffc0 <RTC_BypassShadowCmd+0x48>)
 800ffa6:	689b      	ldr	r3, [r3, #8]
 800ffa8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ffac:	6093      	str	r3, [r2, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800ffae:	4b04      	ldr	r3, [pc, #16]	; (800ffc0 <RTC_BypassShadowCmd+0x48>)
 800ffb0:	22ff      	movs	r2, #255	; 0xff
 800ffb2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ffb4:	bf00      	nop
 800ffb6:	370c      	adds	r7, #12
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbe:	4770      	bx	lr
 800ffc0:	40002800 	.word	0x40002800

0800ffc4 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800ffc4:	b590      	push	{r4, r7, lr}
 800ffc6:	b085      	sub	sp, #20
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d109      	bne.n	800fff0 <RTC_SetTime+0x2c>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ffdc:	4b3d      	ldr	r3, [pc, #244]	; (80100d4 <RTC_SetTime+0x110>)
 800ffde:	689b      	ldr	r3, [r3, #8]
 800ffe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d114      	bne.n	8010012 <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	2200      	movs	r2, #0
 800ffec:	70da      	strb	r2, [r3, #3]
 800ffee:	e010      	b.n	8010012 <RTC_SetTime+0x4e>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800fff0:	4b38      	ldr	r3, [pc, #224]	; (80100d4 <RTC_SetTime+0x110>)
 800fff2:	689b      	ldr	r3, [r3, #8]
 800fff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d007      	beq.n	801000c <RTC_SetTime+0x48>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	4618      	mov	r0, r3
 8010002:	f001 f8a6 	bl	8011152 <RTC_Bcd2ToByte>
 8010006:	4603      	mov	r3, r0
 8010008:	60fb      	str	r3, [r7, #12]
 801000a:	e002      	b.n	8010012 <RTC_SetTime+0x4e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	2200      	movs	r2, #0
 8010010:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d00f      	beq.n	8010038 <RTC_SetTime+0x74>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	781b      	ldrb	r3, [r3, #0]
 801001c:	041a      	lsls	r2, r3, #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	785b      	ldrb	r3, [r3, #1]
 8010022:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010024:	4313      	orrs	r3, r2
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8010026:	683a      	ldr	r2, [r7, #0]
 8010028:	7892      	ldrb	r2, [r2, #2]
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 801002a:	431a      	orrs	r2, r3
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	78db      	ldrb	r3, [r3, #3]
 8010030:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010032:	4313      	orrs	r3, r2
 8010034:	60fb      	str	r3, [r7, #12]
 8010036:	e01b      	b.n	8010070 <RTC_SetTime+0xac>
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	4618      	mov	r0, r3
 801003e:	f001 f86b 	bl	8011118 <RTC_ByteToBcd2>
 8010042:	4603      	mov	r3, r0
 8010044:	041c      	lsls	r4, r3, #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	785b      	ldrb	r3, [r3, #1]
 801004a:	4618      	mov	r0, r3
 801004c:	f001 f864 	bl	8011118 <RTC_ByteToBcd2>
 8010050:	4603      	mov	r3, r0
 8010052:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8010054:	431c      	orrs	r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	789b      	ldrb	r3, [r3, #2]
 801005a:	4618      	mov	r0, r3
 801005c:	f001 f85c 	bl	8011118 <RTC_ByteToBcd2>
 8010060:	4603      	mov	r3, r0
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8010062:	ea44 0203 	orr.w	r2, r4, r3
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	78db      	ldrb	r3, [r3, #3]
 801006a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 801006c:	4313      	orrs	r3, r2
 801006e:	60fb      	str	r3, [r7, #12]
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010070:	4b18      	ldr	r3, [pc, #96]	; (80100d4 <RTC_SetTime+0x110>)
 8010072:	22ca      	movs	r2, #202	; 0xca
 8010074:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010076:	4b17      	ldr	r3, [pc, #92]	; (80100d4 <RTC_SetTime+0x110>)
 8010078:	2253      	movs	r2, #83	; 0x53
 801007a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 801007c:	f7ff fec2 	bl	800fe04 <RTC_EnterInitMode>
 8010080:	4603      	mov	r3, r0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d102      	bne.n	801008c <RTC_SetTime+0xc8>
  {
    status = ERROR;
 8010086:	2300      	movs	r3, #0
 8010088:	72fb      	strb	r3, [r7, #11]
 801008a:	e01b      	b.n	80100c4 <RTC_SetTime+0x100>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801008c:	4a11      	ldr	r2, [pc, #68]	; (80100d4 <RTC_SetTime+0x110>)
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8010094:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8010098:	6013      	str	r3, [r2, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 801009a:	f7ff feed 	bl	800fe78 <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 801009e:	4b0d      	ldr	r3, [pc, #52]	; (80100d4 <RTC_SetTime+0x110>)
 80100a0:	689b      	ldr	r3, [r3, #8]
 80100a2:	f003 0320 	and.w	r3, r3, #32
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d10a      	bne.n	80100c0 <RTC_SetTime+0xfc>
    {
    if(RTC_WaitForSynchro() == ERROR)
 80100aa:	f7ff fef5 	bl	800fe98 <RTC_WaitForSynchro>
 80100ae:	4603      	mov	r3, r0
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d102      	bne.n	80100ba <RTC_SetTime+0xf6>
    {
      status = ERROR;
 80100b4:	2300      	movs	r3, #0
 80100b6:	72fb      	strb	r3, [r7, #11]
 80100b8:	e004      	b.n	80100c4 <RTC_SetTime+0x100>
    }
    else
    {
      status = SUCCESS;
 80100ba:	2301      	movs	r3, #1
 80100bc:	72fb      	strb	r3, [r7, #11]
 80100be:	e001      	b.n	80100c4 <RTC_SetTime+0x100>
    }
  }
    else
    {
      status = SUCCESS;
 80100c0:	2301      	movs	r3, #1
 80100c2:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80100c4:	4b03      	ldr	r3, [pc, #12]	; (80100d4 <RTC_SetTime+0x110>)
 80100c6:	22ff      	movs	r2, #255	; 0xff
 80100c8:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 80100ca:	7afb      	ldrb	r3, [r7, #11]
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3714      	adds	r7, #20
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd90      	pop	{r4, r7, pc}
 80100d4:	40002800 	.word	0x40002800

080100d8 <RTC_TimeStructInit>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 80100d8:	b480      	push	{r7}
 80100da:	b083      	sub	sp, #12
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2200      	movs	r2, #0
 80100e4:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2200      	movs	r2, #0
 80100ea:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2200      	movs	r2, #0
 80100f0:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2200      	movs	r2, #0
 80100f6:	709a      	strb	r2, [r3, #2]
}
 80100f8:	bf00      	nop
 80100fa:	370c      	adds	r7, #12
 80100fc:	46bd      	mov	sp, r7
 80100fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010102:	4770      	bx	lr

08010104 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b084      	sub	sp, #16
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801010e:	2300      	movs	r3, #0
 8010110:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8010112:	4b24      	ldr	r3, [pc, #144]	; (80101a4 <RTC_GetTime+0xa0>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 801011a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 801011e:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	0c1b      	lsrs	r3, r3, #16
 8010124:	b2db      	uxtb	r3, r3
 8010126:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801012a:	b2da      	uxtb	r2, r3
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	0a1b      	lsrs	r3, r3, #8
 8010134:	b2db      	uxtb	r3, r3
 8010136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801013a:	b2da      	uxtb	r2, r3
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	b2db      	uxtb	r3, r3
 8010144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010148:	b2da      	uxtb	r2, r3
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	0c1b      	lsrs	r3, r3, #16
 8010152:	b2db      	uxtb	r3, r3
 8010154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010158:	b2da      	uxtb	r2, r3
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d11a      	bne.n	801019a <RTC_GetTime+0x96>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	4618      	mov	r0, r3
 801016a:	f000 fff2 	bl	8011152 <RTC_Bcd2ToByte>
 801016e:	4603      	mov	r3, r0
 8010170:	461a      	mov	r2, r3
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	785b      	ldrb	r3, [r3, #1]
 801017a:	4618      	mov	r0, r3
 801017c:	f000 ffe9 	bl	8011152 <RTC_Bcd2ToByte>
 8010180:	4603      	mov	r3, r0
 8010182:	461a      	mov	r2, r3
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	789b      	ldrb	r3, [r3, #2]
 801018c:	4618      	mov	r0, r3
 801018e:	f000 ffe0 	bl	8011152 <RTC_Bcd2ToByte>
 8010192:	4603      	mov	r3, r0
 8010194:	461a      	mov	r2, r3
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	709a      	strb	r2, [r3, #2]
  }
}
 801019a:	bf00      	nop
 801019c:	3710      	adds	r7, #16
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}
 80101a2:	bf00      	nop
 80101a4:	40002800 	.word	0x40002800

080101a8 <RTC_GetSubSecond>:
  *         SSR register.
  * @param  None
  * @retval RTC current Calendar Sub seconds value.
  */
uint32_t RTC_GetSubSecond(void)
{
 80101a8:	b480      	push	{r7}
 80101aa:	b083      	sub	sp, #12
 80101ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0;
 80101ae:	2300      	movs	r3, #0
 80101b0:	607b      	str	r3, [r7, #4]
  
  /* Get sub seconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 80101b2:	4b06      	ldr	r3, [pc, #24]	; (80101cc <RTC_GetSubSecond+0x24>)
 80101b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101b6:	607b      	str	r3, [r7, #4]
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 80101b8:	4b04      	ldr	r3, [pc, #16]	; (80101cc <RTC_GetSubSecond+0x24>)
 80101ba:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
 80101bc:	687b      	ldr	r3, [r7, #4]
}
 80101be:	4618      	mov	r0, r3
 80101c0:	370c      	adds	r7, #12
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr
 80101ca:	bf00      	nop
 80101cc:	40002800 	.word	0x40002800

080101d0 <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 80101d0:	b590      	push	{r4, r7, lr}
 80101d2:	b085      	sub	sp, #20
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80101da:	2300      	movs	r3, #0
 80101dc:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 80101de:	2300      	movs	r3, #0
 80101e0:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d10e      	bne.n	8010206 <RTC_SetDate+0x36>
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	785b      	ldrb	r3, [r3, #1]
 80101ec:	f003 0310 	and.w	r3, r3, #16
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d008      	beq.n	8010206 <RTC_SetDate+0x36>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	785b      	ldrb	r3, [r3, #1]
 80101f8:	f023 0310 	bic.w	r3, r3, #16
 80101fc:	b2db      	uxtb	r3, r3
 80101fe:	330a      	adds	r3, #10
 8010200:	b2da      	uxtb	r2, r3
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00d      	beq.n	8010228 <RTC_SetDate+0x58>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	785b      	ldrb	r3, [r3, #1]
 8010210:	4618      	mov	r0, r3
 8010212:	f000 ff9e 	bl	8011152 <RTC_Bcd2ToByte>
 8010216:	4603      	mov	r3, r0
 8010218:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	789b      	ldrb	r3, [r3, #2]
 801021e:	4618      	mov	r0, r3
 8010220:	f000 ff97 	bl	8011152 <RTC_Bcd2ToByte>
 8010224:	4603      	mov	r3, r0
 8010226:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d00f      	beq.n	801024e <RTC_SetDate+0x7e>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	78db      	ldrb	r3, [r3, #3]
 8010232:	041a      	lsls	r2, r3, #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	785b      	ldrb	r3, [r3, #1]
 8010238:	021b      	lsls	r3, r3, #8
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 801023a:	4313      	orrs	r3, r2
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 801023c:	683a      	ldr	r2, [r7, #0]
 801023e:	7892      	ldrb	r2, [r2, #2]
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8010240:	431a      	orrs	r2, r3
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	035b      	lsls	r3, r3, #13
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8010248:	4313      	orrs	r3, r2
 801024a:	60fb      	str	r3, [r7, #12]
 801024c:	e01b      	b.n	8010286 <RTC_SetDate+0xb6>
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	78db      	ldrb	r3, [r3, #3]
 8010252:	4618      	mov	r0, r3
 8010254:	f000 ff60 	bl	8011118 <RTC_ByteToBcd2>
 8010258:	4603      	mov	r3, r0
 801025a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	785b      	ldrb	r3, [r3, #1]
 8010260:	4618      	mov	r0, r3
 8010262:	f000 ff59 	bl	8011118 <RTC_ByteToBcd2>
 8010266:	4603      	mov	r3, r0
 8010268:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 801026a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	789b      	ldrb	r3, [r3, #2]
 8010270:	4618      	mov	r0, r3
 8010272:	f000 ff51 	bl	8011118 <RTC_ByteToBcd2>
 8010276:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8010278:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 801027c:	683b      	ldr	r3, [r7, #0]
 801027e:	781b      	ldrb	r3, [r3, #0]
 8010280:	035b      	lsls	r3, r3, #13
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8010282:	4313      	orrs	r3, r2
 8010284:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010286:	4b19      	ldr	r3, [pc, #100]	; (80102ec <RTC_SetDate+0x11c>)
 8010288:	22ca      	movs	r2, #202	; 0xca
 801028a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801028c:	4b17      	ldr	r3, [pc, #92]	; (80102ec <RTC_SetDate+0x11c>)
 801028e:	2253      	movs	r2, #83	; 0x53
 8010290:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8010292:	f7ff fdb7 	bl	800fe04 <RTC_EnterInitMode>
 8010296:	4603      	mov	r3, r0
 8010298:	2b00      	cmp	r3, #0
 801029a:	d102      	bne.n	80102a2 <RTC_SetDate+0xd2>
  {
    status = ERROR;
 801029c:	2300      	movs	r3, #0
 801029e:	72fb      	strb	r3, [r7, #11]
 80102a0:	e01b      	b.n	80102da <RTC_SetDate+0x10a>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 80102a2:	4a12      	ldr	r2, [pc, #72]	; (80102ec <RTC_SetDate+0x11c>)
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80102aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80102ae:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 80102b0:	f7ff fde2 	bl	800fe78 <RTC_ExitInitMode>

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((RTC->CR & RTC_CR_BYPSHAD) == RESET)
 80102b4:	4b0d      	ldr	r3, [pc, #52]	; (80102ec <RTC_SetDate+0x11c>)
 80102b6:	689b      	ldr	r3, [r3, #8]
 80102b8:	f003 0320 	and.w	r3, r3, #32
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d10a      	bne.n	80102d6 <RTC_SetDate+0x106>
    {
    if(RTC_WaitForSynchro() == ERROR)
 80102c0:	f7ff fdea 	bl	800fe98 <RTC_WaitForSynchro>
 80102c4:	4603      	mov	r3, r0
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d102      	bne.n	80102d0 <RTC_SetDate+0x100>
    {
      status = ERROR;
 80102ca:	2300      	movs	r3, #0
 80102cc:	72fb      	strb	r3, [r7, #11]
 80102ce:	e004      	b.n	80102da <RTC_SetDate+0x10a>
    }
    else
    {
      status = SUCCESS;
 80102d0:	2301      	movs	r3, #1
 80102d2:	72fb      	strb	r3, [r7, #11]
 80102d4:	e001      	b.n	80102da <RTC_SetDate+0x10a>
    }
  }
    else
    {
      status = SUCCESS;
 80102d6:	2301      	movs	r3, #1
 80102d8:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 80102da:	4b04      	ldr	r3, [pc, #16]	; (80102ec <RTC_SetDate+0x11c>)
 80102dc:	22ff      	movs	r2, #255	; 0xff
 80102de:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 80102e0:	7afb      	ldrb	r3, [r7, #11]
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3714      	adds	r7, #20
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd90      	pop	{r4, r7, pc}
 80102ea:	bf00      	nop
 80102ec:	40002800 	.word	0x40002800

080102f0 <RTC_DateStructInit>:
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 80102f0:	b480      	push	{r7}
 80102f2:	b083      	sub	sp, #12
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2201      	movs	r2, #1
 80102fc:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->RTC_Date = 1;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2201      	movs	r2, #1
 8010302:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2201      	movs	r2, #1
 8010308:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Year = 0;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2200      	movs	r2, #0
 801030e:	70da      	strb	r2, [r3, #3]
}
 8010310:	bf00      	nop
 8010312:	370c      	adds	r7, #12
 8010314:	46bd      	mov	sp, r7
 8010316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031a:	4770      	bx	lr

0801031c <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b084      	sub	sp, #16
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
 8010324:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010326:	2300      	movs	r3, #0
 8010328:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 801032a:	4b22      	ldr	r3, [pc, #136]	; (80103b4 <RTC_GetDate+0x98>)
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010332:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010336:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	0c1b      	lsrs	r3, r3, #16
 801033c:	b2da      	uxtb	r2, r3
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	0a1b      	lsrs	r3, r3, #8
 8010346:	b2db      	uxtb	r3, r3
 8010348:	f003 031f 	and.w	r3, r3, #31
 801034c:	b2da      	uxtb	r2, r3
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	b2db      	uxtb	r3, r3
 8010356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801035a:	b2da      	uxtb	r2, r3
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	0b5b      	lsrs	r3, r3, #13
 8010364:	b2db      	uxtb	r3, r3
 8010366:	f003 0307 	and.w	r3, r3, #7
 801036a:	b2da      	uxtb	r2, r3
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d11a      	bne.n	80103ac <RTC_GetDate+0x90>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	78db      	ldrb	r3, [r3, #3]
 801037a:	4618      	mov	r0, r3
 801037c:	f000 fee9 	bl	8011152 <RTC_Bcd2ToByte>
 8010380:	4603      	mov	r3, r0
 8010382:	461a      	mov	r2, r3
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	785b      	ldrb	r3, [r3, #1]
 801038c:	4618      	mov	r0, r3
 801038e:	f000 fee0 	bl	8011152 <RTC_Bcd2ToByte>
 8010392:	4603      	mov	r3, r0
 8010394:	461a      	mov	r2, r3
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	789b      	ldrb	r3, [r3, #2]
 801039e:	4618      	mov	r0, r3
 80103a0:	f000 fed7 	bl	8011152 <RTC_Bcd2ToByte>
 80103a4:	4603      	mov	r3, r0
 80103a6:	461a      	mov	r2, r3
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	709a      	strb	r2, [r3, #2]
  }
}
 80103ac:	bf00      	nop
 80103ae:	3710      	adds	r7, #16
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}
 80103b4:	40002800 	.word	0x40002800

080103b8 <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80103b8:	b590      	push	{r4, r7, lr}
 80103ba:	b087      	sub	sp, #28
 80103bc:	af00      	add	r7, sp, #0
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	60b9      	str	r1, [r7, #8]
 80103c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80103c4:	2300      	movs	r3, #0
 80103c6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d109      	bne.n	80103e2 <RTC_SetAlarm+0x2a>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80103ce:	4b47      	ldr	r3, [pc, #284]	; (80104ec <RTC_SetAlarm+0x134>)
 80103d0:	689b      	ldr	r3, [r3, #8]
 80103d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d127      	bne.n	801042a <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	2200      	movs	r2, #0
 80103de:	70da      	strb	r2, [r3, #3]
 80103e0:	e023      	b.n	801042a <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80103e2:	4b42      	ldr	r3, [pc, #264]	; (80104ec <RTC_SetAlarm+0x134>)
 80103e4:	689b      	ldr	r3, [r3, #8]
 80103e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d007      	beq.n	80103fe <RTC_SetAlarm+0x46>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	4618      	mov	r0, r3
 80103f4:	f000 fead 	bl	8011152 <RTC_Bcd2ToByte>
 80103f8:	4603      	mov	r3, r0
 80103fa:	617b      	str	r3, [r7, #20]
 80103fc:	e002      	b.n	8010404 <RTC_SetAlarm+0x4c>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2200      	movs	r2, #0
 8010402:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	689b      	ldr	r3, [r3, #8]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d107      	bne.n	801041c <RTC_SetAlarm+0x64>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	7b1b      	ldrb	r3, [r3, #12]
 8010410:	4618      	mov	r0, r3
 8010412:	f000 fe9e 	bl	8011152 <RTC_Bcd2ToByte>
 8010416:	4603      	mov	r3, r0
 8010418:	617b      	str	r3, [r7, #20]
 801041a:	e006      	b.n	801042a <RTC_SetAlarm+0x72>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	7b1b      	ldrb	r3, [r3, #12]
 8010420:	4618      	mov	r0, r3
 8010422:	f000 fe96 	bl	8011152 <RTC_Bcd2ToByte>
 8010426:	4603      	mov	r3, r0
 8010428:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d019      	beq.n	8010464 <RTC_SetAlarm+0xac>
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	781b      	ldrb	r3, [r3, #0]
 8010434:	041a      	lsls	r2, r3, #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	785b      	ldrb	r3, [r3, #1]
 801043a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 801043c:	4313      	orrs	r3, r2
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 801043e:	687a      	ldr	r2, [r7, #4]
 8010440:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8010442:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	78db      	ldrb	r3, [r3, #3]
 8010448:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 801044a:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	7b1b      	ldrb	r3, [r3, #12]
 8010450:	061b      	lsls	r3, r3, #24
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8010452:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	689b      	ldr	r3, [r3, #8]
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 8010458:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	685b      	ldr	r3, [r3, #4]
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 801045e:	4313      	orrs	r3, r2
 8010460:	617b      	str	r3, [r7, #20]
 8010462:	e02b      	b.n	80104bc <RTC_SetAlarm+0x104>
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	4618      	mov	r0, r3
 801046a:	f000 fe55 	bl	8011118 <RTC_ByteToBcd2>
 801046e:	4603      	mov	r3, r0
 8010470:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	785b      	ldrb	r3, [r3, #1]
 8010476:	4618      	mov	r0, r3
 8010478:	f000 fe4e 	bl	8011118 <RTC_ByteToBcd2>
 801047c:	4603      	mov	r3, r0
 801047e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 8010480:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	789b      	ldrb	r3, [r3, #2]
 8010486:	4618      	mov	r0, r3
 8010488:	f000 fe46 	bl	8011118 <RTC_ByteToBcd2>
 801048c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 801048e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	78db      	ldrb	r3, [r3, #3]
 8010496:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 8010498:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	7b1b      	ldrb	r3, [r3, #12]
 80104a0:	4618      	mov	r0, r3
 80104a2:	f000 fe39 	bl	8011118 <RTC_ByteToBcd2>
 80104a6:	4603      	mov	r3, r0
 80104a8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 80104aa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	689b      	ldr	r3, [r3, #8]
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 80104b2:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	685b      	ldr	r3, [r3, #4]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 80104b8:	4313      	orrs	r3, r2
 80104ba:	617b      	str	r3, [r7, #20]
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80104bc:	4b0b      	ldr	r3, [pc, #44]	; (80104ec <RTC_SetAlarm+0x134>)
 80104be:	22ca      	movs	r2, #202	; 0xca
 80104c0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80104c2:	4b0a      	ldr	r3, [pc, #40]	; (80104ec <RTC_SetAlarm+0x134>)
 80104c4:	2253      	movs	r2, #83	; 0x53
 80104c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104ce:	d103      	bne.n	80104d8 <RTC_SetAlarm+0x120>
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 80104d0:	4a06      	ldr	r2, [pc, #24]	; (80104ec <RTC_SetAlarm+0x134>)
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	61d3      	str	r3, [r2, #28]
 80104d6:	e002      	b.n	80104de <RTC_SetAlarm+0x126>
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 80104d8:	4a04      	ldr	r2, [pc, #16]	; (80104ec <RTC_SetAlarm+0x134>)
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	6213      	str	r3, [r2, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 80104de:	4b03      	ldr	r3, [pc, #12]	; (80104ec <RTC_SetAlarm+0x134>)
 80104e0:	22ff      	movs	r2, #255	; 0xff
 80104e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80104e4:	bf00      	nop
 80104e6:	371c      	adds	r7, #28
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd90      	pop	{r4, r7, pc}
 80104ec:	40002800 	.word	0x40002800

080104f0 <RTC_AlarmStructInit>:
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 80104f0:	b480      	push	{r7}
 80104f2:	b083      	sub	sp, #12
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2200      	movs	r2, #0
 80104fc:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2200      	movs	r2, #0
 8010502:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2200      	movs	r2, #0
 8010508:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2200      	movs	r2, #0
 801050e:	709a      	strb	r2, [r3, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2200      	movs	r2, #0
 8010514:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2201      	movs	r2, #1
 801051a:	731a      	strb	r2, [r3, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2200      	movs	r2, #0
 8010520:	605a      	str	r2, [r3, #4]
}
 8010522:	bf00      	nop
 8010524:	370c      	adds	r7, #12
 8010526:	46bd      	mov	sp, r7
 8010528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052c:	4770      	bx	lr

0801052e <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 801052e:	b580      	push	{r7, lr}
 8010530:	b086      	sub	sp, #24
 8010532:	af00      	add	r7, sp, #0
 8010534:	60f8      	str	r0, [r7, #12]
 8010536:	60b9      	str	r1, [r7, #8]
 8010538:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 801053a:	2300      	movs	r3, #0
 801053c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010544:	d103      	bne.n	801054e <RTC_GetAlarm+0x20>
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 8010546:	4b31      	ldr	r3, [pc, #196]	; (801060c <RTC_GetAlarm+0xde>)
 8010548:	69db      	ldr	r3, [r3, #28]
 801054a:	617b      	str	r3, [r7, #20]
 801054c:	e002      	b.n	8010554 <RTC_GetAlarm+0x26>
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 801054e:	4b2f      	ldr	r3, [pc, #188]	; (801060c <RTC_GetAlarm+0xde>)
 8010550:	6a1b      	ldr	r3, [r3, #32]
 8010552:	617b      	str	r3, [r7, #20]
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	0c1b      	lsrs	r3, r3, #16
 8010558:	b2db      	uxtb	r3, r3
 801055a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801055e:	b2da      	uxtb	r2, r3
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	701a      	strb	r2, [r3, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 8010564:	697b      	ldr	r3, [r7, #20]
 8010566:	0a1b      	lsrs	r3, r3, #8
 8010568:	b2db      	uxtb	r3, r3
 801056a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801056e:	b2da      	uxtb	r2, r3
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	705a      	strb	r2, [r3, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	b2db      	uxtb	r3, r3
 8010578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801057c:	b2da      	uxtb	r2, r3
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	709a      	strb	r2, [r3, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 8010582:	697b      	ldr	r3, [r7, #20]
 8010584:	0c1b      	lsrs	r3, r3, #16
 8010586:	b2db      	uxtb	r3, r3
 8010588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801058c:	b2da      	uxtb	r2, r3
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	0e1b      	lsrs	r3, r3, #24
 8010596:	b2db      	uxtb	r3, r3
 8010598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801059c:	b2da      	uxtb	r2, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	731a      	strb	r2, [r3, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	605a      	str	r2, [r3, #4]

  if (RTC_Format == RTC_Format_BIN)
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d123      	bne.n	8010604 <RTC_GetAlarm+0xd6>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	4618      	mov	r0, r3
 80105c2:	f000 fdc6 	bl	8011152 <RTC_Bcd2ToByte>
 80105c6:	4603      	mov	r3, r0
 80105c8:	461a      	mov	r2, r3
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	701a      	strb	r2, [r3, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	785b      	ldrb	r3, [r3, #1]
 80105d2:	4618      	mov	r0, r3
 80105d4:	f000 fdbd 	bl	8011152 <RTC_Bcd2ToByte>
 80105d8:	4603      	mov	r3, r0
 80105da:	461a      	mov	r2, r3
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	705a      	strb	r2, [r3, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	789b      	ldrb	r3, [r3, #2]
 80105e4:	4618      	mov	r0, r3
 80105e6:	f000 fdb4 	bl	8011152 <RTC_Bcd2ToByte>
 80105ea:	4603      	mov	r3, r0
 80105ec:	461a      	mov	r2, r3
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	709a      	strb	r2, [r3, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	7b1b      	ldrb	r3, [r3, #12]
 80105f6:	4618      	mov	r0, r3
 80105f8:	f000 fdab 	bl	8011152 <RTC_Bcd2ToByte>
 80105fc:	4603      	mov	r3, r0
 80105fe:	461a      	mov	r2, r3
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	731a      	strb	r2, [r3, #12]
  }  
}
 8010604:	bf00      	nop
 8010606:	3718      	adds	r7, #24
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}
 801060c:	40002800 	.word	0x40002800

08010610 <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 8010610:	b480      	push	{r7}
 8010612:	b087      	sub	sp, #28
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
 8010618:	460b      	mov	r3, r1
 801061a:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t alarmcounter = 0x00;
 801061c:	2300      	movs	r3, #0
 801061e:	60fb      	str	r3, [r7, #12]
  uint32_t alarmstatus = 0x00;
 8010620:	2300      	movs	r3, #0
 8010622:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 8010624:	2300      	movs	r3, #0
 8010626:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010628:	4b1f      	ldr	r3, [pc, #124]	; (80106a8 <RTC_AlarmCmd+0x98>)
 801062a:	22ca      	movs	r2, #202	; 0xca
 801062c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801062e:	4b1e      	ldr	r3, [pc, #120]	; (80106a8 <RTC_AlarmCmd+0x98>)
 8010630:	2253      	movs	r2, #83	; 0x53
 8010632:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 8010634:	78fb      	ldrb	r3, [r7, #3]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d008      	beq.n	801064c <RTC_AlarmCmd+0x3c>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 801063a:	491b      	ldr	r1, [pc, #108]	; (80106a8 <RTC_AlarmCmd+0x98>)
 801063c:	4b1a      	ldr	r3, [pc, #104]	; (80106a8 <RTC_AlarmCmd+0x98>)
 801063e:	689a      	ldr	r2, [r3, #8]
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	4313      	orrs	r3, r2
 8010644:	608b      	str	r3, [r1, #8]

    status = SUCCESS;    
 8010646:	2301      	movs	r3, #1
 8010648:	75fb      	strb	r3, [r7, #23]
 801064a:	e022      	b.n	8010692 <RTC_AlarmCmd+0x82>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 801064c:	4916      	ldr	r1, [pc, #88]	; (80106a8 <RTC_AlarmCmd+0x98>)
 801064e:	4b16      	ldr	r3, [pc, #88]	; (80106a8 <RTC_AlarmCmd+0x98>)
 8010650:	689a      	ldr	r2, [r3, #8]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	43db      	mvns	r3, r3
 8010656:	4013      	ands	r3, r2
 8010658:	608b      	str	r3, [r1, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 801065a:	4b13      	ldr	r3, [pc, #76]	; (80106a8 <RTC_AlarmCmd+0x98>)
 801065c:	68da      	ldr	r2, [r3, #12]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	0a1b      	lsrs	r3, r3, #8
 8010662:	4013      	ands	r3, r2
 8010664:	613b      	str	r3, [r7, #16]
      alarmcounter++;  
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	3301      	adds	r3, #1
 801066a:	60fb      	str	r3, [r7, #12]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010672:	d002      	beq.n	801067a <RTC_AlarmCmd+0x6a>
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d0ef      	beq.n	801065a <RTC_AlarmCmd+0x4a>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 801067a:	4b0b      	ldr	r3, [pc, #44]	; (80106a8 <RTC_AlarmCmd+0x98>)
 801067c:	68da      	ldr	r2, [r3, #12]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	0a1b      	lsrs	r3, r3, #8
 8010682:	4013      	ands	r3, r2
 8010684:	2b00      	cmp	r3, #0
 8010686:	d102      	bne.n	801068e <RTC_AlarmCmd+0x7e>
    {
      status = ERROR;
 8010688:	2300      	movs	r3, #0
 801068a:	75fb      	strb	r3, [r7, #23]
 801068c:	e001      	b.n	8010692 <RTC_AlarmCmd+0x82>
    } 
    else
    {
      status = SUCCESS;
 801068e:	2301      	movs	r3, #1
 8010690:	75fb      	strb	r3, [r7, #23]
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010692:	4b05      	ldr	r3, [pc, #20]	; (80106a8 <RTC_AlarmCmd+0x98>)
 8010694:	22ff      	movs	r2, #255	; 0xff
 8010696:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010698:	7dfb      	ldrb	r3, [r7, #23]
}
 801069a:	4618      	mov	r0, r3
 801069c:	371c      	adds	r7, #28
 801069e:	46bd      	mov	sp, r7
 80106a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a4:	4770      	bx	lr
 80106a6:	bf00      	nop
 80106a8:	40002800 	.word	0x40002800

080106ac <RTC_AlarmSubSecondConfig>:
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 80106ac:	b480      	push	{r7}
 80106ae:	b087      	sub	sp, #28
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	60f8      	str	r0, [r7, #12]
 80106b4:	60b9      	str	r1, [r7, #8]
 80106b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80106b8:	2300      	movs	r3, #0
 80106ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80106bc:	4b0e      	ldr	r3, [pc, #56]	; (80106f8 <RTC_AlarmSubSecondConfig+0x4c>)
 80106be:	22ca      	movs	r2, #202	; 0xca
 80106c0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80106c2:	4b0d      	ldr	r3, [pc, #52]	; (80106f8 <RTC_AlarmSubSecondConfig+0x4c>)
 80106c4:	2253      	movs	r2, #83	; 0x53
 80106c6:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm A or Alarm B Sub Second registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 80106c8:	68ba      	ldr	r2, [r7, #8]
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4313      	orrs	r3, r2
 80106ce:	617b      	str	r3, [r7, #20]
  
  if (RTC_Alarm == RTC_Alarm_A)
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106d6:	d103      	bne.n	80106e0 <RTC_AlarmSubSecondConfig+0x34>
  {
    /* Configure the Alarm A Sub Second register */
    RTC->ALRMASSR = tmpreg;
 80106d8:	4a07      	ldr	r2, [pc, #28]	; (80106f8 <RTC_AlarmSubSecondConfig+0x4c>)
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	6453      	str	r3, [r2, #68]	; 0x44
 80106de:	e002      	b.n	80106e6 <RTC_AlarmSubSecondConfig+0x3a>
  }
  else
  {
    /* Configure the Alarm B Sub Second register */
    RTC->ALRMBSSR = tmpreg;
 80106e0:	4a05      	ldr	r2, [pc, #20]	; (80106f8 <RTC_AlarmSubSecondConfig+0x4c>)
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 80106e6:	4b04      	ldr	r3, [pc, #16]	; (80106f8 <RTC_AlarmSubSecondConfig+0x4c>)
 80106e8:	22ff      	movs	r2, #255	; 0xff
 80106ea:	625a      	str	r2, [r3, #36]	; 0x24

}
 80106ec:	bf00      	nop
 80106ee:	371c      	adds	r7, #28
 80106f0:	46bd      	mov	sp, r7
 80106f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f6:	4770      	bx	lr
 80106f8:	40002800 	.word	0x40002800

080106fc <RTC_GetAlarmSubSecond>:
  *     @arg RTC_Alarm_B: to select Alarm B
  * @param  None
  * @retval RTC Alarm Sub seconds value.
  */
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
 80106fc:	b480      	push	{r7}
 80106fe:	b085      	sub	sp, #20
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8010704:	2300      	movs	r3, #0
 8010706:	60fb      	str	r3, [r7, #12]
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801070e:	d105      	bne.n	801071c <RTC_GetAlarmSubSecond+0x20>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 8010710:	4b08      	ldr	r3, [pc, #32]	; (8010734 <RTC_GetAlarmSubSecond+0x38>)
 8010712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010714:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010718:	60fb      	str	r3, [r7, #12]
 801071a:	e004      	b.n	8010726 <RTC_GetAlarmSubSecond+0x2a>
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 801071c:	4b05      	ldr	r3, [pc, #20]	; (8010734 <RTC_GetAlarmSubSecond+0x38>)
 801071e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010720:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010724:	60fb      	str	r3, [r7, #12]
  } 
  
  return (tmpreg);
 8010726:	68fb      	ldr	r3, [r7, #12]
}
 8010728:	4618      	mov	r0, r3
 801072a:	3714      	adds	r7, #20
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr
 8010734:	40002800 	.word	0x40002800

08010738 <RTC_WakeUpClockConfig>:
  *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
  *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
  * @retval None
  */
void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
{
 8010738:	b480      	push	{r7}
 801073a:	b083      	sub	sp, #12
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010740:	4b0d      	ldr	r3, [pc, #52]	; (8010778 <RTC_WakeUpClockConfig+0x40>)
 8010742:	22ca      	movs	r2, #202	; 0xca
 8010744:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010746:	4b0c      	ldr	r3, [pc, #48]	; (8010778 <RTC_WakeUpClockConfig+0x40>)
 8010748:	2253      	movs	r2, #83	; 0x53
 801074a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 801074c:	4a0a      	ldr	r2, [pc, #40]	; (8010778 <RTC_WakeUpClockConfig+0x40>)
 801074e:	4b0a      	ldr	r3, [pc, #40]	; (8010778 <RTC_WakeUpClockConfig+0x40>)
 8010750:	689b      	ldr	r3, [r3, #8]
 8010752:	f023 0307 	bic.w	r3, r3, #7
 8010756:	6093      	str	r3, [r2, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 8010758:	4907      	ldr	r1, [pc, #28]	; (8010778 <RTC_WakeUpClockConfig+0x40>)
 801075a:	4b07      	ldr	r3, [pc, #28]	; (8010778 <RTC_WakeUpClockConfig+0x40>)
 801075c:	689a      	ldr	r2, [r3, #8]
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	4313      	orrs	r3, r2
 8010762:	608b      	str	r3, [r1, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010764:	4b04      	ldr	r3, [pc, #16]	; (8010778 <RTC_WakeUpClockConfig+0x40>)
 8010766:	22ff      	movs	r2, #255	; 0xff
 8010768:	625a      	str	r2, [r3, #36]	; 0x24
}
 801076a:	bf00      	nop
 801076c:	370c      	adds	r7, #12
 801076e:	46bd      	mov	sp, r7
 8010770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010774:	4770      	bx	lr
 8010776:	bf00      	nop
 8010778:	40002800 	.word	0x40002800

0801077c <RTC_SetWakeUpCounter>:
  * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
  *          This parameter can be a value from 0x0000 to 0xFFFF. 
  * @retval None
  */
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
{
 801077c:	b480      	push	{r7}
 801077e:	b083      	sub	sp, #12
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010784:	4b08      	ldr	r3, [pc, #32]	; (80107a8 <RTC_SetWakeUpCounter+0x2c>)
 8010786:	22ca      	movs	r2, #202	; 0xca
 8010788:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 801078a:	4b07      	ldr	r3, [pc, #28]	; (80107a8 <RTC_SetWakeUpCounter+0x2c>)
 801078c:	2253      	movs	r2, #83	; 0x53
 801078e:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 8010790:	4a05      	ldr	r2, [pc, #20]	; (80107a8 <RTC_SetWakeUpCounter+0x2c>)
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6153      	str	r3, [r2, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010796:	4b04      	ldr	r3, [pc, #16]	; (80107a8 <RTC_SetWakeUpCounter+0x2c>)
 8010798:	22ff      	movs	r2, #255	; 0xff
 801079a:	625a      	str	r2, [r3, #36]	; 0x24
}
 801079c:	bf00      	nop
 801079e:	370c      	adds	r7, #12
 80107a0:	46bd      	mov	sp, r7
 80107a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a6:	4770      	bx	lr
 80107a8:	40002800 	.word	0x40002800

080107ac <RTC_GetWakeUpCounter>:
  * @brief  Returns the RTC WakeUp timer counter value.
  * @param  None
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
 80107ac:	b480      	push	{r7}
 80107ae:	af00      	add	r7, sp, #0
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 80107b0:	4b03      	ldr	r3, [pc, #12]	; (80107c0 <RTC_GetWakeUpCounter+0x14>)
 80107b2:	695b      	ldr	r3, [r3, #20]
 80107b4:	b29b      	uxth	r3, r3
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	46bd      	mov	sp, r7
 80107ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107be:	4770      	bx	lr
 80107c0:	40002800 	.word	0x40002800

080107c4 <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 80107c4:	b480      	push	{r7}
 80107c6:	b087      	sub	sp, #28
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	4603      	mov	r3, r0
 80107cc:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t wutcounter = 0x00;
 80107ce:	2300      	movs	r3, #0
 80107d0:	60fb      	str	r3, [r7, #12]
  uint32_t wutwfstatus = 0x00;
 80107d2:	2300      	movs	r3, #0
 80107d4:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 80107d6:	2300      	movs	r3, #0
 80107d8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80107da:	4b1e      	ldr	r3, [pc, #120]	; (8010854 <RTC_WakeUpCmd+0x90>)
 80107dc:	22ca      	movs	r2, #202	; 0xca
 80107de:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80107e0:	4b1c      	ldr	r3, [pc, #112]	; (8010854 <RTC_WakeUpCmd+0x90>)
 80107e2:	2253      	movs	r2, #83	; 0x53
 80107e4:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 80107e6:	79fb      	ldrb	r3, [r7, #7]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d008      	beq.n	80107fe <RTC_WakeUpCmd+0x3a>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 80107ec:	4a19      	ldr	r2, [pc, #100]	; (8010854 <RTC_WakeUpCmd+0x90>)
 80107ee:	4b19      	ldr	r3, [pc, #100]	; (8010854 <RTC_WakeUpCmd+0x90>)
 80107f0:	689b      	ldr	r3, [r3, #8]
 80107f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80107f6:	6093      	str	r3, [r2, #8]
    status = SUCCESS;    
 80107f8:	2301      	movs	r3, #1
 80107fa:	75fb      	strb	r3, [r7, #23]
 80107fc:	e01f      	b.n	801083e <RTC_WakeUpCmd+0x7a>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 80107fe:	4a15      	ldr	r2, [pc, #84]	; (8010854 <RTC_WakeUpCmd+0x90>)
 8010800:	4b14      	ldr	r3, [pc, #80]	; (8010854 <RTC_WakeUpCmd+0x90>)
 8010802:	689b      	ldr	r3, [r3, #8]
 8010804:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010808:	6093      	str	r3, [r2, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 801080a:	4b12      	ldr	r3, [pc, #72]	; (8010854 <RTC_WakeUpCmd+0x90>)
 801080c:	68db      	ldr	r3, [r3, #12]
 801080e:	f003 0304 	and.w	r3, r3, #4
 8010812:	613b      	str	r3, [r7, #16]
      wutcounter++;  
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	3301      	adds	r3, #1
 8010818:	60fb      	str	r3, [r7, #12]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010820:	d002      	beq.n	8010828 <RTC_WakeUpCmd+0x64>
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d0f0      	beq.n	801080a <RTC_WakeUpCmd+0x46>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 8010828:	4b0a      	ldr	r3, [pc, #40]	; (8010854 <RTC_WakeUpCmd+0x90>)
 801082a:	68db      	ldr	r3, [r3, #12]
 801082c:	f003 0304 	and.w	r3, r3, #4
 8010830:	2b00      	cmp	r3, #0
 8010832:	d102      	bne.n	801083a <RTC_WakeUpCmd+0x76>
    {
      status = ERROR;
 8010834:	2300      	movs	r3, #0
 8010836:	75fb      	strb	r3, [r7, #23]
 8010838:	e001      	b.n	801083e <RTC_WakeUpCmd+0x7a>
    }
    else
    {
      status = SUCCESS;
 801083a:	2301      	movs	r3, #1
 801083c:	75fb      	strb	r3, [r7, #23]
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 801083e:	4b05      	ldr	r3, [pc, #20]	; (8010854 <RTC_WakeUpCmd+0x90>)
 8010840:	22ff      	movs	r2, #255	; 0xff
 8010842:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010844:	7dfb      	ldrb	r3, [r7, #23]
}
 8010846:	4618      	mov	r0, r3
 8010848:	371c      	adds	r7, #28
 801084a:	46bd      	mov	sp, r7
 801084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010850:	4770      	bx	lr
 8010852:	bf00      	nop
 8010854:	40002800 	.word	0x40002800

08010858 <RTC_DayLightSavingConfig>:
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 8010858:	b480      	push	{r7}
 801085a:	b083      	sub	sp, #12
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
 8010860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010862:	4b0e      	ldr	r3, [pc, #56]	; (801089c <RTC_DayLightSavingConfig+0x44>)
 8010864:	22ca      	movs	r2, #202	; 0xca
 8010866:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010868:	4b0c      	ldr	r3, [pc, #48]	; (801089c <RTC_DayLightSavingConfig+0x44>)
 801086a:	2253      	movs	r2, #83	; 0x53
 801086c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 801086e:	4a0b      	ldr	r2, [pc, #44]	; (801089c <RTC_DayLightSavingConfig+0x44>)
 8010870:	4b0a      	ldr	r3, [pc, #40]	; (801089c <RTC_DayLightSavingConfig+0x44>)
 8010872:	689b      	ldr	r3, [r3, #8]
 8010874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010878:	6093      	str	r3, [r2, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 801087a:	4808      	ldr	r0, [pc, #32]	; (801089c <RTC_DayLightSavingConfig+0x44>)
 801087c:	4b07      	ldr	r3, [pc, #28]	; (801089c <RTC_DayLightSavingConfig+0x44>)
 801087e:	689a      	ldr	r2, [r3, #8]
 8010880:	6879      	ldr	r1, [r7, #4]
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	430b      	orrs	r3, r1
 8010886:	4313      	orrs	r3, r2
 8010888:	6083      	str	r3, [r0, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 801088a:	4b04      	ldr	r3, [pc, #16]	; (801089c <RTC_DayLightSavingConfig+0x44>)
 801088c:	22ff      	movs	r2, #255	; 0xff
 801088e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010890:	bf00      	nop
 8010892:	370c      	adds	r7, #12
 8010894:	46bd      	mov	sp, r7
 8010896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089a:	4770      	bx	lr
 801089c:	40002800 	.word	0x40002800

080108a0 <RTC_GetStoreOperation>:
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
 80108a0:	b480      	push	{r7}
 80108a2:	af00      	add	r7, sp, #0
  return (RTC->CR & RTC_CR_BCK);
 80108a4:	4b04      	ldr	r3, [pc, #16]	; (80108b8 <RTC_GetStoreOperation+0x18>)
 80108a6:	689b      	ldr	r3, [r3, #8]
 80108a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
}
 80108ac:	4618      	mov	r0, r3
 80108ae:	46bd      	mov	sp, r7
 80108b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b4:	4770      	bx	lr
 80108b6:	bf00      	nop
 80108b8:	40002800 	.word	0x40002800

080108bc <RTC_OutputConfig>:
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 80108bc:	b480      	push	{r7}
 80108be:	b083      	sub	sp, #12
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80108c6:	4b0e      	ldr	r3, [pc, #56]	; (8010900 <RTC_OutputConfig+0x44>)
 80108c8:	22ca      	movs	r2, #202	; 0xca
 80108ca:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80108cc:	4b0c      	ldr	r3, [pc, #48]	; (8010900 <RTC_OutputConfig+0x44>)
 80108ce:	2253      	movs	r2, #83	; 0x53
 80108d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 80108d2:	4a0b      	ldr	r2, [pc, #44]	; (8010900 <RTC_OutputConfig+0x44>)
 80108d4:	4b0a      	ldr	r3, [pc, #40]	; (8010900 <RTC_OutputConfig+0x44>)
 80108d6:	689b      	ldr	r3, [r3, #8]
 80108d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80108dc:	6093      	str	r3, [r2, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 80108de:	4808      	ldr	r0, [pc, #32]	; (8010900 <RTC_OutputConfig+0x44>)
 80108e0:	4b07      	ldr	r3, [pc, #28]	; (8010900 <RTC_OutputConfig+0x44>)
 80108e2:	689a      	ldr	r2, [r3, #8]
 80108e4:	6879      	ldr	r1, [r7, #4]
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	430b      	orrs	r3, r1
 80108ea:	4313      	orrs	r3, r2
 80108ec:	6083      	str	r3, [r0, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80108ee:	4b04      	ldr	r3, [pc, #16]	; (8010900 <RTC_OutputConfig+0x44>)
 80108f0:	22ff      	movs	r2, #255	; 0xff
 80108f2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80108f4:	bf00      	nop
 80108f6:	370c      	adds	r7, #12
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr
 8010900:	40002800 	.word	0x40002800

08010904 <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b084      	sub	sp, #16
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 801090e:	2300      	movs	r3, #0
 8010910:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010912:	4b0f      	ldr	r3, [pc, #60]	; (8010950 <RTC_CoarseCalibConfig+0x4c>)
 8010914:	22ca      	movs	r2, #202	; 0xca
 8010916:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010918:	4b0d      	ldr	r3, [pc, #52]	; (8010950 <RTC_CoarseCalibConfig+0x4c>)
 801091a:	2253      	movs	r2, #83	; 0x53
 801091c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 801091e:	f7ff fa71 	bl	800fe04 <RTC_EnterInitMode>
 8010922:	4603      	mov	r3, r0
 8010924:	2b00      	cmp	r3, #0
 8010926:	d102      	bne.n	801092e <RTC_CoarseCalibConfig+0x2a>
  {
    status = ERROR;
 8010928:	2300      	movs	r3, #0
 801092a:	73fb      	strb	r3, [r7, #15]
 801092c:	e008      	b.n	8010940 <RTC_CoarseCalibConfig+0x3c>
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 801092e:	4908      	ldr	r1, [pc, #32]	; (8010950 <RTC_CoarseCalibConfig+0x4c>)
 8010930:	687a      	ldr	r2, [r7, #4]
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	4313      	orrs	r3, r2
 8010936:	618b      	str	r3, [r1, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8010938:	f7ff fa9e 	bl	800fe78 <RTC_ExitInitMode>
    
    status = SUCCESS;
 801093c:	2301      	movs	r3, #1
 801093e:	73fb      	strb	r3, [r7, #15]
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010940:	4b03      	ldr	r3, [pc, #12]	; (8010950 <RTC_CoarseCalibConfig+0x4c>)
 8010942:	22ff      	movs	r2, #255	; 0xff
 8010944:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 8010946:	7bfb      	ldrb	r3, [r7, #15]
}
 8010948:	4618      	mov	r0, r3
 801094a:	3710      	adds	r7, #16
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}
 8010950:	40002800 	.word	0x40002800

08010954 <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b084      	sub	sp, #16
 8010958:	af00      	add	r7, sp, #0
 801095a:	4603      	mov	r3, r0
 801095c:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 801095e:	2300      	movs	r3, #0
 8010960:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010962:	4b15      	ldr	r3, [pc, #84]	; (80109b8 <RTC_CoarseCalibCmd+0x64>)
 8010964:	22ca      	movs	r2, #202	; 0xca
 8010966:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010968:	4b13      	ldr	r3, [pc, #76]	; (80109b8 <RTC_CoarseCalibCmd+0x64>)
 801096a:	2253      	movs	r2, #83	; 0x53
 801096c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 801096e:	f7ff fa49 	bl	800fe04 <RTC_EnterInitMode>
 8010972:	4603      	mov	r3, r0
 8010974:	2b00      	cmp	r3, #0
 8010976:	d102      	bne.n	801097e <RTC_CoarseCalibCmd+0x2a>
  {
    status =  ERROR;
 8010978:	2300      	movs	r3, #0
 801097a:	73fb      	strb	r3, [r7, #15]
 801097c:	e013      	b.n	80109a6 <RTC_CoarseCalibCmd+0x52>
  }
  else
  {
    if (NewState != DISABLE)
 801097e:	79fb      	ldrb	r3, [r7, #7]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d006      	beq.n	8010992 <RTC_CoarseCalibCmd+0x3e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 8010984:	4a0c      	ldr	r2, [pc, #48]	; (80109b8 <RTC_CoarseCalibCmd+0x64>)
 8010986:	4b0c      	ldr	r3, [pc, #48]	; (80109b8 <RTC_CoarseCalibCmd+0x64>)
 8010988:	689b      	ldr	r3, [r3, #8]
 801098a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801098e:	6093      	str	r3, [r2, #8]
 8010990:	e005      	b.n	801099e <RTC_CoarseCalibCmd+0x4a>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 8010992:	4a09      	ldr	r2, [pc, #36]	; (80109b8 <RTC_CoarseCalibCmd+0x64>)
 8010994:	4b08      	ldr	r3, [pc, #32]	; (80109b8 <RTC_CoarseCalibCmd+0x64>)
 8010996:	689b      	ldr	r3, [r3, #8]
 8010998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801099c:	6093      	str	r3, [r2, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 801099e:	f7ff fa6b 	bl	800fe78 <RTC_ExitInitMode>
    
    status = SUCCESS;
 80109a2:	2301      	movs	r3, #1
 80109a4:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80109a6:	4b04      	ldr	r3, [pc, #16]	; (80109b8 <RTC_CoarseCalibCmd+0x64>)
 80109a8:	22ff      	movs	r2, #255	; 0xff
 80109aa:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 80109ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	3710      	adds	r7, #16
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}
 80109b6:	bf00      	nop
 80109b8:	40002800 	.word	0x40002800

080109bc <RTC_CalibOutputCmd>:
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 80109bc:	b480      	push	{r7}
 80109be:	b083      	sub	sp, #12
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	4603      	mov	r3, r0
 80109c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 80109c6:	4b0f      	ldr	r3, [pc, #60]	; (8010a04 <RTC_CalibOutputCmd+0x48>)
 80109c8:	22ca      	movs	r2, #202	; 0xca
 80109ca:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 80109cc:	4b0d      	ldr	r3, [pc, #52]	; (8010a04 <RTC_CalibOutputCmd+0x48>)
 80109ce:	2253      	movs	r2, #83	; 0x53
 80109d0:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 80109d2:	79fb      	ldrb	r3, [r7, #7]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d006      	beq.n	80109e6 <RTC_CalibOutputCmd+0x2a>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 80109d8:	4a0a      	ldr	r2, [pc, #40]	; (8010a04 <RTC_CalibOutputCmd+0x48>)
 80109da:	4b0a      	ldr	r3, [pc, #40]	; (8010a04 <RTC_CalibOutputCmd+0x48>)
 80109dc:	689b      	ldr	r3, [r3, #8]
 80109de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80109e2:	6093      	str	r3, [r2, #8]
 80109e4:	e005      	b.n	80109f2 <RTC_CalibOutputCmd+0x36>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 80109e6:	4a07      	ldr	r2, [pc, #28]	; (8010a04 <RTC_CalibOutputCmd+0x48>)
 80109e8:	4b06      	ldr	r3, [pc, #24]	; (8010a04 <RTC_CalibOutputCmd+0x48>)
 80109ea:	689b      	ldr	r3, [r3, #8]
 80109ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80109f0:	6093      	str	r3, [r2, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 80109f2:	4b04      	ldr	r3, [pc, #16]	; (8010a04 <RTC_CalibOutputCmd+0x48>)
 80109f4:	22ff      	movs	r2, #255	; 0xff
 80109f6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80109f8:	bf00      	nop
 80109fa:	370c      	adds	r7, #12
 80109fc:	46bd      	mov	sp, r7
 80109fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a02:	4770      	bx	lr
 8010a04:	40002800 	.word	0x40002800

08010a08 <RTC_CalibOutputConfig>:
  *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
  *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
  * @retval None
*/
void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
{
 8010a08:	b480      	push	{r7}
 8010a0a:	b083      	sub	sp, #12
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010a10:	4b0d      	ldr	r3, [pc, #52]	; (8010a48 <RTC_CalibOutputConfig+0x40>)
 8010a12:	22ca      	movs	r2, #202	; 0xca
 8010a14:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010a16:	4b0c      	ldr	r3, [pc, #48]	; (8010a48 <RTC_CalibOutputConfig+0x40>)
 8010a18:	2253      	movs	r2, #83	; 0x53
 8010a1a:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before configuration */
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 8010a1c:	4a0a      	ldr	r2, [pc, #40]	; (8010a48 <RTC_CalibOutputConfig+0x40>)
 8010a1e:	4b0a      	ldr	r3, [pc, #40]	; (8010a48 <RTC_CalibOutputConfig+0x40>)
 8010a20:	689b      	ldr	r3, [r3, #8]
 8010a22:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8010a26:	6093      	str	r3, [r2, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 8010a28:	4907      	ldr	r1, [pc, #28]	; (8010a48 <RTC_CalibOutputConfig+0x40>)
 8010a2a:	4b07      	ldr	r3, [pc, #28]	; (8010a48 <RTC_CalibOutputConfig+0x40>)
 8010a2c:	689a      	ldr	r2, [r3, #8]
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	4313      	orrs	r3, r2
 8010a32:	608b      	str	r3, [r1, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8010a34:	4b04      	ldr	r3, [pc, #16]	; (8010a48 <RTC_CalibOutputConfig+0x40>)
 8010a36:	22ff      	movs	r2, #255	; 0xff
 8010a38:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010a3a:	bf00      	nop
 8010a3c:	370c      	adds	r7, #12
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a44:	4770      	bx	lr
 8010a46:	bf00      	nop
 8010a48:	40002800 	.word	0x40002800

08010a4c <RTC_SmoothCalibConfig>:
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 8010a4c:	b480      	push	{r7}
 8010a4e:	b087      	sub	sp, #28
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	60f8      	str	r0, [r7, #12]
 8010a54:	60b9      	str	r1, [r7, #8]
 8010a56:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	75fb      	strb	r3, [r7, #23]
  uint32_t recalpfcount = 0;
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010a60:	4b1a      	ldr	r3, [pc, #104]	; (8010acc <RTC_SmoothCalibConfig+0x80>)
 8010a62:	22ca      	movs	r2, #202	; 0xca
 8010a64:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010a66:	4b19      	ldr	r3, [pc, #100]	; (8010acc <RTC_SmoothCalibConfig+0x80>)
 8010a68:	2253      	movs	r2, #83	; 0x53
 8010a6a:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 8010a6c:	4b17      	ldr	r3, [pc, #92]	; (8010acc <RTC_SmoothCalibConfig+0x80>)
 8010a6e:	68db      	ldr	r3, [r3, #12]
 8010a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d00d      	beq.n	8010a94 <RTC_SmoothCalibConfig+0x48>
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8010a78:	e002      	b.n	8010a80 <RTC_SmoothCalibConfig+0x34>
    {
      recalpfcount++;
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	3301      	adds	r3, #1
 8010a7e:	613b      	str	r3, [r7, #16]
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 8010a80:	4b12      	ldr	r3, [pc, #72]	; (8010acc <RTC_SmoothCalibConfig+0x80>)
 8010a82:	68db      	ldr	r3, [r3, #12]
 8010a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d003      	beq.n	8010a94 <RTC_SmoothCalibConfig+0x48>
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010a92:	d1f2      	bne.n	8010a7a <RTC_SmoothCalibConfig+0x2e>
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 8010a94:	4b0d      	ldr	r3, [pc, #52]	; (8010acc <RTC_SmoothCalibConfig+0x80>)
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d109      	bne.n	8010ab4 <RTC_SmoothCalibConfig+0x68>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 8010aa0:	490a      	ldr	r1, [pc, #40]	; (8010acc <RTC_SmoothCalibConfig+0x80>)
 8010aa2:	68fa      	ldr	r2, [r7, #12]
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	431a      	orrs	r2, r3
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	4313      	orrs	r3, r2
 8010aac:	63cb      	str	r3, [r1, #60]	; 0x3c

    status = SUCCESS;
 8010aae:	2301      	movs	r3, #1
 8010ab0:	75fb      	strb	r3, [r7, #23]
 8010ab2:	e001      	b.n	8010ab8 <RTC_SmoothCalibConfig+0x6c>
  }
  else
  {
    status = ERROR;
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8010ab8:	4b04      	ldr	r3, [pc, #16]	; (8010acc <RTC_SmoothCalibConfig+0x80>)
 8010aba:	22ff      	movs	r2, #255	; 0xff
 8010abc:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 8010abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	371c      	adds	r7, #28
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr
 8010acc:	40002800 	.word	0x40002800

08010ad0 <RTC_TimeStampCmd>:
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b085      	sub	sp, #20
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	460b      	mov	r3, r1
 8010ada:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8010adc:	2300      	movs	r3, #0
 8010ade:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8010ae0:	4b13      	ldr	r3, [pc, #76]	; (8010b30 <RTC_TimeStampCmd+0x60>)
 8010ae2:	689b      	ldr	r3, [r3, #8]
 8010ae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010ae8:	f023 0308 	bic.w	r3, r3, #8
 8010aec:	60fb      	str	r3, [r7, #12]

  /* Get the new configuration */
  if (NewState != DISABLE)
 8010aee:	78fb      	ldrb	r3, [r7, #3]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d006      	beq.n	8010b02 <RTC_TimeStampCmd+0x32>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 8010af4:	687a      	ldr	r2, [r7, #4]
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	4313      	orrs	r3, r2
 8010afa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010afe:	60fb      	str	r3, [r7, #12]
 8010b00:	e003      	b.n	8010b0a <RTC_TimeStampCmd+0x3a>
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 8010b02:	68fa      	ldr	r2, [r7, #12]
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	4313      	orrs	r3, r2
 8010b08:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010b0a:	4b09      	ldr	r3, [pc, #36]	; (8010b30 <RTC_TimeStampCmd+0x60>)
 8010b0c:	22ca      	movs	r2, #202	; 0xca
 8010b0e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010b10:	4b07      	ldr	r3, [pc, #28]	; (8010b30 <RTC_TimeStampCmd+0x60>)
 8010b12:	2253      	movs	r2, #83	; 0x53
 8010b14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 8010b16:	4a06      	ldr	r2, [pc, #24]	; (8010b30 <RTC_TimeStampCmd+0x60>)
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010b1c:	4b04      	ldr	r3, [pc, #16]	; (8010b30 <RTC_TimeStampCmd+0x60>)
 8010b1e:	22ff      	movs	r2, #255	; 0xff
 8010b20:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010b22:	bf00      	nop
 8010b24:	3714      	adds	r7, #20
 8010b26:	46bd      	mov	sp, r7
 8010b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2c:	4770      	bx	lr
 8010b2e:	bf00      	nop
 8010b30:	40002800 	.word	0x40002800

08010b34 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b086      	sub	sp, #24
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	60f8      	str	r0, [r7, #12]
 8010b3c:	60b9      	str	r1, [r7, #8]
 8010b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmptime = 0, tmpdate = 0;
 8010b40:	2300      	movs	r3, #0
 8010b42:	617b      	str	r3, [r7, #20]
 8010b44:	2300      	movs	r3, #0
 8010b46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 8010b48:	4b41      	ldr	r3, [pc, #260]	; (8010c50 <RTC_GetTimeStamp+0x11c>)
 8010b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b4c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8010b50:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8010b54:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 8010b56:	4b3e      	ldr	r3, [pc, #248]	; (8010c50 <RTC_GetTimeStamp+0x11c>)
 8010b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b5a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010b5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010b62:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	0c1b      	lsrs	r3, r3, #16
 8010b68:	b2db      	uxtb	r3, r3
 8010b6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b6e:	b2da      	uxtb	r2, r3
 8010b70:	68bb      	ldr	r3, [r7, #8]
 8010b72:	701a      	strb	r2, [r3, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	0a1b      	lsrs	r3, r3, #8
 8010b78:	b2db      	uxtb	r3, r3
 8010b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b7e:	b2da      	uxtb	r2, r3
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	705a      	strb	r2, [r3, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b8c:	b2da      	uxtb	r2, r3
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	709a      	strb	r2, [r3, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	0c1b      	lsrs	r3, r3, #16
 8010b96:	b2db      	uxtb	r3, r3
 8010b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b9c:	b2da      	uxtb	r2, r3
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	70da      	strb	r2, [r3, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	70da      	strb	r2, [r3, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	0a1b      	lsrs	r3, r3, #8
 8010bac:	b2db      	uxtb	r3, r3
 8010bae:	f003 031f 	and.w	r3, r3, #31
 8010bb2:	b2da      	uxtb	r2, r3
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	705a      	strb	r2, [r3, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	b2db      	uxtb	r3, r3
 8010bbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010bc0:	b2da      	uxtb	r2, r3
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	709a      	strb	r2, [r3, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	0b5b      	lsrs	r3, r3, #13
 8010bca:	b2db      	uxtb	r3, r3
 8010bcc:	f003 0307 	and.w	r3, r3, #7
 8010bd0:	b2da      	uxtb	r2, r3
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d135      	bne.n	8010c48 <RTC_GetTimeStamp+0x114>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	4618      	mov	r0, r3
 8010be2:	f000 fab6 	bl	8011152 <RTC_Bcd2ToByte>
 8010be6:	4603      	mov	r3, r0
 8010be8:	461a      	mov	r2, r3
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	701a      	strb	r2, [r3, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	785b      	ldrb	r3, [r3, #1]
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f000 faad 	bl	8011152 <RTC_Bcd2ToByte>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	705a      	strb	r2, [r3, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	789b      	ldrb	r3, [r3, #2]
 8010c04:	4618      	mov	r0, r3
 8010c06:	f000 faa4 	bl	8011152 <RTC_Bcd2ToByte>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	461a      	mov	r2, r3
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	709a      	strb	r2, [r3, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	785b      	ldrb	r3, [r3, #1]
 8010c16:	4618      	mov	r0, r3
 8010c18:	f000 fa9b 	bl	8011152 <RTC_Bcd2ToByte>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	461a      	mov	r2, r3
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	705a      	strb	r2, [r3, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	789b      	ldrb	r3, [r3, #2]
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f000 fa92 	bl	8011152 <RTC_Bcd2ToByte>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	461a      	mov	r2, r3
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	709a      	strb	r2, [r3, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	781b      	ldrb	r3, [r3, #0]
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f000 fa89 	bl	8011152 <RTC_Bcd2ToByte>
 8010c40:	4603      	mov	r3, r0
 8010c42:	461a      	mov	r2, r3
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	701a      	strb	r2, [r3, #0]
  }
}
 8010c48:	bf00      	nop
 8010c4a:	3718      	adds	r7, #24
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	40002800 	.word	0x40002800

08010c54 <RTC_GetTimeStampSubSecond>:
  * @brief  Get the RTC timestamp Sub seconds value.
  * @param  None
  * @retval RTC current timestamp Sub seconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
 8010c54:	b480      	push	{r7}
 8010c56:	af00      	add	r7, sp, #0
  /* Get timestamp sub seconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 8010c58:	4b03      	ldr	r3, [pc, #12]	; (8010c68 <RTC_GetTimeStampSubSecond+0x14>)
 8010c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c64:	4770      	bx	lr
 8010c66:	bf00      	nop
 8010c68:	40002800 	.word	0x40002800

08010c6c <RTC_TamperTriggerConfig>:
  *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 8010c6c:	b480      	push	{r7}
 8010c6e:	b083      	sub	sp, #12
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d108      	bne.n	8010c8e <RTC_TamperTriggerConfig+0x22>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 8010c7c:	490a      	ldr	r1, [pc, #40]	; (8010ca8 <RTC_TamperTriggerConfig+0x3c>)
 8010c7e:	4b0a      	ldr	r3, [pc, #40]	; (8010ca8 <RTC_TamperTriggerConfig+0x3c>)
 8010c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	005b      	lsls	r3, r3, #1
 8010c86:	43db      	mvns	r3, r3
 8010c88:	4013      	ands	r3, r2
 8010c8a:	640b      	str	r3, [r1, #64]	; 0x40
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
  }  
}
 8010c8c:	e006      	b.n	8010c9c <RTC_TamperTriggerConfig+0x30>
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 8010c8e:	4906      	ldr	r1, [pc, #24]	; (8010ca8 <RTC_TamperTriggerConfig+0x3c>)
 8010c90:	4b05      	ldr	r3, [pc, #20]	; (8010ca8 <RTC_TamperTriggerConfig+0x3c>)
 8010c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	005b      	lsls	r3, r3, #1
 8010c98:	4313      	orrs	r3, r2
 8010c9a:	640b      	str	r3, [r1, #64]	; 0x40
}
 8010c9c:	bf00      	nop
 8010c9e:	370c      	adds	r7, #12
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca6:	4770      	bx	lr
 8010ca8:	40002800 	.word	0x40002800

08010cac <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 8010cac:	b480      	push	{r7}
 8010cae:	b083      	sub	sp, #12
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
 8010cb4:	460b      	mov	r3, r1
 8010cb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8010cb8:	78fb      	ldrb	r3, [r7, #3]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d006      	beq.n	8010ccc <RTC_TamperCmd+0x20>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 8010cbe:	490a      	ldr	r1, [pc, #40]	; (8010ce8 <RTC_TamperCmd+0x3c>)
 8010cc0:	4b09      	ldr	r3, [pc, #36]	; (8010ce8 <RTC_TamperCmd+0x3c>)
 8010cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	4313      	orrs	r3, r2
 8010cc8:	640b      	str	r3, [r1, #64]	; 0x40
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
  }  
}
 8010cca:	e006      	b.n	8010cda <RTC_TamperCmd+0x2e>
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 8010ccc:	4906      	ldr	r1, [pc, #24]	; (8010ce8 <RTC_TamperCmd+0x3c>)
 8010cce:	4b06      	ldr	r3, [pc, #24]	; (8010ce8 <RTC_TamperCmd+0x3c>)
 8010cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	43db      	mvns	r3, r3
 8010cd6:	4013      	ands	r3, r2
 8010cd8:	640b      	str	r3, [r1, #64]	; 0x40
}
 8010cda:	bf00      	nop
 8010cdc:	370c      	adds	r7, #12
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce4:	4770      	bx	lr
 8010ce6:	bf00      	nop
 8010ce8:	40002800 	.word	0x40002800

08010cec <RTC_TamperFilterConfig>:
  *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
  *                                    samples at the active level 
  * @retval None
  */
void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
{
 8010cec:	b480      	push	{r7}
 8010cee:	b083      	sub	sp, #12
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 8010cf4:	4a08      	ldr	r2, [pc, #32]	; (8010d18 <RTC_TamperFilterConfig+0x2c>)
 8010cf6:	4b08      	ldr	r3, [pc, #32]	; (8010d18 <RTC_TamperFilterConfig+0x2c>)
 8010cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cfa:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8010cfe:	6413      	str	r3, [r2, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 8010d00:	4905      	ldr	r1, [pc, #20]	; (8010d18 <RTC_TamperFilterConfig+0x2c>)
 8010d02:	4b05      	ldr	r3, [pc, #20]	; (8010d18 <RTC_TamperFilterConfig+0x2c>)
 8010d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	4313      	orrs	r3, r2
 8010d0a:	640b      	str	r3, [r1, #64]	; 0x40
}
 8010d0c:	bf00      	nop
 8010d0e:	370c      	adds	r7, #12
 8010d10:	46bd      	mov	sp, r7
 8010d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d16:	4770      	bx	lr
 8010d18:	40002800 	.word	0x40002800

08010d1c <RTC_TamperSamplingFreqConfig>:
  *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
  *                                           with a frequency =  RTCCLK / 256  
  * @retval None
  */
void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b083      	sub	sp, #12
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 8010d24:	4a08      	ldr	r2, [pc, #32]	; (8010d48 <RTC_TamperSamplingFreqConfig+0x2c>)
 8010d26:	4b08      	ldr	r3, [pc, #32]	; (8010d48 <RTC_TamperSamplingFreqConfig+0x2c>)
 8010d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d2a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8010d2e:	6413      	str	r3, [r2, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 8010d30:	4905      	ldr	r1, [pc, #20]	; (8010d48 <RTC_TamperSamplingFreqConfig+0x2c>)
 8010d32:	4b05      	ldr	r3, [pc, #20]	; (8010d48 <RTC_TamperSamplingFreqConfig+0x2c>)
 8010d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	4313      	orrs	r3, r2
 8010d3a:	640b      	str	r3, [r1, #64]	; 0x40
}
 8010d3c:	bf00      	nop
 8010d3e:	370c      	adds	r7, #12
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr
 8010d48:	40002800 	.word	0x40002800

08010d4c <RTC_TamperPinsPrechargeDuration>:
  *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are precharged before sampling during 4 RTCCLK cycle    
  *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are precharged before sampling during 8 RTCCLK cycle
  * @retval None
  */
void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b083      	sub	sp, #12
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 8010d54:	4a08      	ldr	r2, [pc, #32]	; (8010d78 <RTC_TamperPinsPrechargeDuration+0x2c>)
 8010d56:	4b08      	ldr	r3, [pc, #32]	; (8010d78 <RTC_TamperPinsPrechargeDuration+0x2c>)
 8010d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d5a:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8010d5e:	6413      	str	r3, [r2, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 8010d60:	4905      	ldr	r1, [pc, #20]	; (8010d78 <RTC_TamperPinsPrechargeDuration+0x2c>)
 8010d62:	4b05      	ldr	r3, [pc, #20]	; (8010d78 <RTC_TamperPinsPrechargeDuration+0x2c>)
 8010d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	4313      	orrs	r3, r2
 8010d6a:	640b      	str	r3, [r1, #64]	; 0x40
}
 8010d6c:	bf00      	nop
 8010d6e:	370c      	adds	r7, #12
 8010d70:	46bd      	mov	sp, r7
 8010d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d76:	4770      	bx	lr
 8010d78:	40002800 	.word	0x40002800

08010d7c <RTC_TimeStampOnTamperDetectionCmd>:
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b083      	sub	sp, #12
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	4603      	mov	r3, r0
 8010d84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 8010d86:	79fb      	ldrb	r3, [r7, #7]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d006      	beq.n	8010d9a <RTC_TimeStampOnTamperDetectionCmd+0x1e>
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 8010d8c:	4a09      	ldr	r2, [pc, #36]	; (8010db4 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 8010d8e:	4b09      	ldr	r3, [pc, #36]	; (8010db4 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 8010d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d96:	6413      	str	r3, [r2, #64]	; 0x40
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
  }
}
 8010d98:	e005      	b.n	8010da6 <RTC_TimeStampOnTamperDetectionCmd+0x2a>
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 8010d9a:	4a06      	ldr	r2, [pc, #24]	; (8010db4 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 8010d9c:	4b05      	ldr	r3, [pc, #20]	; (8010db4 <RTC_TimeStampOnTamperDetectionCmd+0x38>)
 8010d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010da4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8010da6:	bf00      	nop
 8010da8:	370c      	adds	r7, #12
 8010daa:	46bd      	mov	sp, r7
 8010dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db0:	4770      	bx	lr
 8010db2:	bf00      	nop
 8010db4:	40002800 	.word	0x40002800

08010db8 <RTC_TamperPullUpCmd>:
  * @param  NewState: new state of tamper pull up.
  *   This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 8010dc2:	79fb      	ldrb	r3, [r7, #7]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d006      	beq.n	8010dd6 <RTC_TamperPullUpCmd+0x1e>
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 8010dc8:	4a09      	ldr	r2, [pc, #36]	; (8010df0 <RTC_TamperPullUpCmd+0x38>)
 8010dca:	4b09      	ldr	r3, [pc, #36]	; (8010df0 <RTC_TamperPullUpCmd+0x38>)
 8010dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010dd2:	6413      	str	r3, [r2, #64]	; 0x40
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
  } 
}
 8010dd4:	e005      	b.n	8010de2 <RTC_TamperPullUpCmd+0x2a>
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 8010dd6:	4a06      	ldr	r2, [pc, #24]	; (8010df0 <RTC_TamperPullUpCmd+0x38>)
 8010dd8:	4b05      	ldr	r3, [pc, #20]	; (8010df0 <RTC_TamperPullUpCmd+0x38>)
 8010dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010de0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8010de2:	bf00      	nop
 8010de4:	370c      	adds	r7, #12
 8010de6:	46bd      	mov	sp, r7
 8010de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dec:	4770      	bx	lr
 8010dee:	bf00      	nop
 8010df0:	40002800 	.word	0x40002800

08010df4 <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 8010df4:	b480      	push	{r7}
 8010df6:	b085      	sub	sp, #20
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
 8010dfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 8010e02:	4b08      	ldr	r3, [pc, #32]	; (8010e24 <RTC_WriteBackupRegister+0x30>)
 8010e04:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	009a      	lsls	r2, r3, #2
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	4413      	add	r3, r2
 8010e0e:	60fb      	str	r3, [r7, #12]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	461a      	mov	r2, r3
 8010e14:	683b      	ldr	r3, [r7, #0]
 8010e16:	6013      	str	r3, [r2, #0]
}
 8010e18:	bf00      	nop
 8010e1a:	3714      	adds	r7, #20
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e22:	4770      	bx	lr
 8010e24:	40002850 	.word	0x40002850

08010e28 <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 8010e28:	b480      	push	{r7}
 8010e2a:	b085      	sub	sp, #20
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8010e30:	2300      	movs	r3, #0
 8010e32:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 8010e34:	4b07      	ldr	r3, [pc, #28]	; (8010e54 <RTC_ReadBackupRegister+0x2c>)
 8010e36:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	009a      	lsls	r2, r3, #2
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	4413      	add	r3, r2
 8010e40:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	681b      	ldr	r3, [r3, #0]
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3714      	adds	r7, #20
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e50:	4770      	bx	lr
 8010e52:	bf00      	nop
 8010e54:	40002850 	.word	0x40002850

08010e58 <RTC_TamperPinSelection>:
  *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
  *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
  * @retval None
  */
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b083      	sub	sp, #12
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 8010e60:	4a08      	ldr	r2, [pc, #32]	; (8010e84 <RTC_TamperPinSelection+0x2c>)
 8010e62:	4b08      	ldr	r3, [pc, #32]	; (8010e84 <RTC_TamperPinSelection+0x2c>)
 8010e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e6a:	6413      	str	r3, [r2, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 8010e6c:	4905      	ldr	r1, [pc, #20]	; (8010e84 <RTC_TamperPinSelection+0x2c>)
 8010e6e:	4b05      	ldr	r3, [pc, #20]	; (8010e84 <RTC_TamperPinSelection+0x2c>)
 8010e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	4313      	orrs	r3, r2
 8010e76:	640b      	str	r3, [r1, #64]	; 0x40
}
 8010e78:	bf00      	nop
 8010e7a:	370c      	adds	r7, #12
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr
 8010e84:	40002800 	.word	0x40002800

08010e88 <RTC_TimeStampPinSelection>:
  *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
  *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
  * @retval None
  */
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
 8010e88:	b480      	push	{r7}
 8010e8a:	b083      	sub	sp, #12
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 8010e90:	4a08      	ldr	r2, [pc, #32]	; (8010eb4 <RTC_TimeStampPinSelection+0x2c>)
 8010e92:	4b08      	ldr	r3, [pc, #32]	; (8010eb4 <RTC_TimeStampPinSelection+0x2c>)
 8010e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e96:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010e9a:	6413      	str	r3, [r2, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 8010e9c:	4905      	ldr	r1, [pc, #20]	; (8010eb4 <RTC_TimeStampPinSelection+0x2c>)
 8010e9e:	4b05      	ldr	r3, [pc, #20]	; (8010eb4 <RTC_TimeStampPinSelection+0x2c>)
 8010ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	4313      	orrs	r3, r2
 8010ea6:	640b      	str	r3, [r1, #64]	; 0x40
}
 8010ea8:	bf00      	nop
 8010eaa:	370c      	adds	r7, #12
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr
 8010eb4:	40002800 	.word	0x40002800

08010eb8 <RTC_OutputTypeConfig>:
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	b083      	sub	sp, #12
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 8010ec0:	4a08      	ldr	r2, [pc, #32]	; (8010ee4 <RTC_OutputTypeConfig+0x2c>)
 8010ec2:	4b08      	ldr	r3, [pc, #32]	; (8010ee4 <RTC_OutputTypeConfig+0x2c>)
 8010ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ec6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010eca:	6413      	str	r3, [r2, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 8010ecc:	4905      	ldr	r1, [pc, #20]	; (8010ee4 <RTC_OutputTypeConfig+0x2c>)
 8010ece:	4b05      	ldr	r3, [pc, #20]	; (8010ee4 <RTC_OutputTypeConfig+0x2c>)
 8010ed0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	4313      	orrs	r3, r2
 8010ed6:	640b      	str	r3, [r1, #64]	; 0x40
}
 8010ed8:	bf00      	nop
 8010eda:	370c      	adds	r7, #12
 8010edc:	46bd      	mov	sp, r7
 8010ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee2:	4770      	bx	lr
 8010ee4:	40002800 	.word	0x40002800

08010ee8 <RTC_SynchroShiftConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b084      	sub	sp, #16
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t shpfcount = 0;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010efa:	4b21      	ldr	r3, [pc, #132]	; (8010f80 <RTC_SynchroShiftConfig+0x98>)
 8010efc:	22ca      	movs	r2, #202	; 0xca
 8010efe:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010f00:	4b1f      	ldr	r3, [pc, #124]	; (8010f80 <RTC_SynchroShiftConfig+0x98>)
 8010f02:	2253      	movs	r2, #83	; 0x53
 8010f04:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 8010f06:	4b1e      	ldr	r3, [pc, #120]	; (8010f80 <RTC_SynchroShiftConfig+0x98>)
 8010f08:	68db      	ldr	r3, [r3, #12]
 8010f0a:	f003 0308 	and.w	r3, r3, #8
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d00d      	beq.n	8010f2e <RTC_SynchroShiftConfig+0x46>
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 8010f12:	e002      	b.n	8010f1a <RTC_SynchroShiftConfig+0x32>
    {
      shpfcount++;
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	3301      	adds	r3, #1
 8010f18:	60bb      	str	r3, [r7, #8]
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 8010f1a:	4b19      	ldr	r3, [pc, #100]	; (8010f80 <RTC_SynchroShiftConfig+0x98>)
 8010f1c:	68db      	ldr	r3, [r3, #12]
 8010f1e:	f003 0308 	and.w	r3, r3, #8
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d003      	beq.n	8010f2e <RTC_SynchroShiftConfig+0x46>
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f2c:	d1f2      	bne.n	8010f14 <RTC_SynchroShiftConfig+0x2c>
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 8010f2e:	4b14      	ldr	r3, [pc, #80]	; (8010f80 <RTC_SynchroShiftConfig+0x98>)
 8010f30:	68db      	ldr	r3, [r3, #12]
 8010f32:	f003 0308 	and.w	r3, r3, #8
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d118      	bne.n	8010f6c <RTC_SynchroShiftConfig+0x84>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 8010f3a:	4b11      	ldr	r3, [pc, #68]	; (8010f80 <RTC_SynchroShiftConfig+0x98>)
 8010f3c:	689b      	ldr	r3, [r3, #8]
 8010f3e:	f003 0310 	and.w	r3, r3, #16
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d10f      	bne.n	8010f66 <RTC_SynchroShiftConfig+0x7e>
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 8010f46:	490e      	ldr	r1, [pc, #56]	; (8010f80 <RTC_SynchroShiftConfig+0x98>)
 8010f48:	683a      	ldr	r2, [r7, #0]
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	4313      	orrs	r3, r2
 8010f4e:	62cb      	str	r3, [r1, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 8010f50:	f7fe ffa2 	bl	800fe98 <RTC_WaitForSynchro>
 8010f54:	4603      	mov	r3, r0
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d102      	bne.n	8010f60 <RTC_SynchroShiftConfig+0x78>
      {
        status = ERROR;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	73fb      	strb	r3, [r7, #15]
 8010f5e:	e007      	b.n	8010f70 <RTC_SynchroShiftConfig+0x88>
      }
      else
      {
        status = SUCCESS;
 8010f60:	2301      	movs	r3, #1
 8010f62:	73fb      	strb	r3, [r7, #15]
 8010f64:	e004      	b.n	8010f70 <RTC_SynchroShiftConfig+0x88>
      }
    }
    else
    {
      status = ERROR;
 8010f66:	2300      	movs	r3, #0
 8010f68:	73fb      	strb	r3, [r7, #15]
 8010f6a:	e001      	b.n	8010f70 <RTC_SynchroShiftConfig+0x88>
    }
  }
  else
  {
    status = ERROR;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 8010f70:	4b03      	ldr	r3, [pc, #12]	; (8010f80 <RTC_SynchroShiftConfig+0x98>)
 8010f72:	22ff      	movs	r2, #255	; 0xff
 8010f74:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 8010f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3710      	adds	r7, #16
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}
 8010f80:	40002800 	.word	0x40002800

08010f84 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 8010f84:	b480      	push	{r7}
 8010f86:	b083      	sub	sp, #12
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
 8010f8c:	460b      	mov	r3, r1
 8010f8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8010f90:	4b1a      	ldr	r3, [pc, #104]	; (8010ffc <RTC_ITConfig+0x78>)
 8010f92:	22ca      	movs	r2, #202	; 0xca
 8010f94:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8010f96:	4b19      	ldr	r3, [pc, #100]	; (8010ffc <RTC_ITConfig+0x78>)
 8010f98:	2253      	movs	r2, #83	; 0x53
 8010f9a:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 8010f9c:	78fb      	ldrb	r3, [r7, #3]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d010      	beq.n	8010fc4 <RTC_ITConfig+0x40>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 8010fa2:	4916      	ldr	r1, [pc, #88]	; (8010ffc <RTC_ITConfig+0x78>)
 8010fa4:	4b15      	ldr	r3, [pc, #84]	; (8010ffc <RTC_ITConfig+0x78>)
 8010fa6:	689a      	ldr	r2, [r3, #8]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f023 0304 	bic.w	r3, r3, #4
 8010fae:	4313      	orrs	r3, r2
 8010fb0:	608b      	str	r3, [r1, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 8010fb2:	4912      	ldr	r1, [pc, #72]	; (8010ffc <RTC_ITConfig+0x78>)
 8010fb4:	4b11      	ldr	r3, [pc, #68]	; (8010ffc <RTC_ITConfig+0x78>)
 8010fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	f003 0304 	and.w	r3, r3, #4
 8010fbe:	4313      	orrs	r3, r2
 8010fc0:	640b      	str	r3, [r1, #64]	; 0x40
 8010fc2:	e011      	b.n	8010fe8 <RTC_ITConfig+0x64>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 8010fc4:	490d      	ldr	r1, [pc, #52]	; (8010ffc <RTC_ITConfig+0x78>)
 8010fc6:	4b0d      	ldr	r3, [pc, #52]	; (8010ffc <RTC_ITConfig+0x78>)
 8010fc8:	689a      	ldr	r2, [r3, #8]
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f023 0304 	bic.w	r3, r3, #4
 8010fd0:	43db      	mvns	r3, r3
 8010fd2:	4013      	ands	r3, r2
 8010fd4:	608b      	str	r3, [r1, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 8010fd6:	4909      	ldr	r1, [pc, #36]	; (8010ffc <RTC_ITConfig+0x78>)
 8010fd8:	4b08      	ldr	r3, [pc, #32]	; (8010ffc <RTC_ITConfig+0x78>)
 8010fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f003 0304 	and.w	r3, r3, #4
 8010fe2:	43db      	mvns	r3, r3
 8010fe4:	4013      	ands	r3, r2
 8010fe6:	640b      	str	r3, [r1, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8010fe8:	4b04      	ldr	r3, [pc, #16]	; (8010ffc <RTC_ITConfig+0x78>)
 8010fea:	22ff      	movs	r2, #255	; 0xff
 8010fec:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010fee:	bf00      	nop
 8010ff0:	370c      	adds	r7, #12
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff8:	4770      	bx	lr
 8010ffa:	bf00      	nop
 8010ffc:	40002800 	.word	0x40002800

08011000 <RTC_GetFlagStatus>:
  *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
  *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 8011000:	b480      	push	{r7}
 8011002:	b085      	sub	sp, #20
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8011008:	2300      	movs	r3, #0
 801100a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 801100c:	2300      	movs	r3, #0
 801100e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 8011010:	4b0a      	ldr	r3, [pc, #40]	; (801103c <RTC_GetFlagStatus+0x3c>)
 8011012:	68da      	ldr	r2, [r3, #12]
 8011014:	4b0a      	ldr	r3, [pc, #40]	; (8011040 <RTC_GetFlagStatus+0x40>)
 8011016:	4013      	ands	r3, r2
 8011018:	60bb      	str	r3, [r7, #8]
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 801101a:	68ba      	ldr	r2, [r7, #8]
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	4013      	ands	r3, r2
 8011020:	2b00      	cmp	r3, #0
 8011022:	d002      	beq.n	801102a <RTC_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8011024:	2301      	movs	r3, #1
 8011026:	73fb      	strb	r3, [r7, #15]
 8011028:	e001      	b.n	801102e <RTC_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 801102a:	2300      	movs	r3, #0
 801102c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801102e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011030:	4618      	mov	r0, r3
 8011032:	3714      	adds	r7, #20
 8011034:	46bd      	mov	sp, r7
 8011036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103a:	4770      	bx	lr
 801103c:	40002800 	.word	0x40002800
 8011040:	00013f7f 	.word	0x00013f7f

08011044 <RTC_ClearFlag>:
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 8011044:	b480      	push	{r7}
 8011046:	b083      	sub	sp, #12
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 801104c:	4908      	ldr	r1, [pc, #32]	; (8011070 <RTC_ClearFlag+0x2c>)
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	b29b      	uxth	r3, r3
 8011052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011056:	43da      	mvns	r2, r3
 8011058:	4b05      	ldr	r3, [pc, #20]	; (8011070 <RTC_ClearFlag+0x2c>)
 801105a:	68db      	ldr	r3, [r3, #12]
 801105c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011060:	4313      	orrs	r3, r2
 8011062:	60cb      	str	r3, [r1, #12]
}
 8011064:	bf00      	nop
 8011066:	370c      	adds	r7, #12
 8011068:	46bd      	mov	sp, r7
 801106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106e:	4770      	bx	lr
 8011070:	40002800 	.word	0x40002800

08011074 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 8011074:	b480      	push	{r7}
 8011076:	b087      	sub	sp, #28
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 801107c:	2300      	movs	r3, #0
 801107e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 8011080:	2300      	movs	r3, #0
 8011082:	613b      	str	r3, [r7, #16]
 8011084:	2300      	movs	r3, #0
 8011086:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 8011088:	4b13      	ldr	r3, [pc, #76]	; (80110d8 <RTC_GetITStatus+0x64>)
 801108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801108c:	f003 0304 	and.w	r3, r3, #4
 8011090:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 8011092:	4b11      	ldr	r3, [pc, #68]	; (80110d8 <RTC_GetITStatus+0x64>)
 8011094:	689a      	ldr	r2, [r3, #8]
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	401a      	ands	r2, r3
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	0bd9      	lsrs	r1, r3, #15
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	400b      	ands	r3, r1
 80110a2:	4313      	orrs	r3, r2
 80110a4:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 80110a6:	4b0c      	ldr	r3, [pc, #48]	; (80110d8 <RTC_GetITStatus+0x64>)
 80110a8:	68da      	ldr	r2, [r3, #12]
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	091b      	lsrs	r3, r3, #4
 80110ae:	4013      	ands	r3, r2
 80110b0:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d006      	beq.n	80110c6 <RTC_GetITStatus+0x52>
 80110b8:	693b      	ldr	r3, [r7, #16]
 80110ba:	b29b      	uxth	r3, r3
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d002      	beq.n	80110c6 <RTC_GetITStatus+0x52>
  {
    bitstatus = SET;
 80110c0:	2301      	movs	r3, #1
 80110c2:	75fb      	strb	r3, [r7, #23]
 80110c4:	e001      	b.n	80110ca <RTC_GetITStatus+0x56>
  }
  else
  {
    bitstatus = RESET;
 80110c6:	2300      	movs	r3, #0
 80110c8:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 80110ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80110cc:	4618      	mov	r0, r3
 80110ce:	371c      	adds	r7, #28
 80110d0:	46bd      	mov	sp, r7
 80110d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d6:	4770      	bx	lr
 80110d8:	40002800 	.word	0x40002800

080110dc <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 80110dc:	b480      	push	{r7}
 80110de:	b085      	sub	sp, #20
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80110e4:	2300      	movs	r3, #0
 80110e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	091b      	lsrs	r3, r3, #4
 80110ec:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 80110ee:	4909      	ldr	r1, [pc, #36]	; (8011114 <RTC_ClearITPendingBit+0x38>)
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110f8:	43da      	mvns	r2, r3
 80110fa:	4b06      	ldr	r3, [pc, #24]	; (8011114 <RTC_ClearITPendingBit+0x38>)
 80110fc:	68db      	ldr	r3, [r3, #12]
 80110fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011102:	4313      	orrs	r3, r2
 8011104:	60cb      	str	r3, [r1, #12]
}
 8011106:	bf00      	nop
 8011108:	3714      	adds	r7, #20
 801110a:	46bd      	mov	sp, r7
 801110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011110:	4770      	bx	lr
 8011112:	bf00      	nop
 8011114:	40002800 	.word	0x40002800

08011118 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8011118:	b480      	push	{r7}
 801111a:	b085      	sub	sp, #20
 801111c:	af00      	add	r7, sp, #0
 801111e:	4603      	mov	r3, r0
 8011120:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 8011122:	2300      	movs	r3, #0
 8011124:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 8011126:	e005      	b.n	8011134 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8011128:	7bfb      	ldrb	r3, [r7, #15]
 801112a:	3301      	adds	r3, #1
 801112c:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 801112e:	79fb      	ldrb	r3, [r7, #7]
 8011130:	3b0a      	subs	r3, #10
 8011132:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10)
 8011134:	79fb      	ldrb	r3, [r7, #7]
 8011136:	2b09      	cmp	r3, #9
 8011138:	d8f6      	bhi.n	8011128 <RTC_ByteToBcd2+0x10>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 801113a:	7bfb      	ldrb	r3, [r7, #15]
 801113c:	011b      	lsls	r3, r3, #4
 801113e:	b2da      	uxtb	r2, r3
 8011140:	79fb      	ldrb	r3, [r7, #7]
 8011142:	4313      	orrs	r3, r2
 8011144:	b2db      	uxtb	r3, r3
}
 8011146:	4618      	mov	r0, r3
 8011148:	3714      	adds	r7, #20
 801114a:	46bd      	mov	sp, r7
 801114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011150:	4770      	bx	lr

08011152 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8011152:	b480      	push	{r7}
 8011154:	b085      	sub	sp, #20
 8011156:	af00      	add	r7, sp, #0
 8011158:	4603      	mov	r3, r0
 801115a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 801115c:	2300      	movs	r3, #0
 801115e:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8011160:	79fb      	ldrb	r3, [r7, #7]
 8011162:	091b      	lsrs	r3, r3, #4
 8011164:	b2db      	uxtb	r3, r3
 8011166:	461a      	mov	r2, r3
 8011168:	0092      	lsls	r2, r2, #2
 801116a:	4413      	add	r3, r2
 801116c:	005b      	lsls	r3, r3, #1
 801116e:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 8011170:	79fb      	ldrb	r3, [r7, #7]
 8011172:	f003 030f 	and.w	r3, r3, #15
 8011176:	b2da      	uxtb	r2, r3
 8011178:	7bfb      	ldrb	r3, [r7, #15]
 801117a:	4413      	add	r3, r2
 801117c:	b2db      	uxtb	r3, r3
}
 801117e:	4618      	mov	r0, r3
 8011180:	3714      	adds	r7, #20
 8011182:	46bd      	mov	sp, r7
 8011184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011188:	4770      	bx	lr
 801118a:	bf00      	nop

0801118c <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 8011190:	2101      	movs	r1, #1
 8011192:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011196:	f7fe fb45 	bl	800f824 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 801119a:	2100      	movs	r1, #0
 801119c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80111a0:	f7fe fb40 	bl	800f824 <RCC_APB2PeriphResetCmd>
}
 80111a4:	bf00      	nop
 80111a6:	bd80      	pop	{r7, pc}

080111a8 <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 80111a8:	b480      	push	{r7}
 80111aa:	b085      	sub	sp, #20
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80111b0:	2300      	movs	r3, #0
 80111b2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 80111b4:	4b13      	ldr	r3, [pc, #76]	; (8011204 <SDIO_Init+0x5c>)
 80111b6:	685b      	ldr	r3, [r3, #4]
 80111b8:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80111c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80111c4:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	7d1b      	ldrb	r3, [r3, #20]
 80111ca:	461a      	mov	r2, r3
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	689b      	ldr	r3, [r3, #8]
 80111d0:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 80111d6:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	68db      	ldr	r3, [r3, #12]
 80111dc:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 80111e2:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	691b      	ldr	r3, [r3, #16]
 80111e8:	4313      	orrs	r3, r2
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 80111ea:	68fa      	ldr	r2, [r7, #12]
 80111ec:	4313      	orrs	r3, r2
 80111ee:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 80111f0:	4a04      	ldr	r2, [pc, #16]	; (8011204 <SDIO_Init+0x5c>)
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	6053      	str	r3, [r2, #4]
}
 80111f6:	bf00      	nop
 80111f8:	3714      	adds	r7, #20
 80111fa:	46bd      	mov	sp, r7
 80111fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011200:	4770      	bx	lr
 8011202:	bf00      	nop
 8011204:	40012c00 	.word	0x40012c00

08011208 <SDIO_StructInit>:
  * @param  SDIO_InitStruct: pointer to an SDIO_InitTypeDef structure which 
  *         will be initialized.
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
 8011208:	b480      	push	{r7}
 801120a:	b083      	sub	sp, #12
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2200      	movs	r2, #0
 8011214:	751a      	strb	r2, [r3, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2200      	movs	r2, #0
 801121a:	601a      	str	r2, [r3, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2200      	movs	r2, #0
 8011220:	605a      	str	r2, [r3, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2200      	movs	r2, #0
 8011226:	609a      	str	r2, [r3, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2200      	movs	r2, #0
 801122c:	60da      	str	r2, [r3, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	2200      	movs	r2, #0
 8011232:	611a      	str	r2, [r3, #16]
}
 8011234:	bf00      	nop
 8011236:	370c      	adds	r7, #12
 8011238:	46bd      	mov	sp, r7
 801123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123e:	4770      	bx	lr

08011240 <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 8011240:	b480      	push	{r7}
 8011242:	b083      	sub	sp, #12
 8011244:	af00      	add	r7, sp, #0
 8011246:	4603      	mov	r3, r0
 8011248:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 801124a:	4a04      	ldr	r2, [pc, #16]	; (801125c <SDIO_ClockCmd+0x1c>)
 801124c:	79fb      	ldrb	r3, [r7, #7]
 801124e:	6013      	str	r3, [r2, #0]
}
 8011250:	bf00      	nop
 8011252:	370c      	adds	r7, #12
 8011254:	46bd      	mov	sp, r7
 8011256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125a:	4770      	bx	lr
 801125c:	422580a0 	.word	0x422580a0

08011260 <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 8011260:	b480      	push	{r7}
 8011262:	b083      	sub	sp, #12
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 8011268:	4a04      	ldr	r2, [pc, #16]	; (801127c <SDIO_SetPowerState+0x1c>)
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6013      	str	r3, [r2, #0]
}
 801126e:	bf00      	nop
 8011270:	370c      	adds	r7, #12
 8011272:	46bd      	mov	sp, r7
 8011274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011278:	4770      	bx	lr
 801127a:	bf00      	nop
 801127c:	40012c00 	.word	0x40012c00

08011280 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 8011280:	b480      	push	{r7}
 8011282:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 8011284:	4b04      	ldr	r3, [pc, #16]	; (8011298 <SDIO_GetPowerState+0x18>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	f003 0303 	and.w	r3, r3, #3
}
 801128c:	4618      	mov	r0, r3
 801128e:	46bd      	mov	sp, r7
 8011290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011294:	4770      	bx	lr
 8011296:	bf00      	nop
 8011298:	40012c00 	.word	0x40012c00

0801129c <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 801129c:	b480      	push	{r7}
 801129e:	b085      	sub	sp, #20
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80112a4:	2300      	movs	r3, #0
 80112a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 80112a8:	4a11      	ldr	r2, [pc, #68]	; (80112f0 <SDIO_SendCommand+0x54>)
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	6093      	str	r3, [r2, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 80112b0:	4b0f      	ldr	r3, [pc, #60]	; (80112f0 <SDIO_SendCommand+0x54>)
 80112b2:	68db      	ldr	r3, [r3, #12]
 80112b4:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80112bc:	f023 0307 	bic.w	r3, r3, #7
 80112c0:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	685a      	ldr	r2, [r3, #4]
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	689b      	ldr	r3, [r3, #8]
 80112ca:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	68db      	ldr	r3, [r3, #12]
 80112d0:	431a      	orrs	r2, r3
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	691b      	ldr	r3, [r3, #16]
 80112d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 80112d8:	68fa      	ldr	r2, [r7, #12]
 80112da:	4313      	orrs	r3, r2
 80112dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 80112de:	4a04      	ldr	r2, [pc, #16]	; (80112f0 <SDIO_SendCommand+0x54>)
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	60d3      	str	r3, [r2, #12]
}
 80112e4:	bf00      	nop
 80112e6:	3714      	adds	r7, #20
 80112e8:	46bd      	mov	sp, r7
 80112ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ee:	4770      	bx	lr
 80112f0:	40012c00 	.word	0x40012c00

080112f4 <SDIO_CmdStructInit>:
  * @param  SDIO_CmdInitStruct: pointer to an SDIO_CmdInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
 80112f4:	b480      	push	{r7}
 80112f6:	b083      	sub	sp, #12
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2200      	movs	r2, #0
 8011300:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2200      	movs	r2, #0
 8011306:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2200      	movs	r2, #0
 801130c:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2200      	movs	r2, #0
 8011312:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2200      	movs	r2, #0
 8011318:	611a      	str	r2, [r3, #16]
}
 801131a:	bf00      	nop
 801131c:	370c      	adds	r7, #12
 801131e:	46bd      	mov	sp, r7
 8011320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011324:	4770      	bx	lr

08011326 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 8011326:	b480      	push	{r7}
 8011328:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 801132a:	4b04      	ldr	r3, [pc, #16]	; (801133c <SDIO_GetCommandResponse+0x16>)
 801132c:	691b      	ldr	r3, [r3, #16]
 801132e:	b2db      	uxtb	r3, r3
}
 8011330:	4618      	mov	r0, r3
 8011332:	46bd      	mov	sp, r7
 8011334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011338:	4770      	bx	lr
 801133a:	bf00      	nop
 801133c:	40012c00 	.word	0x40012c00

08011340 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 8011340:	b480      	push	{r7}
 8011342:	b085      	sub	sp, #20
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8011348:	2300      	movs	r3, #0
 801134a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 801134c:	687a      	ldr	r2, [r7, #4]
 801134e:	4b05      	ldr	r3, [pc, #20]	; (8011364 <SDIO_GetResponse+0x24>)
 8011350:	4413      	add	r3, r2
 8011352:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	681b      	ldr	r3, [r3, #0]
}
 8011358:	4618      	mov	r0, r3
 801135a:	3714      	adds	r7, #20
 801135c:	46bd      	mov	sp, r7
 801135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011362:	4770      	bx	lr
 8011364:	40012c14 	.word	0x40012c14

08011368 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 8011368:	b480      	push	{r7}
 801136a:	b085      	sub	sp, #20
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011370:	2300      	movs	r3, #0
 8011372:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 8011374:	4a12      	ldr	r2, [pc, #72]	; (80113c0 <SDIO_DataConfig+0x58>)
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	6253      	str	r3, [r2, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 801137c:	4a10      	ldr	r2, [pc, #64]	; (80113c0 <SDIO_DataConfig+0x58>)
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	685b      	ldr	r3, [r3, #4]
 8011382:	6293      	str	r3, [r2, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 8011384:	4b0e      	ldr	r3, [pc, #56]	; (80113c0 <SDIO_DataConfig+0x58>)
 8011386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011388:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 8011390:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	689a      	ldr	r2, [r3, #8]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	68db      	ldr	r3, [r3, #12]
 801139a:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	691b      	ldr	r3, [r3, #16]
 80113a0:	431a      	orrs	r2, r3
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	695b      	ldr	r3, [r3, #20]
 80113a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 80113a8:	68fa      	ldr	r2, [r7, #12]
 80113aa:	4313      	orrs	r3, r2
 80113ac:	60fb      	str	r3, [r7, #12]

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 80113ae:	4a04      	ldr	r2, [pc, #16]	; (80113c0 <SDIO_DataConfig+0x58>)
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80113b4:	bf00      	nop
 80113b6:	3714      	adds	r7, #20
 80113b8:	46bd      	mov	sp, r7
 80113ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113be:	4770      	bx	lr
 80113c0:	40012c00 	.word	0x40012c00

080113c4 <SDIO_DataStructInit>:
  * @param  SDIO_DataInitStruct: pointer to an SDIO_DataInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 80113c4:	b480      	push	{r7}
 80113c6:	b083      	sub	sp, #12
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	f04f 32ff 	mov.w	r2, #4294967295
 80113d2:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2200      	movs	r2, #0
 80113d8:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2200      	movs	r2, #0
 80113de:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2200      	movs	r2, #0
 80113e4:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	2200      	movs	r2, #0
 80113ea:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	2200      	movs	r2, #0
 80113f0:	615a      	str	r2, [r3, #20]
}
 80113f2:	bf00      	nop
 80113f4:	370c      	adds	r7, #12
 80113f6:	46bd      	mov	sp, r7
 80113f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fc:	4770      	bx	lr

080113fe <SDIO_GetDataCounter>:
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
 80113fe:	b480      	push	{r7}
 8011400:	af00      	add	r7, sp, #0
  return SDIO->DCOUNT;
 8011402:	4b03      	ldr	r3, [pc, #12]	; (8011410 <SDIO_GetDataCounter+0x12>)
 8011404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 8011406:	4618      	mov	r0, r3
 8011408:	46bd      	mov	sp, r7
 801140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140e:	4770      	bx	lr
 8011410:	40012c00 	.word	0x40012c00

08011414 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 8011414:	b480      	push	{r7}
 8011416:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 8011418:	4b03      	ldr	r3, [pc, #12]	; (8011428 <SDIO_ReadData+0x14>)
 801141a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801141e:	4618      	mov	r0, r3
 8011420:	46bd      	mov	sp, r7
 8011422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011426:	4770      	bx	lr
 8011428:	40012c00 	.word	0x40012c00

0801142c <SDIO_WriteData>:
  * @brief  Write one data word to Tx FIFO.
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
 801142c:	b480      	push	{r7}
 801142e:	b083      	sub	sp, #12
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
  SDIO->FIFO = Data;
 8011434:	4a04      	ldr	r2, [pc, #16]	; (8011448 <SDIO_WriteData+0x1c>)
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 801143c:	bf00      	nop
 801143e:	370c      	adds	r7, #12
 8011440:	46bd      	mov	sp, r7
 8011442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011446:	4770      	bx	lr
 8011448:	40012c00 	.word	0x40012c00

0801144c <SDIO_GetFIFOCount>:
  * @brief  Returns the number of words left to be written to or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
 801144c:	b480      	push	{r7}
 801144e:	af00      	add	r7, sp, #0
  return SDIO->FIFOCNT;
 8011450:	4b03      	ldr	r3, [pc, #12]	; (8011460 <SDIO_GetFIFOCount+0x14>)
 8011452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8011454:	4618      	mov	r0, r3
 8011456:	46bd      	mov	sp, r7
 8011458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145c:	4770      	bx	lr
 801145e:	bf00      	nop
 8011460:	40012c00 	.word	0x40012c00

08011464 <SDIO_StartSDIOReadWait>:
  * @param  NewState: new state of the Start SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
 8011464:	b480      	push	{r7}
 8011466:	b083      	sub	sp, #12
 8011468:	af00      	add	r7, sp, #0
 801146a:	4603      	mov	r3, r0
 801146c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 801146e:	4a04      	ldr	r2, [pc, #16]	; (8011480 <SDIO_StartSDIOReadWait+0x1c>)
 8011470:	79fb      	ldrb	r3, [r7, #7]
 8011472:	6013      	str	r3, [r2, #0]
}
 8011474:	bf00      	nop
 8011476:	370c      	adds	r7, #12
 8011478:	46bd      	mov	sp, r7
 801147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147e:	4770      	bx	lr
 8011480:	422585a0 	.word	0x422585a0

08011484 <SDIO_StopSDIOReadWait>:
  * @param  NewState: new state of the Stop SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
 8011484:	b480      	push	{r7}
 8011486:	b083      	sub	sp, #12
 8011488:	af00      	add	r7, sp, #0
 801148a:	4603      	mov	r3, r0
 801148c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 801148e:	4a04      	ldr	r2, [pc, #16]	; (80114a0 <SDIO_StopSDIOReadWait+0x1c>)
 8011490:	79fb      	ldrb	r3, [r7, #7]
 8011492:	6013      	str	r3, [r2, #0]
}
 8011494:	bf00      	nop
 8011496:	370c      	adds	r7, #12
 8011498:	46bd      	mov	sp, r7
 801149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149e:	4770      	bx	lr
 80114a0:	422585a4 	.word	0x422585a4

080114a4 <SDIO_SetSDIOReadWaitMode>:
  *            @arg SDIO_ReadWaitMode_CLK: Read Wait control by stopping SDIOCLK
  *            @arg SDIO_ReadWaitMode_DATA2: Read Wait control using SDIO_DATA2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 80114a4:	b480      	push	{r7}
 80114a6:	b083      	sub	sp, #12
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 80114ac:	4a04      	ldr	r2, [pc, #16]	; (80114c0 <SDIO_SetSDIOReadWaitMode+0x1c>)
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6013      	str	r3, [r2, #0]
}
 80114b2:	bf00      	nop
 80114b4:	370c      	adds	r7, #12
 80114b6:	46bd      	mov	sp, r7
 80114b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114bc:	4770      	bx	lr
 80114be:	bf00      	nop
 80114c0:	422585a8 	.word	0x422585a8

080114c4 <SDIO_SetSDIOOperation>:
  * @param  NewState: new state of SDIO specific operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
 80114c4:	b480      	push	{r7}
 80114c6:	b083      	sub	sp, #12
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	4603      	mov	r3, r0
 80114cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 80114ce:	4a04      	ldr	r2, [pc, #16]	; (80114e0 <SDIO_SetSDIOOperation+0x1c>)
 80114d0:	79fb      	ldrb	r3, [r7, #7]
 80114d2:	6013      	str	r3, [r2, #0]
}
 80114d4:	bf00      	nop
 80114d6:	370c      	adds	r7, #12
 80114d8:	46bd      	mov	sp, r7
 80114da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114de:	4770      	bx	lr
 80114e0:	422585ac 	.word	0x422585ac

080114e4 <SDIO_SendSDIOSuspendCmd>:
  * @param  NewState: new state of the SD I/O Mode suspend command.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
 80114e4:	b480      	push	{r7}
 80114e6:	b083      	sub	sp, #12
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	4603      	mov	r3, r0
 80114ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 80114ee:	4a04      	ldr	r2, [pc, #16]	; (8011500 <SDIO_SendSDIOSuspendCmd+0x1c>)
 80114f0:	79fb      	ldrb	r3, [r7, #7]
 80114f2:	6013      	str	r3, [r2, #0]
}
 80114f4:	bf00      	nop
 80114f6:	370c      	adds	r7, #12
 80114f8:	46bd      	mov	sp, r7
 80114fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fe:	4770      	bx	lr
 8011500:	422581ac 	.word	0x422581ac

08011504 <SDIO_CommandCompletionCmd>:
  * @param  NewState: new state of command completion signal. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
 8011504:	b480      	push	{r7}
 8011506:	b083      	sub	sp, #12
 8011508:	af00      	add	r7, sp, #0
 801150a:	4603      	mov	r3, r0
 801150c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 801150e:	4a04      	ldr	r2, [pc, #16]	; (8011520 <SDIO_CommandCompletionCmd+0x1c>)
 8011510:	79fb      	ldrb	r3, [r7, #7]
 8011512:	6013      	str	r3, [r2, #0]
}
 8011514:	bf00      	nop
 8011516:	370c      	adds	r7, #12
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr
 8011520:	422581b0 	.word	0x422581b0

08011524 <SDIO_CEATAITCmd>:
  * @param  NewState: new state of CE-ATA interrupt. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
 8011524:	b480      	push	{r7}
 8011526:	b083      	sub	sp, #12
 8011528:	af00      	add	r7, sp, #0
 801152a:	4603      	mov	r3, r0
 801152c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 801152e:	4a08      	ldr	r2, [pc, #32]	; (8011550 <SDIO_CEATAITCmd+0x2c>)
 8011530:	79fb      	ldrb	r3, [r7, #7]
 8011532:	f003 0301 	and.w	r3, r3, #1
 8011536:	2b00      	cmp	r3, #0
 8011538:	bf0c      	ite	eq
 801153a:	2301      	moveq	r3, #1
 801153c:	2300      	movne	r3, #0
 801153e:	b2db      	uxtb	r3, r3
 8011540:	6013      	str	r3, [r2, #0]
}
 8011542:	bf00      	nop
 8011544:	370c      	adds	r7, #12
 8011546:	46bd      	mov	sp, r7
 8011548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154c:	4770      	bx	lr
 801154e:	bf00      	nop
 8011550:	422581b4 	.word	0x422581b4

08011554 <SDIO_SendCEATACmd>:
  * @param  NewState: new state of CE-ATA command. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
 8011554:	b480      	push	{r7}
 8011556:	b083      	sub	sp, #12
 8011558:	af00      	add	r7, sp, #0
 801155a:	4603      	mov	r3, r0
 801155c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 801155e:	4a04      	ldr	r2, [pc, #16]	; (8011570 <SDIO_SendCEATACmd+0x1c>)
 8011560:	79fb      	ldrb	r3, [r7, #7]
 8011562:	6013      	str	r3, [r2, #0]
}
 8011564:	bf00      	nop
 8011566:	370c      	adds	r7, #12
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr
 8011570:	422581b8 	.word	0x422581b8

08011574 <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 8011574:	b480      	push	{r7}
 8011576:	b083      	sub	sp, #12
 8011578:	af00      	add	r7, sp, #0
 801157a:	4603      	mov	r3, r0
 801157c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 801157e:	4a04      	ldr	r2, [pc, #16]	; (8011590 <SDIO_DMACmd+0x1c>)
 8011580:	79fb      	ldrb	r3, [r7, #7]
 8011582:	6013      	str	r3, [r2, #0]
}
 8011584:	bf00      	nop
 8011586:	370c      	adds	r7, #12
 8011588:	46bd      	mov	sp, r7
 801158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158e:	4770      	bx	lr
 8011590:	4225858c 	.word	0x4225858c

08011594 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 8011594:	b480      	push	{r7}
 8011596:	b083      	sub	sp, #12
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
 801159c:	460b      	mov	r3, r1
 801159e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80115a0:	78fb      	ldrb	r3, [r7, #3]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d006      	beq.n	80115b4 <SDIO_ITConfig+0x20>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 80115a6:	490a      	ldr	r1, [pc, #40]	; (80115d0 <SDIO_ITConfig+0x3c>)
 80115a8:	4b09      	ldr	r3, [pc, #36]	; (80115d0 <SDIO_ITConfig+0x3c>)
 80115aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	4313      	orrs	r3, r2
 80115b0:	63cb      	str	r3, [r1, #60]	; 0x3c
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
  } 
}
 80115b2:	e006      	b.n	80115c2 <SDIO_ITConfig+0x2e>
    SDIO->MASK &= ~SDIO_IT;
 80115b4:	4906      	ldr	r1, [pc, #24]	; (80115d0 <SDIO_ITConfig+0x3c>)
 80115b6:	4b06      	ldr	r3, [pc, #24]	; (80115d0 <SDIO_ITConfig+0x3c>)
 80115b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	43db      	mvns	r3, r3
 80115be:	4013      	ands	r3, r2
 80115c0:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 80115c2:	bf00      	nop
 80115c4:	370c      	adds	r7, #12
 80115c6:	46bd      	mov	sp, r7
 80115c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115cc:	4770      	bx	lr
 80115ce:	bf00      	nop
 80115d0:	40012c00 	.word	0x40012c00

080115d4 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 80115d4:	b480      	push	{r7}
 80115d6:	b085      	sub	sp, #20
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80115dc:	2300      	movs	r3, #0
 80115de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 80115e0:	4b08      	ldr	r3, [pc, #32]	; (8011604 <SDIO_GetFlagStatus+0x30>)
 80115e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	4013      	ands	r3, r2
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d002      	beq.n	80115f2 <SDIO_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 80115ec:	2301      	movs	r3, #1
 80115ee:	73fb      	strb	r3, [r7, #15]
 80115f0:	e001      	b.n	80115f6 <SDIO_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 80115f2:	2300      	movs	r3, #0
 80115f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80115f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	3714      	adds	r7, #20
 80115fc:	46bd      	mov	sp, r7
 80115fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011602:	4770      	bx	lr
 8011604:	40012c00 	.word	0x40012c00

08011608 <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 8011608:	b480      	push	{r7}
 801160a:	b083      	sub	sp, #12
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 8011610:	4a04      	ldr	r2, [pc, #16]	; (8011624 <SDIO_ClearFlag+0x1c>)
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	6393      	str	r3, [r2, #56]	; 0x38
}
 8011616:	bf00      	nop
 8011618:	370c      	adds	r7, #12
 801161a:	46bd      	mov	sp, r7
 801161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011620:	4770      	bx	lr
 8011622:	bf00      	nop
 8011624:	40012c00 	.word	0x40012c00

08011628 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 8011628:	b480      	push	{r7}
 801162a:	b085      	sub	sp, #20
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8011630:	2300      	movs	r3, #0
 8011632:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 8011634:	4b08      	ldr	r3, [pc, #32]	; (8011658 <SDIO_GetITStatus+0x30>)
 8011636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	4013      	ands	r3, r2
 801163c:	2b00      	cmp	r3, #0
 801163e:	d002      	beq.n	8011646 <SDIO_GetITStatus+0x1e>
  {
    bitstatus = SET;
 8011640:	2301      	movs	r3, #1
 8011642:	73fb      	strb	r3, [r7, #15]
 8011644:	e001      	b.n	801164a <SDIO_GetITStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 8011646:	2300      	movs	r3, #0
 8011648:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801164a:	7bfb      	ldrb	r3, [r7, #15]
}
 801164c:	4618      	mov	r0, r3
 801164e:	3714      	adds	r7, #20
 8011650:	46bd      	mov	sp, r7
 8011652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011656:	4770      	bx	lr
 8011658:	40012c00 	.word	0x40012c00

0801165c <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 801165c:	b480      	push	{r7}
 801165e:	b083      	sub	sp, #12
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 8011664:	4a04      	ldr	r2, [pc, #16]	; (8011678 <SDIO_ClearITPendingBit+0x1c>)
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	6393      	str	r3, [r2, #56]	; 0x38
}
 801166a:	bf00      	nop
 801166c:	370c      	adds	r7, #12
 801166e:	46bd      	mov	sp, r7
 8011670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011674:	4770      	bx	lr
 8011676:	bf00      	nop
 8011678:	40012c00 	.word	0x40012c00

0801167c <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b082      	sub	sp, #8
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	4a2e      	ldr	r2, [pc, #184]	; (8011740 <SPI_I2S_DeInit+0xc4>)
 8011688:	4293      	cmp	r3, r2
 801168a:	d10a      	bne.n	80116a2 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 801168c:	2101      	movs	r1, #1
 801168e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011692:	f7fe f8c7 	bl	800f824 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8011696:	2100      	movs	r1, #0
 8011698:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801169c:	f7fe f8c2 	bl	800f824 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 80116a0:	e049      	b.n	8011736 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI2)
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	4a27      	ldr	r2, [pc, #156]	; (8011744 <SPI_I2S_DeInit+0xc8>)
 80116a6:	4293      	cmp	r3, r2
 80116a8:	d10a      	bne.n	80116c0 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 80116aa:	2101      	movs	r1, #1
 80116ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80116b0:	f7fe f898 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 80116b4:	2100      	movs	r1, #0
 80116b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80116ba:	f7fe f893 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 80116be:	e03a      	b.n	8011736 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI3)
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	4a21      	ldr	r2, [pc, #132]	; (8011748 <SPI_I2S_DeInit+0xcc>)
 80116c4:	4293      	cmp	r3, r2
 80116c6:	d10a      	bne.n	80116de <SPI_I2S_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 80116c8:	2101      	movs	r1, #1
 80116ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80116ce:	f7fe f889 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80116d2:	2100      	movs	r1, #0
 80116d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80116d8:	f7fe f884 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 80116dc:	e02b      	b.n	8011736 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI4)
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	4a1a      	ldr	r2, [pc, #104]	; (801174c <SPI_I2S_DeInit+0xd0>)
 80116e2:	4293      	cmp	r3, r2
 80116e4:	d10a      	bne.n	80116fc <SPI_I2S_DeInit+0x80>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 80116e6:	2101      	movs	r1, #1
 80116e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80116ec:	f7fe f89a 	bl	800f824 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 80116f0:	2100      	movs	r1, #0
 80116f2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80116f6:	f7fe f895 	bl	800f824 <RCC_APB2PeriphResetCmd>
}
 80116fa:	e01c      	b.n	8011736 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI5)
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	4a14      	ldr	r2, [pc, #80]	; (8011750 <SPI_I2S_DeInit+0xd4>)
 8011700:	4293      	cmp	r3, r2
 8011702:	d10a      	bne.n	801171a <SPI_I2S_DeInit+0x9e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 8011704:	2101      	movs	r1, #1
 8011706:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801170a:	f7fe f88b 	bl	800f824 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 801170e:	2100      	movs	r1, #0
 8011710:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011714:	f7fe f886 	bl	800f824 <RCC_APB2PeriphResetCmd>
}
 8011718:	e00d      	b.n	8011736 <SPI_I2S_DeInit+0xba>
    if (SPIx == SPI6)
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	4a0d      	ldr	r2, [pc, #52]	; (8011754 <SPI_I2S_DeInit+0xd8>)
 801171e:	4293      	cmp	r3, r2
 8011720:	d109      	bne.n	8011736 <SPI_I2S_DeInit+0xba>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 8011722:	2101      	movs	r1, #1
 8011724:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8011728:	f7fe f87c 	bl	800f824 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 801172c:	2100      	movs	r1, #0
 801172e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8011732:	f7fe f877 	bl	800f824 <RCC_APB2PeriphResetCmd>
}
 8011736:	bf00      	nop
 8011738:	3708      	adds	r7, #8
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
 801173e:	bf00      	nop
 8011740:	40013000 	.word	0x40013000
 8011744:	40003800 	.word	0x40003800
 8011748:	40003c00 	.word	0x40003c00
 801174c:	40013400 	.word	0x40013400
 8011750:	40015000 	.word	0x40015000
 8011754:	40015400 	.word	0x40015400

08011758 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8011758:	b480      	push	{r7}
 801175a:	b085      	sub	sp, #20
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
 8011760:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8011762:	2300      	movs	r3, #0
 8011764:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	881b      	ldrh	r3, [r3, #0]
 801176a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 801176c:	89fb      	ldrh	r3, [r7, #14]
 801176e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8011772:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	881a      	ldrh	r2, [r3, #0]
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	885b      	ldrh	r3, [r3, #2]
 801177c:	4313      	orrs	r3, r2
 801177e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8011784:	4313      	orrs	r3, r2
 8011786:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 801178c:	4313      	orrs	r3, r2
 801178e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8011794:	4313      	orrs	r3, r2
 8011796:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 801179c:	4313      	orrs	r3, r2
 801179e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80117a4:	4313      	orrs	r3, r2
 80117a6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80117ac:	4313      	orrs	r3, r2
 80117ae:	b29a      	uxth	r2, r3
 80117b0:	89fb      	ldrh	r3, [r7, #14]
 80117b2:	4313      	orrs	r3, r2
 80117b4:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	89fa      	ldrh	r2, [r7, #14]
 80117ba:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	8b9b      	ldrh	r3, [r3, #28]
 80117c0:	b29b      	uxth	r3, r3
 80117c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80117c6:	b29a      	uxth	r2, r3
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	8a1a      	ldrh	r2, [r3, #16]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	821a      	strh	r2, [r3, #16]
}
 80117d4:	bf00      	nop
 80117d6:	3714      	adds	r7, #20
 80117d8:	46bd      	mov	sp, r7
 80117da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117de:	4770      	bx	lr

080117e0 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 80117e0:	b480      	push	{r7}
 80117e2:	b08b      	sub	sp, #44	; 0x2c
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 80117ea:	2300      	movs	r3, #0
 80117ec:	837b      	strh	r3, [r7, #26]
 80117ee:	2302      	movs	r3, #2
 80117f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80117f2:	2300      	movs	r3, #0
 80117f4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80117f6:	2301      	movs	r3, #1
 80117f8:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 80117fa:	2300      	movs	r3, #0
 80117fc:	61fb      	str	r3, [r7, #28]
 80117fe:	2300      	movs	r3, #0
 8011800:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 8011802:	2300      	movs	r3, #0
 8011804:	613b      	str	r3, [r7, #16]
 8011806:	2300      	movs	r3, #0
 8011808:	60fb      	str	r3, [r7, #12]
 801180a:	2300      	movs	r3, #0
 801180c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	8b9b      	ldrh	r3, [r3, #28]
 8011812:	b29b      	uxth	r3, r3
 8011814:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8011818:	f023 030f 	bic.w	r3, r3, #15
 801181c:	b29a      	uxth	r2, r3
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	2202      	movs	r2, #2
 8011826:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	8b9b      	ldrh	r3, [r3, #28]
 801182c:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	689b      	ldr	r3, [r3, #8]
 8011832:	2b02      	cmp	r3, #2
 8011834:	d104      	bne.n	8011840 <I2S_Init+0x60>
  {
    i2sodd = (uint16_t)0;
 8011836:	2300      	movs	r3, #0
 8011838:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 801183a:	2302      	movs	r3, #2
 801183c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801183e:	e06d      	b.n	801191c <I2S_Init+0x13c>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	889b      	ldrh	r3, [r3, #4]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d102      	bne.n	801184e <I2S_Init+0x6e>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 8011848:	2301      	movs	r3, #1
 801184a:	847b      	strh	r3, [r7, #34]	; 0x22
 801184c:	e001      	b.n	8011852 <I2S_Init+0x72>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 801184e:	2302      	movs	r3, #2
 8011850:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 8011852:	4b4b      	ldr	r3, [pc, #300]	; (8011980 <I2S_Init+0x1a0>)
 8011854:	689b      	ldr	r3, [r3, #8]
 8011856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801185a:	2b00      	cmp	r3, #0
 801185c:	d005      	beq.n	801186a <I2S_Init+0x8a>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 801185e:	4a48      	ldr	r2, [pc, #288]	; (8011980 <I2S_Init+0x1a0>)
 8011860:	4b47      	ldr	r3, [pc, #284]	; (8011980 <I2S_Init+0x1a0>)
 8011862:	689b      	ldr	r3, [r3, #8]
 8011864:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011868:	6093      	str	r3, [r2, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 801186a:	4b45      	ldr	r3, [pc, #276]	; (8011980 <I2S_Init+0x1a0>)
 801186c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011870:	099b      	lsrs	r3, r3, #6
 8011872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011876:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 8011878:	4b41      	ldr	r3, [pc, #260]	; (8011980 <I2S_Init+0x1a0>)
 801187a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801187e:	0f1b      	lsrs	r3, r3, #28
 8011880:	f003 0307 	and.w	r3, r3, #7
 8011884:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 8011886:	4b3e      	ldr	r3, [pc, #248]	; (8011980 <I2S_Init+0x1a0>)
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801188e:	613b      	str	r3, [r7, #16]

    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 8011890:	4a3c      	ldr	r2, [pc, #240]	; (8011984 <I2S_Init+0x1a4>)
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	fbb2 f3f3 	udiv	r3, r2, r3
 8011898:	68fa      	ldr	r2, [r7, #12]
 801189a:	fb02 f203 	mul.w	r2, r2, r3
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80118a4:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	88db      	ldrh	r3, [r3, #6]
 80118aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118ae:	d10f      	bne.n	80118d0 <I2S_Init+0xf0>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	0a1a      	lsrs	r2, r3, #8
 80118b4:	4613      	mov	r3, r2
 80118b6:	009b      	lsls	r3, r3, #2
 80118b8:	4413      	add	r3, r2
 80118ba:	005b      	lsls	r3, r3, #1
 80118bc:	461a      	mov	r2, r3
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	689b      	ldr	r3, [r3, #8]
 80118c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	3305      	adds	r3, #5
 80118ca:	b29b      	uxth	r3, r3
 80118cc:	61fb      	str	r3, [r7, #28]
 80118ce:	e012      	b.n	80118f6 <I2S_Init+0x116>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80118d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80118d2:	015b      	lsls	r3, r3, #5
 80118d4:	461a      	mov	r2, r3
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80118dc:	4613      	mov	r3, r2
 80118de:	009b      	lsls	r3, r3, #2
 80118e0:	4413      	add	r3, r2
 80118e2:	005b      	lsls	r3, r3, #1
 80118e4:	461a      	mov	r2, r3
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	689b      	ldr	r3, [r3, #8]
 80118ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80118ee:	b29b      	uxth	r3, r3
 80118f0:	3305      	adds	r3, #5
 80118f2:	b29b      	uxth	r3, r3
 80118f4:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 80118f6:	69fb      	ldr	r3, [r7, #28]
 80118f8:	4a23      	ldr	r2, [pc, #140]	; (8011988 <I2S_Init+0x1a8>)
 80118fa:	fba2 2303 	umull	r2, r3, r2, r3
 80118fe:	08db      	lsrs	r3, r3, #3
 8011900:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 8011902:	69fb      	ldr	r3, [r7, #28]
 8011904:	b29b      	uxth	r3, r3
 8011906:	f003 0301 	and.w	r3, r3, #1
 801190a:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 801190c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801190e:	69fa      	ldr	r2, [r7, #28]
 8011910:	1ad3      	subs	r3, r2, r3
 8011912:	085b      	lsrs	r3, r3, #1
 8011914:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 8011916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011918:	021b      	lsls	r3, r3, #8
 801191a:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 801191c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801191e:	2b01      	cmp	r3, #1
 8011920:	d902      	bls.n	8011928 <I2S_Init+0x148>
 8011922:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011924:	2bff      	cmp	r3, #255	; 0xff
 8011926:	d903      	bls.n	8011930 <I2S_Init+0x150>
  {
    /* Set the default values */
    i2sdiv = 2;
 8011928:	2302      	movs	r3, #2
 801192a:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 801192c:	2300      	movs	r3, #0
 801192e:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	88da      	ldrh	r2, [r3, #6]
 8011934:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011936:	4313      	orrs	r3, r2
 8011938:	b29a      	uxth	r2, r3
 801193a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801193c:	4313      	orrs	r3, r2
 801193e:	b29a      	uxth	r2, r3
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	8859      	ldrh	r1, [r3, #2]
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 8011950:	683b      	ldr	r3, [r7, #0]
 8011952:	899b      	ldrh	r3, [r3, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8011954:	4303      	orrs	r3, r0
 8011956:	b29b      	uxth	r3, r3
 8011958:	430b      	orrs	r3, r1
 801195a:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 801195c:	4313      	orrs	r3, r2
 801195e:	b29a      	uxth	r2, r3
 8011960:	8b7b      	ldrh	r3, [r7, #26]
 8011962:	4313      	orrs	r3, r2
 8011964:	b29b      	uxth	r3, r3
 8011966:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801196a:	837b      	strh	r3, [r7, #26]
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	8b7a      	ldrh	r2, [r7, #26]
 8011970:	839a      	strh	r2, [r3, #28]
}
 8011972:	bf00      	nop
 8011974:	372c      	adds	r7, #44	; 0x2c
 8011976:	46bd      	mov	sp, r7
 8011978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197c:	4770      	bx	lr
 801197e:	bf00      	nop
 8011980:	40023800 	.word	0x40023800
 8011984:	017d7840 	.word	0x017d7840
 8011988:	cccccccd 	.word	0xcccccccd

0801198c <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 801198c:	b480      	push	{r7}
 801198e:	b083      	sub	sp, #12
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2200      	movs	r2, #0
 8011998:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2200      	movs	r2, #0
 801199e:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2200      	movs	r2, #0
 80119a4:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2200      	movs	r2, #0
 80119aa:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2200      	movs	r2, #0
 80119b0:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2200      	movs	r2, #0
 80119b6:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2200      	movs	r2, #0
 80119bc:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	2200      	movs	r2, #0
 80119c2:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	2207      	movs	r2, #7
 80119c8:	821a      	strh	r2, [r3, #16]
}
 80119ca:	bf00      	nop
 80119cc:	370c      	adds	r7, #12
 80119ce:	46bd      	mov	sp, r7
 80119d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d4:	4770      	bx	lr

080119d6 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 80119d6:	b480      	push	{r7}
 80119d8:	b083      	sub	sp, #12
 80119da:	af00      	add	r7, sp, #0
 80119dc:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2200      	movs	r2, #0
 80119e2:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2200      	movs	r2, #0
 80119e8:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	2200      	movs	r2, #0
 80119ee:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2200      	movs	r2, #0
 80119f4:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2202      	movs	r2, #2
 80119fa:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2200      	movs	r2, #0
 8011a00:	819a      	strh	r2, [r3, #12]
}
 8011a02:	bf00      	nop
 8011a04:	370c      	adds	r7, #12
 8011a06:	46bd      	mov	sp, r7
 8011a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0c:	4770      	bx	lr

08011a0e <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8011a0e:	b480      	push	{r7}
 8011a10:	b083      	sub	sp, #12
 8011a12:	af00      	add	r7, sp, #0
 8011a14:	6078      	str	r0, [r7, #4]
 8011a16:	460b      	mov	r3, r1
 8011a18:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011a1a:	78fb      	ldrb	r3, [r7, #3]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d008      	beq.n	8011a32 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	881b      	ldrh	r3, [r3, #0]
 8011a24:	b29b      	uxth	r3, r3
 8011a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a2a:	b29a      	uxth	r2, r3
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8011a30:	e007      	b.n	8011a42 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	881b      	ldrh	r3, [r3, #0]
 8011a36:	b29b      	uxth	r3, r3
 8011a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a3c:	b29a      	uxth	r2, r3
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	801a      	strh	r2, [r3, #0]
}
 8011a42:	bf00      	nop
 8011a44:	370c      	adds	r7, #12
 8011a46:	46bd      	mov	sp, r7
 8011a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4c:	4770      	bx	lr

08011a4e <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8011a4e:	b480      	push	{r7}
 8011a50:	b083      	sub	sp, #12
 8011a52:	af00      	add	r7, sp, #0
 8011a54:	6078      	str	r0, [r7, #4]
 8011a56:	460b      	mov	r3, r1
 8011a58:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011a5a:	78fb      	ldrb	r3, [r7, #3]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d008      	beq.n	8011a72 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	8b9b      	ldrh	r3, [r3, #28]
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011a6a:	b29a      	uxth	r2, r3
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	839a      	strh	r2, [r3, #28]
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
  }
}
 8011a70:	e007      	b.n	8011a82 <I2S_Cmd+0x34>
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	8b9b      	ldrh	r3, [r3, #28]
 8011a76:	b29b      	uxth	r3, r3
 8011a78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011a7c:	b29a      	uxth	r2, r3
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	839a      	strh	r2, [r3, #28]
}
 8011a82:	bf00      	nop
 8011a84:	370c      	adds	r7, #12
 8011a86:	46bd      	mov	sp, r7
 8011a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8c:	4770      	bx	lr

08011a8e <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 8011a8e:	b480      	push	{r7}
 8011a90:	b083      	sub	sp, #12
 8011a92:	af00      	add	r7, sp, #0
 8011a94:	6078      	str	r0, [r7, #4]
 8011a96:	460b      	mov	r3, r1
 8011a98:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	881b      	ldrh	r3, [r3, #0]
 8011a9e:	b29b      	uxth	r3, r3
 8011aa0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011aa4:	b29a      	uxth	r2, r3
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	881b      	ldrh	r3, [r3, #0]
 8011aae:	b29a      	uxth	r2, r3
 8011ab0:	887b      	ldrh	r3, [r7, #2]
 8011ab2:	4313      	orrs	r3, r2
 8011ab4:	b29a      	uxth	r2, r3
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	801a      	strh	r2, [r3, #0]
}
 8011aba:	bf00      	nop
 8011abc:	370c      	adds	r7, #12
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac4:	4770      	bx	lr

08011ac6 <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 8011ac6:	b480      	push	{r7}
 8011ac8:	b083      	sub	sp, #12
 8011aca:	af00      	add	r7, sp, #0
 8011acc:	6078      	str	r0, [r7, #4]
 8011ace:	460b      	mov	r3, r1
 8011ad0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 8011ad2:	887b      	ldrh	r3, [r7, #2]
 8011ad4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011ad8:	d108      	bne.n	8011aec <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	881b      	ldrh	r3, [r3, #0]
 8011ade:	b29b      	uxth	r3, r3
 8011ae0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011ae4:	b29a      	uxth	r2, r3
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
  }
}
 8011aea:	e007      	b.n	8011afc <SPI_BiDirectionalLineConfig+0x36>
    SPIx->CR1 &= SPI_Direction_Rx;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	881b      	ldrh	r3, [r3, #0]
 8011af0:	b29b      	uxth	r3, r3
 8011af2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011af6:	b29a      	uxth	r2, r3
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	801a      	strh	r2, [r3, #0]
}
 8011afc:	bf00      	nop
 8011afe:	370c      	adds	r7, #12
 8011b00:	46bd      	mov	sp, r7
 8011b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b06:	4770      	bx	lr

08011b08 <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 8011b08:	b480      	push	{r7}
 8011b0a:	b083      	sub	sp, #12
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
 8011b10:	460b      	mov	r3, r1
 8011b12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 8011b14:	887b      	ldrh	r3, [r7, #2]
 8011b16:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8011b1a:	4293      	cmp	r3, r2
 8011b1c:	d008      	beq.n	8011b30 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	881b      	ldrh	r3, [r3, #0]
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011b28:	b29a      	uxth	r2, r3
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
  }
}
 8011b2e:	e007      	b.n	8011b40 <SPI_NSSInternalSoftwareConfig+0x38>
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	881b      	ldrh	r3, [r3, #0]
 8011b34:	b29b      	uxth	r3, r3
 8011b36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011b3a:	b29a      	uxth	r2, r3
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	801a      	strh	r2, [r3, #0]
}
 8011b40:	bf00      	nop
 8011b42:	370c      	adds	r7, #12
 8011b44:	46bd      	mov	sp, r7
 8011b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4a:	4770      	bx	lr

08011b4c <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	b083      	sub	sp, #12
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	460b      	mov	r3, r1
 8011b56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011b58:	78fb      	ldrb	r3, [r7, #3]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d008      	beq.n	8011b70 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	889b      	ldrh	r3, [r3, #4]
 8011b62:	b29b      	uxth	r3, r3
 8011b64:	f043 0304 	orr.w	r3, r3, #4
 8011b68:	b29a      	uxth	r2, r3
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
  }
}
 8011b6e:	e007      	b.n	8011b80 <SPI_SSOutputCmd+0x34>
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	889b      	ldrh	r3, [r3, #4]
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	f023 0304 	bic.w	r3, r3, #4
 8011b7a:	b29a      	uxth	r2, r3
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	809a      	strh	r2, [r3, #4]
}
 8011b80:	bf00      	nop
 8011b82:	370c      	adds	r7, #12
 8011b84:	46bd      	mov	sp, r7
 8011b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8a:	4770      	bx	lr

08011b8c <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b083      	sub	sp, #12
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	460b      	mov	r3, r1
 8011b96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011b98:	78fb      	ldrb	r3, [r7, #3]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d008      	beq.n	8011bb0 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	889b      	ldrh	r3, [r3, #4]
 8011ba2:	b29b      	uxth	r3, r3
 8011ba4:	f043 0310 	orr.w	r3, r3, #16
 8011ba8:	b29a      	uxth	r2, r3
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
  }
}
 8011bae:	e007      	b.n	8011bc0 <SPI_TIModeCmd+0x34>
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	889b      	ldrh	r3, [r3, #4]
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	f023 0310 	bic.w	r3, r3, #16
 8011bba:	b29a      	uxth	r2, r3
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	809a      	strh	r2, [r3, #4]
}
 8011bc0:	bf00      	nop
 8011bc2:	370c      	adds	r7, #12
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr

08011bcc <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 8011bcc:	b480      	push	{r7}
 8011bce:	b085      	sub	sp, #20
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	81bb      	strh	r3, [r7, #12]
 8011bda:	2300      	movs	r3, #0
 8011bdc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	8b9b      	ldrh	r3, [r3, #28]
 8011be2:	b29b      	uxth	r3, r3
 8011be4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8011be8:	f023 030f 	bic.w	r3, r3, #15
 8011bec:	b29a      	uxth	r2, r3
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	2202      	movs	r2, #2
 8011bf6:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	8b9b      	ldrh	r3, [r3, #28]
 8011bfc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	881b      	ldrh	r3, [r3, #0]
 8011c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c06:	d003      	beq.n	8011c10 <I2S_FullDuplexConfig+0x44>
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	881b      	ldrh	r3, [r3, #0]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d103      	bne.n	8011c18 <I2S_FullDuplexConfig+0x4c>
  {
    tmp = I2S_Mode_SlaveRx;
 8011c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c14:	81fb      	strh	r3, [r7, #14]
 8011c16:	e00b      	b.n	8011c30 <I2S_FullDuplexConfig+0x64>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	881b      	ldrh	r3, [r3, #0]
 8011c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011c20:	d004      	beq.n	8011c2c <I2S_FullDuplexConfig+0x60>
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	881b      	ldrh	r3, [r3, #0]
 8011c26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c2a:	d101      	bne.n	8011c30 <I2S_FullDuplexConfig+0x64>
    {
      tmp = I2S_Mode_SlaveTx;
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	885a      	ldrh	r2, [r3, #2]
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 8011c38:	683b      	ldr	r3, [r7, #0]
 8011c3a:	899b      	ldrh	r3, [r3, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8011c3c:	430b      	orrs	r3, r1
 8011c3e:	b29b      	uxth	r3, r3
 8011c40:	4313      	orrs	r3, r2
 8011c42:	b29a      	uxth	r2, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8011c44:	89fb      	ldrh	r3, [r7, #14]
 8011c46:	4313      	orrs	r3, r2
 8011c48:	b29a      	uxth	r2, r3
 8011c4a:	89bb      	ldrh	r3, [r7, #12]
 8011c4c:	4313      	orrs	r3, r2
 8011c4e:	b29b      	uxth	r3, r3
 8011c50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011c54:	81bb      	strh	r3, [r7, #12]
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	89ba      	ldrh	r2, [r7, #12]
 8011c5a:	839a      	strh	r2, [r3, #28]
}
 8011c5c:	bf00      	nop
 8011c5e:	3714      	adds	r7, #20
 8011c60:	46bd      	mov	sp, r7
 8011c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c66:	4770      	bx	lr

08011c68 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8011c68:	b480      	push	{r7}
 8011c6a:	b083      	sub	sp, #12
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	899b      	ldrh	r3, [r3, #12]
 8011c74:	b29b      	uxth	r3, r3
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	370c      	adds	r7, #12
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c80:	4770      	bx	lr

08011c82 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8011c82:	b480      	push	{r7}
 8011c84:	b083      	sub	sp, #12
 8011c86:	af00      	add	r7, sp, #0
 8011c88:	6078      	str	r0, [r7, #4]
 8011c8a:	460b      	mov	r3, r1
 8011c8c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	887a      	ldrh	r2, [r7, #2]
 8011c92:	819a      	strh	r2, [r3, #12]
}
 8011c94:	bf00      	nop
 8011c96:	370c      	adds	r7, #12
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9e:	4770      	bx	lr

08011ca0 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	b083      	sub	sp, #12
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	460b      	mov	r3, r1
 8011caa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011cac:	78fb      	ldrb	r3, [r7, #3]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d008      	beq.n	8011cc4 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	881b      	ldrh	r3, [r3, #0]
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011cbc:	b29a      	uxth	r2, r3
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
  }
}
 8011cc2:	e007      	b.n	8011cd4 <SPI_CalculateCRC+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	881b      	ldrh	r3, [r3, #0]
 8011cc8:	b29b      	uxth	r3, r3
 8011cca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011cce:	b29a      	uxth	r2, r3
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	801a      	strh	r2, [r3, #0]
}
 8011cd4:	bf00      	nop
 8011cd6:	370c      	adds	r7, #12
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cde:	4770      	bx	lr

08011ce0 <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	b083      	sub	sp, #12
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	881b      	ldrh	r3, [r3, #0]
 8011cec:	b29b      	uxth	r3, r3
 8011cee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011cf2:	b29a      	uxth	r2, r3
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	801a      	strh	r2, [r3, #0]
}
 8011cf8:	bf00      	nop
 8011cfa:	370c      	adds	r7, #12
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d02:	4770      	bx	lr

08011d04 <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 8011d04:	b480      	push	{r7}
 8011d06:	b085      	sub	sp, #20
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	460b      	mov	r3, r1
 8011d0e:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 8011d10:	2300      	movs	r3, #0
 8011d12:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8011d14:	78fb      	ldrb	r3, [r7, #3]
 8011d16:	2b01      	cmp	r3, #1
 8011d18:	d003      	beq.n	8011d22 <SPI_GetCRC+0x1e>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	8b1b      	ldrh	r3, [r3, #24]
 8011d1e:	81fb      	strh	r3, [r7, #14]
 8011d20:	e002      	b.n	8011d28 <SPI_GetCRC+0x24>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	8a9b      	ldrh	r3, [r3, #20]
 8011d26:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 8011d28:	89fb      	ldrh	r3, [r7, #14]
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3714      	adds	r7, #20
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d34:	4770      	bx	lr

08011d36 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 8011d36:	b480      	push	{r7}
 8011d38:	b083      	sub	sp, #12
 8011d3a:	af00      	add	r7, sp, #0
 8011d3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	8a1b      	ldrh	r3, [r3, #16]
 8011d42:	b29b      	uxth	r3, r3
}
 8011d44:	4618      	mov	r0, r3
 8011d46:	370c      	adds	r7, #12
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4e:	4770      	bx	lr

08011d50 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 8011d50:	b480      	push	{r7}
 8011d52:	b083      	sub	sp, #12
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
 8011d58:	460b      	mov	r3, r1
 8011d5a:	807b      	strh	r3, [r7, #2]
 8011d5c:	4613      	mov	r3, r2
 8011d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 8011d60:	787b      	ldrb	r3, [r7, #1]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d008      	beq.n	8011d78 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	889b      	ldrh	r3, [r3, #4]
 8011d6a:	b29a      	uxth	r2, r3
 8011d6c:	887b      	ldrh	r3, [r7, #2]
 8011d6e:	4313      	orrs	r3, r2
 8011d70:	b29a      	uxth	r2, r3
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
  }
}
 8011d76:	e009      	b.n	8011d8c <SPI_I2S_DMACmd+0x3c>
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	889b      	ldrh	r3, [r3, #4]
 8011d7c:	b29a      	uxth	r2, r3
 8011d7e:	887b      	ldrh	r3, [r7, #2]
 8011d80:	43db      	mvns	r3, r3
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	4013      	ands	r3, r2
 8011d86:	b29a      	uxth	r2, r3
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	809a      	strh	r2, [r3, #4]
}
 8011d8c:	bf00      	nop
 8011d8e:	370c      	adds	r7, #12
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr

08011d98 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 8011d98:	b480      	push	{r7}
 8011d9a:	b085      	sub	sp, #20
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	460b      	mov	r3, r1
 8011da2:	70fb      	strb	r3, [r7, #3]
 8011da4:	4613      	mov	r3, r2
 8011da6:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 8011da8:	2300      	movs	r3, #0
 8011daa:	81fb      	strh	r3, [r7, #14]
 8011dac:	2300      	movs	r3, #0
 8011dae:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 8011db0:	78fb      	ldrb	r3, [r7, #3]
 8011db2:	091b      	lsrs	r3, r3, #4
 8011db4:	b2db      	uxtb	r3, r3
 8011db6:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 8011db8:	89fb      	ldrh	r3, [r7, #14]
 8011dba:	2201      	movs	r2, #1
 8011dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8011dc0:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 8011dc2:	78bb      	ldrb	r3, [r7, #2]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d008      	beq.n	8011dda <SPI_I2S_ITConfig+0x42>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	889b      	ldrh	r3, [r3, #4]
 8011dcc:	b29a      	uxth	r2, r3
 8011dce:	89bb      	ldrh	r3, [r7, #12]
 8011dd0:	4313      	orrs	r3, r2
 8011dd2:	b29a      	uxth	r2, r3
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
  }
}
 8011dd8:	e009      	b.n	8011dee <SPI_I2S_ITConfig+0x56>
    SPIx->CR2 &= (uint16_t)~itmask;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	889b      	ldrh	r3, [r3, #4]
 8011dde:	b29a      	uxth	r2, r3
 8011de0:	89bb      	ldrh	r3, [r7, #12]
 8011de2:	43db      	mvns	r3, r3
 8011de4:	b29b      	uxth	r3, r3
 8011de6:	4013      	ands	r3, r2
 8011de8:	b29a      	uxth	r2, r3
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	809a      	strh	r2, [r3, #4]
}
 8011dee:	bf00      	nop
 8011df0:	3714      	adds	r7, #20
 8011df2:	46bd      	mov	sp, r7
 8011df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df8:	4770      	bx	lr

08011dfa <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8011dfa:	b480      	push	{r7}
 8011dfc:	b085      	sub	sp, #20
 8011dfe:	af00      	add	r7, sp, #0
 8011e00:	6078      	str	r0, [r7, #4]
 8011e02:	460b      	mov	r3, r1
 8011e04:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8011e06:	2300      	movs	r3, #0
 8011e08:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	891b      	ldrh	r3, [r3, #8]
 8011e0e:	b29a      	uxth	r2, r3
 8011e10:	887b      	ldrh	r3, [r7, #2]
 8011e12:	4013      	ands	r3, r2
 8011e14:	b29b      	uxth	r3, r3
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d002      	beq.n	8011e20 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8011e1a:	2301      	movs	r3, #1
 8011e1c:	73fb      	strb	r3, [r7, #15]
 8011e1e:	e001      	b.n	8011e24 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8011e20:	2300      	movs	r3, #0
 8011e22:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8011e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e26:	4618      	mov	r0, r3
 8011e28:	3714      	adds	r7, #20
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e30:	4770      	bx	lr

08011e32 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8011e32:	b480      	push	{r7}
 8011e34:	b083      	sub	sp, #12
 8011e36:	af00      	add	r7, sp, #0
 8011e38:	6078      	str	r0, [r7, #4]
 8011e3a:	460b      	mov	r3, r1
 8011e3c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8011e3e:	887b      	ldrh	r3, [r7, #2]
 8011e40:	43db      	mvns	r3, r3
 8011e42:	b29a      	uxth	r2, r3
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	811a      	strh	r2, [r3, #8]
}
 8011e48:	bf00      	nop
 8011e4a:	370c      	adds	r7, #12
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e52:	4770      	bx	lr

08011e54 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8011e54:	b480      	push	{r7}
 8011e56:	b085      	sub	sp, #20
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
 8011e5c:	460b      	mov	r3, r1
 8011e5e:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 8011e60:	2300      	movs	r3, #0
 8011e62:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 8011e64:	2300      	movs	r3, #0
 8011e66:	81bb      	strh	r3, [r7, #12]
 8011e68:	2300      	movs	r3, #0
 8011e6a:	817b      	strh	r3, [r7, #10]
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8011e70:	78fb      	ldrb	r3, [r7, #3]
 8011e72:	f003 030f 	and.w	r3, r3, #15
 8011e76:	2201      	movs	r2, #1
 8011e78:	fa02 f303 	lsl.w	r3, r2, r3
 8011e7c:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 8011e7e:	78fb      	ldrb	r3, [r7, #3]
 8011e80:	091b      	lsrs	r3, r3, #4
 8011e82:	b2db      	uxtb	r3, r3
 8011e84:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8011e86:	897b      	ldrh	r3, [r7, #10]
 8011e88:	2201      	movs	r2, #1
 8011e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8011e8e:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	889b      	ldrh	r3, [r3, #4]
 8011e94:	b29a      	uxth	r2, r3
 8011e96:	897b      	ldrh	r3, [r7, #10]
 8011e98:	4013      	ands	r3, r2
 8011e9a:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	891b      	ldrh	r3, [r3, #8]
 8011ea0:	b29a      	uxth	r2, r3
 8011ea2:	89bb      	ldrh	r3, [r7, #12]
 8011ea4:	4013      	ands	r3, r2
 8011ea6:	b29b      	uxth	r3, r3
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d005      	beq.n	8011eb8 <SPI_I2S_GetITStatus+0x64>
 8011eac:	893b      	ldrh	r3, [r7, #8]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d002      	beq.n	8011eb8 <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	73fb      	strb	r3, [r7, #15]
 8011eb6:	e001      	b.n	8011ebc <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 8011eb8:	2300      	movs	r3, #0
 8011eba:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 8011ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	3714      	adds	r7, #20
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec8:	4770      	bx	lr

08011eca <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8011eca:	b480      	push	{r7}
 8011ecc:	b085      	sub	sp, #20
 8011ece:	af00      	add	r7, sp, #0
 8011ed0:	6078      	str	r0, [r7, #4]
 8011ed2:	460b      	mov	r3, r1
 8011ed4:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8011eda:	78fb      	ldrb	r3, [r7, #3]
 8011edc:	f003 030f 	and.w	r3, r3, #15
 8011ee0:	2201      	movs	r2, #1
 8011ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8011ee6:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 8011ee8:	89fb      	ldrh	r3, [r7, #14]
 8011eea:	43db      	mvns	r3, r3
 8011eec:	b29a      	uxth	r2, r3
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	811a      	strh	r2, [r3, #8]
}
 8011ef2:	bf00      	nop
 8011ef4:	3714      	adds	r7, #20
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efc:	4770      	bx	lr
 8011efe:	bf00      	nop

08011f00 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8011f04:	2101      	movs	r1, #1
 8011f06:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8011f0a:	f7fd fc8b 	bl	800f824 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 8011f0e:	2100      	movs	r1, #0
 8011f10:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8011f14:	f7fd fc86 	bl	800f824 <RCC_APB2PeriphResetCmd>
}
 8011f18:	bf00      	nop
 8011f1a:	bd80      	pop	{r7, pc}

08011f1c <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000   
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000          
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 8011f1c:	b480      	push	{r7}
 8011f1e:	b083      	sub	sp, #12
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	4603      	mov	r3, r0
 8011f24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 8011f26:	4a04      	ldr	r2, [pc, #16]	; (8011f38 <SYSCFG_MemoryRemapConfig+0x1c>)
 8011f28:	79fb      	ldrb	r3, [r7, #7]
 8011f2a:	6013      	str	r3, [r2, #0]
}
 8011f2c:	bf00      	nop
 8011f2e:	370c      	adds	r7, #12
 8011f30:	46bd      	mov	sp, r7
 8011f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f36:	4770      	bx	lr
 8011f38:	40013800 	.word	0x40013800

08011f3c <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8011f3c:	b490      	push	{r4, r7}
 8011f3e:	b084      	sub	sp, #16
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	4603      	mov	r3, r0
 8011f44:	460a      	mov	r2, r1
 8011f46:	71fb      	strb	r3, [r7, #7]
 8011f48:	4613      	mov	r3, r2
 8011f4a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8011f50:	79bb      	ldrb	r3, [r7, #6]
 8011f52:	f003 0303 	and.w	r3, r3, #3
 8011f56:	009b      	lsls	r3, r3, #2
 8011f58:	220f      	movs	r2, #15
 8011f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8011f5e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8011f60:	4916      	ldr	r1, [pc, #88]	; (8011fbc <SYSCFG_EXTILineConfig+0x80>)
 8011f62:	79bb      	ldrb	r3, [r7, #6]
 8011f64:	089b      	lsrs	r3, r3, #2
 8011f66:	b2db      	uxtb	r3, r3
 8011f68:	4618      	mov	r0, r3
 8011f6a:	4a14      	ldr	r2, [pc, #80]	; (8011fbc <SYSCFG_EXTILineConfig+0x80>)
 8011f6c:	79bb      	ldrb	r3, [r7, #6]
 8011f6e:	089b      	lsrs	r3, r3, #2
 8011f70:	b2db      	uxtb	r3, r3
 8011f72:	3302      	adds	r3, #2
 8011f74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	43db      	mvns	r3, r3
 8011f7c:	401a      	ands	r2, r3
 8011f7e:	1c83      	adds	r3, r0, #2
 8011f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8011f84:	480d      	ldr	r0, [pc, #52]	; (8011fbc <SYSCFG_EXTILineConfig+0x80>)
 8011f86:	79bb      	ldrb	r3, [r7, #6]
 8011f88:	089b      	lsrs	r3, r3, #2
 8011f8a:	b2db      	uxtb	r3, r3
 8011f8c:	461c      	mov	r4, r3
 8011f8e:	4a0b      	ldr	r2, [pc, #44]	; (8011fbc <SYSCFG_EXTILineConfig+0x80>)
 8011f90:	79bb      	ldrb	r3, [r7, #6]
 8011f92:	089b      	lsrs	r3, r3, #2
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	3302      	adds	r3, #2
 8011f98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011f9c:	79f9      	ldrb	r1, [r7, #7]
 8011f9e:	79bb      	ldrb	r3, [r7, #6]
 8011fa0:	f003 0303 	and.w	r3, r3, #3
 8011fa4:	009b      	lsls	r3, r3, #2
 8011fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8011faa:	431a      	orrs	r2, r3
 8011fac:	1ca3      	adds	r3, r4, #2
 8011fae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8011fb2:	bf00      	nop
 8011fb4:	3710      	adds	r7, #16
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bc90      	pop	{r4, r7}
 8011fba:	4770      	bx	lr
 8011fbc:	40013800 	.word	0x40013800

08011fc0 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 8011fc0:	b480      	push	{r7}
 8011fc2:	b083      	sub	sp, #12
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 8011fc8:	4a04      	ldr	r2, [pc, #16]	; (8011fdc <SYSCFG_ETH_MediaInterfaceConfig+0x1c>)
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	6013      	str	r3, [r2, #0]
}
 8011fce:	bf00      	nop
 8011fd0:	370c      	adds	r7, #12
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd8:	4770      	bx	lr
 8011fda:	bf00      	nop
 8011fdc:	422700dc 	.word	0x422700dc

08011fe0 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	b083      	sub	sp, #12
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 8011fea:	4a04      	ldr	r2, [pc, #16]	; (8011ffc <SYSCFG_CompensationCellCmd+0x1c>)
 8011fec:	79fb      	ldrb	r3, [r7, #7]
 8011fee:	6013      	str	r3, [r2, #0]
}
 8011ff0:	bf00      	nop
 8011ff2:	370c      	adds	r7, #12
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffa:	4770      	bx	lr
 8011ffc:	42270400 	.word	0x42270400

08012000 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 8012000:	b480      	push	{r7}
 8012002:	b083      	sub	sp, #12
 8012004:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 8012006:	2300      	movs	r3, #0
 8012008:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 801200a:	4b09      	ldr	r3, [pc, #36]	; (8012030 <SYSCFG_GetCompensationCellStatus+0x30>)
 801200c:	6a1b      	ldr	r3, [r3, #32]
 801200e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012012:	2b00      	cmp	r3, #0
 8012014:	d002      	beq.n	801201c <SYSCFG_GetCompensationCellStatus+0x1c>
  {
    bitstatus = SET;
 8012016:	2301      	movs	r3, #1
 8012018:	71fb      	strb	r3, [r7, #7]
 801201a:	e001      	b.n	8012020 <SYSCFG_GetCompensationCellStatus+0x20>
  }
  else
  {
    bitstatus = RESET;
 801201c:	2300      	movs	r3, #0
 801201e:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 8012020:	79fb      	ldrb	r3, [r7, #7]
}
 8012022:	4618      	mov	r0, r3
 8012024:	370c      	adds	r7, #12
 8012026:	46bd      	mov	sp, r7
 8012028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202c:	4770      	bx	lr
 801202e:	bf00      	nop
 8012030:	40013800 	.word	0x40013800

08012034 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8012034:	b580      	push	{r7, lr}
 8012036:	b082      	sub	sp, #8
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	4a60      	ldr	r2, [pc, #384]	; (80121c0 <TIM_DeInit+0x18c>)
 8012040:	4293      	cmp	r3, r2
 8012042:	d108      	bne.n	8012056 <TIM_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8012044:	2101      	movs	r1, #1
 8012046:	2001      	movs	r0, #1
 8012048:	f7fd fbec 	bl	800f824 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 801204c:	2100      	movs	r1, #0
 801204e:	2001      	movs	r0, #1
 8012050:	f7fd fbe8 	bl	800f824 <RCC_APB2PeriphResetCmd>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8012054:	e0af      	b.n	80121b6 <TIM_DeInit+0x182>
  else if (TIMx == TIM2) 
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801205c:	d108      	bne.n	8012070 <TIM_DeInit+0x3c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 801205e:	2101      	movs	r1, #1
 8012060:	2001      	movs	r0, #1
 8012062:	f7fd fbbf 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8012066:	2100      	movs	r1, #0
 8012068:	2001      	movs	r0, #1
 801206a:	f7fd fbbb 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 801206e:	e0a2      	b.n	80121b6 <TIM_DeInit+0x182>
  else if (TIMx == TIM3)
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	4a54      	ldr	r2, [pc, #336]	; (80121c4 <TIM_DeInit+0x190>)
 8012074:	4293      	cmp	r3, r2
 8012076:	d108      	bne.n	801208a <TIM_DeInit+0x56>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8012078:	2101      	movs	r1, #1
 801207a:	2002      	movs	r0, #2
 801207c:	f7fd fbb2 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8012080:	2100      	movs	r1, #0
 8012082:	2002      	movs	r0, #2
 8012084:	f7fd fbae 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 8012088:	e095      	b.n	80121b6 <TIM_DeInit+0x182>
  else if (TIMx == TIM4)
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	4a4e      	ldr	r2, [pc, #312]	; (80121c8 <TIM_DeInit+0x194>)
 801208e:	4293      	cmp	r3, r2
 8012090:	d108      	bne.n	80120a4 <TIM_DeInit+0x70>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8012092:	2101      	movs	r1, #1
 8012094:	2004      	movs	r0, #4
 8012096:	f7fd fba5 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 801209a:	2100      	movs	r1, #0
 801209c:	2004      	movs	r0, #4
 801209e:	f7fd fba1 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 80120a2:	e088      	b.n	80121b6 <TIM_DeInit+0x182>
  else if (TIMx == TIM5)
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	4a49      	ldr	r2, [pc, #292]	; (80121cc <TIM_DeInit+0x198>)
 80120a8:	4293      	cmp	r3, r2
 80120aa:	d108      	bne.n	80120be <TIM_DeInit+0x8a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 80120ac:	2101      	movs	r1, #1
 80120ae:	2008      	movs	r0, #8
 80120b0:	f7fd fb98 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 80120b4:	2100      	movs	r1, #0
 80120b6:	2008      	movs	r0, #8
 80120b8:	f7fd fb94 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 80120bc:	e07b      	b.n	80121b6 <TIM_DeInit+0x182>
  else if (TIMx == TIM6)  
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	4a43      	ldr	r2, [pc, #268]	; (80121d0 <TIM_DeInit+0x19c>)
 80120c2:	4293      	cmp	r3, r2
 80120c4:	d108      	bne.n	80120d8 <TIM_DeInit+0xa4>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 80120c6:	2101      	movs	r1, #1
 80120c8:	2010      	movs	r0, #16
 80120ca:	f7fd fb8b 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 80120ce:	2100      	movs	r1, #0
 80120d0:	2010      	movs	r0, #16
 80120d2:	f7fd fb87 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 80120d6:	e06e      	b.n	80121b6 <TIM_DeInit+0x182>
  else if (TIMx == TIM7)
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	4a3e      	ldr	r2, [pc, #248]	; (80121d4 <TIM_DeInit+0x1a0>)
 80120dc:	4293      	cmp	r3, r2
 80120de:	d108      	bne.n	80120f2 <TIM_DeInit+0xbe>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 80120e0:	2101      	movs	r1, #1
 80120e2:	2020      	movs	r0, #32
 80120e4:	f7fd fb7e 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 80120e8:	2100      	movs	r1, #0
 80120ea:	2020      	movs	r0, #32
 80120ec:	f7fd fb7a 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 80120f0:	e061      	b.n	80121b6 <TIM_DeInit+0x182>
  else if (TIMx == TIM8)
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	4a38      	ldr	r2, [pc, #224]	; (80121d8 <TIM_DeInit+0x1a4>)
 80120f6:	4293      	cmp	r3, r2
 80120f8:	d108      	bne.n	801210c <TIM_DeInit+0xd8>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 80120fa:	2101      	movs	r1, #1
 80120fc:	2002      	movs	r0, #2
 80120fe:	f7fd fb91 	bl	800f824 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8012102:	2100      	movs	r1, #0
 8012104:	2002      	movs	r0, #2
 8012106:	f7fd fb8d 	bl	800f824 <RCC_APB2PeriphResetCmd>
}
 801210a:	e054      	b.n	80121b6 <TIM_DeInit+0x182>
  else if (TIMx == TIM9)
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	4a33      	ldr	r2, [pc, #204]	; (80121dc <TIM_DeInit+0x1a8>)
 8012110:	4293      	cmp	r3, r2
 8012112:	d10a      	bne.n	801212a <TIM_DeInit+0xf6>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8012114:	2101      	movs	r1, #1
 8012116:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 801211a:	f7fd fb83 	bl	800f824 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 801211e:	2100      	movs	r1, #0
 8012120:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8012124:	f7fd fb7e 	bl	800f824 <RCC_APB2PeriphResetCmd>
}
 8012128:	e045      	b.n	80121b6 <TIM_DeInit+0x182>
  else if (TIMx == TIM10)
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	4a2c      	ldr	r2, [pc, #176]	; (80121e0 <TIM_DeInit+0x1ac>)
 801212e:	4293      	cmp	r3, r2
 8012130:	d10a      	bne.n	8012148 <TIM_DeInit+0x114>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8012132:	2101      	movs	r1, #1
 8012134:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8012138:	f7fd fb74 	bl	800f824 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 801213c:	2100      	movs	r1, #0
 801213e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8012142:	f7fd fb6f 	bl	800f824 <RCC_APB2PeriphResetCmd>
}
 8012146:	e036      	b.n	80121b6 <TIM_DeInit+0x182>
  else if (TIMx == TIM11) 
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	4a26      	ldr	r2, [pc, #152]	; (80121e4 <TIM_DeInit+0x1b0>)
 801214c:	4293      	cmp	r3, r2
 801214e:	d10a      	bne.n	8012166 <TIM_DeInit+0x132>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8012150:	2101      	movs	r1, #1
 8012152:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8012156:	f7fd fb65 	bl	800f824 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 801215a:	2100      	movs	r1, #0
 801215c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8012160:	f7fd fb60 	bl	800f824 <RCC_APB2PeriphResetCmd>
}
 8012164:	e027      	b.n	80121b6 <TIM_DeInit+0x182>
  else if (TIMx == TIM12)
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	4a1f      	ldr	r2, [pc, #124]	; (80121e8 <TIM_DeInit+0x1b4>)
 801216a:	4293      	cmp	r3, r2
 801216c:	d108      	bne.n	8012180 <TIM_DeInit+0x14c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 801216e:	2101      	movs	r1, #1
 8012170:	2040      	movs	r0, #64	; 0x40
 8012172:	f7fd fb37 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8012176:	2100      	movs	r1, #0
 8012178:	2040      	movs	r0, #64	; 0x40
 801217a:	f7fd fb33 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 801217e:	e01a      	b.n	80121b6 <TIM_DeInit+0x182>
  else if (TIMx == TIM13) 
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	4a1a      	ldr	r2, [pc, #104]	; (80121ec <TIM_DeInit+0x1b8>)
 8012184:	4293      	cmp	r3, r2
 8012186:	d108      	bne.n	801219a <TIM_DeInit+0x166>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8012188:	2101      	movs	r1, #1
 801218a:	2080      	movs	r0, #128	; 0x80
 801218c:	f7fd fb2a 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8012190:	2100      	movs	r1, #0
 8012192:	2080      	movs	r0, #128	; 0x80
 8012194:	f7fd fb26 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 8012198:	e00d      	b.n	80121b6 <TIM_DeInit+0x182>
    if (TIMx == TIM14) 
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	4a14      	ldr	r2, [pc, #80]	; (80121f0 <TIM_DeInit+0x1bc>)
 801219e:	4293      	cmp	r3, r2
 80121a0:	d109      	bne.n	80121b6 <TIM_DeInit+0x182>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 80121a2:	2101      	movs	r1, #1
 80121a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80121a8:	f7fd fb1c 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 80121ac:	2100      	movs	r1, #0
 80121ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 80121b2:	f7fd fb17 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 80121b6:	bf00      	nop
 80121b8:	3708      	adds	r7, #8
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}
 80121be:	bf00      	nop
 80121c0:	40010000 	.word	0x40010000
 80121c4:	40000400 	.word	0x40000400
 80121c8:	40000800 	.word	0x40000800
 80121cc:	40000c00 	.word	0x40000c00
 80121d0:	40001000 	.word	0x40001000
 80121d4:	40001400 	.word	0x40001400
 80121d8:	40010400 	.word	0x40010400
 80121dc:	40014000 	.word	0x40014000
 80121e0:	40014400 	.word	0x40014400
 80121e4:	40014800 	.word	0x40014800
 80121e8:	40001800 	.word	0x40001800
 80121ec:	40001c00 	.word	0x40001c00
 80121f0:	40002000 	.word	0x40002000

080121f4 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80121f4:	b480      	push	{r7}
 80121f6:	b085      	sub	sp, #20
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80121fe:	2300      	movs	r3, #0
 8012200:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	881b      	ldrh	r3, [r3, #0]
 8012206:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	4a29      	ldr	r2, [pc, #164]	; (80122b0 <TIM_TimeBaseInit+0xbc>)
 801220c:	4293      	cmp	r3, r2
 801220e:	d013      	beq.n	8012238 <TIM_TimeBaseInit+0x44>
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	4a28      	ldr	r2, [pc, #160]	; (80122b4 <TIM_TimeBaseInit+0xc0>)
 8012214:	4293      	cmp	r3, r2
 8012216:	d00f      	beq.n	8012238 <TIM_TimeBaseInit+0x44>
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801221e:	d00b      	beq.n	8012238 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	4a25      	ldr	r2, [pc, #148]	; (80122b8 <TIM_TimeBaseInit+0xc4>)
 8012224:	4293      	cmp	r3, r2
 8012226:	d007      	beq.n	8012238 <TIM_TimeBaseInit+0x44>
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	4a24      	ldr	r2, [pc, #144]	; (80122bc <TIM_TimeBaseInit+0xc8>)
 801222c:	4293      	cmp	r3, r2
 801222e:	d003      	beq.n	8012238 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	4a23      	ldr	r2, [pc, #140]	; (80122c0 <TIM_TimeBaseInit+0xcc>)
 8012234:	4293      	cmp	r3, r2
 8012236:	d108      	bne.n	801224a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8012238:	89fb      	ldrh	r3, [r7, #14]
 801223a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801223e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8012240:	683b      	ldr	r3, [r7, #0]
 8012242:	885a      	ldrh	r2, [r3, #2]
 8012244:	89fb      	ldrh	r3, [r7, #14]
 8012246:	4313      	orrs	r3, r2
 8012248:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	4a1d      	ldr	r2, [pc, #116]	; (80122c4 <TIM_TimeBaseInit+0xd0>)
 801224e:	4293      	cmp	r3, r2
 8012250:	d00c      	beq.n	801226c <TIM_TimeBaseInit+0x78>
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	4a1c      	ldr	r2, [pc, #112]	; (80122c8 <TIM_TimeBaseInit+0xd4>)
 8012256:	4293      	cmp	r3, r2
 8012258:	d008      	beq.n	801226c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 801225a:	89fb      	ldrh	r3, [r7, #14]
 801225c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012260:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	891a      	ldrh	r2, [r3, #8]
 8012266:	89fb      	ldrh	r3, [r7, #14]
 8012268:	4313      	orrs	r3, r2
 801226a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	89fa      	ldrh	r2, [r7, #14]
 8012270:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	685a      	ldr	r2, [r3, #4]
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	881a      	ldrh	r2, [r3, #0]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	4a0a      	ldr	r2, [pc, #40]	; (80122b0 <TIM_TimeBaseInit+0xbc>)
 8012286:	4293      	cmp	r3, r2
 8012288:	d003      	beq.n	8012292 <TIM_TimeBaseInit+0x9e>
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	4a09      	ldr	r2, [pc, #36]	; (80122b4 <TIM_TimeBaseInit+0xc0>)
 801228e:	4293      	cmp	r3, r2
 8012290:	d104      	bne.n	801229c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	7a9b      	ldrb	r3, [r3, #10]
 8012296:	b29a      	uxth	r2, r3
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2201      	movs	r2, #1
 80122a0:	829a      	strh	r2, [r3, #20]
}
 80122a2:	bf00      	nop
 80122a4:	3714      	adds	r7, #20
 80122a6:	46bd      	mov	sp, r7
 80122a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ac:	4770      	bx	lr
 80122ae:	bf00      	nop
 80122b0:	40010000 	.word	0x40010000
 80122b4:	40010400 	.word	0x40010400
 80122b8:	40000400 	.word	0x40000400
 80122bc:	40000800 	.word	0x40000800
 80122c0:	40000c00 	.word	0x40000c00
 80122c4:	40001000 	.word	0x40001000
 80122c8:	40001400 	.word	0x40001400

080122cc <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80122cc:	b480      	push	{r7}
 80122ce:	b083      	sub	sp, #12
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	f04f 32ff 	mov.w	r2, #4294967295
 80122da:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2200      	movs	r2, #0
 80122e0:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	2200      	movs	r2, #0
 80122e6:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2200      	movs	r2, #0
 80122ec:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2200      	movs	r2, #0
 80122f2:	729a      	strb	r2, [r3, #10]
}
 80122f4:	bf00      	nop
 80122f6:	370c      	adds	r7, #12
 80122f8:	46bd      	mov	sp, r7
 80122fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fe:	4770      	bx	lr

08012300 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8012300:	b480      	push	{r7}
 8012302:	b083      	sub	sp, #12
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	460b      	mov	r3, r1
 801230a:	807b      	strh	r3, [r7, #2]
 801230c:	4613      	mov	r3, r2
 801230e:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	887a      	ldrh	r2, [r7, #2]
 8012314:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	883a      	ldrh	r2, [r7, #0]
 801231a:	829a      	strh	r2, [r3, #20]
}
 801231c:	bf00      	nop
 801231e:	370c      	adds	r7, #12
 8012320:	46bd      	mov	sp, r7
 8012322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012326:	4770      	bx	lr

08012328 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 8012328:	b480      	push	{r7}
 801232a:	b085      	sub	sp, #20
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
 8012330:	460b      	mov	r3, r1
 8012332:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 8012334:	2300      	movs	r3, #0
 8012336:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	881b      	ldrh	r3, [r3, #0]
 801233c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 801233e:	89fb      	ldrh	r3, [r7, #14]
 8012340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012344:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8012346:	89fa      	ldrh	r2, [r7, #14]
 8012348:	887b      	ldrh	r3, [r7, #2]
 801234a:	4313      	orrs	r3, r2
 801234c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	89fa      	ldrh	r2, [r7, #14]
 8012352:	801a      	strh	r2, [r3, #0]
}
 8012354:	bf00      	nop
 8012356:	3714      	adds	r7, #20
 8012358:	46bd      	mov	sp, r7
 801235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235e:	4770      	bx	lr

08012360 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8012360:	b480      	push	{r7}
 8012362:	b083      	sub	sp, #12
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
 8012368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	683a      	ldr	r2, [r7, #0]
 801236e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012370:	bf00      	nop
 8012372:	370c      	adds	r7, #12
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr

0801237c <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 801237c:	b480      	push	{r7}
 801237e:	b083      	sub	sp, #12
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
 8012384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	683a      	ldr	r2, [r7, #0]
 801238a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801238c:	bf00      	nop
 801238e:	370c      	adds	r7, #12
 8012390:	46bd      	mov	sp, r7
 8012392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012396:	4770      	bx	lr

08012398 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8012398:	b480      	push	{r7}
 801239a:	b083      	sub	sp, #12
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80123a4:	4618      	mov	r0, r3
 80123a6:	370c      	adds	r7, #12
 80123a8:	46bd      	mov	sp, r7
 80123aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ae:	4770      	bx	lr

080123b0 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 80123b0:	b480      	push	{r7}
 80123b2:	b083      	sub	sp, #12
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123bc:	b29b      	uxth	r3, r3
}
 80123be:	4618      	mov	r0, r3
 80123c0:	370c      	adds	r7, #12
 80123c2:	46bd      	mov	sp, r7
 80123c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c8:	4770      	bx	lr

080123ca <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80123ca:	b480      	push	{r7}
 80123cc:	b083      	sub	sp, #12
 80123ce:	af00      	add	r7, sp, #0
 80123d0:	6078      	str	r0, [r7, #4]
 80123d2:	460b      	mov	r3, r1
 80123d4:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80123d6:	78fb      	ldrb	r3, [r7, #3]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d008      	beq.n	80123ee <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	881b      	ldrh	r3, [r3, #0]
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	f043 0302 	orr.w	r3, r3, #2
 80123e6:	b29a      	uxth	r2, r3
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
  }
}
 80123ec:	e007      	b.n	80123fe <TIM_UpdateDisableConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	881b      	ldrh	r3, [r3, #0]
 80123f2:	b29b      	uxth	r3, r3
 80123f4:	f023 0302 	bic.w	r3, r3, #2
 80123f8:	b29a      	uxth	r2, r3
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	801a      	strh	r2, [r3, #0]
}
 80123fe:	bf00      	nop
 8012400:	370c      	adds	r7, #12
 8012402:	46bd      	mov	sp, r7
 8012404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012408:	4770      	bx	lr

0801240a <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 801240a:	b480      	push	{r7}
 801240c:	b083      	sub	sp, #12
 801240e:	af00      	add	r7, sp, #0
 8012410:	6078      	str	r0, [r7, #4]
 8012412:	460b      	mov	r3, r1
 8012414:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8012416:	887b      	ldrh	r3, [r7, #2]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d008      	beq.n	801242e <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	881b      	ldrh	r3, [r3, #0]
 8012420:	b29b      	uxth	r3, r3
 8012422:	f043 0304 	orr.w	r3, r3, #4
 8012426:	b29a      	uxth	r2, r3
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
  }
}
 801242c:	e007      	b.n	801243e <TIM_UpdateRequestConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	881b      	ldrh	r3, [r3, #0]
 8012432:	b29b      	uxth	r3, r3
 8012434:	f023 0304 	bic.w	r3, r3, #4
 8012438:	b29a      	uxth	r2, r3
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	801a      	strh	r2, [r3, #0]
}
 801243e:	bf00      	nop
 8012440:	370c      	adds	r7, #12
 8012442:	46bd      	mov	sp, r7
 8012444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012448:	4770      	bx	lr

0801244a <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801244a:	b480      	push	{r7}
 801244c:	b083      	sub	sp, #12
 801244e:	af00      	add	r7, sp, #0
 8012450:	6078      	str	r0, [r7, #4]
 8012452:	460b      	mov	r3, r1
 8012454:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8012456:	78fb      	ldrb	r3, [r7, #3]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d008      	beq.n	801246e <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	881b      	ldrh	r3, [r3, #0]
 8012460:	b29b      	uxth	r3, r3
 8012462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012466:	b29a      	uxth	r2, r3
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 801246c:	e007      	b.n	801247e <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	881b      	ldrh	r3, [r3, #0]
 8012472:	b29b      	uxth	r3, r3
 8012474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012478:	b29a      	uxth	r2, r3
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	801a      	strh	r2, [r3, #0]
}
 801247e:	bf00      	nop
 8012480:	370c      	adds	r7, #12
 8012482:	46bd      	mov	sp, r7
 8012484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012488:	4770      	bx	lr

0801248a <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 801248a:	b480      	push	{r7}
 801248c:	b083      	sub	sp, #12
 801248e:	af00      	add	r7, sp, #0
 8012490:	6078      	str	r0, [r7, #4]
 8012492:	460b      	mov	r3, r1
 8012494:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	881b      	ldrh	r3, [r3, #0]
 801249a:	b29b      	uxth	r3, r3
 801249c:	f023 0308 	bic.w	r3, r3, #8
 80124a0:	b29a      	uxth	r2, r3
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	881b      	ldrh	r3, [r3, #0]
 80124aa:	b29a      	uxth	r2, r3
 80124ac:	887b      	ldrh	r3, [r7, #2]
 80124ae:	4313      	orrs	r3, r2
 80124b0:	b29a      	uxth	r2, r3
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	801a      	strh	r2, [r3, #0]
}
 80124b6:	bf00      	nop
 80124b8:	370c      	adds	r7, #12
 80124ba:	46bd      	mov	sp, r7
 80124bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c0:	4770      	bx	lr

080124c2 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 80124c2:	b480      	push	{r7}
 80124c4:	b083      	sub	sp, #12
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
 80124ca:	460b      	mov	r3, r1
 80124cc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	881b      	ldrh	r3, [r3, #0]
 80124d2:	b29b      	uxth	r3, r3
 80124d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80124d8:	b29a      	uxth	r2, r3
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	881b      	ldrh	r3, [r3, #0]
 80124e2:	b29a      	uxth	r2, r3
 80124e4:	887b      	ldrh	r3, [r7, #2]
 80124e6:	4313      	orrs	r3, r2
 80124e8:	b29a      	uxth	r2, r3
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	801a      	strh	r2, [r3, #0]
}
 80124ee:	bf00      	nop
 80124f0:	370c      	adds	r7, #12
 80124f2:	46bd      	mov	sp, r7
 80124f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f8:	4770      	bx	lr

080124fa <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80124fa:	b480      	push	{r7}
 80124fc:	b083      	sub	sp, #12
 80124fe:	af00      	add	r7, sp, #0
 8012500:	6078      	str	r0, [r7, #4]
 8012502:	460b      	mov	r3, r1
 8012504:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8012506:	78fb      	ldrb	r3, [r7, #3]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d008      	beq.n	801251e <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	881b      	ldrh	r3, [r3, #0]
 8012510:	b29b      	uxth	r3, r3
 8012512:	f043 0301 	orr.w	r3, r3, #1
 8012516:	b29a      	uxth	r2, r3
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 801251c:	e007      	b.n	801252e <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	881b      	ldrh	r3, [r3, #0]
 8012522:	b29b      	uxth	r3, r3
 8012524:	f023 0301 	bic.w	r3, r3, #1
 8012528:	b29a      	uxth	r2, r3
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	801a      	strh	r2, [r3, #0]
}
 801252e:	bf00      	nop
 8012530:	370c      	adds	r7, #12
 8012532:	46bd      	mov	sp, r7
 8012534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012538:	4770      	bx	lr

0801253a <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801253a:	b480      	push	{r7}
 801253c:	b085      	sub	sp, #20
 801253e:	af00      	add	r7, sp, #0
 8012540:	6078      	str	r0, [r7, #4]
 8012542:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8012544:	2300      	movs	r3, #0
 8012546:	817b      	strh	r3, [r7, #10]
 8012548:	2300      	movs	r3, #0
 801254a:	81fb      	strh	r3, [r7, #14]
 801254c:	2300      	movs	r3, #0
 801254e:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	8c1b      	ldrh	r3, [r3, #32]
 8012554:	b29b      	uxth	r3, r3
 8012556:	f023 0301 	bic.w	r3, r3, #1
 801255a:	b29a      	uxth	r2, r3
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	8c1b      	ldrh	r3, [r3, #32]
 8012564:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	889b      	ldrh	r3, [r3, #4]
 801256a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	8b1b      	ldrh	r3, [r3, #24]
 8012570:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8012572:	897b      	ldrh	r3, [r7, #10]
 8012574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012578:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 801257a:	897b      	ldrh	r3, [r7, #10]
 801257c:	f023 0303 	bic.w	r3, r3, #3
 8012580:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	881a      	ldrh	r2, [r3, #0]
 8012586:	897b      	ldrh	r3, [r7, #10]
 8012588:	4313      	orrs	r3, r2
 801258a:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 801258c:	89fb      	ldrh	r3, [r7, #14]
 801258e:	f023 0302 	bic.w	r3, r3, #2
 8012592:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8012594:	683b      	ldr	r3, [r7, #0]
 8012596:	899a      	ldrh	r2, [r3, #12]
 8012598:	89fb      	ldrh	r3, [r7, #14]
 801259a:	4313      	orrs	r3, r2
 801259c:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 801259e:	683b      	ldr	r3, [r7, #0]
 80125a0:	885a      	ldrh	r2, [r3, #2]
 80125a2:	89fb      	ldrh	r3, [r7, #14]
 80125a4:	4313      	orrs	r3, r2
 80125a6:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	4a1f      	ldr	r2, [pc, #124]	; (8012628 <TIM_OC1Init+0xee>)
 80125ac:	4293      	cmp	r3, r2
 80125ae:	d003      	beq.n	80125b8 <TIM_OC1Init+0x7e>
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	4a1e      	ldr	r2, [pc, #120]	; (801262c <TIM_OC1Init+0xf2>)
 80125b4:	4293      	cmp	r3, r2
 80125b6:	d123      	bne.n	8012600 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80125b8:	89fb      	ldrh	r3, [r7, #14]
 80125ba:	f023 0308 	bic.w	r3, r3, #8
 80125be:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	89da      	ldrh	r2, [r3, #14]
 80125c4:	89fb      	ldrh	r3, [r7, #14]
 80125c6:	4313      	orrs	r3, r2
 80125c8:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80125ca:	89fb      	ldrh	r3, [r7, #14]
 80125cc:	f023 0304 	bic.w	r3, r3, #4
 80125d0:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	889a      	ldrh	r2, [r3, #4]
 80125d6:	89fb      	ldrh	r3, [r7, #14]
 80125d8:	4313      	orrs	r3, r2
 80125da:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 80125dc:	89bb      	ldrh	r3, [r7, #12]
 80125de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80125e2:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80125e4:	89bb      	ldrh	r3, [r7, #12]
 80125e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80125ea:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	8a1a      	ldrh	r2, [r3, #16]
 80125f0:	89bb      	ldrh	r3, [r7, #12]
 80125f2:	4313      	orrs	r3, r2
 80125f4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	8a5a      	ldrh	r2, [r3, #18]
 80125fa:	89bb      	ldrh	r3, [r7, #12]
 80125fc:	4313      	orrs	r3, r2
 80125fe:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	89ba      	ldrh	r2, [r7, #12]
 8012604:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	897a      	ldrh	r2, [r7, #10]
 801260a:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	689a      	ldr	r2, [r3, #8]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	89fa      	ldrh	r2, [r7, #14]
 8012618:	841a      	strh	r2, [r3, #32]
}
 801261a:	bf00      	nop
 801261c:	3714      	adds	r7, #20
 801261e:	46bd      	mov	sp, r7
 8012620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012624:	4770      	bx	lr
 8012626:	bf00      	nop
 8012628:	40010000 	.word	0x40010000
 801262c:	40010400 	.word	0x40010400

08012630 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8012630:	b480      	push	{r7}
 8012632:	b085      	sub	sp, #20
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
 8012638:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801263a:	2300      	movs	r3, #0
 801263c:	817b      	strh	r3, [r7, #10]
 801263e:	2300      	movs	r3, #0
 8012640:	81fb      	strh	r3, [r7, #14]
 8012642:	2300      	movs	r3, #0
 8012644:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	8c1b      	ldrh	r3, [r3, #32]
 801264a:	b29b      	uxth	r3, r3
 801264c:	f023 0310 	bic.w	r3, r3, #16
 8012650:	b29a      	uxth	r2, r3
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	8c1b      	ldrh	r3, [r3, #32]
 801265a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	889b      	ldrh	r3, [r3, #4]
 8012660:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	8b1b      	ldrh	r3, [r3, #24]
 8012666:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8012668:	897b      	ldrh	r3, [r7, #10]
 801266a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801266e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8012670:	897b      	ldrh	r3, [r7, #10]
 8012672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012676:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	881b      	ldrh	r3, [r3, #0]
 801267c:	021b      	lsls	r3, r3, #8
 801267e:	b29a      	uxth	r2, r3
 8012680:	897b      	ldrh	r3, [r7, #10]
 8012682:	4313      	orrs	r3, r2
 8012684:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8012686:	89fb      	ldrh	r3, [r7, #14]
 8012688:	f023 0320 	bic.w	r3, r3, #32
 801268c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	899b      	ldrh	r3, [r3, #12]
 8012692:	011b      	lsls	r3, r3, #4
 8012694:	b29a      	uxth	r2, r3
 8012696:	89fb      	ldrh	r3, [r7, #14]
 8012698:	4313      	orrs	r3, r2
 801269a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	885b      	ldrh	r3, [r3, #2]
 80126a0:	011b      	lsls	r3, r3, #4
 80126a2:	b29a      	uxth	r2, r3
 80126a4:	89fb      	ldrh	r3, [r7, #14]
 80126a6:	4313      	orrs	r3, r2
 80126a8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	4a22      	ldr	r2, [pc, #136]	; (8012738 <TIM_OC2Init+0x108>)
 80126ae:	4293      	cmp	r3, r2
 80126b0:	d003      	beq.n	80126ba <TIM_OC2Init+0x8a>
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	4a21      	ldr	r2, [pc, #132]	; (801273c <TIM_OC2Init+0x10c>)
 80126b6:	4293      	cmp	r3, r2
 80126b8:	d12b      	bne.n	8012712 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80126ba:	89fb      	ldrh	r3, [r7, #14]
 80126bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80126c0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	89db      	ldrh	r3, [r3, #14]
 80126c6:	011b      	lsls	r3, r3, #4
 80126c8:	b29a      	uxth	r2, r3
 80126ca:	89fb      	ldrh	r3, [r7, #14]
 80126cc:	4313      	orrs	r3, r2
 80126ce:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80126d0:	89fb      	ldrh	r3, [r7, #14]
 80126d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80126d6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	889b      	ldrh	r3, [r3, #4]
 80126dc:	011b      	lsls	r3, r3, #4
 80126de:	b29a      	uxth	r2, r3
 80126e0:	89fb      	ldrh	r3, [r7, #14]
 80126e2:	4313      	orrs	r3, r2
 80126e4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 80126e6:	89bb      	ldrh	r3, [r7, #12]
 80126e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80126ec:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80126ee:	89bb      	ldrh	r3, [r7, #12]
 80126f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80126f4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	8a1b      	ldrh	r3, [r3, #16]
 80126fa:	009b      	lsls	r3, r3, #2
 80126fc:	b29a      	uxth	r2, r3
 80126fe:	89bb      	ldrh	r3, [r7, #12]
 8012700:	4313      	orrs	r3, r2
 8012702:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	8a5b      	ldrh	r3, [r3, #18]
 8012708:	009b      	lsls	r3, r3, #2
 801270a:	b29a      	uxth	r2, r3
 801270c:	89bb      	ldrh	r3, [r7, #12]
 801270e:	4313      	orrs	r3, r2
 8012710:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	89ba      	ldrh	r2, [r7, #12]
 8012716:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	897a      	ldrh	r2, [r7, #10]
 801271c:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	689a      	ldr	r2, [r3, #8]
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	89fa      	ldrh	r2, [r7, #14]
 801272a:	841a      	strh	r2, [r3, #32]
}
 801272c:	bf00      	nop
 801272e:	3714      	adds	r7, #20
 8012730:	46bd      	mov	sp, r7
 8012732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012736:	4770      	bx	lr
 8012738:	40010000 	.word	0x40010000
 801273c:	40010400 	.word	0x40010400

08012740 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8012740:	b480      	push	{r7}
 8012742:	b085      	sub	sp, #20
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
 8012748:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801274a:	2300      	movs	r3, #0
 801274c:	817b      	strh	r3, [r7, #10]
 801274e:	2300      	movs	r3, #0
 8012750:	81fb      	strh	r3, [r7, #14]
 8012752:	2300      	movs	r3, #0
 8012754:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	8c1b      	ldrh	r3, [r3, #32]
 801275a:	b29b      	uxth	r3, r3
 801275c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012760:	b29a      	uxth	r2, r3
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	8c1b      	ldrh	r3, [r3, #32]
 801276a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	889b      	ldrh	r3, [r3, #4]
 8012770:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	8b9b      	ldrh	r3, [r3, #28]
 8012776:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8012778:	897b      	ldrh	r3, [r7, #10]
 801277a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801277e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8012780:	897b      	ldrh	r3, [r7, #10]
 8012782:	f023 0303 	bic.w	r3, r3, #3
 8012786:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	881a      	ldrh	r2, [r3, #0]
 801278c:	897b      	ldrh	r3, [r7, #10]
 801278e:	4313      	orrs	r3, r2
 8012790:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8012792:	89fb      	ldrh	r3, [r7, #14]
 8012794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012798:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	899b      	ldrh	r3, [r3, #12]
 801279e:	021b      	lsls	r3, r3, #8
 80127a0:	b29a      	uxth	r2, r3
 80127a2:	89fb      	ldrh	r3, [r7, #14]
 80127a4:	4313      	orrs	r3, r2
 80127a6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	885b      	ldrh	r3, [r3, #2]
 80127ac:	021b      	lsls	r3, r3, #8
 80127ae:	b29a      	uxth	r2, r3
 80127b0:	89fb      	ldrh	r3, [r7, #14]
 80127b2:	4313      	orrs	r3, r2
 80127b4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	4a22      	ldr	r2, [pc, #136]	; (8012844 <TIM_OC3Init+0x104>)
 80127ba:	4293      	cmp	r3, r2
 80127bc:	d003      	beq.n	80127c6 <TIM_OC3Init+0x86>
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	4a21      	ldr	r2, [pc, #132]	; (8012848 <TIM_OC3Init+0x108>)
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d12b      	bne.n	801281e <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80127c6:	89fb      	ldrh	r3, [r7, #14]
 80127c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80127cc:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80127ce:	683b      	ldr	r3, [r7, #0]
 80127d0:	89db      	ldrh	r3, [r3, #14]
 80127d2:	021b      	lsls	r3, r3, #8
 80127d4:	b29a      	uxth	r2, r3
 80127d6:	89fb      	ldrh	r3, [r7, #14]
 80127d8:	4313      	orrs	r3, r2
 80127da:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80127dc:	89fb      	ldrh	r3, [r7, #14]
 80127de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80127e2:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	889b      	ldrh	r3, [r3, #4]
 80127e8:	021b      	lsls	r3, r3, #8
 80127ea:	b29a      	uxth	r2, r3
 80127ec:	89fb      	ldrh	r3, [r7, #14]
 80127ee:	4313      	orrs	r3, r2
 80127f0:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80127f2:	89bb      	ldrh	r3, [r7, #12]
 80127f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80127f8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80127fa:	89bb      	ldrh	r3, [r7, #12]
 80127fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012800:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	8a1b      	ldrh	r3, [r3, #16]
 8012806:	011b      	lsls	r3, r3, #4
 8012808:	b29a      	uxth	r2, r3
 801280a:	89bb      	ldrh	r3, [r7, #12]
 801280c:	4313      	orrs	r3, r2
 801280e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	8a5b      	ldrh	r3, [r3, #18]
 8012814:	011b      	lsls	r3, r3, #4
 8012816:	b29a      	uxth	r2, r3
 8012818:	89bb      	ldrh	r3, [r7, #12]
 801281a:	4313      	orrs	r3, r2
 801281c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	89ba      	ldrh	r2, [r7, #12]
 8012822:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	897a      	ldrh	r2, [r7, #10]
 8012828:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	689a      	ldr	r2, [r3, #8]
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	89fa      	ldrh	r2, [r7, #14]
 8012836:	841a      	strh	r2, [r3, #32]
}
 8012838:	bf00      	nop
 801283a:	3714      	adds	r7, #20
 801283c:	46bd      	mov	sp, r7
 801283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012842:	4770      	bx	lr
 8012844:	40010000 	.word	0x40010000
 8012848:	40010400 	.word	0x40010400

0801284c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801284c:	b480      	push	{r7}
 801284e:	b085      	sub	sp, #20
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8012856:	2300      	movs	r3, #0
 8012858:	81bb      	strh	r3, [r7, #12]
 801285a:	2300      	movs	r3, #0
 801285c:	817b      	strh	r3, [r7, #10]
 801285e:	2300      	movs	r3, #0
 8012860:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	8c1b      	ldrh	r3, [r3, #32]
 8012866:	b29b      	uxth	r3, r3
 8012868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801286c:	b29a      	uxth	r2, r3
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	8c1b      	ldrh	r3, [r3, #32]
 8012876:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	889b      	ldrh	r3, [r3, #4]
 801287c:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	8b9b      	ldrh	r3, [r3, #28]
 8012882:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8012884:	89bb      	ldrh	r3, [r7, #12]
 8012886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801288a:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 801288c:	89bb      	ldrh	r3, [r7, #12]
 801288e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012892:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	881b      	ldrh	r3, [r3, #0]
 8012898:	021b      	lsls	r3, r3, #8
 801289a:	b29a      	uxth	r2, r3
 801289c:	89bb      	ldrh	r3, [r7, #12]
 801289e:	4313      	orrs	r3, r2
 80128a0:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80128a2:	897b      	ldrh	r3, [r7, #10]
 80128a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80128a8:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	899b      	ldrh	r3, [r3, #12]
 80128ae:	031b      	lsls	r3, r3, #12
 80128b0:	b29a      	uxth	r2, r3
 80128b2:	897b      	ldrh	r3, [r7, #10]
 80128b4:	4313      	orrs	r3, r2
 80128b6:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80128b8:	683b      	ldr	r3, [r7, #0]
 80128ba:	885b      	ldrh	r3, [r3, #2]
 80128bc:	031b      	lsls	r3, r3, #12
 80128be:	b29a      	uxth	r2, r3
 80128c0:	897b      	ldrh	r3, [r7, #10]
 80128c2:	4313      	orrs	r3, r2
 80128c4:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	4a12      	ldr	r2, [pc, #72]	; (8012914 <TIM_OC4Init+0xc8>)
 80128ca:	4293      	cmp	r3, r2
 80128cc:	d003      	beq.n	80128d6 <TIM_OC4Init+0x8a>
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	4a11      	ldr	r2, [pc, #68]	; (8012918 <TIM_OC4Init+0xcc>)
 80128d2:	4293      	cmp	r3, r2
 80128d4:	d10a      	bne.n	80128ec <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80128d6:	89fb      	ldrh	r3, [r7, #14]
 80128d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80128dc:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	8a1b      	ldrh	r3, [r3, #16]
 80128e2:	019b      	lsls	r3, r3, #6
 80128e4:	b29a      	uxth	r2, r3
 80128e6:	89fb      	ldrh	r3, [r7, #14]
 80128e8:	4313      	orrs	r3, r2
 80128ea:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	89fa      	ldrh	r2, [r7, #14]
 80128f0:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	89ba      	ldrh	r2, [r7, #12]
 80128f6:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	689a      	ldr	r2, [r3, #8]
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	897a      	ldrh	r2, [r7, #10]
 8012904:	841a      	strh	r2, [r3, #32]
}
 8012906:	bf00      	nop
 8012908:	3714      	adds	r7, #20
 801290a:	46bd      	mov	sp, r7
 801290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012910:	4770      	bx	lr
 8012912:	bf00      	nop
 8012914:	40010000 	.word	0x40010000
 8012918:	40010400 	.word	0x40010400

0801291c <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801291c:	b480      	push	{r7}
 801291e:	b083      	sub	sp, #12
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	2200      	movs	r2, #0
 8012928:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	2200      	movs	r2, #0
 801292e:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2200      	movs	r2, #0
 8012934:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2200      	movs	r2, #0
 801293a:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2200      	movs	r2, #0
 8012940:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2200      	movs	r2, #0
 8012946:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2200      	movs	r2, #0
 801294c:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2200      	movs	r2, #0
 8012952:	825a      	strh	r2, [r3, #18]
}
 8012954:	bf00      	nop
 8012956:	370c      	adds	r7, #12
 8012958:	46bd      	mov	sp, r7
 801295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295e:	4770      	bx	lr

08012960 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8012960:	b480      	push	{r7}
 8012962:	b085      	sub	sp, #20
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	460b      	mov	r3, r1
 801296a:	807b      	strh	r3, [r7, #2]
 801296c:	4613      	mov	r3, r2
 801296e:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8012970:	2300      	movs	r3, #0
 8012972:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 8012974:	2300      	movs	r3, #0
 8012976:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	3318      	adds	r3, #24
 8012980:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8012982:	887b      	ldrh	r3, [r7, #2]
 8012984:	2201      	movs	r2, #1
 8012986:	fa02 f303 	lsl.w	r3, r2, r3
 801298a:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	8c1b      	ldrh	r3, [r3, #32]
 8012990:	b29a      	uxth	r2, r3
 8012992:	897b      	ldrh	r3, [r7, #10]
 8012994:	43db      	mvns	r3, r3
 8012996:	b29b      	uxth	r3, r3
 8012998:	4013      	ands	r3, r2
 801299a:	b29a      	uxth	r2, r3
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 80129a0:	887b      	ldrh	r3, [r7, #2]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d002      	beq.n	80129ac <TIM_SelectOCxM+0x4c>
 80129a6:	887b      	ldrh	r3, [r7, #2]
 80129a8:	2b08      	cmp	r3, #8
 80129aa:	d114      	bne.n	80129d6 <TIM_SelectOCxM+0x76>
  {
    tmp += (TIM_Channel>>1);
 80129ac:	887b      	ldrh	r3, [r7, #2]
 80129ae:	085b      	lsrs	r3, r3, #1
 80129b0:	b29b      	uxth	r3, r3
 80129b2:	461a      	mov	r2, r3
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	4413      	add	r3, r2
 80129b8:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 80129ba:	68fa      	ldr	r2, [r7, #12]
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	6819      	ldr	r1, [r3, #0]
 80129c0:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80129c4:	400b      	ands	r3, r1
 80129c6:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	68fa      	ldr	r2, [r7, #12]
 80129cc:	6811      	ldr	r1, [r2, #0]
 80129ce:	883a      	ldrh	r2, [r7, #0]
 80129d0:	430a      	orrs	r2, r1
 80129d2:	601a      	str	r2, [r3, #0]
 80129d4:	e017      	b.n	8012a06 <TIM_SelectOCxM+0xa6>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 80129d6:	887b      	ldrh	r3, [r7, #2]
 80129d8:	3b04      	subs	r3, #4
 80129da:	b29b      	uxth	r3, r3
 80129dc:	085b      	lsrs	r3, r3, #1
 80129de:	b29b      	uxth	r3, r3
 80129e0:	461a      	mov	r2, r3
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	4413      	add	r3, r2
 80129e6:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 80129e8:	68fa      	ldr	r2, [r7, #12]
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	6819      	ldr	r1, [r3, #0]
 80129ee:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80129f2:	400b      	ands	r3, r1
 80129f4:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	68fa      	ldr	r2, [r7, #12]
 80129fa:	6812      	ldr	r2, [r2, #0]
 80129fc:	8839      	ldrh	r1, [r7, #0]
 80129fe:	0209      	lsls	r1, r1, #8
 8012a00:	b289      	uxth	r1, r1
 8012a02:	430a      	orrs	r2, r1
 8012a04:	601a      	str	r2, [r3, #0]
  }
}
 8012a06:	bf00      	nop
 8012a08:	3714      	adds	r7, #20
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a10:	4770      	bx	lr

08012a12 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8012a12:	b480      	push	{r7}
 8012a14:	b083      	sub	sp, #12
 8012a16:	af00      	add	r7, sp, #0
 8012a18:	6078      	str	r0, [r7, #4]
 8012a1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	683a      	ldr	r2, [r7, #0]
 8012a20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8012a22:	bf00      	nop
 8012a24:	370c      	adds	r7, #12
 8012a26:	46bd      	mov	sp, r7
 8012a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2c:	4770      	bx	lr

08012a2e <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8012a2e:	b480      	push	{r7}
 8012a30:	b083      	sub	sp, #12
 8012a32:	af00      	add	r7, sp, #0
 8012a34:	6078      	str	r0, [r7, #4]
 8012a36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	683a      	ldr	r2, [r7, #0]
 8012a3c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8012a3e:	bf00      	nop
 8012a40:	370c      	adds	r7, #12
 8012a42:	46bd      	mov	sp, r7
 8012a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a48:	4770      	bx	lr

08012a4a <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8012a4a:	b480      	push	{r7}
 8012a4c:	b083      	sub	sp, #12
 8012a4e:	af00      	add	r7, sp, #0
 8012a50:	6078      	str	r0, [r7, #4]
 8012a52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	683a      	ldr	r2, [r7, #0]
 8012a58:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8012a5a:	bf00      	nop
 8012a5c:	370c      	adds	r7, #12
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a64:	4770      	bx	lr

08012a66 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8012a66:	b480      	push	{r7}
 8012a68:	b083      	sub	sp, #12
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	6078      	str	r0, [r7, #4]
 8012a6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	683a      	ldr	r2, [r7, #0]
 8012a74:	641a      	str	r2, [r3, #64]	; 0x40
}
 8012a76:	bf00      	nop
 8012a78:	370c      	adds	r7, #12
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a80:	4770      	bx	lr

08012a82 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8012a82:	b480      	push	{r7}
 8012a84:	b085      	sub	sp, #20
 8012a86:	af00      	add	r7, sp, #0
 8012a88:	6078      	str	r0, [r7, #4]
 8012a8a:	460b      	mov	r3, r1
 8012a8c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8012a8e:	2300      	movs	r3, #0
 8012a90:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	8b1b      	ldrh	r3, [r3, #24]
 8012a96:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8012a98:	89fb      	ldrh	r3, [r7, #14]
 8012a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012a9e:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8012aa0:	89fa      	ldrh	r2, [r7, #14]
 8012aa2:	887b      	ldrh	r3, [r7, #2]
 8012aa4:	4313      	orrs	r3, r2
 8012aa6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	89fa      	ldrh	r2, [r7, #14]
 8012aac:	831a      	strh	r2, [r3, #24]
}
 8012aae:	bf00      	nop
 8012ab0:	3714      	adds	r7, #20
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab8:	4770      	bx	lr

08012aba <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8012aba:	b480      	push	{r7}
 8012abc:	b085      	sub	sp, #20
 8012abe:	af00      	add	r7, sp, #0
 8012ac0:	6078      	str	r0, [r7, #4]
 8012ac2:	460b      	mov	r3, r1
 8012ac4:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	8b1b      	ldrh	r3, [r3, #24]
 8012ace:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8012ad0:	89fb      	ldrh	r3, [r7, #14]
 8012ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012ad6:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8012ad8:	887b      	ldrh	r3, [r7, #2]
 8012ada:	021b      	lsls	r3, r3, #8
 8012adc:	b29a      	uxth	r2, r3
 8012ade:	89fb      	ldrh	r3, [r7, #14]
 8012ae0:	4313      	orrs	r3, r2
 8012ae2:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	89fa      	ldrh	r2, [r7, #14]
 8012ae8:	831a      	strh	r2, [r3, #24]
}
 8012aea:	bf00      	nop
 8012aec:	3714      	adds	r7, #20
 8012aee:	46bd      	mov	sp, r7
 8012af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af4:	4770      	bx	lr

08012af6 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8012af6:	b480      	push	{r7}
 8012af8:	b085      	sub	sp, #20
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	6078      	str	r0, [r7, #4]
 8012afe:	460b      	mov	r3, r1
 8012b00:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8012b02:	2300      	movs	r3, #0
 8012b04:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	8b9b      	ldrh	r3, [r3, #28]
 8012b0a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8012b0c:	89fb      	ldrh	r3, [r7, #14]
 8012b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012b12:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8012b14:	89fa      	ldrh	r2, [r7, #14]
 8012b16:	887b      	ldrh	r3, [r7, #2]
 8012b18:	4313      	orrs	r3, r2
 8012b1a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	89fa      	ldrh	r2, [r7, #14]
 8012b20:	839a      	strh	r2, [r3, #28]
}
 8012b22:	bf00      	nop
 8012b24:	3714      	adds	r7, #20
 8012b26:	46bd      	mov	sp, r7
 8012b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b2c:	4770      	bx	lr

08012b2e <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8012b2e:	b480      	push	{r7}
 8012b30:	b085      	sub	sp, #20
 8012b32:	af00      	add	r7, sp, #0
 8012b34:	6078      	str	r0, [r7, #4]
 8012b36:	460b      	mov	r3, r1
 8012b38:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	8b9b      	ldrh	r3, [r3, #28]
 8012b42:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8012b44:	89fb      	ldrh	r3, [r7, #14]
 8012b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012b4a:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8012b4c:	887b      	ldrh	r3, [r7, #2]
 8012b4e:	021b      	lsls	r3, r3, #8
 8012b50:	b29a      	uxth	r2, r3
 8012b52:	89fb      	ldrh	r3, [r7, #14]
 8012b54:	4313      	orrs	r3, r2
 8012b56:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	89fa      	ldrh	r2, [r7, #14]
 8012b5c:	839a      	strh	r2, [r3, #28]
}
 8012b5e:	bf00      	nop
 8012b60:	3714      	adds	r7, #20
 8012b62:	46bd      	mov	sp, r7
 8012b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b68:	4770      	bx	lr

08012b6a <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8012b6a:	b480      	push	{r7}
 8012b6c:	b085      	sub	sp, #20
 8012b6e:	af00      	add	r7, sp, #0
 8012b70:	6078      	str	r0, [r7, #4]
 8012b72:	460b      	mov	r3, r1
 8012b74:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8012b76:	2300      	movs	r3, #0
 8012b78:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	8b1b      	ldrh	r3, [r3, #24]
 8012b7e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8012b80:	89fb      	ldrh	r3, [r7, #14]
 8012b82:	f023 0308 	bic.w	r3, r3, #8
 8012b86:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8012b88:	89fa      	ldrh	r2, [r7, #14]
 8012b8a:	887b      	ldrh	r3, [r7, #2]
 8012b8c:	4313      	orrs	r3, r2
 8012b8e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	89fa      	ldrh	r2, [r7, #14]
 8012b94:	831a      	strh	r2, [r3, #24]
}
 8012b96:	bf00      	nop
 8012b98:	3714      	adds	r7, #20
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba0:	4770      	bx	lr

08012ba2 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8012ba2:	b480      	push	{r7}
 8012ba4:	b085      	sub	sp, #20
 8012ba6:	af00      	add	r7, sp, #0
 8012ba8:	6078      	str	r0, [r7, #4]
 8012baa:	460b      	mov	r3, r1
 8012bac:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8012bae:	2300      	movs	r3, #0
 8012bb0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	8b1b      	ldrh	r3, [r3, #24]
 8012bb6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8012bb8:	89fb      	ldrh	r3, [r7, #14]
 8012bba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012bbe:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8012bc0:	887b      	ldrh	r3, [r7, #2]
 8012bc2:	021b      	lsls	r3, r3, #8
 8012bc4:	b29a      	uxth	r2, r3
 8012bc6:	89fb      	ldrh	r3, [r7, #14]
 8012bc8:	4313      	orrs	r3, r2
 8012bca:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	89fa      	ldrh	r2, [r7, #14]
 8012bd0:	831a      	strh	r2, [r3, #24]
}
 8012bd2:	bf00      	nop
 8012bd4:	3714      	adds	r7, #20
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bdc:	4770      	bx	lr

08012bde <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8012bde:	b480      	push	{r7}
 8012be0:	b085      	sub	sp, #20
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	6078      	str	r0, [r7, #4]
 8012be6:	460b      	mov	r3, r1
 8012be8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8012bea:	2300      	movs	r3, #0
 8012bec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	8b9b      	ldrh	r3, [r3, #28]
 8012bf2:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8012bf4:	89fb      	ldrh	r3, [r7, #14]
 8012bf6:	f023 0308 	bic.w	r3, r3, #8
 8012bfa:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8012bfc:	89fa      	ldrh	r2, [r7, #14]
 8012bfe:	887b      	ldrh	r3, [r7, #2]
 8012c00:	4313      	orrs	r3, r2
 8012c02:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	89fa      	ldrh	r2, [r7, #14]
 8012c08:	839a      	strh	r2, [r3, #28]
}
 8012c0a:	bf00      	nop
 8012c0c:	3714      	adds	r7, #20
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c14:	4770      	bx	lr

08012c16 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8012c16:	b480      	push	{r7}
 8012c18:	b085      	sub	sp, #20
 8012c1a:	af00      	add	r7, sp, #0
 8012c1c:	6078      	str	r0, [r7, #4]
 8012c1e:	460b      	mov	r3, r1
 8012c20:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8012c22:	2300      	movs	r3, #0
 8012c24:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	8b9b      	ldrh	r3, [r3, #28]
 8012c2a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8012c2c:	89fb      	ldrh	r3, [r7, #14]
 8012c2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012c32:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8012c34:	887b      	ldrh	r3, [r7, #2]
 8012c36:	021b      	lsls	r3, r3, #8
 8012c38:	b29a      	uxth	r2, r3
 8012c3a:	89fb      	ldrh	r3, [r7, #14]
 8012c3c:	4313      	orrs	r3, r2
 8012c3e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	89fa      	ldrh	r2, [r7, #14]
 8012c44:	839a      	strh	r2, [r3, #28]
}
 8012c46:	bf00      	nop
 8012c48:	3714      	adds	r7, #20
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c50:	4770      	bx	lr

08012c52 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8012c52:	b480      	push	{r7}
 8012c54:	b085      	sub	sp, #20
 8012c56:	af00      	add	r7, sp, #0
 8012c58:	6078      	str	r0, [r7, #4]
 8012c5a:	460b      	mov	r3, r1
 8012c5c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	8b1b      	ldrh	r3, [r3, #24]
 8012c66:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8012c68:	89fb      	ldrh	r3, [r7, #14]
 8012c6a:	f023 0304 	bic.w	r3, r3, #4
 8012c6e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8012c70:	89fa      	ldrh	r2, [r7, #14]
 8012c72:	887b      	ldrh	r3, [r7, #2]
 8012c74:	4313      	orrs	r3, r2
 8012c76:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	89fa      	ldrh	r2, [r7, #14]
 8012c7c:	831a      	strh	r2, [r3, #24]
}
 8012c7e:	bf00      	nop
 8012c80:	3714      	adds	r7, #20
 8012c82:	46bd      	mov	sp, r7
 8012c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c88:	4770      	bx	lr

08012c8a <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8012c8a:	b480      	push	{r7}
 8012c8c:	b085      	sub	sp, #20
 8012c8e:	af00      	add	r7, sp, #0
 8012c90:	6078      	str	r0, [r7, #4]
 8012c92:	460b      	mov	r3, r1
 8012c94:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8012c96:	2300      	movs	r3, #0
 8012c98:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	8b1b      	ldrh	r3, [r3, #24]
 8012c9e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8012ca0:	89fb      	ldrh	r3, [r7, #14]
 8012ca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012ca6:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8012ca8:	887b      	ldrh	r3, [r7, #2]
 8012caa:	021b      	lsls	r3, r3, #8
 8012cac:	b29a      	uxth	r2, r3
 8012cae:	89fb      	ldrh	r3, [r7, #14]
 8012cb0:	4313      	orrs	r3, r2
 8012cb2:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	89fa      	ldrh	r2, [r7, #14]
 8012cb8:	831a      	strh	r2, [r3, #24]
}
 8012cba:	bf00      	nop
 8012cbc:	3714      	adds	r7, #20
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc4:	4770      	bx	lr

08012cc6 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8012cc6:	b480      	push	{r7}
 8012cc8:	b085      	sub	sp, #20
 8012cca:	af00      	add	r7, sp, #0
 8012ccc:	6078      	str	r0, [r7, #4]
 8012cce:	460b      	mov	r3, r1
 8012cd0:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	8b9b      	ldrh	r3, [r3, #28]
 8012cda:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8012cdc:	89fb      	ldrh	r3, [r7, #14]
 8012cde:	f023 0304 	bic.w	r3, r3, #4
 8012ce2:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8012ce4:	89fa      	ldrh	r2, [r7, #14]
 8012ce6:	887b      	ldrh	r3, [r7, #2]
 8012ce8:	4313      	orrs	r3, r2
 8012cea:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	89fa      	ldrh	r2, [r7, #14]
 8012cf0:	839a      	strh	r2, [r3, #28]
}
 8012cf2:	bf00      	nop
 8012cf4:	3714      	adds	r7, #20
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfc:	4770      	bx	lr

08012cfe <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8012cfe:	b480      	push	{r7}
 8012d00:	b085      	sub	sp, #20
 8012d02:	af00      	add	r7, sp, #0
 8012d04:	6078      	str	r0, [r7, #4]
 8012d06:	460b      	mov	r3, r1
 8012d08:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	8b9b      	ldrh	r3, [r3, #28]
 8012d12:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8012d14:	89fb      	ldrh	r3, [r7, #14]
 8012d16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012d1a:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8012d1c:	887b      	ldrh	r3, [r7, #2]
 8012d1e:	021b      	lsls	r3, r3, #8
 8012d20:	b29a      	uxth	r2, r3
 8012d22:	89fb      	ldrh	r3, [r7, #14]
 8012d24:	4313      	orrs	r3, r2
 8012d26:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	89fa      	ldrh	r2, [r7, #14]
 8012d2c:	839a      	strh	r2, [r3, #28]
}
 8012d2e:	bf00      	nop
 8012d30:	3714      	adds	r7, #20
 8012d32:	46bd      	mov	sp, r7
 8012d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d38:	4770      	bx	lr

08012d3a <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8012d3a:	b480      	push	{r7}
 8012d3c:	b085      	sub	sp, #20
 8012d3e:	af00      	add	r7, sp, #0
 8012d40:	6078      	str	r0, [r7, #4]
 8012d42:	460b      	mov	r3, r1
 8012d44:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8012d46:	2300      	movs	r3, #0
 8012d48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	8b1b      	ldrh	r3, [r3, #24]
 8012d4e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8012d50:	89fb      	ldrh	r3, [r7, #14]
 8012d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012d56:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8012d58:	89fa      	ldrh	r2, [r7, #14]
 8012d5a:	887b      	ldrh	r3, [r7, #2]
 8012d5c:	4313      	orrs	r3, r2
 8012d5e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	89fa      	ldrh	r2, [r7, #14]
 8012d64:	831a      	strh	r2, [r3, #24]
}
 8012d66:	bf00      	nop
 8012d68:	3714      	adds	r7, #20
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d70:	4770      	bx	lr

08012d72 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8012d72:	b480      	push	{r7}
 8012d74:	b085      	sub	sp, #20
 8012d76:	af00      	add	r7, sp, #0
 8012d78:	6078      	str	r0, [r7, #4]
 8012d7a:	460b      	mov	r3, r1
 8012d7c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	8b1b      	ldrh	r3, [r3, #24]
 8012d86:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8012d88:	89fb      	ldrh	r3, [r7, #14]
 8012d8a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012d8e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8012d90:	887b      	ldrh	r3, [r7, #2]
 8012d92:	021b      	lsls	r3, r3, #8
 8012d94:	b29a      	uxth	r2, r3
 8012d96:	89fb      	ldrh	r3, [r7, #14]
 8012d98:	4313      	orrs	r3, r2
 8012d9a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	89fa      	ldrh	r2, [r7, #14]
 8012da0:	831a      	strh	r2, [r3, #24]
}
 8012da2:	bf00      	nop
 8012da4:	3714      	adds	r7, #20
 8012da6:	46bd      	mov	sp, r7
 8012da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dac:	4770      	bx	lr

08012dae <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8012dae:	b480      	push	{r7}
 8012db0:	b085      	sub	sp, #20
 8012db2:	af00      	add	r7, sp, #0
 8012db4:	6078      	str	r0, [r7, #4]
 8012db6:	460b      	mov	r3, r1
 8012db8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	8b9b      	ldrh	r3, [r3, #28]
 8012dc2:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8012dc4:	89fb      	ldrh	r3, [r7, #14]
 8012dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012dca:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8012dcc:	89fa      	ldrh	r2, [r7, #14]
 8012dce:	887b      	ldrh	r3, [r7, #2]
 8012dd0:	4313      	orrs	r3, r2
 8012dd2:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	89fa      	ldrh	r2, [r7, #14]
 8012dd8:	839a      	strh	r2, [r3, #28]
}
 8012dda:	bf00      	nop
 8012ddc:	3714      	adds	r7, #20
 8012dde:	46bd      	mov	sp, r7
 8012de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de4:	4770      	bx	lr

08012de6 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8012de6:	b480      	push	{r7}
 8012de8:	b085      	sub	sp, #20
 8012dea:	af00      	add	r7, sp, #0
 8012dec:	6078      	str	r0, [r7, #4]
 8012dee:	460b      	mov	r3, r1
 8012df0:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8012df2:	2300      	movs	r3, #0
 8012df4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	8b9b      	ldrh	r3, [r3, #28]
 8012dfa:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8012dfc:	89fb      	ldrh	r3, [r7, #14]
 8012dfe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012e02:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8012e04:	887b      	ldrh	r3, [r7, #2]
 8012e06:	021b      	lsls	r3, r3, #8
 8012e08:	b29a      	uxth	r2, r3
 8012e0a:	89fb      	ldrh	r3, [r7, #14]
 8012e0c:	4313      	orrs	r3, r2
 8012e0e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	89fa      	ldrh	r2, [r7, #14]
 8012e14:	839a      	strh	r2, [r3, #28]
}
 8012e16:	bf00      	nop
 8012e18:	3714      	adds	r7, #20
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e20:	4770      	bx	lr

08012e22 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8012e22:	b480      	push	{r7}
 8012e24:	b085      	sub	sp, #20
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	6078      	str	r0, [r7, #4]
 8012e2a:	460b      	mov	r3, r1
 8012e2c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8012e2e:	2300      	movs	r3, #0
 8012e30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	8c1b      	ldrh	r3, [r3, #32]
 8012e36:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8012e38:	89fb      	ldrh	r3, [r7, #14]
 8012e3a:	f023 0302 	bic.w	r3, r3, #2
 8012e3e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 8012e40:	89fa      	ldrh	r2, [r7, #14]
 8012e42:	887b      	ldrh	r3, [r7, #2]
 8012e44:	4313      	orrs	r3, r2
 8012e46:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	89fa      	ldrh	r2, [r7, #14]
 8012e4c:	841a      	strh	r2, [r3, #32]
}
 8012e4e:	bf00      	nop
 8012e50:	3714      	adds	r7, #20
 8012e52:	46bd      	mov	sp, r7
 8012e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e58:	4770      	bx	lr

08012e5a <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8012e5a:	b480      	push	{r7}
 8012e5c:	b085      	sub	sp, #20
 8012e5e:	af00      	add	r7, sp, #0
 8012e60:	6078      	str	r0, [r7, #4]
 8012e62:	460b      	mov	r3, r1
 8012e64:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8012e66:	2300      	movs	r3, #0
 8012e68:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	8c1b      	ldrh	r3, [r3, #32]
 8012e6e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8012e70:	89fb      	ldrh	r3, [r7, #14]
 8012e72:	f023 0308 	bic.w	r3, r3, #8
 8012e76:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 8012e78:	89fa      	ldrh	r2, [r7, #14]
 8012e7a:	887b      	ldrh	r3, [r7, #2]
 8012e7c:	4313      	orrs	r3, r2
 8012e7e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	89fa      	ldrh	r2, [r7, #14]
 8012e84:	841a      	strh	r2, [r3, #32]
}
 8012e86:	bf00      	nop
 8012e88:	3714      	adds	r7, #20
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e90:	4770      	bx	lr

08012e92 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8012e92:	b480      	push	{r7}
 8012e94:	b085      	sub	sp, #20
 8012e96:	af00      	add	r7, sp, #0
 8012e98:	6078      	str	r0, [r7, #4]
 8012e9a:	460b      	mov	r3, r1
 8012e9c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	8c1b      	ldrh	r3, [r3, #32]
 8012ea6:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8012ea8:	89fb      	ldrh	r3, [r7, #14]
 8012eaa:	f023 0320 	bic.w	r3, r3, #32
 8012eae:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8012eb0:	887b      	ldrh	r3, [r7, #2]
 8012eb2:	011b      	lsls	r3, r3, #4
 8012eb4:	b29a      	uxth	r2, r3
 8012eb6:	89fb      	ldrh	r3, [r7, #14]
 8012eb8:	4313      	orrs	r3, r2
 8012eba:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	89fa      	ldrh	r2, [r7, #14]
 8012ec0:	841a      	strh	r2, [r3, #32]
}
 8012ec2:	bf00      	nop
 8012ec4:	3714      	adds	r7, #20
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ecc:	4770      	bx	lr

08012ece <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8012ece:	b480      	push	{r7}
 8012ed0:	b085      	sub	sp, #20
 8012ed2:	af00      	add	r7, sp, #0
 8012ed4:	6078      	str	r0, [r7, #4]
 8012ed6:	460b      	mov	r3, r1
 8012ed8:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8012eda:	2300      	movs	r3, #0
 8012edc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	8c1b      	ldrh	r3, [r3, #32]
 8012ee2:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8012ee4:	89fb      	ldrh	r3, [r7, #14]
 8012ee6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012eea:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8012eec:	887b      	ldrh	r3, [r7, #2]
 8012eee:	011b      	lsls	r3, r3, #4
 8012ef0:	b29a      	uxth	r2, r3
 8012ef2:	89fb      	ldrh	r3, [r7, #14]
 8012ef4:	4313      	orrs	r3, r2
 8012ef6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	89fa      	ldrh	r2, [r7, #14]
 8012efc:	841a      	strh	r2, [r3, #32]
}
 8012efe:	bf00      	nop
 8012f00:	3714      	adds	r7, #20
 8012f02:	46bd      	mov	sp, r7
 8012f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f08:	4770      	bx	lr

08012f0a <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8012f0a:	b480      	push	{r7}
 8012f0c:	b085      	sub	sp, #20
 8012f0e:	af00      	add	r7, sp, #0
 8012f10:	6078      	str	r0, [r7, #4]
 8012f12:	460b      	mov	r3, r1
 8012f14:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8012f16:	2300      	movs	r3, #0
 8012f18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	8c1b      	ldrh	r3, [r3, #32]
 8012f1e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8012f20:	89fb      	ldrh	r3, [r7, #14]
 8012f22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012f26:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8012f28:	887b      	ldrh	r3, [r7, #2]
 8012f2a:	021b      	lsls	r3, r3, #8
 8012f2c:	b29a      	uxth	r2, r3
 8012f2e:	89fb      	ldrh	r3, [r7, #14]
 8012f30:	4313      	orrs	r3, r2
 8012f32:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	89fa      	ldrh	r2, [r7, #14]
 8012f38:	841a      	strh	r2, [r3, #32]
}
 8012f3a:	bf00      	nop
 8012f3c:	3714      	adds	r7, #20
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f44:	4770      	bx	lr

08012f46 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8012f46:	b480      	push	{r7}
 8012f48:	b085      	sub	sp, #20
 8012f4a:	af00      	add	r7, sp, #0
 8012f4c:	6078      	str	r0, [r7, #4]
 8012f4e:	460b      	mov	r3, r1
 8012f50:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8012f52:	2300      	movs	r3, #0
 8012f54:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	8c1b      	ldrh	r3, [r3, #32]
 8012f5a:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8012f5c:	89fb      	ldrh	r3, [r7, #14]
 8012f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012f62:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8012f64:	887b      	ldrh	r3, [r7, #2]
 8012f66:	021b      	lsls	r3, r3, #8
 8012f68:	b29a      	uxth	r2, r3
 8012f6a:	89fb      	ldrh	r3, [r7, #14]
 8012f6c:	4313      	orrs	r3, r2
 8012f6e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	89fa      	ldrh	r2, [r7, #14]
 8012f74:	841a      	strh	r2, [r3, #32]
}
 8012f76:	bf00      	nop
 8012f78:	3714      	adds	r7, #20
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f80:	4770      	bx	lr

08012f82 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8012f82:	b480      	push	{r7}
 8012f84:	b085      	sub	sp, #20
 8012f86:	af00      	add	r7, sp, #0
 8012f88:	6078      	str	r0, [r7, #4]
 8012f8a:	460b      	mov	r3, r1
 8012f8c:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8012f8e:	2300      	movs	r3, #0
 8012f90:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	8c1b      	ldrh	r3, [r3, #32]
 8012f96:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8012f98:	89fb      	ldrh	r3, [r7, #14]
 8012f9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012f9e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8012fa0:	887b      	ldrh	r3, [r7, #2]
 8012fa2:	031b      	lsls	r3, r3, #12
 8012fa4:	b29a      	uxth	r2, r3
 8012fa6:	89fb      	ldrh	r3, [r7, #14]
 8012fa8:	4313      	orrs	r3, r2
 8012faa:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	89fa      	ldrh	r2, [r7, #14]
 8012fb0:	841a      	strh	r2, [r3, #32]
}
 8012fb2:	bf00      	nop
 8012fb4:	3714      	adds	r7, #20
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr

08012fbe <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8012fbe:	b480      	push	{r7}
 8012fc0:	b085      	sub	sp, #20
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	6078      	str	r0, [r7, #4]
 8012fc6:	460b      	mov	r3, r1
 8012fc8:	807b      	strh	r3, [r7, #2]
 8012fca:	4613      	mov	r3, r2
 8012fcc:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8012fce:	2300      	movs	r3, #0
 8012fd0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8012fd2:	887b      	ldrh	r3, [r7, #2]
 8012fd4:	2201      	movs	r2, #1
 8012fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8012fda:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	8c1b      	ldrh	r3, [r3, #32]
 8012fe0:	b29a      	uxth	r2, r3
 8012fe2:	89fb      	ldrh	r3, [r7, #14]
 8012fe4:	43db      	mvns	r3, r3
 8012fe6:	b29b      	uxth	r3, r3
 8012fe8:	4013      	ands	r3, r2
 8012fea:	b29a      	uxth	r2, r3
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	8c1b      	ldrh	r3, [r3, #32]
 8012ff4:	b29a      	uxth	r2, r3
 8012ff6:	8839      	ldrh	r1, [r7, #0]
 8012ff8:	887b      	ldrh	r3, [r7, #2]
 8012ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8012ffe:	b29b      	uxth	r3, r3
 8013000:	4313      	orrs	r3, r2
 8013002:	b29a      	uxth	r2, r3
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	841a      	strh	r2, [r3, #32]
}
 8013008:	bf00      	nop
 801300a:	3714      	adds	r7, #20
 801300c:	46bd      	mov	sp, r7
 801300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013012:	4770      	bx	lr

08013014 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8013014:	b480      	push	{r7}
 8013016:	b085      	sub	sp, #20
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
 801301c:	460b      	mov	r3, r1
 801301e:	807b      	strh	r3, [r7, #2]
 8013020:	4613      	mov	r3, r2
 8013022:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8013024:	2300      	movs	r3, #0
 8013026:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8013028:	887b      	ldrh	r3, [r7, #2]
 801302a:	2204      	movs	r2, #4
 801302c:	fa02 f303 	lsl.w	r3, r2, r3
 8013030:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	8c1b      	ldrh	r3, [r3, #32]
 8013036:	b29a      	uxth	r2, r3
 8013038:	89fb      	ldrh	r3, [r7, #14]
 801303a:	43db      	mvns	r3, r3
 801303c:	b29b      	uxth	r3, r3
 801303e:	4013      	ands	r3, r2
 8013040:	b29a      	uxth	r2, r3
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	8c1b      	ldrh	r3, [r3, #32]
 801304a:	b29a      	uxth	r2, r3
 801304c:	8839      	ldrh	r1, [r7, #0]
 801304e:	887b      	ldrh	r3, [r7, #2]
 8013050:	fa01 f303 	lsl.w	r3, r1, r3
 8013054:	b29b      	uxth	r3, r3
 8013056:	4313      	orrs	r3, r2
 8013058:	b29a      	uxth	r2, r3
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	841a      	strh	r2, [r3, #32]
}
 801305e:	bf00      	nop
 8013060:	3714      	adds	r7, #20
 8013062:	46bd      	mov	sp, r7
 8013064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013068:	4770      	bx	lr

0801306a <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 801306a:	b580      	push	{r7, lr}
 801306c:	b082      	sub	sp, #8
 801306e:	af00      	add	r7, sp, #0
 8013070:	6078      	str	r0, [r7, #4]
 8013072:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	881b      	ldrh	r3, [r3, #0]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d10f      	bne.n	801309c <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	8859      	ldrh	r1, [r3, #2]
 8013080:	683b      	ldr	r3, [r7, #0]
 8013082:	889a      	ldrh	r2, [r3, #4]
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	891b      	ldrh	r3, [r3, #8]
 8013088:	6878      	ldr	r0, [r7, #4]
 801308a:	f000 fcb7 	bl	80139fc <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	88db      	ldrh	r3, [r3, #6]
 8013092:	4619      	mov	r1, r3
 8013094:	6878      	ldr	r0, [r7, #4]
 8013096:	f000 f8e1 	bl	801325c <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 801309a:	e036      	b.n	801310a <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 801309c:	683b      	ldr	r3, [r7, #0]
 801309e:	881b      	ldrh	r3, [r3, #0]
 80130a0:	2b04      	cmp	r3, #4
 80130a2:	d10f      	bne.n	80130c4 <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	8859      	ldrh	r1, [r3, #2]
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	889a      	ldrh	r2, [r3, #4]
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	891b      	ldrh	r3, [r3, #8]
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f000 fce6 	bl	8013a82 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	88db      	ldrh	r3, [r3, #6]
 80130ba:	4619      	mov	r1, r3
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	f000 f8e9 	bl	8013294 <TIM_SetIC2Prescaler>
}
 80130c2:	e022      	b.n	801310a <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80130c4:	683b      	ldr	r3, [r7, #0]
 80130c6:	881b      	ldrh	r3, [r3, #0]
 80130c8:	2b08      	cmp	r3, #8
 80130ca:	d10f      	bne.n	80130ec <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 80130cc:	683b      	ldr	r3, [r7, #0]
 80130ce:	8859      	ldrh	r1, [r3, #2]
 80130d0:	683b      	ldr	r3, [r7, #0]
 80130d2:	889a      	ldrh	r2, [r3, #4]
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	891b      	ldrh	r3, [r3, #8]
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f000 fd1f 	bl	8013b1c <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	88db      	ldrh	r3, [r3, #6]
 80130e2:	4619      	mov	r1, r3
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f000 f8f3 	bl	80132d0 <TIM_SetIC3Prescaler>
}
 80130ea:	e00e      	b.n	801310a <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80130ec:	683b      	ldr	r3, [r7, #0]
 80130ee:	8859      	ldrh	r1, [r3, #2]
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	889a      	ldrh	r2, [r3, #4]
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	891b      	ldrh	r3, [r3, #8]
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f000 fd57 	bl	8013bac <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80130fe:	683b      	ldr	r3, [r7, #0]
 8013100:	88db      	ldrh	r3, [r3, #6]
 8013102:	4619      	mov	r1, r3
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	f000 f8ff 	bl	8013308 <TIM_SetIC4Prescaler>
}
 801310a:	bf00      	nop
 801310c:	3708      	adds	r7, #8
 801310e:	46bd      	mov	sp, r7
 8013110:	bd80      	pop	{r7, pc}

08013112 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8013112:	b480      	push	{r7}
 8013114:	b083      	sub	sp, #12
 8013116:	af00      	add	r7, sp, #0
 8013118:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	2200      	movs	r2, #0
 801311e:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2200      	movs	r2, #0
 8013124:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2201      	movs	r2, #1
 801312a:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2200      	movs	r2, #0
 8013130:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2200      	movs	r2, #0
 8013136:	811a      	strh	r2, [r3, #8]
}
 8013138:	bf00      	nop
 801313a:	370c      	adds	r7, #12
 801313c:	46bd      	mov	sp, r7
 801313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013142:	4770      	bx	lr

08013144 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b084      	sub	sp, #16
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
 801314c:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 801314e:	2300      	movs	r3, #0
 8013150:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 8013152:	2301      	movs	r3, #1
 8013154:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	885b      	ldrh	r3, [r3, #2]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d102      	bne.n	8013164 <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 801315e:	2302      	movs	r3, #2
 8013160:	81fb      	strh	r3, [r7, #14]
 8013162:	e001      	b.n	8013168 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8013164:	2300      	movs	r3, #0
 8013166:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	889b      	ldrh	r3, [r3, #4]
 801316c:	2b01      	cmp	r3, #1
 801316e:	d102      	bne.n	8013176 <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8013170:	2302      	movs	r3, #2
 8013172:	81bb      	strh	r3, [r7, #12]
 8013174:	e001      	b.n	801317a <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8013176:	2301      	movs	r3, #1
 8013178:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	881b      	ldrh	r3, [r3, #0]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d11c      	bne.n	80131bc <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	8859      	ldrh	r1, [r3, #2]
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	889a      	ldrh	r2, [r3, #4]
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	891b      	ldrh	r3, [r3, #8]
 801318e:	6878      	ldr	r0, [r7, #4]
 8013190:	f000 fc34 	bl	80139fc <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	88db      	ldrh	r3, [r3, #6]
 8013198:	4619      	mov	r1, r3
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f000 f85e 	bl	801325c <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	891b      	ldrh	r3, [r3, #8]
 80131a4:	89ba      	ldrh	r2, [r7, #12]
 80131a6:	89f9      	ldrh	r1, [r7, #14]
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f000 fc6a 	bl	8013a82 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	88db      	ldrh	r3, [r3, #6]
 80131b2:	4619      	mov	r1, r3
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f000 f86d 	bl	8013294 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80131ba:	e01b      	b.n	80131f4 <TIM_PWMIConfig+0xb0>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	8859      	ldrh	r1, [r3, #2]
 80131c0:	683b      	ldr	r3, [r7, #0]
 80131c2:	889a      	ldrh	r2, [r3, #4]
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	891b      	ldrh	r3, [r3, #8]
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f000 fc5a 	bl	8013a82 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	88db      	ldrh	r3, [r3, #6]
 80131d2:	4619      	mov	r1, r3
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	f000 f85d 	bl	8013294 <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80131da:	683b      	ldr	r3, [r7, #0]
 80131dc:	891b      	ldrh	r3, [r3, #8]
 80131de:	89ba      	ldrh	r2, [r7, #12]
 80131e0:	89f9      	ldrh	r1, [r7, #14]
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	f000 fc0a 	bl	80139fc <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80131e8:	683b      	ldr	r3, [r7, #0]
 80131ea:	88db      	ldrh	r3, [r3, #6]
 80131ec:	4619      	mov	r1, r3
 80131ee:	6878      	ldr	r0, [r7, #4]
 80131f0:	f000 f834 	bl	801325c <TIM_SetIC1Prescaler>
}
 80131f4:	bf00      	nop
 80131f6:	3710      	adds	r7, #16
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}

080131fc <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 80131fc:	b480      	push	{r7}
 80131fe:	b083      	sub	sp, #12
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8013208:	4618      	mov	r0, r3
 801320a:	370c      	adds	r7, #12
 801320c:	46bd      	mov	sp, r7
 801320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013212:	4770      	bx	lr

08013214 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8013214:	b480      	push	{r7}
 8013216:	b083      	sub	sp, #12
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8013220:	4618      	mov	r0, r3
 8013222:	370c      	adds	r7, #12
 8013224:	46bd      	mov	sp, r7
 8013226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322a:	4770      	bx	lr

0801322c <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 801322c:	b480      	push	{r7}
 801322e:	b083      	sub	sp, #12
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8013238:	4618      	mov	r0, r3
 801323a:	370c      	adds	r7, #12
 801323c:	46bd      	mov	sp, r7
 801323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013242:	4770      	bx	lr

08013244 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8013244:	b480      	push	{r7}
 8013246:	b083      	sub	sp, #12
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8013250:	4618      	mov	r0, r3
 8013252:	370c      	adds	r7, #12
 8013254:	46bd      	mov	sp, r7
 8013256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325a:	4770      	bx	lr

0801325c <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 801325c:	b480      	push	{r7}
 801325e:	b083      	sub	sp, #12
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
 8013264:	460b      	mov	r3, r1
 8013266:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	8b1b      	ldrh	r3, [r3, #24]
 801326c:	b29b      	uxth	r3, r3
 801326e:	f023 030c 	bic.w	r3, r3, #12
 8013272:	b29a      	uxth	r2, r3
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	8b1b      	ldrh	r3, [r3, #24]
 801327c:	b29a      	uxth	r2, r3
 801327e:	887b      	ldrh	r3, [r7, #2]
 8013280:	4313      	orrs	r3, r2
 8013282:	b29a      	uxth	r2, r3
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	831a      	strh	r2, [r3, #24]
}
 8013288:	bf00      	nop
 801328a:	370c      	adds	r7, #12
 801328c:	46bd      	mov	sp, r7
 801328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013292:	4770      	bx	lr

08013294 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8013294:	b480      	push	{r7}
 8013296:	b083      	sub	sp, #12
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
 801329c:	460b      	mov	r3, r1
 801329e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	8b1b      	ldrh	r3, [r3, #24]
 80132a4:	b29b      	uxth	r3, r3
 80132a6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80132aa:	b29a      	uxth	r2, r3
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	8b1b      	ldrh	r3, [r3, #24]
 80132b4:	b29a      	uxth	r2, r3
 80132b6:	887b      	ldrh	r3, [r7, #2]
 80132b8:	021b      	lsls	r3, r3, #8
 80132ba:	b29b      	uxth	r3, r3
 80132bc:	4313      	orrs	r3, r2
 80132be:	b29a      	uxth	r2, r3
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	831a      	strh	r2, [r3, #24]
}
 80132c4:	bf00      	nop
 80132c6:	370c      	adds	r7, #12
 80132c8:	46bd      	mov	sp, r7
 80132ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ce:	4770      	bx	lr

080132d0 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80132d0:	b480      	push	{r7}
 80132d2:	b083      	sub	sp, #12
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
 80132d8:	460b      	mov	r3, r1
 80132da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	8b9b      	ldrh	r3, [r3, #28]
 80132e0:	b29b      	uxth	r3, r3
 80132e2:	f023 030c 	bic.w	r3, r3, #12
 80132e6:	b29a      	uxth	r2, r3
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	8b9b      	ldrh	r3, [r3, #28]
 80132f0:	b29a      	uxth	r2, r3
 80132f2:	887b      	ldrh	r3, [r7, #2]
 80132f4:	4313      	orrs	r3, r2
 80132f6:	b29a      	uxth	r2, r3
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	839a      	strh	r2, [r3, #28]
}
 80132fc:	bf00      	nop
 80132fe:	370c      	adds	r7, #12
 8013300:	46bd      	mov	sp, r7
 8013302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013306:	4770      	bx	lr

08013308 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8013308:	b480      	push	{r7}
 801330a:	b083      	sub	sp, #12
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
 8013310:	460b      	mov	r3, r1
 8013312:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	8b9b      	ldrh	r3, [r3, #28]
 8013318:	b29b      	uxth	r3, r3
 801331a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 801331e:	b29a      	uxth	r2, r3
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	8b9b      	ldrh	r3, [r3, #28]
 8013328:	b29a      	uxth	r2, r3
 801332a:	887b      	ldrh	r3, [r7, #2]
 801332c:	021b      	lsls	r3, r3, #8
 801332e:	b29b      	uxth	r3, r3
 8013330:	4313      	orrs	r3, r2
 8013332:	b29a      	uxth	r2, r3
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	839a      	strh	r2, [r3, #28]
}
 8013338:	bf00      	nop
 801333a:	370c      	adds	r7, #12
 801333c:	46bd      	mov	sp, r7
 801333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013342:	4770      	bx	lr

08013344 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8013344:	b480      	push	{r7}
 8013346:	b083      	sub	sp, #12
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	881a      	ldrh	r2, [r3, #0]
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	885b      	ldrh	r3, [r3, #2]
 8013356:	4313      	orrs	r3, r2
 8013358:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	889b      	ldrh	r3, [r3, #4]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 801335e:	4313      	orrs	r3, r2
 8013360:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	88db      	ldrh	r3, [r3, #6]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013366:	4313      	orrs	r3, r2
 8013368:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 801336a:	683b      	ldr	r3, [r7, #0]
 801336c:	891b      	ldrh	r3, [r3, #8]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 801336e:	4313      	orrs	r3, r2
 8013370:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8013372:	683b      	ldr	r3, [r7, #0]
 8013374:	895b      	ldrh	r3, [r3, #10]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8013376:	4313      	orrs	r3, r2
 8013378:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	899b      	ldrh	r3, [r3, #12]
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 801337e:	4313      	orrs	r3, r2
 8013380:	b29a      	uxth	r2, r3
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8013388:	bf00      	nop
 801338a:	370c      	adds	r7, #12
 801338c:	46bd      	mov	sp, r7
 801338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013392:	4770      	bx	lr

08013394 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8013394:	b480      	push	{r7}
 8013396:	b083      	sub	sp, #12
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2200      	movs	r2, #0
 80133a0:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	2200      	movs	r2, #0
 80133a6:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	2200      	movs	r2, #0
 80133ac:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	2200      	movs	r2, #0
 80133b2:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	2200      	movs	r2, #0
 80133b8:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	2200      	movs	r2, #0
 80133be:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2200      	movs	r2, #0
 80133c4:	819a      	strh	r2, [r3, #12]
}
 80133c6:	bf00      	nop
 80133c8:	370c      	adds	r7, #12
 80133ca:	46bd      	mov	sp, r7
 80133cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d0:	4770      	bx	lr

080133d2 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80133d2:	b480      	push	{r7}
 80133d4:	b083      	sub	sp, #12
 80133d6:	af00      	add	r7, sp, #0
 80133d8:	6078      	str	r0, [r7, #4]
 80133da:	460b      	mov	r3, r1
 80133dc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80133de:	78fb      	ldrb	r3, [r7, #3]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d00c      	beq.n	80133fe <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80133ea:	b29b      	uxth	r3, r3
 80133ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80133f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80133f4:	b29a      	uxth	r2, r3
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
  }  
}
 80133fc:	e009      	b.n	8013412 <TIM_CtrlPWMOutputs+0x40>
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013404:	b29b      	uxth	r3, r3
 8013406:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801340a:	b29a      	uxth	r2, r3
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8013412:	bf00      	nop
 8013414:	370c      	adds	r7, #12
 8013416:	46bd      	mov	sp, r7
 8013418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801341c:	4770      	bx	lr

0801341e <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801341e:	b480      	push	{r7}
 8013420:	b083      	sub	sp, #12
 8013422:	af00      	add	r7, sp, #0
 8013424:	6078      	str	r0, [r7, #4]
 8013426:	460b      	mov	r3, r1
 8013428:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801342a:	78fb      	ldrb	r3, [r7, #3]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d008      	beq.n	8013442 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	889b      	ldrh	r3, [r3, #4]
 8013434:	b29b      	uxth	r3, r3
 8013436:	f043 0304 	orr.w	r3, r3, #4
 801343a:	b29a      	uxth	r2, r3
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
  }
}
 8013440:	e007      	b.n	8013452 <TIM_SelectCOM+0x34>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	889b      	ldrh	r3, [r3, #4]
 8013446:	b29b      	uxth	r3, r3
 8013448:	f023 0304 	bic.w	r3, r3, #4
 801344c:	b29a      	uxth	r2, r3
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	809a      	strh	r2, [r3, #4]
}
 8013452:	bf00      	nop
 8013454:	370c      	adds	r7, #12
 8013456:	46bd      	mov	sp, r7
 8013458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345c:	4770      	bx	lr

0801345e <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 801345e:	b480      	push	{r7}
 8013460:	b083      	sub	sp, #12
 8013462:	af00      	add	r7, sp, #0
 8013464:	6078      	str	r0, [r7, #4]
 8013466:	460b      	mov	r3, r1
 8013468:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 801346a:	78fb      	ldrb	r3, [r7, #3]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d008      	beq.n	8013482 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	889b      	ldrh	r3, [r3, #4]
 8013474:	b29b      	uxth	r3, r3
 8013476:	f043 0301 	orr.w	r3, r3, #1
 801347a:	b29a      	uxth	r2, r3
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
  }
}
 8013480:	e007      	b.n	8013492 <TIM_CCPreloadControl+0x34>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	889b      	ldrh	r3, [r3, #4]
 8013486:	b29b      	uxth	r3, r3
 8013488:	f023 0301 	bic.w	r3, r3, #1
 801348c:	b29a      	uxth	r2, r3
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	809a      	strh	r2, [r3, #4]
}
 8013492:	bf00      	nop
 8013494:	370c      	adds	r7, #12
 8013496:	46bd      	mov	sp, r7
 8013498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349c:	4770      	bx	lr

0801349e <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 801349e:	b480      	push	{r7}
 80134a0:	b083      	sub	sp, #12
 80134a2:	af00      	add	r7, sp, #0
 80134a4:	6078      	str	r0, [r7, #4]
 80134a6:	460b      	mov	r3, r1
 80134a8:	807b      	strh	r3, [r7, #2]
 80134aa:	4613      	mov	r3, r2
 80134ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80134ae:	787b      	ldrb	r3, [r7, #1]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d008      	beq.n	80134c6 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	899b      	ldrh	r3, [r3, #12]
 80134b8:	b29a      	uxth	r2, r3
 80134ba:	887b      	ldrh	r3, [r7, #2]
 80134bc:	4313      	orrs	r3, r2
 80134be:	b29a      	uxth	r2, r3
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80134c4:	e009      	b.n	80134da <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	899b      	ldrh	r3, [r3, #12]
 80134ca:	b29a      	uxth	r2, r3
 80134cc:	887b      	ldrh	r3, [r7, #2]
 80134ce:	43db      	mvns	r3, r3
 80134d0:	b29b      	uxth	r3, r3
 80134d2:	4013      	ands	r3, r2
 80134d4:	b29a      	uxth	r2, r3
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	819a      	strh	r2, [r3, #12]
}
 80134da:	bf00      	nop
 80134dc:	370c      	adds	r7, #12
 80134de:	46bd      	mov	sp, r7
 80134e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e4:	4770      	bx	lr

080134e6 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 80134e6:	b480      	push	{r7}
 80134e8:	b083      	sub	sp, #12
 80134ea:	af00      	add	r7, sp, #0
 80134ec:	6078      	str	r0, [r7, #4]
 80134ee:	460b      	mov	r3, r1
 80134f0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	887a      	ldrh	r2, [r7, #2]
 80134f6:	829a      	strh	r2, [r3, #20]
}
 80134f8:	bf00      	nop
 80134fa:	370c      	adds	r7, #12
 80134fc:	46bd      	mov	sp, r7
 80134fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013502:	4770      	bx	lr

08013504 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8013504:	b480      	push	{r7}
 8013506:	b085      	sub	sp, #20
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
 801350c:	460b      	mov	r3, r1
 801350e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8013510:	2300      	movs	r3, #0
 8013512:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	8a1b      	ldrh	r3, [r3, #16]
 8013518:	b29a      	uxth	r2, r3
 801351a:	887b      	ldrh	r3, [r7, #2]
 801351c:	4013      	ands	r3, r2
 801351e:	b29b      	uxth	r3, r3
 8013520:	2b00      	cmp	r3, #0
 8013522:	d002      	beq.n	801352a <TIM_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8013524:	2301      	movs	r3, #1
 8013526:	73fb      	strb	r3, [r7, #15]
 8013528:	e001      	b.n	801352e <TIM_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 801352a:	2300      	movs	r3, #0
 801352c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801352e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013530:	4618      	mov	r0, r3
 8013532:	3714      	adds	r7, #20
 8013534:	46bd      	mov	sp, r7
 8013536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801353a:	4770      	bx	lr

0801353c <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 801353c:	b480      	push	{r7}
 801353e:	b083      	sub	sp, #12
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	460b      	mov	r3, r1
 8013546:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8013548:	887b      	ldrh	r3, [r7, #2]
 801354a:	43db      	mvns	r3, r3
 801354c:	b29a      	uxth	r2, r3
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	821a      	strh	r2, [r3, #16]
}
 8013552:	bf00      	nop
 8013554:	370c      	adds	r7, #12
 8013556:	46bd      	mov	sp, r7
 8013558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355c:	4770      	bx	lr

0801355e <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 801355e:	b480      	push	{r7}
 8013560:	b085      	sub	sp, #20
 8013562:	af00      	add	r7, sp, #0
 8013564:	6078      	str	r0, [r7, #4]
 8013566:	460b      	mov	r3, r1
 8013568:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 801356a:	2300      	movs	r3, #0
 801356c:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 801356e:	2300      	movs	r3, #0
 8013570:	81bb      	strh	r3, [r7, #12]
 8013572:	2300      	movs	r3, #0
 8013574:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	8a1b      	ldrh	r3, [r3, #16]
 801357a:	b29a      	uxth	r2, r3
 801357c:	887b      	ldrh	r3, [r7, #2]
 801357e:	4013      	ands	r3, r2
 8013580:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	899b      	ldrh	r3, [r3, #12]
 8013586:	b29a      	uxth	r2, r3
 8013588:	887b      	ldrh	r3, [r7, #2]
 801358a:	4013      	ands	r3, r2
 801358c:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 801358e:	89bb      	ldrh	r3, [r7, #12]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d005      	beq.n	80135a0 <TIM_GetITStatus+0x42>
 8013594:	897b      	ldrh	r3, [r7, #10]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d002      	beq.n	80135a0 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 801359a:	2301      	movs	r3, #1
 801359c:	73fb      	strb	r3, [r7, #15]
 801359e:	e001      	b.n	80135a4 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80135a0:	2300      	movs	r3, #0
 80135a2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80135a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80135a6:	4618      	mov	r0, r3
 80135a8:	3714      	adds	r7, #20
 80135aa:	46bd      	mov	sp, r7
 80135ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b0:	4770      	bx	lr

080135b2 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80135b2:	b480      	push	{r7}
 80135b4:	b083      	sub	sp, #12
 80135b6:	af00      	add	r7, sp, #0
 80135b8:	6078      	str	r0, [r7, #4]
 80135ba:	460b      	mov	r3, r1
 80135bc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80135be:	887b      	ldrh	r3, [r7, #2]
 80135c0:	43db      	mvns	r3, r3
 80135c2:	b29a      	uxth	r2, r3
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	821a      	strh	r2, [r3, #16]
}
 80135c8:	bf00      	nop
 80135ca:	370c      	adds	r7, #12
 80135cc:	46bd      	mov	sp, r7
 80135ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d2:	4770      	bx	lr

080135d4 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 80135d4:	b480      	push	{r7}
 80135d6:	b083      	sub	sp, #12
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
 80135dc:	460b      	mov	r3, r1
 80135de:	807b      	strh	r3, [r7, #2]
 80135e0:	4613      	mov	r3, r2
 80135e2:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80135e4:	887a      	ldrh	r2, [r7, #2]
 80135e6:	883b      	ldrh	r3, [r7, #0]
 80135e8:	4313      	orrs	r3, r2
 80135ea:	b29a      	uxth	r2, r3
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 80135f2:	bf00      	nop
 80135f4:	370c      	adds	r7, #12
 80135f6:	46bd      	mov	sp, r7
 80135f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fc:	4770      	bx	lr

080135fe <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 80135fe:	b480      	push	{r7}
 8013600:	b083      	sub	sp, #12
 8013602:	af00      	add	r7, sp, #0
 8013604:	6078      	str	r0, [r7, #4]
 8013606:	460b      	mov	r3, r1
 8013608:	807b      	strh	r3, [r7, #2]
 801360a:	4613      	mov	r3, r2
 801360c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801360e:	787b      	ldrb	r3, [r7, #1]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d008      	beq.n	8013626 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	899b      	ldrh	r3, [r3, #12]
 8013618:	b29a      	uxth	r2, r3
 801361a:	887b      	ldrh	r3, [r7, #2]
 801361c:	4313      	orrs	r3, r2
 801361e:	b29a      	uxth	r2, r3
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 8013624:	e009      	b.n	801363a <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	899b      	ldrh	r3, [r3, #12]
 801362a:	b29a      	uxth	r2, r3
 801362c:	887b      	ldrh	r3, [r7, #2]
 801362e:	43db      	mvns	r3, r3
 8013630:	b29b      	uxth	r3, r3
 8013632:	4013      	ands	r3, r2
 8013634:	b29a      	uxth	r2, r3
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	819a      	strh	r2, [r3, #12]
}
 801363a:	bf00      	nop
 801363c:	370c      	adds	r7, #12
 801363e:	46bd      	mov	sp, r7
 8013640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013644:	4770      	bx	lr

08013646 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8013646:	b480      	push	{r7}
 8013648:	b083      	sub	sp, #12
 801364a:	af00      	add	r7, sp, #0
 801364c:	6078      	str	r0, [r7, #4]
 801364e:	460b      	mov	r3, r1
 8013650:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8013652:	78fb      	ldrb	r3, [r7, #3]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d008      	beq.n	801366a <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	889b      	ldrh	r3, [r3, #4]
 801365c:	b29b      	uxth	r3, r3
 801365e:	f043 0308 	orr.w	r3, r3, #8
 8013662:	b29a      	uxth	r2, r3
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
  }
}
 8013668:	e007      	b.n	801367a <TIM_SelectCCDMA+0x34>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	889b      	ldrh	r3, [r3, #4]
 801366e:	b29b      	uxth	r3, r3
 8013670:	f023 0308 	bic.w	r3, r3, #8
 8013674:	b29a      	uxth	r2, r3
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	809a      	strh	r2, [r3, #4]
}
 801367a:	bf00      	nop
 801367c:	370c      	adds	r7, #12
 801367e:	46bd      	mov	sp, r7
 8013680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013684:	4770      	bx	lr

08013686 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8013686:	b480      	push	{r7}
 8013688:	b083      	sub	sp, #12
 801368a:	af00      	add	r7, sp, #0
 801368c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	891b      	ldrh	r3, [r3, #8]
 8013692:	b29b      	uxth	r3, r3
 8013694:	f023 0307 	bic.w	r3, r3, #7
 8013698:	b29a      	uxth	r2, r3
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	811a      	strh	r2, [r3, #8]
}
 801369e:	bf00      	nop
 80136a0:	370c      	adds	r7, #12
 80136a2:	46bd      	mov	sp, r7
 80136a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a8:	4770      	bx	lr

080136aa <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 80136aa:	b580      	push	{r7, lr}
 80136ac:	b082      	sub	sp, #8
 80136ae:	af00      	add	r7, sp, #0
 80136b0:	6078      	str	r0, [r7, #4]
 80136b2:	460b      	mov	r3, r1
 80136b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 80136b6:	887b      	ldrh	r3, [r7, #2]
 80136b8:	4619      	mov	r1, r3
 80136ba:	6878      	ldr	r0, [r7, #4]
 80136bc:	f000 f888 	bl	80137d0 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	891b      	ldrh	r3, [r3, #8]
 80136c4:	b29b      	uxth	r3, r3
 80136c6:	f043 0307 	orr.w	r3, r3, #7
 80136ca:	b29a      	uxth	r2, r3
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	811a      	strh	r2, [r3, #8]
}
 80136d0:	bf00      	nop
 80136d2:	3708      	adds	r7, #8
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}

080136d8 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b084      	sub	sp, #16
 80136dc:	af00      	add	r7, sp, #0
 80136de:	60f8      	str	r0, [r7, #12]
 80136e0:	4608      	mov	r0, r1
 80136e2:	4611      	mov	r1, r2
 80136e4:	461a      	mov	r2, r3
 80136e6:	4603      	mov	r3, r0
 80136e8:	817b      	strh	r3, [r7, #10]
 80136ea:	460b      	mov	r3, r1
 80136ec:	813b      	strh	r3, [r7, #8]
 80136ee:	4613      	mov	r3, r2
 80136f0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 80136f2:	897b      	ldrh	r3, [r7, #10]
 80136f4:	2b60      	cmp	r3, #96	; 0x60
 80136f6:	d106      	bne.n	8013706 <TIM_TIxExternalClockConfig+0x2e>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 80136f8:	88fb      	ldrh	r3, [r7, #6]
 80136fa:	8939      	ldrh	r1, [r7, #8]
 80136fc:	2201      	movs	r2, #1
 80136fe:	68f8      	ldr	r0, [r7, #12]
 8013700:	f000 f9bf 	bl	8013a82 <TI2_Config>
 8013704:	e005      	b.n	8013712 <TIM_TIxExternalClockConfig+0x3a>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8013706:	88fb      	ldrh	r3, [r7, #6]
 8013708:	8939      	ldrh	r1, [r7, #8]
 801370a:	2201      	movs	r2, #1
 801370c:	68f8      	ldr	r0, [r7, #12]
 801370e:	f000 f975 	bl	80139fc <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8013712:	897b      	ldrh	r3, [r7, #10]
 8013714:	4619      	mov	r1, r3
 8013716:	68f8      	ldr	r0, [r7, #12]
 8013718:	f000 f85a 	bl	80137d0 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	891b      	ldrh	r3, [r3, #8]
 8013720:	b29b      	uxth	r3, r3
 8013722:	f043 0307 	orr.w	r3, r3, #7
 8013726:	b29a      	uxth	r2, r3
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	811a      	strh	r2, [r3, #8]
}
 801372c:	bf00      	nop
 801372e:	3710      	adds	r7, #16
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}

08013734 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b086      	sub	sp, #24
 8013738:	af00      	add	r7, sp, #0
 801373a:	60f8      	str	r0, [r7, #12]
 801373c:	4608      	mov	r0, r1
 801373e:	4611      	mov	r1, r2
 8013740:	461a      	mov	r2, r3
 8013742:	4603      	mov	r3, r0
 8013744:	817b      	strh	r3, [r7, #10]
 8013746:	460b      	mov	r3, r1
 8013748:	813b      	strh	r3, [r7, #8]
 801374a:	4613      	mov	r3, r2
 801374c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 801374e:	2300      	movs	r3, #0
 8013750:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8013752:	88fb      	ldrh	r3, [r7, #6]
 8013754:	893a      	ldrh	r2, [r7, #8]
 8013756:	8979      	ldrh	r1, [r7, #10]
 8013758:	68f8      	ldr	r0, [r7, #12]
 801375a:	f000 f8a9 	bl	80138b0 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	891b      	ldrh	r3, [r3, #8]
 8013762:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8013764:	8afb      	ldrh	r3, [r7, #22]
 8013766:	f023 0307 	bic.w	r3, r3, #7
 801376a:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 801376c:	8afb      	ldrh	r3, [r7, #22]
 801376e:	f043 0307 	orr.w	r3, r3, #7
 8013772:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8013774:	8afb      	ldrh	r3, [r7, #22]
 8013776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801377a:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 801377c:	8afb      	ldrh	r3, [r7, #22]
 801377e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8013782:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	8afa      	ldrh	r2, [r7, #22]
 8013788:	811a      	strh	r2, [r3, #8]
}
 801378a:	bf00      	nop
 801378c:	3718      	adds	r7, #24
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}

08013792 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8013792:	b580      	push	{r7, lr}
 8013794:	b084      	sub	sp, #16
 8013796:	af00      	add	r7, sp, #0
 8013798:	60f8      	str	r0, [r7, #12]
 801379a:	4608      	mov	r0, r1
 801379c:	4611      	mov	r1, r2
 801379e:	461a      	mov	r2, r3
 80137a0:	4603      	mov	r3, r0
 80137a2:	817b      	strh	r3, [r7, #10]
 80137a4:	460b      	mov	r3, r1
 80137a6:	813b      	strh	r3, [r7, #8]
 80137a8:	4613      	mov	r3, r2
 80137aa:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80137ac:	88fb      	ldrh	r3, [r7, #6]
 80137ae:	893a      	ldrh	r2, [r7, #8]
 80137b0:	8979      	ldrh	r1, [r7, #10]
 80137b2:	68f8      	ldr	r0, [r7, #12]
 80137b4:	f000 f87c 	bl	80138b0 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	891b      	ldrh	r3, [r3, #8]
 80137bc:	b29b      	uxth	r3, r3
 80137be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80137c2:	b29a      	uxth	r2, r3
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	811a      	strh	r2, [r3, #8]
}
 80137c8:	bf00      	nop
 80137ca:	3710      	adds	r7, #16
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}

080137d0 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 80137d0:	b480      	push	{r7}
 80137d2:	b085      	sub	sp, #20
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
 80137d8:	460b      	mov	r3, r1
 80137da:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 80137dc:	2300      	movs	r3, #0
 80137de:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	891b      	ldrh	r3, [r3, #8]
 80137e4:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80137e6:	89fb      	ldrh	r3, [r7, #14]
 80137e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80137ec:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80137ee:	89fa      	ldrh	r2, [r7, #14]
 80137f0:	887b      	ldrh	r3, [r7, #2]
 80137f2:	4313      	orrs	r3, r2
 80137f4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	89fa      	ldrh	r2, [r7, #14]
 80137fa:	811a      	strh	r2, [r3, #8]
}
 80137fc:	bf00      	nop
 80137fe:	3714      	adds	r7, #20
 8013800:	46bd      	mov	sp, r7
 8013802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013806:	4770      	bx	lr

08013808 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8013808:	b480      	push	{r7}
 801380a:	b083      	sub	sp, #12
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
 8013810:	460b      	mov	r3, r1
 8013812:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	889b      	ldrh	r3, [r3, #4]
 8013818:	b29b      	uxth	r3, r3
 801381a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801381e:	b29a      	uxth	r2, r3
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	889b      	ldrh	r3, [r3, #4]
 8013828:	b29a      	uxth	r2, r3
 801382a:	887b      	ldrh	r3, [r7, #2]
 801382c:	4313      	orrs	r3, r2
 801382e:	b29a      	uxth	r2, r3
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	809a      	strh	r2, [r3, #4]
}
 8013834:	bf00      	nop
 8013836:	370c      	adds	r7, #12
 8013838:	46bd      	mov	sp, r7
 801383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383e:	4770      	bx	lr

08013840 <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 8013840:	b480      	push	{r7}
 8013842:	b083      	sub	sp, #12
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
 8013848:	460b      	mov	r3, r1
 801384a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	891b      	ldrh	r3, [r3, #8]
 8013850:	b29b      	uxth	r3, r3
 8013852:	f023 0307 	bic.w	r3, r3, #7
 8013856:	b29a      	uxth	r2, r3
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	891b      	ldrh	r3, [r3, #8]
 8013860:	b29a      	uxth	r2, r3
 8013862:	887b      	ldrh	r3, [r7, #2]
 8013864:	4313      	orrs	r3, r2
 8013866:	b29a      	uxth	r2, r3
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	811a      	strh	r2, [r3, #8]
}
 801386c:	bf00      	nop
 801386e:	370c      	adds	r7, #12
 8013870:	46bd      	mov	sp, r7
 8013872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013876:	4770      	bx	lr

08013878 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 8013878:	b480      	push	{r7}
 801387a:	b083      	sub	sp, #12
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	460b      	mov	r3, r1
 8013882:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	891b      	ldrh	r3, [r3, #8]
 8013888:	b29b      	uxth	r3, r3
 801388a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801388e:	b29a      	uxth	r2, r3
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	891b      	ldrh	r3, [r3, #8]
 8013898:	b29a      	uxth	r2, r3
 801389a:	887b      	ldrh	r3, [r7, #2]
 801389c:	4313      	orrs	r3, r2
 801389e:	b29a      	uxth	r2, r3
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	811a      	strh	r2, [r3, #8]
}
 80138a4:	bf00      	nop
 80138a6:	370c      	adds	r7, #12
 80138a8:	46bd      	mov	sp, r7
 80138aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ae:	4770      	bx	lr

080138b0 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80138b0:	b480      	push	{r7}
 80138b2:	b087      	sub	sp, #28
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	60f8      	str	r0, [r7, #12]
 80138b8:	4608      	mov	r0, r1
 80138ba:	4611      	mov	r1, r2
 80138bc:	461a      	mov	r2, r3
 80138be:	4603      	mov	r3, r0
 80138c0:	817b      	strh	r3, [r7, #10]
 80138c2:	460b      	mov	r3, r1
 80138c4:	813b      	strh	r3, [r7, #8]
 80138c6:	4613      	mov	r3, r2
 80138c8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80138ca:	2300      	movs	r3, #0
 80138cc:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	891b      	ldrh	r3, [r3, #8]
 80138d2:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80138d4:	8afb      	ldrh	r3, [r7, #22]
 80138d6:	b2db      	uxtb	r3, r3
 80138d8:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80138da:	88fb      	ldrh	r3, [r7, #6]
 80138dc:	021b      	lsls	r3, r3, #8
 80138de:	b29a      	uxth	r2, r3
 80138e0:	893b      	ldrh	r3, [r7, #8]
 80138e2:	4313      	orrs	r3, r2
 80138e4:	b29a      	uxth	r2, r3
 80138e6:	897b      	ldrh	r3, [r7, #10]
 80138e8:	4313      	orrs	r3, r2
 80138ea:	b29a      	uxth	r2, r3
 80138ec:	8afb      	ldrh	r3, [r7, #22]
 80138ee:	4313      	orrs	r3, r2
 80138f0:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	8afa      	ldrh	r2, [r7, #22]
 80138f6:	811a      	strh	r2, [r3, #8]
}
 80138f8:	bf00      	nop
 80138fa:	371c      	adds	r7, #28
 80138fc:	46bd      	mov	sp, r7
 80138fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013902:	4770      	bx	lr

08013904 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8013904:	b480      	push	{r7}
 8013906:	b087      	sub	sp, #28
 8013908:	af00      	add	r7, sp, #0
 801390a:	60f8      	str	r0, [r7, #12]
 801390c:	4608      	mov	r0, r1
 801390e:	4611      	mov	r1, r2
 8013910:	461a      	mov	r2, r3
 8013912:	4603      	mov	r3, r0
 8013914:	817b      	strh	r3, [r7, #10]
 8013916:	460b      	mov	r3, r1
 8013918:	813b      	strh	r3, [r7, #8]
 801391a:	4613      	mov	r3, r2
 801391c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 801391e:	2300      	movs	r3, #0
 8013920:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8013922:	2300      	movs	r3, #0
 8013924:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8013926:	2300      	movs	r3, #0
 8013928:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	891b      	ldrh	r3, [r3, #8]
 801392e:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	8b1b      	ldrh	r3, [r3, #24]
 8013934:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	8c1b      	ldrh	r3, [r3, #32]
 801393a:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 801393c:	8afb      	ldrh	r3, [r7, #22]
 801393e:	f023 0307 	bic.w	r3, r3, #7
 8013942:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8013944:	8afa      	ldrh	r2, [r7, #22]
 8013946:	897b      	ldrh	r3, [r7, #10]
 8013948:	4313      	orrs	r3, r2
 801394a:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 801394c:	8abb      	ldrh	r3, [r7, #20]
 801394e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013952:	f023 0303 	bic.w	r3, r3, #3
 8013956:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8013958:	8abb      	ldrh	r3, [r7, #20]
 801395a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801395e:	f043 0301 	orr.w	r3, r3, #1
 8013962:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8013964:	8a7b      	ldrh	r3, [r7, #18]
 8013966:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801396a:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 801396c:	88fb      	ldrh	r3, [r7, #6]
 801396e:	011b      	lsls	r3, r3, #4
 8013970:	b29a      	uxth	r2, r3
 8013972:	893b      	ldrh	r3, [r7, #8]
 8013974:	4313      	orrs	r3, r2
 8013976:	b29a      	uxth	r2, r3
 8013978:	8a7b      	ldrh	r3, [r7, #18]
 801397a:	4313      	orrs	r3, r2
 801397c:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	8afa      	ldrh	r2, [r7, #22]
 8013982:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	8aba      	ldrh	r2, [r7, #20]
 8013988:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	8a7a      	ldrh	r2, [r7, #18]
 801398e:	841a      	strh	r2, [r3, #32]
}
 8013990:	bf00      	nop
 8013992:	371c      	adds	r7, #28
 8013994:	46bd      	mov	sp, r7
 8013996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399a:	4770      	bx	lr

0801399c <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801399c:	b480      	push	{r7}
 801399e:	b083      	sub	sp, #12
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
 80139a4:	460b      	mov	r3, r1
 80139a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80139a8:	78fb      	ldrb	r3, [r7, #3]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d008      	beq.n	80139c0 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	889b      	ldrh	r3, [r3, #4]
 80139b2:	b29b      	uxth	r3, r3
 80139b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139b8:	b29a      	uxth	r2, r3
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	809a      	strh	r2, [r3, #4]
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
  }
}
 80139be:	e007      	b.n	80139d0 <TIM_SelectHallSensor+0x34>
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	889b      	ldrh	r3, [r3, #4]
 80139c4:	b29b      	uxth	r3, r3
 80139c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80139ca:	b29a      	uxth	r2, r3
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	809a      	strh	r2, [r3, #4]
}
 80139d0:	bf00      	nop
 80139d2:	370c      	adds	r7, #12
 80139d4:	46bd      	mov	sp, r7
 80139d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139da:	4770      	bx	lr

080139dc <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 80139dc:	b480      	push	{r7}
 80139de:	b083      	sub	sp, #12
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
 80139e4:	460b      	mov	r3, r1
 80139e6:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	887a      	ldrh	r2, [r7, #2]
 80139ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 80139f0:	bf00      	nop
 80139f2:	370c      	adds	r7, #12
 80139f4:	46bd      	mov	sp, r7
 80139f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fa:	4770      	bx	lr

080139fc <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80139fc:	b480      	push	{r7}
 80139fe:	b087      	sub	sp, #28
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	60f8      	str	r0, [r7, #12]
 8013a04:	4608      	mov	r0, r1
 8013a06:	4611      	mov	r1, r2
 8013a08:	461a      	mov	r2, r3
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	817b      	strh	r3, [r7, #10]
 8013a0e:	460b      	mov	r3, r1
 8013a10:	813b      	strh	r3, [r7, #8]
 8013a12:	4613      	mov	r3, r2
 8013a14:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8013a16:	2300      	movs	r3, #0
 8013a18:	82fb      	strh	r3, [r7, #22]
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	8c1b      	ldrh	r3, [r3, #32]
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	f023 0301 	bic.w	r3, r3, #1
 8013a28:	b29a      	uxth	r2, r3
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	8b1b      	ldrh	r3, [r3, #24]
 8013a32:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	8c1b      	ldrh	r3, [r3, #32]
 8013a38:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8013a3a:	8afb      	ldrh	r3, [r7, #22]
 8013a3c:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8013a40:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8013a42:	88fb      	ldrh	r3, [r7, #6]
 8013a44:	011b      	lsls	r3, r3, #4
 8013a46:	b29a      	uxth	r2, r3
 8013a48:	893b      	ldrh	r3, [r7, #8]
 8013a4a:	4313      	orrs	r3, r2
 8013a4c:	b29a      	uxth	r2, r3
 8013a4e:	8afb      	ldrh	r3, [r7, #22]
 8013a50:	4313      	orrs	r3, r2
 8013a52:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013a54:	8abb      	ldrh	r3, [r7, #20]
 8013a56:	f023 030a 	bic.w	r3, r3, #10
 8013a5a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8013a5c:	897a      	ldrh	r2, [r7, #10]
 8013a5e:	8abb      	ldrh	r3, [r7, #20]
 8013a60:	4313      	orrs	r3, r2
 8013a62:	b29b      	uxth	r3, r3
 8013a64:	f043 0301 	orr.w	r3, r3, #1
 8013a68:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	8afa      	ldrh	r2, [r7, #22]
 8013a6e:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	8aba      	ldrh	r2, [r7, #20]
 8013a74:	841a      	strh	r2, [r3, #32]
}
 8013a76:	bf00      	nop
 8013a78:	371c      	adds	r7, #28
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a80:	4770      	bx	lr

08013a82 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8013a82:	b480      	push	{r7}
 8013a84:	b087      	sub	sp, #28
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	60f8      	str	r0, [r7, #12]
 8013a8a:	4608      	mov	r0, r1
 8013a8c:	4611      	mov	r1, r2
 8013a8e:	461a      	mov	r2, r3
 8013a90:	4603      	mov	r3, r0
 8013a92:	817b      	strh	r3, [r7, #10]
 8013a94:	460b      	mov	r3, r1
 8013a96:	813b      	strh	r3, [r7, #8]
 8013a98:	4613      	mov	r3, r2
 8013a9a:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	82fb      	strh	r3, [r7, #22]
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	82bb      	strh	r3, [r7, #20]
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	8c1b      	ldrh	r3, [r3, #32]
 8013aac:	b29b      	uxth	r3, r3
 8013aae:	f023 0310 	bic.w	r3, r3, #16
 8013ab2:	b29a      	uxth	r2, r3
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	8b1b      	ldrh	r3, [r3, #24]
 8013abc:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	8c1b      	ldrh	r3, [r3, #32]
 8013ac2:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8013ac4:	897b      	ldrh	r3, [r7, #10]
 8013ac6:	011b      	lsls	r3, r3, #4
 8013ac8:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8013aca:	8afb      	ldrh	r3, [r7, #22]
 8013acc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013ad0:	051b      	lsls	r3, r3, #20
 8013ad2:	0d1b      	lsrs	r3, r3, #20
 8013ad4:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8013ad6:	88fb      	ldrh	r3, [r7, #6]
 8013ad8:	031b      	lsls	r3, r3, #12
 8013ada:	b29a      	uxth	r2, r3
 8013adc:	8afb      	ldrh	r3, [r7, #22]
 8013ade:	4313      	orrs	r3, r2
 8013ae0:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8013ae2:	893b      	ldrh	r3, [r7, #8]
 8013ae4:	021b      	lsls	r3, r3, #8
 8013ae6:	b29a      	uxth	r2, r3
 8013ae8:	8afb      	ldrh	r3, [r7, #22]
 8013aea:	4313      	orrs	r3, r2
 8013aec:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013aee:	8abb      	ldrh	r3, [r7, #20]
 8013af0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013af4:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8013af6:	8a7a      	ldrh	r2, [r7, #18]
 8013af8:	8abb      	ldrh	r3, [r7, #20]
 8013afa:	4313      	orrs	r3, r2
 8013afc:	b29b      	uxth	r3, r3
 8013afe:	f043 0310 	orr.w	r3, r3, #16
 8013b02:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	8afa      	ldrh	r2, [r7, #22]
 8013b08:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	8aba      	ldrh	r2, [r7, #20]
 8013b0e:	841a      	strh	r2, [r3, #32]
}
 8013b10:	bf00      	nop
 8013b12:	371c      	adds	r7, #28
 8013b14:	46bd      	mov	sp, r7
 8013b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1a:	4770      	bx	lr

08013b1c <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8013b1c:	b480      	push	{r7}
 8013b1e:	b087      	sub	sp, #28
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	60f8      	str	r0, [r7, #12]
 8013b24:	4608      	mov	r0, r1
 8013b26:	4611      	mov	r1, r2
 8013b28:	461a      	mov	r2, r3
 8013b2a:	4603      	mov	r3, r0
 8013b2c:	817b      	strh	r3, [r7, #10]
 8013b2e:	460b      	mov	r3, r1
 8013b30:	813b      	strh	r3, [r7, #8]
 8013b32:	4613      	mov	r3, r2
 8013b34:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8013b36:	2300      	movs	r3, #0
 8013b38:	82fb      	strh	r3, [r7, #22]
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	82bb      	strh	r3, [r7, #20]
 8013b3e:	2300      	movs	r3, #0
 8013b40:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	8c1b      	ldrh	r3, [r3, #32]
 8013b46:	b29b      	uxth	r3, r3
 8013b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013b4c:	b29a      	uxth	r2, r3
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	8b9b      	ldrh	r3, [r3, #28]
 8013b56:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	8c1b      	ldrh	r3, [r3, #32]
 8013b5c:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8013b5e:	897b      	ldrh	r3, [r7, #10]
 8013b60:	021b      	lsls	r3, r3, #8
 8013b62:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8013b64:	8afb      	ldrh	r3, [r7, #22]
 8013b66:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8013b6a:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8013b6c:	88fb      	ldrh	r3, [r7, #6]
 8013b6e:	011b      	lsls	r3, r3, #4
 8013b70:	b29a      	uxth	r2, r3
 8013b72:	893b      	ldrh	r3, [r7, #8]
 8013b74:	4313      	orrs	r3, r2
 8013b76:	b29a      	uxth	r2, r3
 8013b78:	8afb      	ldrh	r3, [r7, #22]
 8013b7a:	4313      	orrs	r3, r2
 8013b7c:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8013b7e:	8abb      	ldrh	r3, [r7, #20]
 8013b80:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8013b84:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8013b86:	8a7a      	ldrh	r2, [r7, #18]
 8013b88:	8abb      	ldrh	r3, [r7, #20]
 8013b8a:	4313      	orrs	r3, r2
 8013b8c:	b29b      	uxth	r3, r3
 8013b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013b92:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	8afa      	ldrh	r2, [r7, #22]
 8013b98:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	8aba      	ldrh	r2, [r7, #20]
 8013b9e:	841a      	strh	r2, [r3, #32]
}
 8013ba0:	bf00      	nop
 8013ba2:	371c      	adds	r7, #28
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013baa:	4770      	bx	lr

08013bac <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8013bac:	b480      	push	{r7}
 8013bae:	b087      	sub	sp, #28
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	60f8      	str	r0, [r7, #12]
 8013bb4:	4608      	mov	r0, r1
 8013bb6:	4611      	mov	r1, r2
 8013bb8:	461a      	mov	r2, r3
 8013bba:	4603      	mov	r3, r0
 8013bbc:	817b      	strh	r3, [r7, #10]
 8013bbe:	460b      	mov	r3, r1
 8013bc0:	813b      	strh	r3, [r7, #8]
 8013bc2:	4613      	mov	r3, r2
 8013bc4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	82fb      	strh	r3, [r7, #22]
 8013bca:	2300      	movs	r3, #0
 8013bcc:	82bb      	strh	r3, [r7, #20]
 8013bce:	2300      	movs	r3, #0
 8013bd0:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	8c1b      	ldrh	r3, [r3, #32]
 8013bd6:	b29b      	uxth	r3, r3
 8013bd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013bdc:	b29a      	uxth	r2, r3
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	8b9b      	ldrh	r3, [r3, #28]
 8013be6:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	8c1b      	ldrh	r3, [r3, #32]
 8013bec:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8013bee:	897b      	ldrh	r3, [r7, #10]
 8013bf0:	031b      	lsls	r3, r3, #12
 8013bf2:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8013bf4:	8afb      	ldrh	r3, [r7, #22]
 8013bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013bfa:	051b      	lsls	r3, r3, #20
 8013bfc:	0d1b      	lsrs	r3, r3, #20
 8013bfe:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8013c00:	893b      	ldrh	r3, [r7, #8]
 8013c02:	021b      	lsls	r3, r3, #8
 8013c04:	b29a      	uxth	r2, r3
 8013c06:	8afb      	ldrh	r3, [r7, #22]
 8013c08:	4313      	orrs	r3, r2
 8013c0a:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8013c0c:	88fb      	ldrh	r3, [r7, #6]
 8013c0e:	031b      	lsls	r3, r3, #12
 8013c10:	b29a      	uxth	r2, r3
 8013c12:	8afb      	ldrh	r3, [r7, #22]
 8013c14:	4313      	orrs	r3, r2
 8013c16:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8013c18:	8abb      	ldrh	r3, [r7, #20]
 8013c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013c1e:	045b      	lsls	r3, r3, #17
 8013c20:	0c5b      	lsrs	r3, r3, #17
 8013c22:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8013c24:	8a7a      	ldrh	r2, [r7, #18]
 8013c26:	8abb      	ldrh	r3, [r7, #20]
 8013c28:	4313      	orrs	r3, r2
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013c30:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	8afa      	ldrh	r2, [r7, #22]
 8013c36:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	8aba      	ldrh	r2, [r7, #20]
 8013c3c:	841a      	strh	r2, [r3, #32]
}
 8013c3e:	bf00      	nop
 8013c40:	371c      	adds	r7, #28
 8013c42:	46bd      	mov	sp, r7
 8013c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c48:	4770      	bx	lr
 8013c4a:	bf00      	nop

08013c4c <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b082      	sub	sp, #8
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	4a3b      	ldr	r2, [pc, #236]	; (8013d44 <USART_DeInit+0xf8>)
 8013c58:	4293      	cmp	r3, r2
 8013c5a:	d108      	bne.n	8013c6e <USART_DeInit+0x22>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8013c5c:	2101      	movs	r1, #1
 8013c5e:	2010      	movs	r0, #16
 8013c60:	f7fb fde0 	bl	800f824 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8013c64:	2100      	movs	r1, #0
 8013c66:	2010      	movs	r0, #16
 8013c68:	f7fb fddc 	bl	800f824 <RCC_APB2PeriphResetCmd>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
    }
  }
}
 8013c6c:	e065      	b.n	8013d3a <USART_DeInit+0xee>
  else if (USARTx == USART2)
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	4a35      	ldr	r2, [pc, #212]	; (8013d48 <USART_DeInit+0xfc>)
 8013c72:	4293      	cmp	r3, r2
 8013c74:	d10a      	bne.n	8013c8c <USART_DeInit+0x40>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8013c76:	2101      	movs	r1, #1
 8013c78:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8013c7c:	f7fb fdb2 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8013c80:	2100      	movs	r1, #0
 8013c82:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8013c86:	f7fb fdad 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 8013c8a:	e056      	b.n	8013d3a <USART_DeInit+0xee>
  else if (USARTx == USART3)
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	4a2f      	ldr	r2, [pc, #188]	; (8013d4c <USART_DeInit+0x100>)
 8013c90:	4293      	cmp	r3, r2
 8013c92:	d10a      	bne.n	8013caa <USART_DeInit+0x5e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8013c94:	2101      	movs	r1, #1
 8013c96:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8013c9a:	f7fb fda3 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8013c9e:	2100      	movs	r1, #0
 8013ca0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8013ca4:	f7fb fd9e 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 8013ca8:	e047      	b.n	8013d3a <USART_DeInit+0xee>
  else if (USARTx == UART4)
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	4a28      	ldr	r2, [pc, #160]	; (8013d50 <USART_DeInit+0x104>)
 8013cae:	4293      	cmp	r3, r2
 8013cb0:	d10a      	bne.n	8013cc8 <USART_DeInit+0x7c>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8013cb2:	2101      	movs	r1, #1
 8013cb4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8013cb8:	f7fb fd94 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8013cbc:	2100      	movs	r1, #0
 8013cbe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8013cc2:	f7fb fd8f 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 8013cc6:	e038      	b.n	8013d3a <USART_DeInit+0xee>
  else if (USARTx == UART5)
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	4a22      	ldr	r2, [pc, #136]	; (8013d54 <USART_DeInit+0x108>)
 8013ccc:	4293      	cmp	r3, r2
 8013cce:	d10a      	bne.n	8013ce6 <USART_DeInit+0x9a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8013cd0:	2101      	movs	r1, #1
 8013cd2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8013cd6:	f7fb fd85 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8013cda:	2100      	movs	r1, #0
 8013cdc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8013ce0:	f7fb fd80 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 8013ce4:	e029      	b.n	8013d3a <USART_DeInit+0xee>
  else if (USARTx == USART6)
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	4a1b      	ldr	r2, [pc, #108]	; (8013d58 <USART_DeInit+0x10c>)
 8013cea:	4293      	cmp	r3, r2
 8013cec:	d108      	bne.n	8013d00 <USART_DeInit+0xb4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8013cee:	2101      	movs	r1, #1
 8013cf0:	2020      	movs	r0, #32
 8013cf2:	f7fb fd97 	bl	800f824 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8013cf6:	2100      	movs	r1, #0
 8013cf8:	2020      	movs	r0, #32
 8013cfa:	f7fb fd93 	bl	800f824 <RCC_APB2PeriphResetCmd>
}
 8013cfe:	e01c      	b.n	8013d3a <USART_DeInit+0xee>
  else if (USARTx == UART7)
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	4a16      	ldr	r2, [pc, #88]	; (8013d5c <USART_DeInit+0x110>)
 8013d04:	4293      	cmp	r3, r2
 8013d06:	d10a      	bne.n	8013d1e <USART_DeInit+0xd2>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 8013d08:	2101      	movs	r1, #1
 8013d0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8013d0e:	f7fb fd69 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 8013d12:	2100      	movs	r1, #0
 8013d14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8013d18:	f7fb fd64 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 8013d1c:	e00d      	b.n	8013d3a <USART_DeInit+0xee>
    if (USARTx == UART8)
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	4a0f      	ldr	r2, [pc, #60]	; (8013d60 <USART_DeInit+0x114>)
 8013d22:	4293      	cmp	r3, r2
 8013d24:	d109      	bne.n	8013d3a <USART_DeInit+0xee>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
 8013d26:	2101      	movs	r1, #1
 8013d28:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8013d2c:	f7fb fd5a 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
 8013d30:	2100      	movs	r1, #0
 8013d32:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8013d36:	f7fb fd55 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 8013d3a:	bf00      	nop
 8013d3c:	3708      	adds	r7, #8
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}
 8013d42:	bf00      	nop
 8013d44:	40011000 	.word	0x40011000
 8013d48:	40004400 	.word	0x40004400
 8013d4c:	40004800 	.word	0x40004800
 8013d50:	40004c00 	.word	0x40004c00
 8013d54:	40005000 	.word	0x40005000
 8013d58:	40011400 	.word	0x40011400
 8013d5c:	40007800 	.word	0x40007800
 8013d60:	40007c00 	.word	0x40007c00

08013d64 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b08a      	sub	sp, #40	; 0x28
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
 8013d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8013d6e:	2300      	movs	r3, #0
 8013d70:	627b      	str	r3, [r7, #36]	; 0x24
 8013d72:	2300      	movs	r3, #0
 8013d74:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8013d76:	2300      	movs	r3, #0
 8013d78:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	8a1b      	ldrh	r3, [r3, #16]
 8013d82:	b29b      	uxth	r3, r3
 8013d84:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8013d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8013d8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8013d8e:	683b      	ldr	r3, [r7, #0]
 8013d90:	88db      	ldrh	r3, [r3, #6]
 8013d92:	461a      	mov	r2, r3
 8013d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d96:	4313      	orrs	r3, r2
 8013d98:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8013d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9c:	b29a      	uxth	r2, r3
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	899b      	ldrh	r3, [r3, #12]
 8013da6:	b29b      	uxth	r3, r3
 8013da8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8013daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dac:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8013db0:	f023 030c 	bic.w	r3, r3, #12
 8013db4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	889a      	ldrh	r2, [r3, #4]
 8013dba:	683b      	ldr	r3, [r7, #0]
 8013dbc:	891b      	ldrh	r3, [r3, #8]
 8013dbe:	4313      	orrs	r3, r2
 8013dc0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8013dc6:	4313      	orrs	r3, r2
 8013dc8:	b29b      	uxth	r3, r3
 8013dca:	461a      	mov	r2, r3
 8013dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dce:	4313      	orrs	r3, r2
 8013dd0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8013dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd4:	b29a      	uxth	r2, r3
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	8a9b      	ldrh	r3, [r3, #20]
 8013dde:	b29b      	uxth	r3, r3
 8013de0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8013de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013de8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	899b      	ldrh	r3, [r3, #12]
 8013dee:	461a      	mov	r2, r3
 8013df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df2:	4313      	orrs	r3, r2
 8013df4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8013df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df8:	b29a      	uxth	r2, r3
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8013dfe:	f107 0308 	add.w	r3, r7, #8
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7fb fad8 	bl	800f3b8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	4a30      	ldr	r2, [pc, #192]	; (8013ecc <USART_Init+0x168>)
 8013e0c:	4293      	cmp	r3, r2
 8013e0e:	d003      	beq.n	8013e18 <USART_Init+0xb4>
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	4a2f      	ldr	r2, [pc, #188]	; (8013ed0 <USART_Init+0x16c>)
 8013e14:	4293      	cmp	r3, r2
 8013e16:	d102      	bne.n	8013e1e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	623b      	str	r3, [r7, #32]
 8013e1c:	e001      	b.n	8013e22 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	899b      	ldrh	r3, [r3, #12]
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	b21b      	sxth	r3, r3
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	da0c      	bge.n	8013e48 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8013e2e:	6a3a      	ldr	r2, [r7, #32]
 8013e30:	4613      	mov	r3, r2
 8013e32:	009b      	lsls	r3, r3, #2
 8013e34:	4413      	add	r3, r2
 8013e36:	009a      	lsls	r2, r3, #2
 8013e38:	441a      	add	r2, r3
 8013e3a:	683b      	ldr	r3, [r7, #0]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	005b      	lsls	r3, r3, #1
 8013e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e44:	61fb      	str	r3, [r7, #28]
 8013e46:	e00b      	b.n	8013e60 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8013e48:	6a3a      	ldr	r2, [r7, #32]
 8013e4a:	4613      	mov	r3, r2
 8013e4c:	009b      	lsls	r3, r3, #2
 8013e4e:	4413      	add	r3, r2
 8013e50:	009a      	lsls	r2, r3, #2
 8013e52:	441a      	add	r2, r3
 8013e54:	683b      	ldr	r3, [r7, #0]
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	009b      	lsls	r3, r3, #2
 8013e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e5e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8013e60:	69fb      	ldr	r3, [r7, #28]
 8013e62:	4a1c      	ldr	r2, [pc, #112]	; (8013ed4 <USART_Init+0x170>)
 8013e64:	fba2 2303 	umull	r2, r3, r2, r3
 8013e68:	095b      	lsrs	r3, r3, #5
 8013e6a:	011b      	lsls	r3, r3, #4
 8013e6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8013e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e70:	091b      	lsrs	r3, r3, #4
 8013e72:	2264      	movs	r2, #100	; 0x64
 8013e74:	fb02 f303 	mul.w	r3, r2, r3
 8013e78:	69fa      	ldr	r2, [r7, #28]
 8013e7a:	1ad3      	subs	r3, r2, r3
 8013e7c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	899b      	ldrh	r3, [r3, #12]
 8013e82:	b29b      	uxth	r3, r3
 8013e84:	b21b      	sxth	r3, r3
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	da0c      	bge.n	8013ea4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8013e8a:	69bb      	ldr	r3, [r7, #24]
 8013e8c:	00db      	lsls	r3, r3, #3
 8013e8e:	3332      	adds	r3, #50	; 0x32
 8013e90:	4a10      	ldr	r2, [pc, #64]	; (8013ed4 <USART_Init+0x170>)
 8013e92:	fba2 2303 	umull	r2, r3, r2, r3
 8013e96:	095b      	lsrs	r3, r3, #5
 8013e98:	f003 0307 	and.w	r3, r3, #7
 8013e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e9e:	4313      	orrs	r3, r2
 8013ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8013ea2:	e00b      	b.n	8013ebc <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8013ea4:	69bb      	ldr	r3, [r7, #24]
 8013ea6:	011b      	lsls	r3, r3, #4
 8013ea8:	3332      	adds	r3, #50	; 0x32
 8013eaa:	4a0a      	ldr	r2, [pc, #40]	; (8013ed4 <USART_Init+0x170>)
 8013eac:	fba2 2303 	umull	r2, r3, r2, r3
 8013eb0:	095b      	lsrs	r3, r3, #5
 8013eb2:	f003 030f 	and.w	r3, r3, #15
 8013eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013eb8:	4313      	orrs	r3, r2
 8013eba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8013ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ebe:	b29a      	uxth	r2, r3
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	811a      	strh	r2, [r3, #8]
}
 8013ec4:	bf00      	nop
 8013ec6:	3728      	adds	r7, #40	; 0x28
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	bd80      	pop	{r7, pc}
 8013ecc:	40011000 	.word	0x40011000
 8013ed0:	40011400 	.word	0x40011400
 8013ed4:	51eb851f 	.word	0x51eb851f

08013ed8 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8013ed8:	b480      	push	{r7}
 8013eda:	b083      	sub	sp, #12
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8013ee6:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	2200      	movs	r2, #0
 8013eec:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	220c      	movs	r2, #12
 8013efe:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	2200      	movs	r2, #0
 8013f04:	819a      	strh	r2, [r3, #12]
}
 8013f06:	bf00      	nop
 8013f08:	370c      	adds	r7, #12
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f10:	4770      	bx	lr

08013f12 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8013f12:	b480      	push	{r7}
 8013f14:	b085      	sub	sp, #20
 8013f16:	af00      	add	r7, sp, #0
 8013f18:	6078      	str	r0, [r7, #4]
 8013f1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	8a1b      	ldrh	r3, [r3, #16]
 8013f24:	b29b      	uxth	r3, r3
 8013f26:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8013f2e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8013f30:	683b      	ldr	r3, [r7, #0]
 8013f32:	881a      	ldrh	r2, [r3, #0]
 8013f34:	683b      	ldr	r3, [r7, #0]
 8013f36:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8013f38:	4313      	orrs	r3, r2
 8013f3a:	b29a      	uxth	r2, r3
 8013f3c:	683b      	ldr	r3, [r7, #0]
 8013f3e:	889b      	ldrh	r3, [r3, #4]
 8013f40:	4313      	orrs	r3, r2
 8013f42:	b29a      	uxth	r2, r3
 8013f44:	683b      	ldr	r3, [r7, #0]
 8013f46:	88db      	ldrh	r3, [r3, #6]
 8013f48:	4313      	orrs	r3, r2
 8013f4a:	b29b      	uxth	r3, r3
 8013f4c:	461a      	mov	r2, r3
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	4313      	orrs	r3, r2
 8013f52:	60fb      	str	r3, [r7, #12]
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	b29a      	uxth	r2, r3
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	821a      	strh	r2, [r3, #16]
}
 8013f5c:	bf00      	nop
 8013f5e:	3714      	adds	r7, #20
 8013f60:	46bd      	mov	sp, r7
 8013f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f66:	4770      	bx	lr

08013f68 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8013f68:	b480      	push	{r7}
 8013f6a:	b083      	sub	sp, #12
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2200      	movs	r2, #0
 8013f74:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2200      	movs	r2, #0
 8013f7a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2200      	movs	r2, #0
 8013f80:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	2200      	movs	r2, #0
 8013f86:	80da      	strh	r2, [r3, #6]
}
 8013f88:	bf00      	nop
 8013f8a:	370c      	adds	r7, #12
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f92:	4770      	bx	lr

08013f94 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8013f94:	b480      	push	{r7}
 8013f96:	b083      	sub	sp, #12
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	460b      	mov	r3, r1
 8013f9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8013fa0:	78fb      	ldrb	r3, [r7, #3]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d008      	beq.n	8013fb8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	899b      	ldrh	r3, [r3, #12]
 8013faa:	b29b      	uxth	r3, r3
 8013fac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013fb0:	b29a      	uxth	r2, r3
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8013fb6:	e007      	b.n	8013fc8 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	899b      	ldrh	r3, [r3, #12]
 8013fbc:	b29b      	uxth	r3, r3
 8013fbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013fc2:	b29a      	uxth	r2, r3
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	819a      	strh	r2, [r3, #12]
}
 8013fc8:	bf00      	nop
 8013fca:	370c      	adds	r7, #12
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd2:	4770      	bx	lr

08013fd4 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8013fd4:	b480      	push	{r7}
 8013fd6:	b083      	sub	sp, #12
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]
 8013fdc:	460b      	mov	r3, r1
 8013fde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	8b1b      	ldrh	r3, [r3, #24]
 8013fe4:	b29b      	uxth	r3, r3
 8013fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8013fea:	b29a      	uxth	r2, r3
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	8b1b      	ldrh	r3, [r3, #24]
 8013ff4:	b29a      	uxth	r2, r3
 8013ff6:	78fb      	ldrb	r3, [r7, #3]
 8013ff8:	b29b      	uxth	r3, r3
 8013ffa:	4313      	orrs	r3, r2
 8013ffc:	b29a      	uxth	r2, r3
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	831a      	strh	r2, [r3, #24]
}
 8014002:	bf00      	nop
 8014004:	370c      	adds	r7, #12
 8014006:	46bd      	mov	sp, r7
 8014008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400c:	4770      	bx	lr

0801400e <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801400e:	b480      	push	{r7}
 8014010:	b083      	sub	sp, #12
 8014012:	af00      	add	r7, sp, #0
 8014014:	6078      	str	r0, [r7, #4]
 8014016:	460b      	mov	r3, r1
 8014018:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801401a:	78fb      	ldrb	r3, [r7, #3]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d00a      	beq.n	8014036 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	899b      	ldrh	r3, [r3, #12]
 8014024:	b29b      	uxth	r3, r3
 8014026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801402a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801402e:	b29a      	uxth	r2, r3
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
  }
}  
 8014034:	e007      	b.n	8014046 <USART_OverSampling8Cmd+0x38>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	899b      	ldrh	r3, [r3, #12]
 801403a:	b29b      	uxth	r3, r3
 801403c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8014040:	b29a      	uxth	r2, r3
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	819a      	strh	r2, [r3, #12]
}  
 8014046:	bf00      	nop
 8014048:	370c      	adds	r7, #12
 801404a:	46bd      	mov	sp, r7
 801404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014050:	4770      	bx	lr

08014052 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014052:	b480      	push	{r7}
 8014054:	b083      	sub	sp, #12
 8014056:	af00      	add	r7, sp, #0
 8014058:	6078      	str	r0, [r7, #4]
 801405a:	460b      	mov	r3, r1
 801405c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801405e:	78fb      	ldrb	r3, [r7, #3]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d008      	beq.n	8014076 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	8a9b      	ldrh	r3, [r3, #20]
 8014068:	b29b      	uxth	r3, r3
 801406a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801406e:	b29a      	uxth	r2, r3
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
  }
}
 8014074:	e007      	b.n	8014086 <USART_OneBitMethodCmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	8a9b      	ldrh	r3, [r3, #20]
 801407a:	b29b      	uxth	r3, r3
 801407c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014080:	b29a      	uxth	r2, r3
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	829a      	strh	r2, [r3, #20]
}
 8014086:	bf00      	nop
 8014088:	370c      	adds	r7, #12
 801408a:	46bd      	mov	sp, r7
 801408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014090:	4770      	bx	lr

08014092 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8014092:	b480      	push	{r7}
 8014094:	b083      	sub	sp, #12
 8014096:	af00      	add	r7, sp, #0
 8014098:	6078      	str	r0, [r7, #4]
 801409a:	460b      	mov	r3, r1
 801409c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 801409e:	887b      	ldrh	r3, [r7, #2]
 80140a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140a4:	b29a      	uxth	r2, r3
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	809a      	strh	r2, [r3, #4]
}
 80140aa:	bf00      	nop
 80140ac:	370c      	adds	r7, #12
 80140ae:	46bd      	mov	sp, r7
 80140b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b4:	4770      	bx	lr

080140b6 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80140b6:	b480      	push	{r7}
 80140b8:	b083      	sub	sp, #12
 80140ba:	af00      	add	r7, sp, #0
 80140bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	889b      	ldrh	r3, [r3, #4]
 80140c2:	b29b      	uxth	r3, r3
 80140c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80140c8:	b29b      	uxth	r3, r3
}
 80140ca:	4618      	mov	r0, r3
 80140cc:	370c      	adds	r7, #12
 80140ce:	46bd      	mov	sp, r7
 80140d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d4:	4770      	bx	lr

080140d6 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 80140d6:	b480      	push	{r7}
 80140d8:	b083      	sub	sp, #12
 80140da:	af00      	add	r7, sp, #0
 80140dc:	6078      	str	r0, [r7, #4]
 80140de:	460b      	mov	r3, r1
 80140e0:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	8a1b      	ldrh	r3, [r3, #16]
 80140e6:	b29b      	uxth	r3, r3
 80140e8:	f023 030f 	bic.w	r3, r3, #15
 80140ec:	b29a      	uxth	r2, r3
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	8a1b      	ldrh	r3, [r3, #16]
 80140f6:	b29a      	uxth	r2, r3
 80140f8:	78fb      	ldrb	r3, [r7, #3]
 80140fa:	b29b      	uxth	r3, r3
 80140fc:	4313      	orrs	r3, r2
 80140fe:	b29a      	uxth	r2, r3
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	821a      	strh	r2, [r3, #16]
}
 8014104:	bf00      	nop
 8014106:	370c      	adds	r7, #12
 8014108:	46bd      	mov	sp, r7
 801410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410e:	4770      	bx	lr

08014110 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014110:	b480      	push	{r7}
 8014112:	b083      	sub	sp, #12
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
 8014118:	460b      	mov	r3, r1
 801411a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 801411c:	78fb      	ldrb	r3, [r7, #3]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d008      	beq.n	8014134 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	899b      	ldrh	r3, [r3, #12]
 8014126:	b29b      	uxth	r3, r3
 8014128:	f043 0302 	orr.w	r3, r3, #2
 801412c:	b29a      	uxth	r2, r3
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
  }
}
 8014132:	e007      	b.n	8014144 <USART_ReceiverWakeUpCmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	899b      	ldrh	r3, [r3, #12]
 8014138:	b29b      	uxth	r3, r3
 801413a:	f023 0302 	bic.w	r3, r3, #2
 801413e:	b29a      	uxth	r2, r3
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	819a      	strh	r2, [r3, #12]
}
 8014144:	bf00      	nop
 8014146:	370c      	adds	r7, #12
 8014148:	46bd      	mov	sp, r7
 801414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801414e:	4770      	bx	lr

08014150 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8014150:	b480      	push	{r7}
 8014152:	b083      	sub	sp, #12
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
 8014158:	460b      	mov	r3, r1
 801415a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	899b      	ldrh	r3, [r3, #12]
 8014160:	b29b      	uxth	r3, r3
 8014162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014166:	b29a      	uxth	r2, r3
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	899b      	ldrh	r3, [r3, #12]
 8014170:	b29a      	uxth	r2, r3
 8014172:	887b      	ldrh	r3, [r7, #2]
 8014174:	4313      	orrs	r3, r2
 8014176:	b29a      	uxth	r2, r3
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	819a      	strh	r2, [r3, #12]
}
 801417c:	bf00      	nop
 801417e:	370c      	adds	r7, #12
 8014180:	46bd      	mov	sp, r7
 8014182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014186:	4770      	bx	lr

08014188 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8014188:	b480      	push	{r7}
 801418a:	b083      	sub	sp, #12
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
 8014190:	460b      	mov	r3, r1
 8014192:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	8a1b      	ldrh	r3, [r3, #16]
 8014198:	b29b      	uxth	r3, r3
 801419a:	f023 0320 	bic.w	r3, r3, #32
 801419e:	b29a      	uxth	r2, r3
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	8a1b      	ldrh	r3, [r3, #16]
 80141a8:	b29a      	uxth	r2, r3
 80141aa:	887b      	ldrh	r3, [r7, #2]
 80141ac:	4313      	orrs	r3, r2
 80141ae:	b29a      	uxth	r2, r3
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	821a      	strh	r2, [r3, #16]
}
 80141b4:	bf00      	nop
 80141b6:	370c      	adds	r7, #12
 80141b8:	46bd      	mov	sp, r7
 80141ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141be:	4770      	bx	lr

080141c0 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80141c0:	b480      	push	{r7}
 80141c2:	b083      	sub	sp, #12
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
 80141c8:	460b      	mov	r3, r1
 80141ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80141cc:	78fb      	ldrb	r3, [r7, #3]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d008      	beq.n	80141e4 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	8a1b      	ldrh	r3, [r3, #16]
 80141d6:	b29b      	uxth	r3, r3
 80141d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80141dc:	b29a      	uxth	r2, r3
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	821a      	strh	r2, [r3, #16]
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
  }
}
 80141e2:	e007      	b.n	80141f4 <USART_LINCmd+0x34>
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	8a1b      	ldrh	r3, [r3, #16]
 80141e8:	b29b      	uxth	r3, r3
 80141ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80141ee:	b29a      	uxth	r2, r3
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	821a      	strh	r2, [r3, #16]
}
 80141f4:	bf00      	nop
 80141f6:	370c      	adds	r7, #12
 80141f8:	46bd      	mov	sp, r7
 80141fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fe:	4770      	bx	lr

08014200 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 8014200:	b480      	push	{r7}
 8014202:	b083      	sub	sp, #12
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	899b      	ldrh	r3, [r3, #12]
 801420c:	b29b      	uxth	r3, r3
 801420e:	f043 0301 	orr.w	r3, r3, #1
 8014212:	b29a      	uxth	r2, r3
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	819a      	strh	r2, [r3, #12]
}
 8014218:	bf00      	nop
 801421a:	370c      	adds	r7, #12
 801421c:	46bd      	mov	sp, r7
 801421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014222:	4770      	bx	lr

08014224 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014224:	b480      	push	{r7}
 8014226:	b083      	sub	sp, #12
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	460b      	mov	r3, r1
 801422e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8014230:	78fb      	ldrb	r3, [r7, #3]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d008      	beq.n	8014248 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	8a9b      	ldrh	r3, [r3, #20]
 801423a:	b29b      	uxth	r3, r3
 801423c:	f043 0308 	orr.w	r3, r3, #8
 8014240:	b29a      	uxth	r2, r3
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
  }
}
 8014246:	e007      	b.n	8014258 <USART_HalfDuplexCmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	8a9b      	ldrh	r3, [r3, #20]
 801424c:	b29b      	uxth	r3, r3
 801424e:	f023 0308 	bic.w	r3, r3, #8
 8014252:	b29a      	uxth	r2, r3
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	829a      	strh	r2, [r3, #20]
}
 8014258:	bf00      	nop
 801425a:	370c      	adds	r7, #12
 801425c:	46bd      	mov	sp, r7
 801425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014262:	4770      	bx	lr

08014264 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8014264:	b480      	push	{r7}
 8014266:	b083      	sub	sp, #12
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
 801426c:	460b      	mov	r3, r1
 801426e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	8b1b      	ldrh	r3, [r3, #24]
 8014274:	b29b      	uxth	r3, r3
 8014276:	b2db      	uxtb	r3, r3
 8014278:	b29a      	uxth	r2, r3
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	8b1b      	ldrh	r3, [r3, #24]
 8014282:	b29a      	uxth	r2, r3
 8014284:	78fb      	ldrb	r3, [r7, #3]
 8014286:	b29b      	uxth	r3, r3
 8014288:	021b      	lsls	r3, r3, #8
 801428a:	b29b      	uxth	r3, r3
 801428c:	4313      	orrs	r3, r2
 801428e:	b29a      	uxth	r2, r3
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	831a      	strh	r2, [r3, #24]
}
 8014294:	bf00      	nop
 8014296:	370c      	adds	r7, #12
 8014298:	46bd      	mov	sp, r7
 801429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429e:	4770      	bx	lr

080142a0 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80142a0:	b480      	push	{r7}
 80142a2:	b083      	sub	sp, #12
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
 80142a8:	460b      	mov	r3, r1
 80142aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80142ac:	78fb      	ldrb	r3, [r7, #3]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d008      	beq.n	80142c4 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	8a9b      	ldrh	r3, [r3, #20]
 80142b6:	b29b      	uxth	r3, r3
 80142b8:	f043 0320 	orr.w	r3, r3, #32
 80142bc:	b29a      	uxth	r2, r3
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
  }
}
 80142c2:	e007      	b.n	80142d4 <USART_SmartCardCmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	8a9b      	ldrh	r3, [r3, #20]
 80142c8:	b29b      	uxth	r3, r3
 80142ca:	f023 0320 	bic.w	r3, r3, #32
 80142ce:	b29a      	uxth	r2, r3
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	829a      	strh	r2, [r3, #20]
}
 80142d4:	bf00      	nop
 80142d6:	370c      	adds	r7, #12
 80142d8:	46bd      	mov	sp, r7
 80142da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142de:	4770      	bx	lr

080142e0 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80142e0:	b480      	push	{r7}
 80142e2:	b083      	sub	sp, #12
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
 80142e8:	460b      	mov	r3, r1
 80142ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80142ec:	78fb      	ldrb	r3, [r7, #3]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d008      	beq.n	8014304 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	8a9b      	ldrh	r3, [r3, #20]
 80142f6:	b29b      	uxth	r3, r3
 80142f8:	f043 0310 	orr.w	r3, r3, #16
 80142fc:	b29a      	uxth	r2, r3
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
  }
}
 8014302:	e007      	b.n	8014314 <USART_SmartCardNACKCmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	8a9b      	ldrh	r3, [r3, #20]
 8014308:	b29b      	uxth	r3, r3
 801430a:	f023 0310 	bic.w	r3, r3, #16
 801430e:	b29a      	uxth	r2, r3
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	829a      	strh	r2, [r3, #20]
}
 8014314:	bf00      	nop
 8014316:	370c      	adds	r7, #12
 8014318:	46bd      	mov	sp, r7
 801431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431e:	4770      	bx	lr

08014320 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 8014320:	b480      	push	{r7}
 8014322:	b083      	sub	sp, #12
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
 8014328:	460b      	mov	r3, r1
 801432a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	8a9b      	ldrh	r3, [r3, #20]
 8014330:	b29b      	uxth	r3, r3
 8014332:	f023 0304 	bic.w	r3, r3, #4
 8014336:	b29a      	uxth	r2, r3
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	8a9b      	ldrh	r3, [r3, #20]
 8014340:	b29a      	uxth	r2, r3
 8014342:	887b      	ldrh	r3, [r7, #2]
 8014344:	4313      	orrs	r3, r2
 8014346:	b29a      	uxth	r2, r3
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	829a      	strh	r2, [r3, #20]
}
 801434c:	bf00      	nop
 801434e:	370c      	adds	r7, #12
 8014350:	46bd      	mov	sp, r7
 8014352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014356:	4770      	bx	lr

08014358 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8014358:	b480      	push	{r7}
 801435a:	b083      	sub	sp, #12
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
 8014360:	460b      	mov	r3, r1
 8014362:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8014364:	78fb      	ldrb	r3, [r7, #3]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d008      	beq.n	801437c <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	8a9b      	ldrh	r3, [r3, #20]
 801436e:	b29b      	uxth	r3, r3
 8014370:	f043 0302 	orr.w	r3, r3, #2
 8014374:	b29a      	uxth	r2, r3
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
  }
}
 801437a:	e007      	b.n	801438c <USART_IrDACmd+0x34>
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	8a9b      	ldrh	r3, [r3, #20]
 8014380:	b29b      	uxth	r3, r3
 8014382:	f023 0302 	bic.w	r3, r3, #2
 8014386:	b29a      	uxth	r2, r3
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	829a      	strh	r2, [r3, #20]
}
 801438c:	bf00      	nop
 801438e:	370c      	adds	r7, #12
 8014390:	46bd      	mov	sp, r7
 8014392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014396:	4770      	bx	lr

08014398 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8014398:	b480      	push	{r7}
 801439a:	b083      	sub	sp, #12
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
 80143a0:	460b      	mov	r3, r1
 80143a2:	807b      	strh	r3, [r7, #2]
 80143a4:	4613      	mov	r3, r2
 80143a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80143a8:	787b      	ldrb	r3, [r7, #1]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d008      	beq.n	80143c0 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	8a9b      	ldrh	r3, [r3, #20]
 80143b2:	b29a      	uxth	r2, r3
 80143b4:	887b      	ldrh	r3, [r7, #2]
 80143b6:	4313      	orrs	r3, r2
 80143b8:	b29a      	uxth	r2, r3
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	829a      	strh	r2, [r3, #20]
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
  }
}
 80143be:	e009      	b.n	80143d4 <USART_DMACmd+0x3c>
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	8a9b      	ldrh	r3, [r3, #20]
 80143c4:	b29a      	uxth	r2, r3
 80143c6:	887b      	ldrh	r3, [r7, #2]
 80143c8:	43db      	mvns	r3, r3
 80143ca:	b29b      	uxth	r3, r3
 80143cc:	4013      	ands	r3, r2
 80143ce:	b29a      	uxth	r2, r3
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	829a      	strh	r2, [r3, #20]
}
 80143d4:	bf00      	nop
 80143d6:	370c      	adds	r7, #12
 80143d8:	46bd      	mov	sp, r7
 80143da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143de:	4770      	bx	lr

080143e0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80143e0:	b480      	push	{r7}
 80143e2:	b087      	sub	sp, #28
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
 80143e8:	460b      	mov	r3, r1
 80143ea:	807b      	strh	r3, [r7, #2]
 80143ec:	4613      	mov	r3, r2
 80143ee:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80143f0:	2300      	movs	r3, #0
 80143f2:	613b      	str	r3, [r7, #16]
 80143f4:	2300      	movs	r3, #0
 80143f6:	60fb      	str	r3, [r7, #12]
 80143f8:	2300      	movs	r3, #0
 80143fa:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80143fc:	2300      	movs	r3, #0
 80143fe:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8014404:	887b      	ldrh	r3, [r7, #2]
 8014406:	b2db      	uxtb	r3, r3
 8014408:	095b      	lsrs	r3, r3, #5
 801440a:	b2db      	uxtb	r3, r3
 801440c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 801440e:	887b      	ldrh	r3, [r7, #2]
 8014410:	f003 031f 	and.w	r3, r3, #31
 8014414:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8014416:	2201      	movs	r2, #1
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	fa02 f303 	lsl.w	r3, r2, r3
 801441e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8014420:	693b      	ldr	r3, [r7, #16]
 8014422:	2b01      	cmp	r3, #1
 8014424:	d103      	bne.n	801442e <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8014426:	697b      	ldr	r3, [r7, #20]
 8014428:	330c      	adds	r3, #12
 801442a:	617b      	str	r3, [r7, #20]
 801442c:	e009      	b.n	8014442 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 801442e:	693b      	ldr	r3, [r7, #16]
 8014430:	2b02      	cmp	r3, #2
 8014432:	d103      	bne.n	801443c <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8014434:	697b      	ldr	r3, [r7, #20]
 8014436:	3310      	adds	r3, #16
 8014438:	617b      	str	r3, [r7, #20]
 801443a:	e002      	b.n	8014442 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	3314      	adds	r3, #20
 8014440:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8014442:	787b      	ldrb	r3, [r7, #1]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d006      	beq.n	8014456 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8014448:	697b      	ldr	r3, [r7, #20]
 801444a:	697a      	ldr	r2, [r7, #20]
 801444c:	6811      	ldr	r1, [r2, #0]
 801444e:	68ba      	ldr	r2, [r7, #8]
 8014450:	430a      	orrs	r2, r1
 8014452:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8014454:	e006      	b.n	8014464 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8014456:	697b      	ldr	r3, [r7, #20]
 8014458:	697a      	ldr	r2, [r7, #20]
 801445a:	6811      	ldr	r1, [r2, #0]
 801445c:	68ba      	ldr	r2, [r7, #8]
 801445e:	43d2      	mvns	r2, r2
 8014460:	400a      	ands	r2, r1
 8014462:	601a      	str	r2, [r3, #0]
}
 8014464:	bf00      	nop
 8014466:	371c      	adds	r7, #28
 8014468:	46bd      	mov	sp, r7
 801446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446e:	4770      	bx	lr

08014470 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8014470:	b480      	push	{r7}
 8014472:	b085      	sub	sp, #20
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	460b      	mov	r3, r1
 801447a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 801447c:	2300      	movs	r3, #0
 801447e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	881b      	ldrh	r3, [r3, #0]
 8014484:	b29a      	uxth	r2, r3
 8014486:	887b      	ldrh	r3, [r7, #2]
 8014488:	4013      	ands	r3, r2
 801448a:	b29b      	uxth	r3, r3
 801448c:	2b00      	cmp	r3, #0
 801448e:	d002      	beq.n	8014496 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8014490:	2301      	movs	r3, #1
 8014492:	73fb      	strb	r3, [r7, #15]
 8014494:	e001      	b.n	801449a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8014496:	2300      	movs	r3, #0
 8014498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801449a:	7bfb      	ldrb	r3, [r7, #15]
}
 801449c:	4618      	mov	r0, r3
 801449e:	3714      	adds	r7, #20
 80144a0:	46bd      	mov	sp, r7
 80144a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a6:	4770      	bx	lr

080144a8 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80144a8:	b480      	push	{r7}
 80144aa:	b083      	sub	sp, #12
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
 80144b0:	460b      	mov	r3, r1
 80144b2:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 80144b4:	887b      	ldrh	r3, [r7, #2]
 80144b6:	43db      	mvns	r3, r3
 80144b8:	b29a      	uxth	r2, r3
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	801a      	strh	r2, [r3, #0]
}
 80144be:	bf00      	nop
 80144c0:	370c      	adds	r7, #12
 80144c2:	46bd      	mov	sp, r7
 80144c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c8:	4770      	bx	lr

080144ca <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80144ca:	b480      	push	{r7}
 80144cc:	b087      	sub	sp, #28
 80144ce:	af00      	add	r7, sp, #0
 80144d0:	6078      	str	r0, [r7, #4]
 80144d2:	460b      	mov	r3, r1
 80144d4:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80144d6:	2300      	movs	r3, #0
 80144d8:	60fb      	str	r3, [r7, #12]
 80144da:	2300      	movs	r3, #0
 80144dc:	617b      	str	r3, [r7, #20]
 80144de:	2300      	movs	r3, #0
 80144e0:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80144e2:	2300      	movs	r3, #0
 80144e4:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80144e6:	887b      	ldrh	r3, [r7, #2]
 80144e8:	b2db      	uxtb	r3, r3
 80144ea:	095b      	lsrs	r3, r3, #5
 80144ec:	b2db      	uxtb	r3, r3
 80144ee:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80144f0:	887b      	ldrh	r3, [r7, #2]
 80144f2:	f003 031f 	and.w	r3, r3, #31
 80144f6:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80144f8:	2201      	movs	r2, #1
 80144fa:	697b      	ldr	r3, [r7, #20]
 80144fc:	fa02 f303 	lsl.w	r3, r2, r3
 8014500:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8014502:	68bb      	ldr	r3, [r7, #8]
 8014504:	2b01      	cmp	r3, #1
 8014506:	d107      	bne.n	8014518 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	899b      	ldrh	r3, [r3, #12]
 801450c:	b29b      	uxth	r3, r3
 801450e:	461a      	mov	r2, r3
 8014510:	697b      	ldr	r3, [r7, #20]
 8014512:	4013      	ands	r3, r2
 8014514:	617b      	str	r3, [r7, #20]
 8014516:	e011      	b.n	801453c <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8014518:	68bb      	ldr	r3, [r7, #8]
 801451a:	2b02      	cmp	r3, #2
 801451c:	d107      	bne.n	801452e <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	8a1b      	ldrh	r3, [r3, #16]
 8014522:	b29b      	uxth	r3, r3
 8014524:	461a      	mov	r2, r3
 8014526:	697b      	ldr	r3, [r7, #20]
 8014528:	4013      	ands	r3, r2
 801452a:	617b      	str	r3, [r7, #20]
 801452c:	e006      	b.n	801453c <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	8a9b      	ldrh	r3, [r3, #20]
 8014532:	b29b      	uxth	r3, r3
 8014534:	461a      	mov	r2, r3
 8014536:	697b      	ldr	r3, [r7, #20]
 8014538:	4013      	ands	r3, r2
 801453a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 801453c:	887b      	ldrh	r3, [r7, #2]
 801453e:	0a1b      	lsrs	r3, r3, #8
 8014540:	b29b      	uxth	r3, r3
 8014542:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8014544:	2201      	movs	r2, #1
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	fa02 f303 	lsl.w	r3, r2, r3
 801454c:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	881b      	ldrh	r3, [r3, #0]
 8014552:	b29b      	uxth	r3, r3
 8014554:	461a      	mov	r2, r3
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	4013      	ands	r3, r2
 801455a:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 801455c:	697b      	ldr	r3, [r7, #20]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d005      	beq.n	801456e <USART_GetITStatus+0xa4>
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d002      	beq.n	801456e <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8014568:	2301      	movs	r3, #1
 801456a:	74fb      	strb	r3, [r7, #19]
 801456c:	e001      	b.n	8014572 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 801456e:	2300      	movs	r3, #0
 8014570:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8014572:	7cfb      	ldrb	r3, [r7, #19]
}
 8014574:	4618      	mov	r0, r3
 8014576:	371c      	adds	r7, #28
 8014578:	46bd      	mov	sp, r7
 801457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457e:	4770      	bx	lr

08014580 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8014580:	b480      	push	{r7}
 8014582:	b085      	sub	sp, #20
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
 8014588:	460b      	mov	r3, r1
 801458a:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 801458c:	2300      	movs	r3, #0
 801458e:	81fb      	strh	r3, [r7, #14]
 8014590:	2300      	movs	r3, #0
 8014592:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8014594:	887b      	ldrh	r3, [r7, #2]
 8014596:	0a1b      	lsrs	r3, r3, #8
 8014598:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 801459a:	89fb      	ldrh	r3, [r7, #14]
 801459c:	2201      	movs	r2, #1
 801459e:	fa02 f303 	lsl.w	r3, r2, r3
 80145a2:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80145a4:	89bb      	ldrh	r3, [r7, #12]
 80145a6:	43db      	mvns	r3, r3
 80145a8:	b29a      	uxth	r2, r3
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	801a      	strh	r2, [r3, #0]
}
 80145ae:	bf00      	nop
 80145b0:	3714      	adds	r7, #20
 80145b2:	46bd      	mov	sp, r7
 80145b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b8:	4770      	bx	lr
 80145ba:	bf00      	nop

080145bc <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 80145c0:	2101      	movs	r1, #1
 80145c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80145c6:	f7fb f90d 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 80145ca:	2100      	movs	r1, #0
 80145cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80145d0:	f7fb f908 	bl	800f7e4 <RCC_APB1PeriphResetCmd>
}
 80145d4:	bf00      	nop
 80145d6:	bd80      	pop	{r7, pc}

080145d8 <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 80145d8:	b480      	push	{r7}
 80145da:	b085      	sub	sp, #20
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80145e0:	2300      	movs	r3, #0
 80145e2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 80145e4:	4b08      	ldr	r3, [pc, #32]	; (8014608 <WWDG_SetPrescaler+0x30>)
 80145e6:	685b      	ldr	r3, [r3, #4]
 80145e8:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 80145ec:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 80145ee:	68fa      	ldr	r2, [r7, #12]
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	4313      	orrs	r3, r2
 80145f4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 80145f6:	4a04      	ldr	r2, [pc, #16]	; (8014608 <WWDG_SetPrescaler+0x30>)
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	6053      	str	r3, [r2, #4]
}
 80145fc:	bf00      	nop
 80145fe:	3714      	adds	r7, #20
 8014600:	46bd      	mov	sp, r7
 8014602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014606:	4770      	bx	lr
 8014608:	40002c00 	.word	0x40002c00

0801460c <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 801460c:	b480      	push	{r7}
 801460e:	b085      	sub	sp, #20
 8014610:	af00      	add	r7, sp, #0
 8014612:	4603      	mov	r3, r0
 8014614:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 8014616:	2300      	movs	r3, #0
 8014618:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 801461a:	4b0a      	ldr	r3, [pc, #40]	; (8014644 <WWDG_SetWindowValue+0x38>)
 801461c:	685b      	ldr	r3, [r3, #4]
 801461e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014622:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 8014624:	79fb      	ldrb	r3, [r7, #7]
 8014626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	4313      	orrs	r3, r2
 801462e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 8014630:	4a04      	ldr	r2, [pc, #16]	; (8014644 <WWDG_SetWindowValue+0x38>)
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	6053      	str	r3, [r2, #4]
}
 8014636:	bf00      	nop
 8014638:	3714      	adds	r7, #20
 801463a:	46bd      	mov	sp, r7
 801463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014640:	4770      	bx	lr
 8014642:	bf00      	nop
 8014644:	40002c00 	.word	0x40002c00

08014648 <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset.
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 8014648:	b480      	push	{r7}
 801464a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 801464c:	4b03      	ldr	r3, [pc, #12]	; (801465c <WWDG_EnableIT+0x14>)
 801464e:	2201      	movs	r2, #1
 8014650:	601a      	str	r2, [r3, #0]
}
 8014652:	bf00      	nop
 8014654:	46bd      	mov	sp, r7
 8014656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465a:	4770      	bx	lr
 801465c:	420580a4 	.word	0x420580a4

08014660 <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset) 
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 8014660:	b480      	push	{r7}
 8014662:	b083      	sub	sp, #12
 8014664:	af00      	add	r7, sp, #0
 8014666:	4603      	mov	r3, r0
 8014668:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 801466a:	4a05      	ldr	r2, [pc, #20]	; (8014680 <WWDG_SetCounter+0x20>)
 801466c:	79fb      	ldrb	r3, [r7, #7]
 801466e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014672:	6013      	str	r3, [r2, #0]
}
 8014674:	bf00      	nop
 8014676:	370c      	adds	r7, #12
 8014678:	46bd      	mov	sp, r7
 801467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467e:	4770      	bx	lr
 8014680:	40002c00 	.word	0x40002c00

08014684 <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset)
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 8014684:	b480      	push	{r7}
 8014686:	b083      	sub	sp, #12
 8014688:	af00      	add	r7, sp, #0
 801468a:	4603      	mov	r3, r0
 801468c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 801468e:	4a06      	ldr	r2, [pc, #24]	; (80146a8 <WWDG_Enable+0x24>)
 8014690:	79fb      	ldrb	r3, [r7, #7]
 8014692:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014696:	b2db      	uxtb	r3, r3
 8014698:	6013      	str	r3, [r2, #0]
}
 801469a:	bf00      	nop
 801469c:	370c      	adds	r7, #12
 801469e:	46bd      	mov	sp, r7
 80146a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a4:	4770      	bx	lr
 80146a6:	bf00      	nop
 80146a8:	40002c00 	.word	0x40002c00

080146ac <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 80146ac:	b480      	push	{r7}
 80146ae:	b083      	sub	sp, #12
 80146b0:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 80146b2:	2300      	movs	r3, #0
 80146b4:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 80146b6:	4b08      	ldr	r3, [pc, #32]	; (80146d8 <WWDG_GetFlagStatus+0x2c>)
 80146b8:	689b      	ldr	r3, [r3, #8]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d002      	beq.n	80146c4 <WWDG_GetFlagStatus+0x18>
  {
    bitstatus = SET;
 80146be:	2301      	movs	r3, #1
 80146c0:	71fb      	strb	r3, [r7, #7]
 80146c2:	e001      	b.n	80146c8 <WWDG_GetFlagStatus+0x1c>
  }
  else
  {
    bitstatus = RESET;
 80146c4:	2300      	movs	r3, #0
 80146c6:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 80146c8:	79fb      	ldrb	r3, [r7, #7]
}
 80146ca:	4618      	mov	r0, r3
 80146cc:	370c      	adds	r7, #12
 80146ce:	46bd      	mov	sp, r7
 80146d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d4:	4770      	bx	lr
 80146d6:	bf00      	nop
 80146d8:	40002c00 	.word	0x40002c00

080146dc <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 80146dc:	b480      	push	{r7}
 80146de:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 80146e0:	4b03      	ldr	r3, [pc, #12]	; (80146f0 <WWDG_ClearFlag+0x14>)
 80146e2:	2200      	movs	r2, #0
 80146e4:	609a      	str	r2, [r3, #8]
}
 80146e6:	bf00      	nop
 80146e8:	46bd      	mov	sp, r7
 80146ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ee:	4770      	bx	lr
 80146f0:	40002c00 	.word	0x40002c00

080146f4 <GPIOClock>:


//****************************************STATIC FUNCTION******************************

static void GPIOClock(GPIOcfgType *gpio_cfg)
{
 80146f4:	b480      	push	{r7}
 80146f6:	b087      	sub	sp, #28
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
   uint32_t pClock;
   uint32_t error = 0;
 80146fc:	2300      	movs	r3, #0
 80146fe:	613b      	str	r3, [r7, #16]

   switch (gpio_cfg->port)                                                       //assigned clock for GPIO using CMSIS
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	79db      	ldrb	r3, [r3, #7]
 8014704:	3b01      	subs	r3, #1
 8014706:	2b07      	cmp	r3, #7
 8014708:	d82a      	bhi.n	8014760 <GPIOClock+0x6c>
 801470a:	a201      	add	r2, pc, #4	; (adr r2, 8014710 <GPIOClock+0x1c>)
 801470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014710:	08014731 	.word	0x08014731
 8014714:	08014737 	.word	0x08014737
 8014718:	0801473d 	.word	0x0801473d
 801471c:	08014743 	.word	0x08014743
 8014720:	08014749 	.word	0x08014749
 8014724:	0801474f 	.word	0x0801474f
 8014728:	08014755 	.word	0x08014755
 801472c:	0801475b 	.word	0x0801475b
   {
   case PORTA:
     pClock=RCC_AHB1ENR_GPIOAEN;
 8014730:	2301      	movs	r3, #1
 8014732:	617b      	str	r3, [r7, #20]
     break;
 8014734:	e016      	b.n	8014764 <GPIOClock+0x70>
   case PORTB:
     pClock=RCC_AHB1ENR_GPIOBEN;
 8014736:	2302      	movs	r3, #2
 8014738:	617b      	str	r3, [r7, #20]
     break;
 801473a:	e013      	b.n	8014764 <GPIOClock+0x70>
   case PORTC:
     pClock=RCC_AHB1ENR_GPIOCEN;
 801473c:	2304      	movs	r3, #4
 801473e:	617b      	str	r3, [r7, #20]
     break;
 8014740:	e010      	b.n	8014764 <GPIOClock+0x70>
   case PORTD:
     pClock=RCC_AHB1ENR_GPIODEN;
 8014742:	2308      	movs	r3, #8
 8014744:	617b      	str	r3, [r7, #20]
     break;
 8014746:	e00d      	b.n	8014764 <GPIOClock+0x70>
   case PORTE:
     pClock=RCC_AHB1ENR_GPIOEEN;
 8014748:	2310      	movs	r3, #16
 801474a:	617b      	str	r3, [r7, #20]
     break;
 801474c:	e00a      	b.n	8014764 <GPIOClock+0x70>
   case PORTF:
     pClock=RCC_AHB1ENR_GPIOFEN;
 801474e:	2320      	movs	r3, #32
 8014750:	617b      	str	r3, [r7, #20]
     break;
 8014752:	e007      	b.n	8014764 <GPIOClock+0x70>
   case PORTG:
     pClock=RCC_AHB1ENR_GPIOGEN;
 8014754:	2340      	movs	r3, #64	; 0x40
 8014756:	617b      	str	r3, [r7, #20]
     break;
 8014758:	e004      	b.n	8014764 <GPIOClock+0x70>
   case PORTH:
     pClock=RCC_AHB1ENR_GPIOHEN;
 801475a:	2380      	movs	r3, #128	; 0x80
 801475c:	617b      	str	r3, [r7, #20]
     break;
 801475e:	e001      	b.n	8014764 <GPIOClock+0x70>

   default:
     error = 1;                                                                   //in case if gpio_cfg->port is incorrect set to 0, to do not change anything in RCC
 8014760:	2301      	movs	r3, #1
 8014762:	613b      	str	r3, [r7, #16]

   }

  //*******************set CLOCK register**************
   if(error == 0)
 8014764:	693b      	ldr	r3, [r7, #16]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d10f      	bne.n	801478a <GPIOClock+0x96>
   {
     uint32_t temp = (RCC->AHB1ENR ) & pClock;
 801476a:	4b0b      	ldr	r3, [pc, #44]	; (8014798 <GPIOClock+0xa4>)
 801476c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801476e:	697b      	ldr	r3, [r7, #20]
 8014770:	4013      	ands	r3, r2
 8014772:	60fb      	str	r3, [r7, #12]
     if(!(temp & pClock ))                                                        //if clock is not set yet
 8014774:	68fa      	ldr	r2, [r7, #12]
 8014776:	697b      	ldr	r3, [r7, #20]
 8014778:	4013      	ands	r3, r2
 801477a:	2b00      	cmp	r3, #0
 801477c:	d105      	bne.n	801478a <GPIOClock+0x96>
     {
       RCC->AHB1ENR |= pClock;
 801477e:	4906      	ldr	r1, [pc, #24]	; (8014798 <GPIOClock+0xa4>)
 8014780:	4b05      	ldr	r3, [pc, #20]	; (8014798 <GPIOClock+0xa4>)
 8014782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014784:	697b      	ldr	r3, [r7, #20]
 8014786:	4313      	orrs	r3, r2
 8014788:	630b      	str	r3, [r1, #48]	; 0x30
     }
   }

}
 801478a:	bf00      	nop
 801478c:	371c      	adds	r7, #28
 801478e:	46bd      	mov	sp, r7
 8014790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014794:	4770      	bx	lr
 8014796:	bf00      	nop
 8014798:	40023800 	.word	0x40023800

0801479c <GPIOOTYPER>:

static void GPIOOTYPER(GPIOcfgType *gpio_cfg, GPIO_TypeDef* gpio, uint32_t** reset_maskptr, uint32_t** pin_numberptr)
{
 801479c:	b480      	push	{r7}
 801479e:	b087      	sub	sp, #28
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	60f8      	str	r0, [r7, #12]
 80147a4:	60b9      	str	r1, [r7, #8]
 80147a6:	607a      	str	r2, [r7, #4]
 80147a8:	603b      	str	r3, [r7, #0]

  uint32_t reset_mask;                                                           //used to clear specific pin place in registers
  uint32_t pin_number;                                                           //specific pin places in 32bit register

  //*******************set OTYPER register*************
  if (gpio_cfg->typ == openDrain)
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	78db      	ldrb	r3, [r3, #3]
 80147ae:	2b01      	cmp	r3, #1
 80147b0:	d107      	bne.n	80147c2 <GPIOOTYPER+0x26>
  {
    gpio->OTYPER |= gpio_cfg->pin;                                              //one pin has 1 config bit in this register
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	685b      	ldr	r3, [r3, #4]
 80147b6:	68fa      	ldr	r2, [r7, #12]
 80147b8:	8812      	ldrh	r2, [r2, #0]
 80147ba:	431a      	orrs	r2, r3
 80147bc:	68bb      	ldr	r3, [r7, #8]
 80147be:	605a      	str	r2, [r3, #4]
 80147c0:	e00b      	b.n	80147da <GPIOOTYPER+0x3e>
  }
  else if (gpio_cfg->typ == pushPull)
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	78db      	ldrb	r3, [r3, #3]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d107      	bne.n	80147da <GPIOOTYPER+0x3e>
  {
    gpio->OTYPER &= ~gpio_cfg->pin;
 80147ca:	68bb      	ldr	r3, [r7, #8]
 80147cc:	685b      	ldr	r3, [r3, #4]
 80147ce:	68fa      	ldr	r2, [r7, #12]
 80147d0:	8812      	ldrh	r2, [r2, #0]
 80147d2:	43d2      	mvns	r2, r2
 80147d4:	401a      	ands	r2, r3
 80147d6:	68bb      	ldr	r3, [r7, #8]
 80147d8:	605a      	str	r2, [r3, #4]
  }

  pin_number = __builtin_ctz(gpio_cfg->pin) * 2;                               //count trailing zeros (how many zeros form the right). One pin has 2 config bits in this registers
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	881b      	ldrh	r3, [r3, #0]
 80147de:	fa93 f3a3 	rbit	r3, r3
 80147e2:	fab3 f383 	clz	r3, r3
 80147e6:	005b      	lsls	r3, r3, #1
 80147e8:	613b      	str	r3, [r7, #16]
  *pin_numberptr = &pin_number;                                                //address of pin_number variable
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	f107 0210 	add.w	r2, r7, #16
 80147f0:	601a      	str	r2, [r3, #0]
  reset_mask = ~(0x03 << pin_number);                                          //used to reset specific bits in the register
 80147f2:	693b      	ldr	r3, [r7, #16]
 80147f4:	2203      	movs	r2, #3
 80147f6:	fa02 f303 	lsl.w	r3, r2, r3
 80147fa:	43db      	mvns	r3, r3
 80147fc:	617b      	str	r3, [r7, #20]
  *reset_maskptr = &reset_mask;                                                //address of reset_mask variable
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	f107 0214 	add.w	r2, r7, #20
 8014804:	601a      	str	r2, [r3, #0]

}
 8014806:	bf00      	nop
 8014808:	371c      	adds	r7, #28
 801480a:	46bd      	mov	sp, r7
 801480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014810:	4770      	bx	lr

08014812 <GPIOMODER>:

static void GPIOMODER(GPIOcfgType *gpio_cfg, GPIO_TypeDef* gpio, uint32_t* reset_maskptr, uint32_t* pin_numberptr)
{
 8014812:	b480      	push	{r7}
 8014814:	b089      	sub	sp, #36	; 0x24
 8014816:	af00      	add	r7, sp, #0
 8014818:	60f8      	str	r0, [r7, #12]
 801481a:	60b9      	str	r1, [r7, #8]
 801481c:	607a      	str	r2, [r7, #4]
 801481e:	603b      	str	r3, [r7, #0]

  uint32_t reg_val;                                                             //used to write to the register
  uint32_t reset_mask = *reset_maskptr;                                         //used to clear specific pin place in registers
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	61fb      	str	r3, [r7, #28]
  uint32_t pin_number = *pin_numberptr;                                         //specific pin places in 32bit register
 8014826:	683b      	ldr	r3, [r7, #0]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	61bb      	str	r3, [r7, #24]

  //*****************set MODER register****************
  reg_val = gpio->MODER;                                                        //read actual value from register
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	617b      	str	r3, [r7, #20]
  reg_val &= reset_mask;                                                        //reset bits
 8014832:	697a      	ldr	r2, [r7, #20]
 8014834:	69fb      	ldr	r3, [r7, #28]
 8014836:	4013      	ands	r3, r2
 8014838:	617b      	str	r3, [r7, #20]
  reg_val |= gpio_cfg->mode << pin_number;                                      //shift bits to specific place
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	789b      	ldrb	r3, [r3, #2]
 801483e:	461a      	mov	r2, r3
 8014840:	69bb      	ldr	r3, [r7, #24]
 8014842:	fa02 f303 	lsl.w	r3, r2, r3
 8014846:	461a      	mov	r2, r3
 8014848:	697b      	ldr	r3, [r7, #20]
 801484a:	4313      	orrs	r3, r2
 801484c:	617b      	str	r3, [r7, #20]
  gpio->MODER = reg_val;                                                        //write to register
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	697a      	ldr	r2, [r7, #20]
 8014852:	601a      	str	r2, [r3, #0]

}
 8014854:	bf00      	nop
 8014856:	3724      	adds	r7, #36	; 0x24
 8014858:	46bd      	mov	sp, r7
 801485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485e:	4770      	bx	lr

08014860 <GPIOOSPEEDR>:

static void GPIOOSPEEDR(GPIOcfgType *gpio_cfg, GPIO_TypeDef* gpio, uint32_t* reset_maskptr, uint32_t* pin_numberptr)
{
 8014860:	b480      	push	{r7}
 8014862:	b089      	sub	sp, #36	; 0x24
 8014864:	af00      	add	r7, sp, #0
 8014866:	60f8      	str	r0, [r7, #12]
 8014868:	60b9      	str	r1, [r7, #8]
 801486a:	607a      	str	r2, [r7, #4]
 801486c:	603b      	str	r3, [r7, #0]

  uint32_t reg_val;                                                              //used to write to the register
  uint32_t reset_mask = *reset_maskptr;                                          //used to clear specific pin place in registers
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	61fb      	str	r3, [r7, #28]
  uint32_t pin_number = *pin_numberptr;                                          //specific pin places in 32bit register
 8014874:	683b      	ldr	r3, [r7, #0]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	61bb      	str	r3, [r7, #24]

  //*****************set OSPEEDR register**************
  if (gpio_cfg->speed <= fast)
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	791b      	ldrb	r3, [r3, #4]
 801487e:	2b03      	cmp	r3, #3
 8014880:	d813      	bhi.n	80148aa <GPIOOSPEEDR+0x4a>
  {
    reg_val = gpio->OSPEEDR;                                                      //read actual value from register
 8014882:	68bb      	ldr	r3, [r7, #8]
 8014884:	689b      	ldr	r3, [r3, #8]
 8014886:	617b      	str	r3, [r7, #20]
    reg_val &= reset_mask;                                                        //reset bits
 8014888:	697a      	ldr	r2, [r7, #20]
 801488a:	69fb      	ldr	r3, [r7, #28]
 801488c:	4013      	ands	r3, r2
 801488e:	617b      	str	r3, [r7, #20]
    reg_val |= gpio_cfg->speed << pin_number;                                     //shift bits to specific place
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	791b      	ldrb	r3, [r3, #4]
 8014894:	461a      	mov	r2, r3
 8014896:	69bb      	ldr	r3, [r7, #24]
 8014898:	fa02 f303 	lsl.w	r3, r2, r3
 801489c:	461a      	mov	r2, r3
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	4313      	orrs	r3, r2
 80148a2:	617b      	str	r3, [r7, #20]
    gpio->OSPEEDR = reg_val;                                                      //write to register
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	697a      	ldr	r2, [r7, #20]
 80148a8:	609a      	str	r2, [r3, #8]
  }
}
 80148aa:	bf00      	nop
 80148ac:	3724      	adds	r7, #36	; 0x24
 80148ae:	46bd      	mov	sp, r7
 80148b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b4:	4770      	bx	lr

080148b6 <GPIOPUPDR>:

static void GPIOPUPDR(GPIOcfgType *gpio_cfg, GPIO_TypeDef* gpio, uint32_t* reset_maskptr, uint32_t* pin_numberptr)
{
 80148b6:	b480      	push	{r7}
 80148b8:	b089      	sub	sp, #36	; 0x24
 80148ba:	af00      	add	r7, sp, #0
 80148bc:	60f8      	str	r0, [r7, #12]
 80148be:	60b9      	str	r1, [r7, #8]
 80148c0:	607a      	str	r2, [r7, #4]
 80148c2:	603b      	str	r3, [r7, #0]
  uint32_t reg_val;                                                              //used to write to the register
  uint32_t reset_mask = *reset_maskptr;                                          //used to clear specific pin place in registers
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	61fb      	str	r3, [r7, #28]
  uint32_t pin_number = *pin_numberptr;                                          //specific pin places in 32bit register
 80148ca:	683b      	ldr	r3, [r7, #0]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	61bb      	str	r3, [r7, #24]

  //*****************set PUPDR register****************
  if (gpio_cfg->pull <= 2)
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	795b      	ldrb	r3, [r3, #5]
 80148d4:	2b02      	cmp	r3, #2
 80148d6:	d813      	bhi.n	8014900 <GPIOPUPDR+0x4a>
  {
    reg_val = gpio->PUPDR;                                                        //read actual value from register
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	68db      	ldr	r3, [r3, #12]
 80148dc:	617b      	str	r3, [r7, #20]
    reg_val &= reset_mask;                                                        //reset bits
 80148de:	697a      	ldr	r2, [r7, #20]
 80148e0:	69fb      	ldr	r3, [r7, #28]
 80148e2:	4013      	ands	r3, r2
 80148e4:	617b      	str	r3, [r7, #20]
    reg_val |= gpio_cfg->pull << pin_number;                                      //shift bits to specific place
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	795b      	ldrb	r3, [r3, #5]
 80148ea:	461a      	mov	r2, r3
 80148ec:	69bb      	ldr	r3, [r7, #24]
 80148ee:	fa02 f303 	lsl.w	r3, r2, r3
 80148f2:	461a      	mov	r2, r3
 80148f4:	697b      	ldr	r3, [r7, #20]
 80148f6:	4313      	orrs	r3, r2
 80148f8:	617b      	str	r3, [r7, #20]
    gpio->PUPDR = reg_val;                                                        //write to register
 80148fa:	68bb      	ldr	r3, [r7, #8]
 80148fc:	697a      	ldr	r2, [r7, #20]
 80148fe:	60da      	str	r2, [r3, #12]
  }
}
 8014900:	bf00      	nop
 8014902:	3724      	adds	r7, #36	; 0x24
 8014904:	46bd      	mov	sp, r7
 8014906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801490a:	4770      	bx	lr

0801490c <GPIOALTER>:

static void GPIOALTER(GPIOcfgType *gpio_cfg, GPIO_TypeDef* gpio, uint32_t* reset_maskptr, uint32_t* pin_numberptr)
{
 801490c:	b480      	push	{r7}
 801490e:	b089      	sub	sp, #36	; 0x24
 8014910:	af00      	add	r7, sp, #0
 8014912:	60f8      	str	r0, [r7, #12]
 8014914:	60b9      	str	r1, [r7, #8]
 8014916:	607a      	str	r2, [r7, #4]
 8014918:	603b      	str	r3, [r7, #0]
  uint32_t reg_val;                                                              //used to write to the register
  uint32_t reset_mask = *reset_maskptr;                                          //used to clear specific pin place in registers
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	681b      	ldr	r3, [r3, #0]
 801491e:	61fb      	str	r3, [r7, #28]
  uint32_t pin_number = *pin_numberptr;                                          //specific pin places in 32bit register
 8014920:	683b      	ldr	r3, [r7, #0]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	61bb      	str	r3, [r7, #24]

  //*****************set ALTER register****************
  if (gpio_cfg->mode == alternate)
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	789b      	ldrb	r3, [r3, #2]
 801492a:	2b02      	cmp	r3, #2
 801492c:	d13b      	bne.n	80149a6 <GPIOALTER+0x9a>
  {
    if (gpio_cfg->alter < 16)
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	799b      	ldrb	r3, [r3, #6]
 8014932:	2b0f      	cmp	r3, #15
 8014934:	d837      	bhi.n	80149a6 <GPIOALTER+0x9a>
    {
      pin_number *= 2;                                                            //one pin has 4 config bits
 8014936:	69bb      	ldr	r3, [r7, #24]
 8014938:	005b      	lsls	r3, r3, #1
 801493a:	61bb      	str	r3, [r7, #24]
      reset_mask = ~(0b1111 << pin_number);
 801493c:	220f      	movs	r2, #15
 801493e:	69bb      	ldr	r3, [r7, #24]
 8014940:	fa02 f303 	lsl.w	r3, r2, r3
 8014944:	43db      	mvns	r3, r3
 8014946:	61fb      	str	r3, [r7, #28]
      if (pin_number > 28)                                                        //config MSB of AFR register (in stm32l4 are two alter registers)
 8014948:	69bb      	ldr	r3, [r7, #24]
 801494a:	2b1c      	cmp	r3, #28
 801494c:	d917      	bls.n	801497e <GPIOALTER+0x72>
      {
        pin_number -= 32;                                                        //shift data to beginning of second register
 801494e:	69bb      	ldr	r3, [r7, #24]
 8014950:	3b20      	subs	r3, #32
 8014952:	61bb      	str	r3, [r7, #24]
        reg_val = gpio->AFR[1];                                                 //read actual value from AFR[1] register
 8014954:	68bb      	ldr	r3, [r7, #8]
 8014956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014958:	617b      	str	r3, [r7, #20]
        reg_val &= reset_mask;
 801495a:	697a      	ldr	r2, [r7, #20]
 801495c:	69fb      	ldr	r3, [r7, #28]
 801495e:	4013      	ands	r3, r2
 8014960:	617b      	str	r3, [r7, #20]
        reg_val |= gpio_cfg->alter << pin_number;                                 //shift data to specific place in the register
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	799b      	ldrb	r3, [r3, #6]
 8014966:	461a      	mov	r2, r3
 8014968:	69bb      	ldr	r3, [r7, #24]
 801496a:	fa02 f303 	lsl.w	r3, r2, r3
 801496e:	461a      	mov	r2, r3
 8014970:	697b      	ldr	r3, [r7, #20]
 8014972:	4313      	orrs	r3, r2
 8014974:	617b      	str	r3, [r7, #20]
        gpio->AFR[1] = reg_val;
 8014976:	68bb      	ldr	r3, [r7, #8]
 8014978:	697a      	ldr	r2, [r7, #20]
 801497a:	625a      	str	r2, [r3, #36]	; 0x24
        gpio->AFR[0] = reg_val;
      }
    }
  }

}
 801497c:	e013      	b.n	80149a6 <GPIOALTER+0x9a>
        reg_val = gpio->AFR[0];                                                   //config LSB of AFR register
 801497e:	68bb      	ldr	r3, [r7, #8]
 8014980:	6a1b      	ldr	r3, [r3, #32]
 8014982:	617b      	str	r3, [r7, #20]
        reg_val &= reset_mask;
 8014984:	697a      	ldr	r2, [r7, #20]
 8014986:	69fb      	ldr	r3, [r7, #28]
 8014988:	4013      	ands	r3, r2
 801498a:	617b      	str	r3, [r7, #20]
        reg_val |= gpio_cfg->alter << pin_number;
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	799b      	ldrb	r3, [r3, #6]
 8014990:	461a      	mov	r2, r3
 8014992:	69bb      	ldr	r3, [r7, #24]
 8014994:	fa02 f303 	lsl.w	r3, r2, r3
 8014998:	461a      	mov	r2, r3
 801499a:	697b      	ldr	r3, [r7, #20]
 801499c:	4313      	orrs	r3, r2
 801499e:	617b      	str	r3, [r7, #20]
        gpio->AFR[0] = reg_val;
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	697a      	ldr	r2, [r7, #20]
 80149a4:	621a      	str	r2, [r3, #32]
}
 80149a6:	bf00      	nop
 80149a8:	3724      	adds	r7, #36	; 0x24
 80149aa:	46bd      	mov	sp, r7
 80149ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b0:	4770      	bx	lr

080149b2 <GPIOPORT>:

static void GPIOPORT(GPIOPortType port, GPIO_TypeDef** gpio)
{
 80149b2:	b480      	push	{r7}
 80149b4:	b083      	sub	sp, #12
 80149b6:	af00      	add	r7, sp, #0
 80149b8:	4603      	mov	r3, r0
 80149ba:	6039      	str	r1, [r7, #0]
 80149bc:	71fb      	strb	r3, [r7, #7]

  switch (port)                                                           //assigned GPIO to PORT using CMSIS
 80149be:	79fb      	ldrb	r3, [r7, #7]
 80149c0:	3b01      	subs	r3, #1
 80149c2:	2b07      	cmp	r3, #7
 80149c4:	d832      	bhi.n	8014a2c <GPIOPORT+0x7a>
 80149c6:	a201      	add	r2, pc, #4	; (adr r2, 80149cc <GPIOPORT+0x1a>)
 80149c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149cc:	080149ed 	.word	0x080149ed
 80149d0:	080149f5 	.word	0x080149f5
 80149d4:	080149fd 	.word	0x080149fd
 80149d8:	08014a05 	.word	0x08014a05
 80149dc:	08014a0d 	.word	0x08014a0d
 80149e0:	08014a15 	.word	0x08014a15
 80149e4:	08014a1d 	.word	0x08014a1d
 80149e8:	08014a25 	.word	0x08014a25
  {
    case PORTA :
      *gpio = GPIOA;
 80149ec:	683b      	ldr	r3, [r7, #0]
 80149ee:	4a12      	ldr	r2, [pc, #72]	; (8014a38 <GPIOPORT+0x86>)
 80149f0:	601a      	str	r2, [r3, #0]
      break;
 80149f2:	e01b      	b.n	8014a2c <GPIOPORT+0x7a>
    case PORTB :
      *gpio = GPIOB;
 80149f4:	683b      	ldr	r3, [r7, #0]
 80149f6:	4a11      	ldr	r2, [pc, #68]	; (8014a3c <GPIOPORT+0x8a>)
 80149f8:	601a      	str	r2, [r3, #0]
      break;
 80149fa:	e017      	b.n	8014a2c <GPIOPORT+0x7a>
    case PORTC :
      *gpio = GPIOC;
 80149fc:	683b      	ldr	r3, [r7, #0]
 80149fe:	4a10      	ldr	r2, [pc, #64]	; (8014a40 <GPIOPORT+0x8e>)
 8014a00:	601a      	str	r2, [r3, #0]
      break;
 8014a02:	e013      	b.n	8014a2c <GPIOPORT+0x7a>
    case PORTD :
      *gpio = GPIOD;
 8014a04:	683b      	ldr	r3, [r7, #0]
 8014a06:	4a0f      	ldr	r2, [pc, #60]	; (8014a44 <GPIOPORT+0x92>)
 8014a08:	601a      	str	r2, [r3, #0]
      break;
 8014a0a:	e00f      	b.n	8014a2c <GPIOPORT+0x7a>
    case PORTE :
      *gpio = GPIOE;
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	4a0e      	ldr	r2, [pc, #56]	; (8014a48 <GPIOPORT+0x96>)
 8014a10:	601a      	str	r2, [r3, #0]
      break;
 8014a12:	e00b      	b.n	8014a2c <GPIOPORT+0x7a>
    case PORTF :
      *gpio = GPIOF;
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	4a0d      	ldr	r2, [pc, #52]	; (8014a4c <GPIOPORT+0x9a>)
 8014a18:	601a      	str	r2, [r3, #0]
      break;
 8014a1a:	e007      	b.n	8014a2c <GPIOPORT+0x7a>
    case PORTG :
      *gpio = GPIOG;
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	4a0c      	ldr	r2, [pc, #48]	; (8014a50 <GPIOPORT+0x9e>)
 8014a20:	601a      	str	r2, [r3, #0]
      break;
 8014a22:	e003      	b.n	8014a2c <GPIOPORT+0x7a>
    case PORTH :
      *gpio = GPIOH;
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	4a0b      	ldr	r2, [pc, #44]	; (8014a54 <GPIOPORT+0xa2>)
 8014a28:	601a      	str	r2, [r3, #0]
      break;
 8014a2a:	bf00      	nop
  }

}
 8014a2c:	bf00      	nop
 8014a2e:	370c      	adds	r7, #12
 8014a30:	46bd      	mov	sp, r7
 8014a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a36:	4770      	bx	lr
 8014a38:	40020000 	.word	0x40020000
 8014a3c:	40020400 	.word	0x40020400
 8014a40:	40020800 	.word	0x40020800
 8014a44:	40020c00 	.word	0x40020c00
 8014a48:	40021000 	.word	0x40021000
 8014a4c:	40021400 	.word	0x40021400
 8014a50:	40021800 	.word	0x40021800
 8014a54:	40021c00 	.word	0x40021c00

08014a58 <GPIOCheck>:

static int GPIOCheck(GPIOcfgType* gpio_cfg)
{
 8014a58:	b480      	push	{r7}
 8014a5a:	b093      	sub	sp, #76	; 0x4c
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	6078      	str	r0, [r7, #4]

  int ret = E_GPIO_OK;
 8014a60:	2300      	movs	r3, #0
 8014a62:	647b      	str	r3, [r7, #68]	; 0x44

  //******************************check correctness of gpio_cfg->pin user value******************
  int retPIN = -1;
 8014a64:	f04f 33ff 	mov.w	r3, #4294967295
 8014a68:	643b      	str	r3, [r7, #64]	; 0x40
  if (gpio_cfg->pin == 0)
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	881b      	ldrh	r3, [r3, #0]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d101      	bne.n	8014a76 <GPIOCheck+0x1e>
  {
    retPIN = 0;
 8014a72:	2300      	movs	r3, #0
 8014a74:	643b      	str	r3, [r7, #64]	; 0x40
  }
  int b = 1;
 8014a76:	2301      	movs	r3, #1
 8014a78:	63fb      	str	r3, [r7, #60]	; 0x3c
  do
  {
    if (gpio_cfg->pin == b)
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	881b      	ldrh	r3, [r3, #0]
 8014a7e:	461a      	mov	r2, r3
 8014a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a82:	429a      	cmp	r2, r3
 8014a84:	d101      	bne.n	8014a8a <GPIOCheck+0x32>
    {
      retPIN = b;
 8014a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a88:	643b      	str	r3, [r7, #64]	; 0x40
    }
    b = b << 1;
 8014a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a8c:	005b      	lsls	r3, r3, #1
 8014a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  while (b <= PIN15);
 8014a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014a96:	ddf0      	ble.n	8014a7a <GPIOCheck+0x22>

  //******************************check correctness of gpio_cfg->mode user value******************
  int retMode = -1;
 8014a98:	f04f 33ff 	mov.w	r3, #4294967295
 8014a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  for (int a = 0; a <= analog; a++)
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8014aa2:	e00a      	b.n	8014aba <GPIOCheck+0x62>
  {
    if (gpio_cfg->mode == a)
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	789b      	ldrb	r3, [r3, #2]
 8014aa8:	461a      	mov	r2, r3
 8014aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014aac:	429a      	cmp	r2, r3
 8014aae:	d101      	bne.n	8014ab4 <GPIOCheck+0x5c>
    {
      retMode = a;
 8014ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  for (int a = 0; a <= analog; a++)
 8014ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ab6:	3301      	adds	r3, #1
 8014ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8014aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014abc:	2b03      	cmp	r3, #3
 8014abe:	ddf1      	ble.n	8014aa4 <GPIOCheck+0x4c>
    }
  }

  //******************************check correctness of gpio_cfg->typ user value******************
  int retTyp = -1;
 8014ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ac4:	633b      	str	r3, [r7, #48]	; 0x30
  for (int a = 0; a <= openDrain; a++)
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014aca:	e00a      	b.n	8014ae2 <GPIOCheck+0x8a>
  {
    if (gpio_cfg->typ == a)
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	78db      	ldrb	r3, [r3, #3]
 8014ad0:	461a      	mov	r2, r3
 8014ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ad4:	429a      	cmp	r2, r3
 8014ad6:	d101      	bne.n	8014adc <GPIOCheck+0x84>
    {
      retTyp = a;
 8014ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ada:	633b      	str	r3, [r7, #48]	; 0x30
  for (int a = 0; a <= openDrain; a++)
 8014adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ade:	3301      	adds	r3, #1
 8014ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ae4:	2b01      	cmp	r3, #1
 8014ae6:	ddf1      	ble.n	8014acc <GPIOCheck+0x74>
    }
  }

  //******************************check correctness of gpio_cfg->speed user value******************
  int retSpeed = -1;
 8014ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8014aec:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int a = 0; a <= fast; a++)
 8014aee:	2300      	movs	r3, #0
 8014af0:	627b      	str	r3, [r7, #36]	; 0x24
 8014af2:	e00a      	b.n	8014b0a <GPIOCheck+0xb2>
  {
    if (gpio_cfg->speed == a)
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	791b      	ldrb	r3, [r3, #4]
 8014af8:	461a      	mov	r2, r3
 8014afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014afc:	429a      	cmp	r2, r3
 8014afe:	d101      	bne.n	8014b04 <GPIOCheck+0xac>
    {
      retSpeed = a;
 8014b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b02:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int a = 0; a <= fast; a++)
 8014b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b06:	3301      	adds	r3, #1
 8014b08:	627b      	str	r3, [r7, #36]	; 0x24
 8014b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b0c:	2b03      	cmp	r3, #3
 8014b0e:	ddf1      	ble.n	8014af4 <GPIOCheck+0x9c>
    }
  }

  //******************************check correctness of gpio_cfg->pull user value******************
  int retPull = -1;
 8014b10:	f04f 33ff 	mov.w	r3, #4294967295
 8014b14:	623b      	str	r3, [r7, #32]
  for (int a = 0; a <= pullDown; a++)
 8014b16:	2300      	movs	r3, #0
 8014b18:	61fb      	str	r3, [r7, #28]
 8014b1a:	e00a      	b.n	8014b32 <GPIOCheck+0xda>
  {
    if (gpio_cfg->pull == a)
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	795b      	ldrb	r3, [r3, #5]
 8014b20:	461a      	mov	r2, r3
 8014b22:	69fb      	ldr	r3, [r7, #28]
 8014b24:	429a      	cmp	r2, r3
 8014b26:	d101      	bne.n	8014b2c <GPIOCheck+0xd4>
    {
      retPull = a;
 8014b28:	69fb      	ldr	r3, [r7, #28]
 8014b2a:	623b      	str	r3, [r7, #32]
  for (int a = 0; a <= pullDown; a++)
 8014b2c:	69fb      	ldr	r3, [r7, #28]
 8014b2e:	3301      	adds	r3, #1
 8014b30:	61fb      	str	r3, [r7, #28]
 8014b32:	69fb      	ldr	r3, [r7, #28]
 8014b34:	2b02      	cmp	r3, #2
 8014b36:	ddf1      	ble.n	8014b1c <GPIOCheck+0xc4>
    }
  }

  //******************************check correctness of gpio_cfg->alter user value******************
  int retAlter = -1;
 8014b38:	f04f 33ff 	mov.w	r3, #4294967295
 8014b3c:	61bb      	str	r3, [r7, #24]
  if (gpio_cfg->mode == alternate)
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	789b      	ldrb	r3, [r3, #2]
 8014b42:	2b02      	cmp	r3, #2
 8014b44:	d110      	bne.n	8014b68 <GPIOCheck+0x110>
    for (int a = 0; a <= AF15; a++)
 8014b46:	2300      	movs	r3, #0
 8014b48:	617b      	str	r3, [r7, #20]
 8014b4a:	e00a      	b.n	8014b62 <GPIOCheck+0x10a>
    {
      if (gpio_cfg->alter == a)
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	799b      	ldrb	r3, [r3, #6]
 8014b50:	461a      	mov	r2, r3
 8014b52:	697b      	ldr	r3, [r7, #20]
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d101      	bne.n	8014b5c <GPIOCheck+0x104>
      {
        retAlter = a;
 8014b58:	697b      	ldr	r3, [r7, #20]
 8014b5a:	61bb      	str	r3, [r7, #24]
    for (int a = 0; a <= AF15; a++)
 8014b5c:	697b      	ldr	r3, [r7, #20]
 8014b5e:	3301      	adds	r3, #1
 8014b60:	617b      	str	r3, [r7, #20]
 8014b62:	697b      	ldr	r3, [r7, #20]
 8014b64:	2b0f      	cmp	r3, #15
 8014b66:	ddf1      	ble.n	8014b4c <GPIOCheck+0xf4>
      }
    }

  //******************************check correctness of gpio_cfg->port user value******************
  int retPort = -1;
 8014b68:	f04f 33ff 	mov.w	r3, #4294967295
 8014b6c:	613b      	str	r3, [r7, #16]
  for (int a = 1; a <= PORTH; a++)
 8014b6e:	2301      	movs	r3, #1
 8014b70:	60fb      	str	r3, [r7, #12]
 8014b72:	e00a      	b.n	8014b8a <GPIOCheck+0x132>
  {
    if (gpio_cfg->port == a)
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	79db      	ldrb	r3, [r3, #7]
 8014b78:	461a      	mov	r2, r3
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	429a      	cmp	r2, r3
 8014b7e:	d101      	bne.n	8014b84 <GPIOCheck+0x12c>
    {
      retPort = a;
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	613b      	str	r3, [r7, #16]
  for (int a = 1; a <= PORTH; a++)
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	3301      	adds	r3, #1
 8014b88:	60fb      	str	r3, [r7, #12]
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	2b08      	cmp	r3, #8
 8014b8e:	ddf1      	ble.n	8014b74 <GPIOCheck+0x11c>
    }
  }

  //****************************check if is any error*********************************************
  if ((gpio_cfg->mode == alternate) && (retAlter == -1))
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	789b      	ldrb	r3, [r3, #2]
 8014b94:	2b02      	cmp	r3, #2
 8014b96:	d107      	bne.n	8014ba8 <GPIOCheck+0x150>
 8014b98:	69bb      	ldr	r3, [r7, #24]
 8014b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b9e:	d103      	bne.n	8014ba8 <GPIOCheck+0x150>
  {
    ret = E_GPIO_INVALID_PARAM;
 8014ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8014ba6:	e01d      	b.n	8014be4 <GPIOCheck+0x18c>
  }
  else if ((retPIN != -1) && (retMode != -1) && (retTyp != -1) && (retSpeed != -1) && (retPull != -1)
 8014ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bae:	d016      	beq.n	8014bde <GPIOCheck+0x186>
 8014bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bb6:	d012      	beq.n	8014bde <GPIOCheck+0x186>
 8014bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bbe:	d00e      	beq.n	8014bde <GPIOCheck+0x186>
 8014bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bc6:	d00a      	beq.n	8014bde <GPIOCheck+0x186>
 8014bc8:	6a3b      	ldr	r3, [r7, #32]
 8014bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bce:	d006      	beq.n	8014bde <GPIOCheck+0x186>
           && (retPort != -1))
 8014bd0:	693b      	ldr	r3, [r7, #16]
 8014bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bd6:	d002      	beq.n	8014bde <GPIOCheck+0x186>
  {
    ret = E_GPIO_OK;
 8014bd8:	2300      	movs	r3, #0
 8014bda:	647b      	str	r3, [r7, #68]	; 0x44
 8014bdc:	e002      	b.n	8014be4 <GPIOCheck+0x18c>
  }
  else
  {
    ret = E_GPIO_INVALID_PARAM;
 8014bde:	f04f 33ff 	mov.w	r3, #4294967295
 8014be2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return ret;
 8014be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8014be6:	4618      	mov	r0, r3
 8014be8:	374c      	adds	r7, #76	; 0x4c
 8014bea:	46bd      	mov	sp, r7
 8014bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf0:	4770      	bx	lr

08014bf2 <GPIOIsOutput>:

static uint32_t GPIOIsOutput( GPIO_TypeDef* gpio, GPIOPinType pin )
{
 8014bf2:	b480      	push	{r7}
 8014bf4:	b087      	sub	sp, #28
 8014bf6:	af00      	add	r7, sp, #0
 8014bf8:	6078      	str	r0, [r7, #4]
 8014bfa:	460b      	mov	r3, r1
 8014bfc:	807b      	strh	r3, [r7, #2]
  uint32_t ret;                                                                  //value to return
  uint32_t pinNumber;                                                            //specific pin places in 32bit register
  uint32_t outputMode;

  pinNumber = __builtin_ctz(pin) * 2;                                            //count trailing zeros (how many zeros form the right). One pin has 2 config bits in this registers
 8014bfe:	887b      	ldrh	r3, [r7, #2]
 8014c00:	fa93 f3a3 	rbit	r3, r3
 8014c04:	fab3 f383 	clz	r3, r3
 8014c08:	005b      	lsls	r3, r3, #1
 8014c0a:	613b      	str	r3, [r7, #16]
  outputMode = 0x01 << pinNumber;                                                //used to term place at moder register specific pin
 8014c0c:	2201      	movs	r2, #1
 8014c0e:	693b      	ldr	r3, [r7, #16]
 8014c10:	fa02 f303 	lsl.w	r3, r2, r3
 8014c14:	60fb      	str	r3, [r7, #12]

  if (gpio->MODER & outputMode)                                                  //check if specific pin is at output mode
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	681a      	ldr	r2, [r3, #0]
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	4013      	ands	r3, r2
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d002      	beq.n	8014c28 <GPIOIsOutput+0x36>
  {
    ret = 1;                                                                     //if is output return 1
 8014c22:	2301      	movs	r3, #1
 8014c24:	617b      	str	r3, [r7, #20]
 8014c26:	e001      	b.n	8014c2c <GPIOIsOutput+0x3a>
  }
  else
  {
    ret = 0;                                                                     //if is not output return 0
 8014c28:	2300      	movs	r3, #0
 8014c2a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8014c2c:	697b      	ldr	r3, [r7, #20]
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	371c      	adds	r7, #28
 8014c32:	46bd      	mov	sp, r7
 8014c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c38:	4770      	bx	lr

08014c3a <GPIOIsAlternate>:

static uint32_t GPIOIsAlternate(GPIO_TypeDef* gpio, GPIOPinType pin)
{
 8014c3a:	b480      	push	{r7}
 8014c3c:	b087      	sub	sp, #28
 8014c3e:	af00      	add	r7, sp, #0
 8014c40:	6078      	str	r0, [r7, #4]
 8014c42:	460b      	mov	r3, r1
 8014c44:	807b      	strh	r3, [r7, #2]
  uint32_t ret;                                                                  //value to return
  uint32_t pinNumber;                                                            //specific pin places in 32bit register
  uint32_t alternateMode;

  pinNumber = __builtin_ctz(pin) * 2;                                            //count trailing zeros (how many zeros form the right). One pin has 2 config bits in this registers
 8014c46:	887b      	ldrh	r3, [r7, #2]
 8014c48:	fa93 f3a3 	rbit	r3, r3
 8014c4c:	fab3 f383 	clz	r3, r3
 8014c50:	005b      	lsls	r3, r3, #1
 8014c52:	613b      	str	r3, [r7, #16]
  alternateMode = 0x02 << pinNumber;                                             //used to term place at moder register specific pin
 8014c54:	2202      	movs	r2, #2
 8014c56:	693b      	ldr	r3, [r7, #16]
 8014c58:	fa02 f303 	lsl.w	r3, r2, r3
 8014c5c:	60fb      	str	r3, [r7, #12]

  if (gpio->MODER & alternateMode)                                               //check if specific pin is at alternate mode
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	681a      	ldr	r2, [r3, #0]
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	4013      	ands	r3, r2
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d002      	beq.n	8014c70 <GPIOIsAlternate+0x36>
  {
    ret = 1;                                                                     //if is an alternate return 1
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	617b      	str	r3, [r7, #20]
 8014c6e:	e001      	b.n	8014c74 <GPIOIsAlternate+0x3a>
  }
  else
  {
    ret = 0;                                                                     //if is not an alternate return 0
 8014c70:	2300      	movs	r3, #0
 8014c72:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8014c74:	697b      	ldr	r3, [r7, #20]
}
 8014c76:	4618      	mov	r0, r3
 8014c78:	371c      	adds	r7, #28
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c80:	4770      	bx	lr

08014c82 <gpioCfg>:


//***************************************INTERFACE FUNCTION****************************

int gpioCfg(GPIOcfgType* gpio_cfg)
{
 8014c82:	b580      	push	{r7, lr}
 8014c84:	b086      	sub	sp, #24
 8014c86:	af00      	add	r7, sp, #0
 8014c88:	6078      	str	r0, [r7, #4]
		01: Pull-up
		10: Pull-down
		11: Reserved
	 */

  int ret = E_GPIO_OK;
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	617b      	str	r3, [r7, #20]

  GPIO_TypeDef* gpio;                                                                //using to implemented CMISIS in driver

  uint32_t* reset_maskptr = 0;                                                       //used to clear specific pin place in registers
 8014c8e:	2300      	movs	r3, #0
 8014c90:	60fb      	str	r3, [r7, #12]
  uint32_t* pin_numberptr = 0;                                                       //specific pin places in 32bit register
 8014c92:	2300      	movs	r3, #0
 8014c94:	60bb      	str	r3, [r7, #8]

  if (GPIOCheck(gpio_cfg) == E_GPIO_OK)                                              //check correctness of fields value in structure GPIOcfgType
 8014c96:	6878      	ldr	r0, [r7, #4]
 8014c98:	f7ff fede 	bl	8014a58 <GPIOCheck>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d137      	bne.n	8014d12 <gpioCfg+0x90>
  {
    GPIOPORT(gpio_cfg->port, &gpio);                                                 //implemented CMISIS macros
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	79db      	ldrb	r3, [r3, #7]
 8014ca6:	f107 0210 	add.w	r2, r7, #16
 8014caa:	4611      	mov	r1, r2
 8014cac:	4618      	mov	r0, r3
 8014cae:	f7ff fe80 	bl	80149b2 <GPIOPORT>
    GPIOClock(gpio_cfg);                                                             //config clock for specific GPIO
 8014cb2:	6878      	ldr	r0, [r7, #4]
 8014cb4:	f7ff fd1e 	bl	80146f4 <GPIOClock>
    GPIOOTYPER(gpio_cfg, gpio, &reset_maskptr, &pin_numberptr);                      //config OTYPER register and modify reset_mask and pin_number variables
 8014cb8:	6939      	ldr	r1, [r7, #16]
 8014cba:	f107 0308 	add.w	r3, r7, #8
 8014cbe:	f107 020c 	add.w	r2, r7, #12
 8014cc2:	6878      	ldr	r0, [r7, #4]
 8014cc4:	f7ff fd6a 	bl	801479c <GPIOOTYPER>
    GPIOMODER(gpio_cfg, gpio, reset_maskptr, pin_numberptr);                         //config MODER register
 8014cc8:	6939      	ldr	r1, [r7, #16]
 8014cca:	68fa      	ldr	r2, [r7, #12]
 8014ccc:	68bb      	ldr	r3, [r7, #8]
 8014cce:	6878      	ldr	r0, [r7, #4]
 8014cd0:	f7ff fd9f 	bl	8014812 <GPIOMODER>
    GPIOOSPEEDR(gpio_cfg, gpio, reset_maskptr, pin_numberptr);                       //config OSPEEDR register
 8014cd4:	6939      	ldr	r1, [r7, #16]
 8014cd6:	68fa      	ldr	r2, [r7, #12]
 8014cd8:	68bb      	ldr	r3, [r7, #8]
 8014cda:	6878      	ldr	r0, [r7, #4]
 8014cdc:	f7ff fdc0 	bl	8014860 <GPIOOSPEEDR>
    GPIOPUPDR(gpio_cfg, gpio, reset_maskptr, pin_numberptr);                         //config PUPDR register
 8014ce0:	6939      	ldr	r1, [r7, #16]
 8014ce2:	68fa      	ldr	r2, [r7, #12]
 8014ce4:	68bb      	ldr	r3, [r7, #8]
 8014ce6:	6878      	ldr	r0, [r7, #4]
 8014ce8:	f7ff fde5 	bl	80148b6 <GPIOPUPDR>
    GPIOALTER(gpio_cfg, gpio, reset_maskptr, pin_numberptr);                         //config ALTER register
 8014cec:	6939      	ldr	r1, [r7, #16]
 8014cee:	68fa      	ldr	r2, [r7, #12]
 8014cf0:	68bb      	ldr	r3, [r7, #8]
 8014cf2:	6878      	ldr	r0, [r7, #4]
 8014cf4:	f7ff fe0a 	bl	801490c <GPIOALTER>

    if(gpio_cfg->mode == output)                                                     //if gpio_cfg->mode is set as output, set default value of specific pin is "CLEAR"
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	789b      	ldrb	r3, [r3, #2]
 8014cfc:	2b01      	cmp	r3, #1
 8014cfe:	d10b      	bne.n	8014d18 <gpioCfg+0x96>
    {
      gpioPinSetState(gpio_cfg->port, gpio_cfg->pin, clear);                         //set specific pin to "0"
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	79d8      	ldrb	r0, [r3, #7]
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	881b      	ldrh	r3, [r3, #0]
 8014d08:	2200      	movs	r2, #0
 8014d0a:	4619      	mov	r1, r3
 8014d0c:	f000 f809 	bl	8014d22 <gpioPinSetState>
 8014d10:	e002      	b.n	8014d18 <gpioCfg+0x96>
    }

  }
  else
  {
    ret = E_GPIO_INVALID_PARAM;
 8014d12:	f04f 33ff 	mov.w	r3, #4294967295
 8014d16:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8014d18:	697b      	ldr	r3, [r7, #20]
}
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	3718      	adds	r7, #24
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	bd80      	pop	{r7, pc}

08014d22 <gpioPinSetState>:


int gpioPinSetState(GPIOPortType port, GPIOPinType pin, GPIOSetType state)
{
 8014d22:	b580      	push	{r7, lr}
 8014d24:	b084      	sub	sp, #16
 8014d26:	af00      	add	r7, sp, #0
 8014d28:	4603      	mov	r3, r0
 8014d2a:	71fb      	strb	r3, [r7, #7]
 8014d2c:	460b      	mov	r3, r1
 8014d2e:	80bb      	strh	r3, [r7, #4]
 8014d30:	4613      	mov	r3, r2
 8014d32:	71bb      	strb	r3, [r7, #6]
  int ret = E_GPIO_OK;
 8014d34:	2300      	movs	r3, #0
 8014d36:	60fb      	str	r3, [r7, #12]
  GPIO_TypeDef* gpio = 0;
 8014d38:	2300      	movs	r3, #0
 8014d3a:	60bb      	str	r3, [r7, #8]
  GPIOPORT(port, &gpio);                                                      //implemented CMISIS macros
 8014d3c:	f107 0208 	add.w	r2, r7, #8
 8014d40:	79fb      	ldrb	r3, [r7, #7]
 8014d42:	4611      	mov	r1, r2
 8014d44:	4618      	mov	r0, r3
 8014d46:	f7ff fe34 	bl	80149b2 <GPIOPORT>

  if (GPIOIsOutput(gpio, pin) == 1)                                           //check if specific pin is output
 8014d4a:	68bb      	ldr	r3, [r7, #8]
 8014d4c:	88ba      	ldrh	r2, [r7, #4]
 8014d4e:	4611      	mov	r1, r2
 8014d50:	4618      	mov	r0, r3
 8014d52:	f7ff ff4e 	bl	8014bf2 <GPIOIsOutput>
 8014d56:	4603      	mov	r3, r0
 8014d58:	2b01      	cmp	r3, #1
 8014d5a:	d111      	bne.n	8014d80 <gpioPinSetState+0x5e>
  {

    if (state == clear)                                                       //reset pin
 8014d5c:	79bb      	ldrb	r3, [r7, #6]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d103      	bne.n	8014d6a <gpioPinSetState+0x48>
    {
      gpio->BSRRH = pin;
 8014d62:	68bb      	ldr	r3, [r7, #8]
 8014d64:	88ba      	ldrh	r2, [r7, #4]
 8014d66:	835a      	strh	r2, [r3, #26]
 8014d68:	e00d      	b.n	8014d86 <gpioPinSetState+0x64>
    }

    else if (state == set)	                                                   //set pin
 8014d6a:	79bb      	ldrb	r3, [r7, #6]
 8014d6c:	2b01      	cmp	r3, #1
 8014d6e:	d103      	bne.n	8014d78 <gpioPinSetState+0x56>
    {
      gpio->BSRRL = pin;
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	88ba      	ldrh	r2, [r7, #4]
 8014d74:	831a      	strh	r2, [r3, #24]
 8014d76:	e006      	b.n	8014d86 <gpioPinSetState+0x64>
    }
    else
    {
      ret = E_GPIO_NOT_INITIALIZE;
 8014d78:	f06f 0301 	mvn.w	r3, #1
 8014d7c:	60fb      	str	r3, [r7, #12]
 8014d7e:	e002      	b.n	8014d86 <gpioPinSetState+0x64>
    }

  }
  else
  {
    ret = E_GPIO_NOT_OUTPUT_MODE;
 8014d80:	f06f 0302 	mvn.w	r3, #2
 8014d84:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014d86:	68fb      	ldr	r3, [r7, #12]
}
 8014d88:	4618      	mov	r0, r3
 8014d8a:	3710      	adds	r7, #16
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}

08014d90 <gpioGetPinState>:


int gpioGetPinState(GPIOPortType port, GPIOPinType pin)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b084      	sub	sp, #16
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	4603      	mov	r3, r0
 8014d98:	460a      	mov	r2, r1
 8014d9a:	71fb      	strb	r3, [r7, #7]
 8014d9c:	4613      	mov	r3, r2
 8014d9e:	80bb      	strh	r3, [r7, #4]
  int ret;
  GPIO_TypeDef* gpio = 0;
 8014da0:	2300      	movs	r3, #0
 8014da2:	60bb      	str	r3, [r7, #8]
  GPIOPORT(port, &gpio);                                                //implemented CMISIS macros
 8014da4:	f107 0208 	add.w	r2, r7, #8
 8014da8:	79fb      	ldrb	r3, [r7, #7]
 8014daa:	4611      	mov	r1, r2
 8014dac:	4618      	mov	r0, r3
 8014dae:	f7ff fe00 	bl	80149b2 <GPIOPORT>

  if (GPIOIsAlternate(gpio, pin) == 0)                                  //check if specific pin is not at alternate mode
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	88ba      	ldrh	r2, [r7, #4]
 8014db6:	4611      	mov	r1, r2
 8014db8:	4618      	mov	r0, r3
 8014dba:	f7ff ff3e 	bl	8014c3a <GPIOIsAlternate>
 8014dbe:	4603      	mov	r3, r0
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d112      	bne.n	8014dea <gpioGetPinState+0x5a>
  {
    if (gpio->IDR & pin)                                                //if pin is set
 8014dc4:	68bb      	ldr	r3, [r7, #8]
 8014dc6:	691a      	ldr	r2, [r3, #16]
 8014dc8:	88bb      	ldrh	r3, [r7, #4]
 8014dca:	4013      	ands	r3, r2
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d002      	beq.n	8014dd6 <gpioGetPinState+0x46>
    {
      ret = set;
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	60fb      	str	r3, [r7, #12]
 8014dd4:	e00c      	b.n	8014df0 <gpioGetPinState+0x60>
    }
    else if (~(gpio->IDR & pin))                                        //if pin is reset
 8014dd6:	68bb      	ldr	r3, [r7, #8]
 8014dd8:	691a      	ldr	r2, [r3, #16]
 8014dda:	88bb      	ldrh	r3, [r7, #4]
 8014ddc:	4013      	ands	r3, r2
 8014dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014de2:	d005      	beq.n	8014df0 <gpioGetPinState+0x60>
    {
      ret = clear;
 8014de4:	2300      	movs	r3, #0
 8014de6:	60fb      	str	r3, [r7, #12]
 8014de8:	e002      	b.n	8014df0 <gpioGetPinState+0x60>
    }

  }
  else
  {
    ret = E_GPIO_ALTERNATE_MODE;
 8014dea:	f06f 0303 	mvn.w	r3, #3
 8014dee:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014df0:	68fb      	ldr	r3, [r7, #12]
}
 8014df2:	4618      	mov	r0, r3
 8014df4:	3710      	adds	r7, #16
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bd80      	pop	{r7, pc}
 8014dfa:	bf00      	nop

08014dfc <main>:

void vApplicationTickHook( void );


int main(void)
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b084      	sub	sp, #16
 8014e00:	af02      	add	r7, sp, #8
  int i = 0;
 8014e02:	2300      	movs	r3, #0
 8014e04:	607b      	str	r3, [r7, #4]

	// Hardware configuration
	prvSetupHardware();
 8014e06:	f000 f83d 	bl	8014e84 <prvSetupHardware>

	xSemaphore = xSemaphoreCreateBinary();
 8014e0a:	2203      	movs	r2, #3
 8014e0c:	2100      	movs	r1, #0
 8014e0e:	2001      	movs	r0, #1
 8014e10:	f7ec f954 	bl	80010bc <xQueueGenericCreate>
 8014e14:	4602      	mov	r2, r0
 8014e16:	4b13      	ldr	r3, [pc, #76]	; (8014e64 <main+0x68>)
 8014e18:	601a      	str	r2, [r3, #0]
	if( xSemaphore == NULL ) while(1);
 8014e1a:	4b12      	ldr	r3, [pc, #72]	; (8014e64 <main+0x68>)
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d100      	bne.n	8014e24 <main+0x28>
 8014e22:	e7fe      	b.n	8014e22 <main+0x26>

	xMutex = xSemaphoreCreateMutex();
 8014e24:	2001      	movs	r0, #1
 8014e26:	f7ec f9c1 	bl	80011ac <xQueueCreateMutex>
 8014e2a:	4602      	mov	r2, r0
 8014e2c:	4b0e      	ldr	r3, [pc, #56]	; (8014e68 <main+0x6c>)
 8014e2e:	601a      	str	r2, [r3, #0]

	xTaskCreate( vLedTask1, "LEDTask1", 100, NULL, 1, &xLed1 );
 8014e30:	4b0e      	ldr	r3, [pc, #56]	; (8014e6c <main+0x70>)
 8014e32:	9301      	str	r3, [sp, #4]
 8014e34:	2301      	movs	r3, #1
 8014e36:	9300      	str	r3, [sp, #0]
 8014e38:	2300      	movs	r3, #0
 8014e3a:	2264      	movs	r2, #100	; 0x64
 8014e3c:	490c      	ldr	r1, [pc, #48]	; (8014e70 <main+0x74>)
 8014e3e:	480d      	ldr	r0, [pc, #52]	; (8014e74 <main+0x78>)
 8014e40:	f7ee f91e 	bl	8003080 <xTaskCreate>
	xTaskCreate( vLedTask2, "LEDTask2", 100, NULL, 2, &xLed2 );
 8014e44:	4b0c      	ldr	r3, [pc, #48]	; (8014e78 <main+0x7c>)
 8014e46:	9301      	str	r3, [sp, #4]
 8014e48:	2302      	movs	r3, #2
 8014e4a:	9300      	str	r3, [sp, #0]
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	2264      	movs	r2, #100	; 0x64
 8014e50:	490a      	ldr	r1, [pc, #40]	; (8014e7c <main+0x80>)
 8014e52:	480b      	ldr	r0, [pc, #44]	; (8014e80 <main+0x84>)
 8014e54:	f7ee f914 	bl	8003080 <xTaskCreate>

	// Start the scheduler
	vTaskStartScheduler(); // should never return
 8014e58:	f7ee fe6e 	bl	8003b38 <vTaskStartScheduler>

  /* Infinite loop */
  while (1)
  {
	i++;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	3301      	adds	r3, #1
 8014e60:	607b      	str	r3, [r7, #4]
 8014e62:	e7fb      	b.n	8014e5c <main+0x60>
 8014e64:	20012da8 	.word	0x20012da8
 8014e68:	20012dac 	.word	0x20012dac
 8014e6c:	20012e00 	.word	0x20012e00
 8014e70:	08015924 	.word	0x08015924
 8014e74:	08014ee9 	.word	0x08014ee9
 8014e78:	20012dfc 	.word	0x20012dfc
 8014e7c:	08015930 	.word	0x08015930
 8014e80:	08014f75 	.word	0x08014f75

08014e84 <prvSetupHardware>:
}



static void prvSetupHardware(void)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	af00      	add	r7, sp, #0
	LedGreen.mode 	= output;
 8014e88:	4b15      	ldr	r3, [pc, #84]	; (8014ee0 <prvSetupHardware+0x5c>)
 8014e8a:	2201      	movs	r2, #1
 8014e8c:	709a      	strb	r2, [r3, #2]
	LedGreen.pin 	= LedGreen_pin;
 8014e8e:	4b14      	ldr	r3, [pc, #80]	; (8014ee0 <prvSetupHardware+0x5c>)
 8014e90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014e94:	801a      	strh	r2, [r3, #0]
	LedGreen.port 	= LedGreen_port;
 8014e96:	4b12      	ldr	r3, [pc, #72]	; (8014ee0 <prvSetupHardware+0x5c>)
 8014e98:	2204      	movs	r2, #4
 8014e9a:	71da      	strb	r2, [r3, #7]
	LedGreen.pull	= pullDown;
 8014e9c:	4b10      	ldr	r3, [pc, #64]	; (8014ee0 <prvSetupHardware+0x5c>)
 8014e9e:	2202      	movs	r2, #2
 8014ea0:	715a      	strb	r2, [r3, #5]
	LedGreen.typ	= pushPull;
 8014ea2:	4b0f      	ldr	r3, [pc, #60]	; (8014ee0 <prvSetupHardware+0x5c>)
 8014ea4:	2200      	movs	r2, #0
 8014ea6:	70da      	strb	r2, [r3, #3]
	gpioCfg(&LedGreen);
 8014ea8:	480d      	ldr	r0, [pc, #52]	; (8014ee0 <prvSetupHardware+0x5c>)
 8014eaa:	f7ff feea 	bl	8014c82 <gpioCfg>

	DiodeRed.mode     = output;
 8014eae:	4b0d      	ldr	r3, [pc, #52]	; (8014ee4 <prvSetupHardware+0x60>)
 8014eb0:	2201      	movs	r2, #1
 8014eb2:	709a      	strb	r2, [r3, #2]
	DiodeRed.pin      = DiodeRed_pin;
 8014eb4:	4b0b      	ldr	r3, [pc, #44]	; (8014ee4 <prvSetupHardware+0x60>)
 8014eb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014eba:	801a      	strh	r2, [r3, #0]
	DiodeRed.port     = DiodeRed_port;
 8014ebc:	4b09      	ldr	r3, [pc, #36]	; (8014ee4 <prvSetupHardware+0x60>)
 8014ebe:	2204      	movs	r2, #4
 8014ec0:	71da      	strb	r2, [r3, #7]
	DiodeRed.pull     = pullDown;
 8014ec2:	4b08      	ldr	r3, [pc, #32]	; (8014ee4 <prvSetupHardware+0x60>)
 8014ec4:	2202      	movs	r2, #2
 8014ec6:	715a      	strb	r2, [r3, #5]
	DiodeRed.typ      = pushPull;
 8014ec8:	4b06      	ldr	r3, [pc, #24]	; (8014ee4 <prvSetupHardware+0x60>)
 8014eca:	2200      	movs	r2, #0
 8014ecc:	70da      	strb	r2, [r3, #3]
	DiodeRed.speed    = medium;
 8014ece:	4b05      	ldr	r3, [pc, #20]	; (8014ee4 <prvSetupHardware+0x60>)
 8014ed0:	2201      	movs	r2, #1
 8014ed2:	711a      	strb	r2, [r3, #4]
	gpioCfg(&DiodeRed);
 8014ed4:	4803      	ldr	r0, [pc, #12]	; (8014ee4 <prvSetupHardware+0x60>)
 8014ed6:	f7ff fed4 	bl	8014c82 <gpioCfg>

}
 8014eda:	bf00      	nop
 8014edc:	bd80      	pop	{r7, pc}
 8014ede:	bf00      	nop
 8014ee0:	20012e08 	.word	0x20012e08
 8014ee4:	20012df4 	.word	0x20012df4

08014ee8 <vLedTask1>:

void vLedTask1( void *pvParameters )
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b086      	sub	sp, #24
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
    for( ;; )
    {
    	if(xSemaphoreTake(xMutex, 1000/portTICK_RATE_MS) == pdTRUE)
 8014ef0:	4b1e      	ldr	r3, [pc, #120]	; (8014f6c <vLedTask1+0x84>)
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f7ec fcfd 	bl	80018f8 <xQueueSemaphoreTake>
 8014efe:	4603      	mov	r3, r0
 8014f00:	2b01      	cmp	r3, #1
 8014f02:	d1f5      	bne.n	8014ef0 <vLedTask1+0x8>
    	{
			for(int a=0;a<1;a++)
 8014f04:	2300      	movs	r3, #0
 8014f06:	617b      	str	r3, [r7, #20]
 8014f08:	e024      	b.n	8014f54 <vLedTask1+0x6c>
			{
				gpioPinSetState(LedGreen_port, LedGreen_pin, 0);
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014f10:	2004      	movs	r0, #4
 8014f12:	f7ff ff06 	bl	8014d22 <gpioPinSetState>
				for(int a=0;a<100000;a++)
 8014f16:	2300      	movs	r3, #0
 8014f18:	613b      	str	r3, [r7, #16]
 8014f1a:	e003      	b.n	8014f24 <vLedTask1+0x3c>
				{
					__asm__(" NOP");
 8014f1c:	bf00      	nop
				for(int a=0;a<100000;a++)
 8014f1e:	693b      	ldr	r3, [r7, #16]
 8014f20:	3301      	adds	r3, #1
 8014f22:	613b      	str	r3, [r7, #16]
 8014f24:	693b      	ldr	r3, [r7, #16]
 8014f26:	4a12      	ldr	r2, [pc, #72]	; (8014f70 <vLedTask1+0x88>)
 8014f28:	4293      	cmp	r3, r2
 8014f2a:	ddf7      	ble.n	8014f1c <vLedTask1+0x34>
				}
				gpioPinSetState(LedGreen_port, LedGreen_pin, 1);
 8014f2c:	2201      	movs	r2, #1
 8014f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8014f32:	2004      	movs	r0, #4
 8014f34:	f7ff fef5 	bl	8014d22 <gpioPinSetState>
				for(int a=0;a<100000;a++)
 8014f38:	2300      	movs	r3, #0
 8014f3a:	60fb      	str	r3, [r7, #12]
 8014f3c:	e003      	b.n	8014f46 <vLedTask1+0x5e>
				{
					__asm__(" NOP");
 8014f3e:	bf00      	nop
				for(int a=0;a<100000;a++)
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	3301      	adds	r3, #1
 8014f44:	60fb      	str	r3, [r7, #12]
 8014f46:	68fb      	ldr	r3, [r7, #12]
 8014f48:	4a09      	ldr	r2, [pc, #36]	; (8014f70 <vLedTask1+0x88>)
 8014f4a:	4293      	cmp	r3, r2
 8014f4c:	ddf7      	ble.n	8014f3e <vLedTask1+0x56>
			for(int a=0;a<1;a++)
 8014f4e:	697b      	ldr	r3, [r7, #20]
 8014f50:	3301      	adds	r3, #1
 8014f52:	617b      	str	r3, [r7, #20]
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	ddd7      	ble.n	8014f0a <vLedTask1+0x22>
				}
			}
	    	xSemaphoreGive(xMutex);
 8014f5a:	4b04      	ldr	r3, [pc, #16]	; (8014f6c <vLedTask1+0x84>)
 8014f5c:	6818      	ldr	r0, [r3, #0]
 8014f5e:	2300      	movs	r3, #0
 8014f60:	2200      	movs	r2, #0
 8014f62:	2100      	movs	r1, #0
 8014f64:	f7ec f9d3 	bl	800130e <xQueueGenericSend>
    	if(xSemaphoreTake(xMutex, 1000/portTICK_RATE_MS) == pdTRUE)
 8014f68:	e7c2      	b.n	8014ef0 <vLedTask1+0x8>
 8014f6a:	bf00      	nop
 8014f6c:	20012dac 	.word	0x20012dac
 8014f70:	0001869f 	.word	0x0001869f

08014f74 <vLedTask2>:
    vTaskDelete( NULL );
}


void vLedTask2( void *pvParameters )
{
 8014f74:	b580      	push	{r7, lr}
 8014f76:	b086      	sub	sp, #24
 8014f78:	af00      	add	r7, sp, #0
 8014f7a:	6078      	str	r0, [r7, #4]
    for( ;; )
    {
    	if(xSemaphoreTake(xMutex, 1000/portTICK_RATE_MS) ==pdTRUE)
 8014f7c:	4b1f      	ldr	r3, [pc, #124]	; (8014ffc <vLedTask2+0x88>)
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8014f84:	4618      	mov	r0, r3
 8014f86:	f7ec fcb7 	bl	80018f8 <xQueueSemaphoreTake>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	2b01      	cmp	r3, #1
 8014f8e:	d1f5      	bne.n	8014f7c <vLedTask2+0x8>
    	{
        	for(int a=0;a<8;a++)
 8014f90:	2300      	movs	r3, #0
 8014f92:	617b      	str	r3, [r7, #20]
 8014f94:	e024      	b.n	8014fe0 <vLedTask2+0x6c>
        	{
        		gpioPinSetState(DiodeRed_port, DiodeRed_pin, 1);
 8014f96:	2201      	movs	r2, #1
 8014f98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014f9c:	2004      	movs	r0, #4
 8014f9e:	f7ff fec0 	bl	8014d22 <gpioPinSetState>
        		for(int a=0;a<100000;a++)
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	613b      	str	r3, [r7, #16]
 8014fa6:	e003      	b.n	8014fb0 <vLedTask2+0x3c>
        		{
        			__asm__(" NOP");
 8014fa8:	bf00      	nop
        		for(int a=0;a<100000;a++)
 8014faa:	693b      	ldr	r3, [r7, #16]
 8014fac:	3301      	adds	r3, #1
 8014fae:	613b      	str	r3, [r7, #16]
 8014fb0:	693b      	ldr	r3, [r7, #16]
 8014fb2:	4a13      	ldr	r2, [pc, #76]	; (8015000 <vLedTask2+0x8c>)
 8014fb4:	4293      	cmp	r3, r2
 8014fb6:	ddf7      	ble.n	8014fa8 <vLedTask2+0x34>
        		}
        		gpioPinSetState(DiodeRed_port, DiodeRed_pin, 0);
 8014fb8:	2200      	movs	r2, #0
 8014fba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014fbe:	2004      	movs	r0, #4
 8014fc0:	f7ff feaf 	bl	8014d22 <gpioPinSetState>
        		for(int a=0;a<100000;a++)
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	60fb      	str	r3, [r7, #12]
 8014fc8:	e003      	b.n	8014fd2 <vLedTask2+0x5e>
        		{
        			__asm__(" NOP");
 8014fca:	bf00      	nop
        		for(int a=0;a<100000;a++)
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	3301      	adds	r3, #1
 8014fd0:	60fb      	str	r3, [r7, #12]
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	4a0a      	ldr	r2, [pc, #40]	; (8015000 <vLedTask2+0x8c>)
 8014fd6:	4293      	cmp	r3, r2
 8014fd8:	ddf7      	ble.n	8014fca <vLedTask2+0x56>
        	for(int a=0;a<8;a++)
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	3301      	adds	r3, #1
 8014fde:	617b      	str	r3, [r7, #20]
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	2b07      	cmp	r3, #7
 8014fe4:	ddd7      	ble.n	8014f96 <vLedTask2+0x22>
        		}
        	}
        	xSemaphoreGive(xMutex);
 8014fe6:	4b05      	ldr	r3, [pc, #20]	; (8014ffc <vLedTask2+0x88>)
 8014fe8:	6818      	ldr	r0, [r3, #0]
 8014fea:	2300      	movs	r3, #0
 8014fec:	2200      	movs	r2, #0
 8014fee:	2100      	movs	r1, #0
 8014ff0:	f7ec f98d 	bl	800130e <xQueueGenericSend>
        	vTaskDelay(1);
 8014ff4:	2001      	movs	r0, #1
 8014ff6:	f7ee fa89 	bl	800350c <vTaskDelay>
    	if(xSemaphoreTake(xMutex, 1000/portTICK_RATE_MS) ==pdTRUE)
 8014ffa:	e7bf      	b.n	8014f7c <vLedTask2+0x8>
 8014ffc:	20012dac 	.word	0x20012dac
 8015000:	0001869f 	.word	0x0001869f

08015004 <vApplicationTickHook>:
    }
    vTaskDelete( NULL );
}

void vApplicationTickHook( void )
{
 8015004:	b480      	push	{r7}
 8015006:	af00      	add	r7, sp, #0
	fjutek++;
 8015008:	4b08      	ldr	r3, [pc, #32]	; (801502c <vApplicationTickHook+0x28>)
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	3301      	adds	r3, #1
 801500e:	4a07      	ldr	r2, [pc, #28]	; (801502c <vApplicationTickHook+0x28>)
 8015010:	6013      	str	r3, [r2, #0]
	if(fjutek == (32000))
 8015012:	4b06      	ldr	r3, [pc, #24]	; (801502c <vApplicationTickHook+0x28>)
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 801501a:	d102      	bne.n	8015022 <vApplicationTickHook+0x1e>
	{
		fjutek =0;
 801501c:	4b03      	ldr	r3, [pc, #12]	; (801502c <vApplicationTickHook+0x28>)
 801501e:	2200      	movs	r2, #0
 8015020:	601a      	str	r2, [r3, #0]
	}
}
 8015022:	bf00      	nop
 8015024:	46bd      	mov	sp, r7
 8015026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801502a:	4770      	bx	lr
 801502c:	20012e04 	.word	0x20012e04
 8015030:	08015948 	.word	0x08015948
 8015034:	20000000 	.word	0x20000000
 8015038:	20000030 	.word	0x20000030
 801503c:	20000030 	.word	0x20000030
 8015040:	20012e14 	.word	0x20012e14

08015044 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8015044:	b480      	push	{r7}
 8015046:	af00      	add	r7, sp, #0
}
 8015048:	bf00      	nop
 801504a:	46bd      	mov	sp, r7
 801504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015050:	4770      	bx	lr

08015052 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8015052:	b480      	push	{r7}
 8015054:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8015056:	e7fe      	b.n	8015056 <HardFault_Handler+0x4>

08015058 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8015058:	b480      	push	{r7}
 801505a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 801505c:	e7fe      	b.n	801505c <MemManage_Handler+0x4>

0801505e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 801505e:	b480      	push	{r7}
 8015060:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8015062:	e7fe      	b.n	8015062 <BusFault_Handler+0x4>

08015064 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8015064:	b480      	push	{r7}
 8015066:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8015068:	e7fe      	b.n	8015068 <UsageFault_Handler+0x4>
	...

0801506c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8015070:	4a16      	ldr	r2, [pc, #88]	; (80150cc <SystemInit+0x60>)
 8015072:	4b16      	ldr	r3, [pc, #88]	; (80150cc <SystemInit+0x60>)
 8015074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801507c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8015080:	4a13      	ldr	r2, [pc, #76]	; (80150d0 <SystemInit+0x64>)
 8015082:	4b13      	ldr	r3, [pc, #76]	; (80150d0 <SystemInit+0x64>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	f043 0301 	orr.w	r3, r3, #1
 801508a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801508c:	4b10      	ldr	r3, [pc, #64]	; (80150d0 <SystemInit+0x64>)
 801508e:	2200      	movs	r2, #0
 8015090:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8015092:	4a0f      	ldr	r2, [pc, #60]	; (80150d0 <SystemInit+0x64>)
 8015094:	4b0e      	ldr	r3, [pc, #56]	; (80150d0 <SystemInit+0x64>)
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 801509c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80150a0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80150a2:	4b0b      	ldr	r3, [pc, #44]	; (80150d0 <SystemInit+0x64>)
 80150a4:	4a0b      	ldr	r2, [pc, #44]	; (80150d4 <SystemInit+0x68>)
 80150a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80150a8:	4a09      	ldr	r2, [pc, #36]	; (80150d0 <SystemInit+0x64>)
 80150aa:	4b09      	ldr	r3, [pc, #36]	; (80150d0 <SystemInit+0x64>)
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80150b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80150b4:	4b06      	ldr	r3, [pc, #24]	; (80150d0 <SystemInit+0x64>)
 80150b6:	2200      	movs	r2, #0
 80150b8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80150ba:	f000 f889 	bl	80151d0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80150be:	4b03      	ldr	r3, [pc, #12]	; (80150cc <SystemInit+0x60>)
 80150c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80150c4:	609a      	str	r2, [r3, #8]
#endif
}
 80150c6:	bf00      	nop
 80150c8:	bd80      	pop	{r7, pc}
 80150ca:	bf00      	nop
 80150cc:	e000ed00 	.word	0xe000ed00
 80150d0:	40023800 	.word	0x40023800
 80150d4:	24003010 	.word	0x24003010

080150d8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80150d8:	b480      	push	{r7}
 80150da:	b087      	sub	sp, #28
 80150dc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80150de:	2300      	movs	r3, #0
 80150e0:	613b      	str	r3, [r7, #16]
 80150e2:	2300      	movs	r3, #0
 80150e4:	617b      	str	r3, [r7, #20]
 80150e6:	2302      	movs	r3, #2
 80150e8:	60fb      	str	r3, [r7, #12]
 80150ea:	2300      	movs	r3, #0
 80150ec:	60bb      	str	r3, [r7, #8]
 80150ee:	2302      	movs	r3, #2
 80150f0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80150f2:	4b32      	ldr	r3, [pc, #200]	; (80151bc <SystemCoreClockUpdate+0xe4>)
 80150f4:	689b      	ldr	r3, [r3, #8]
 80150f6:	f003 030c 	and.w	r3, r3, #12
 80150fa:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80150fc:	693b      	ldr	r3, [r7, #16]
 80150fe:	2b04      	cmp	r3, #4
 8015100:	d007      	beq.n	8015112 <SystemCoreClockUpdate+0x3a>
 8015102:	2b08      	cmp	r3, #8
 8015104:	d009      	beq.n	801511a <SystemCoreClockUpdate+0x42>
 8015106:	2b00      	cmp	r3, #0
 8015108:	d13d      	bne.n	8015186 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 801510a:	4b2d      	ldr	r3, [pc, #180]	; (80151c0 <SystemCoreClockUpdate+0xe8>)
 801510c:	4a2d      	ldr	r2, [pc, #180]	; (80151c4 <SystemCoreClockUpdate+0xec>)
 801510e:	601a      	str	r2, [r3, #0]
      break;
 8015110:	e03d      	b.n	801518e <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8015112:	4b2b      	ldr	r3, [pc, #172]	; (80151c0 <SystemCoreClockUpdate+0xe8>)
 8015114:	4a2c      	ldr	r2, [pc, #176]	; (80151c8 <SystemCoreClockUpdate+0xf0>)
 8015116:	601a      	str	r2, [r3, #0]
      break;
 8015118:	e039      	b.n	801518e <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 801511a:	4b28      	ldr	r3, [pc, #160]	; (80151bc <SystemCoreClockUpdate+0xe4>)
 801511c:	685b      	ldr	r3, [r3, #4]
 801511e:	0d9b      	lsrs	r3, r3, #22
 8015120:	f003 0301 	and.w	r3, r3, #1
 8015124:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8015126:	4b25      	ldr	r3, [pc, #148]	; (80151bc <SystemCoreClockUpdate+0xe4>)
 8015128:	685b      	ldr	r3, [r3, #4]
 801512a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801512e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8015130:	68bb      	ldr	r3, [r7, #8]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d00c      	beq.n	8015150 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8015136:	4a24      	ldr	r2, [pc, #144]	; (80151c8 <SystemCoreClockUpdate+0xf0>)
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	fbb2 f3f3 	udiv	r3, r2, r3
 801513e:	4a1f      	ldr	r2, [pc, #124]	; (80151bc <SystemCoreClockUpdate+0xe4>)
 8015140:	6852      	ldr	r2, [r2, #4]
 8015142:	0992      	lsrs	r2, r2, #6
 8015144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015148:	fb02 f303 	mul.w	r3, r2, r3
 801514c:	617b      	str	r3, [r7, #20]
 801514e:	e00b      	b.n	8015168 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8015150:	4a1c      	ldr	r2, [pc, #112]	; (80151c4 <SystemCoreClockUpdate+0xec>)
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	fbb2 f3f3 	udiv	r3, r2, r3
 8015158:	4a18      	ldr	r2, [pc, #96]	; (80151bc <SystemCoreClockUpdate+0xe4>)
 801515a:	6852      	ldr	r2, [r2, #4]
 801515c:	0992      	lsrs	r2, r2, #6
 801515e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015162:	fb02 f303 	mul.w	r3, r2, r3
 8015166:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8015168:	4b14      	ldr	r3, [pc, #80]	; (80151bc <SystemCoreClockUpdate+0xe4>)
 801516a:	685b      	ldr	r3, [r3, #4]
 801516c:	0c1b      	lsrs	r3, r3, #16
 801516e:	f003 0303 	and.w	r3, r3, #3
 8015172:	3301      	adds	r3, #1
 8015174:	005b      	lsls	r3, r3, #1
 8015176:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8015178:	697a      	ldr	r2, [r7, #20]
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	fbb2 f3f3 	udiv	r3, r2, r3
 8015180:	4a0f      	ldr	r2, [pc, #60]	; (80151c0 <SystemCoreClockUpdate+0xe8>)
 8015182:	6013      	str	r3, [r2, #0]
      break;
 8015184:	e003      	b.n	801518e <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8015186:	4b0e      	ldr	r3, [pc, #56]	; (80151c0 <SystemCoreClockUpdate+0xe8>)
 8015188:	4a0e      	ldr	r2, [pc, #56]	; (80151c4 <SystemCoreClockUpdate+0xec>)
 801518a:	601a      	str	r2, [r3, #0]
      break;
 801518c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 801518e:	4b0b      	ldr	r3, [pc, #44]	; (80151bc <SystemCoreClockUpdate+0xe4>)
 8015190:	689b      	ldr	r3, [r3, #8]
 8015192:	091b      	lsrs	r3, r3, #4
 8015194:	f003 030f 	and.w	r3, r3, #15
 8015198:	4a0c      	ldr	r2, [pc, #48]	; (80151cc <SystemCoreClockUpdate+0xf4>)
 801519a:	5cd3      	ldrb	r3, [r2, r3]
 801519c:	b2db      	uxtb	r3, r3
 801519e:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80151a0:	4b07      	ldr	r3, [pc, #28]	; (80151c0 <SystemCoreClockUpdate+0xe8>)
 80151a2:	681a      	ldr	r2, [r3, #0]
 80151a4:	693b      	ldr	r3, [r7, #16]
 80151a6:	fa22 f303 	lsr.w	r3, r2, r3
 80151aa:	4a05      	ldr	r2, [pc, #20]	; (80151c0 <SystemCoreClockUpdate+0xe8>)
 80151ac:	6013      	str	r3, [r2, #0]
}
 80151ae:	bf00      	nop
 80151b0:	371c      	adds	r7, #28
 80151b2:	46bd      	mov	sp, r7
 80151b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b8:	4770      	bx	lr
 80151ba:	bf00      	nop
 80151bc:	40023800 	.word	0x40023800
 80151c0:	2000001c 	.word	0x2000001c
 80151c4:	00f42400 	.word	0x00f42400
 80151c8:	017d7840 	.word	0x017d7840
 80151cc:	20000020 	.word	0x20000020

080151d0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80151d0:	b480      	push	{r7}
 80151d2:	b083      	sub	sp, #12
 80151d4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80151d6:	2300      	movs	r3, #0
 80151d8:	607b      	str	r3, [r7, #4]
 80151da:	2300      	movs	r3, #0
 80151dc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80151de:	4a36      	ldr	r2, [pc, #216]	; (80152b8 <SetSysClock+0xe8>)
 80151e0:	4b35      	ldr	r3, [pc, #212]	; (80152b8 <SetSysClock+0xe8>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80151e8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80151ea:	4b33      	ldr	r3, [pc, #204]	; (80152b8 <SetSysClock+0xe8>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80151f2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	3301      	adds	r3, #1
 80151f8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80151fa:	683b      	ldr	r3, [r7, #0]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d103      	bne.n	8015208 <SetSysClock+0x38>
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8015206:	d1f0      	bne.n	80151ea <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8015208:	4b2b      	ldr	r3, [pc, #172]	; (80152b8 <SetSysClock+0xe8>)
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015210:	2b00      	cmp	r3, #0
 8015212:	d002      	beq.n	801521a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8015214:	2301      	movs	r3, #1
 8015216:	603b      	str	r3, [r7, #0]
 8015218:	e001      	b.n	801521e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 801521a:	2300      	movs	r3, #0
 801521c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 801521e:	683b      	ldr	r3, [r7, #0]
 8015220:	2b01      	cmp	r3, #1
 8015222:	d143      	bne.n	80152ac <SetSysClock+0xdc>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8015224:	4a24      	ldr	r2, [pc, #144]	; (80152b8 <SetSysClock+0xe8>)
 8015226:	4b24      	ldr	r3, [pc, #144]	; (80152b8 <SetSysClock+0xe8>)
 8015228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801522a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801522e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8015230:	4a22      	ldr	r2, [pc, #136]	; (80152bc <SetSysClock+0xec>)
 8015232:	4b22      	ldr	r3, [pc, #136]	; (80152bc <SetSysClock+0xec>)
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801523a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 801523c:	4a1e      	ldr	r2, [pc, #120]	; (80152b8 <SetSysClock+0xe8>)
 801523e:	4b1e      	ldr	r3, [pc, #120]	; (80152b8 <SetSysClock+0xe8>)
 8015240:	689b      	ldr	r3, [r3, #8]
 8015242:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8015244:	4a1c      	ldr	r2, [pc, #112]	; (80152b8 <SetSysClock+0xe8>)
 8015246:	4b1c      	ldr	r3, [pc, #112]	; (80152b8 <SetSysClock+0xe8>)
 8015248:	689b      	ldr	r3, [r3, #8]
 801524a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801524e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8015250:	4a19      	ldr	r2, [pc, #100]	; (80152b8 <SetSysClock+0xe8>)
 8015252:	4b19      	ldr	r3, [pc, #100]	; (80152b8 <SetSysClock+0xe8>)
 8015254:	689b      	ldr	r3, [r3, #8]
 8015256:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 801525a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 801525c:	4b16      	ldr	r3, [pc, #88]	; (80152b8 <SetSysClock+0xe8>)
 801525e:	4a18      	ldr	r2, [pc, #96]	; (80152c0 <SetSysClock+0xf0>)
 8015260:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8015262:	4a15      	ldr	r2, [pc, #84]	; (80152b8 <SetSysClock+0xe8>)
 8015264:	4b14      	ldr	r3, [pc, #80]	; (80152b8 <SetSysClock+0xe8>)
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801526c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 801526e:	bf00      	nop
 8015270:	4b11      	ldr	r3, [pc, #68]	; (80152b8 <SetSysClock+0xe8>)
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015278:	2b00      	cmp	r3, #0
 801527a:	d0f9      	beq.n	8015270 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 801527c:	4b11      	ldr	r3, [pc, #68]	; (80152c4 <SetSysClock+0xf4>)
 801527e:	f240 7205 	movw	r2, #1797	; 0x705
 8015282:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8015284:	4a0c      	ldr	r2, [pc, #48]	; (80152b8 <SetSysClock+0xe8>)
 8015286:	4b0c      	ldr	r3, [pc, #48]	; (80152b8 <SetSysClock+0xe8>)
 8015288:	689b      	ldr	r3, [r3, #8]
 801528a:	f023 0303 	bic.w	r3, r3, #3
 801528e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8015290:	4a09      	ldr	r2, [pc, #36]	; (80152b8 <SetSysClock+0xe8>)
 8015292:	4b09      	ldr	r3, [pc, #36]	; (80152b8 <SetSysClock+0xe8>)
 8015294:	689b      	ldr	r3, [r3, #8]
 8015296:	f043 0302 	orr.w	r3, r3, #2
 801529a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 801529c:	bf00      	nop
 801529e:	4b06      	ldr	r3, [pc, #24]	; (80152b8 <SetSysClock+0xe8>)
 80152a0:	689b      	ldr	r3, [r3, #8]
 80152a2:	f003 030c 	and.w	r3, r3, #12
 80152a6:	2b08      	cmp	r3, #8
 80152a8:	d1f9      	bne.n	801529e <SetSysClock+0xce>
    {
    	__asm__(" NOP");
 80152aa:	bf00      	nop
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80152ac:	bf00      	nop
 80152ae:	370c      	adds	r7, #12
 80152b0:	46bd      	mov	sp, r7
 80152b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b6:	4770      	bx	lr
 80152b8:	40023800 	.word	0x40023800
 80152bc:	40007000 	.word	0x40007000
 80152c0:	07405419 	.word	0x07405419
 80152c4:	40023c00 	.word	0x40023c00

080152c8 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80152c8:	b480      	push	{r7}
 80152ca:	b087      	sub	sp, #28
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	60f8      	str	r0, [r7, #12]
 80152d0:	60b9      	str	r1, [r7, #8]
 80152d2:	607a      	str	r2, [r7, #4]
	int div = 1;
 80152d4:	2301      	movs	r3, #1
 80152d6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80152d8:	e004      	b.n	80152e4 <ts_itoa+0x1c>
		div *= base;
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	687a      	ldr	r2, [r7, #4]
 80152de:	fb02 f303 	mul.w	r3, r2, r3
 80152e2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80152e4:	697b      	ldr	r3, [r7, #20]
 80152e6:	68ba      	ldr	r2, [r7, #8]
 80152e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	429a      	cmp	r2, r3
 80152f0:	d2f3      	bcs.n	80152da <ts_itoa+0x12>

	while (div != 0)
 80152f2:	e029      	b.n	8015348 <ts_itoa+0x80>
	{
		int num = d/div;
 80152f4:	697b      	ldr	r3, [r7, #20]
 80152f6:	68ba      	ldr	r2, [r7, #8]
 80152f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80152fc:	613b      	str	r3, [r7, #16]
		d = d%div;
 80152fe:	697a      	ldr	r2, [r7, #20]
 8015300:	68bb      	ldr	r3, [r7, #8]
 8015302:	fbb3 f1f2 	udiv	r1, r3, r2
 8015306:	fb02 f201 	mul.w	r2, r2, r1
 801530a:	1a9b      	subs	r3, r3, r2
 801530c:	60bb      	str	r3, [r7, #8]
		div /= base;
 801530e:	697a      	ldr	r2, [r7, #20]
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	fb92 f3f3 	sdiv	r3, r2, r3
 8015316:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8015318:	693b      	ldr	r3, [r7, #16]
 801531a:	2b09      	cmp	r3, #9
 801531c:	dd0a      	ble.n	8015334 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	1c59      	adds	r1, r3, #1
 8015324:	68fa      	ldr	r2, [r7, #12]
 8015326:	6011      	str	r1, [r2, #0]
 8015328:	693a      	ldr	r2, [r7, #16]
 801532a:	b2d2      	uxtb	r2, r2
 801532c:	3237      	adds	r2, #55	; 0x37
 801532e:	b2d2      	uxtb	r2, r2
 8015330:	701a      	strb	r2, [r3, #0]
 8015332:	e009      	b.n	8015348 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	1c59      	adds	r1, r3, #1
 801533a:	68fa      	ldr	r2, [r7, #12]
 801533c:	6011      	str	r1, [r2, #0]
 801533e:	693a      	ldr	r2, [r7, #16]
 8015340:	b2d2      	uxtb	r2, r2
 8015342:	3230      	adds	r2, #48	; 0x30
 8015344:	b2d2      	uxtb	r2, r2
 8015346:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8015348:	697b      	ldr	r3, [r7, #20]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d1d2      	bne.n	80152f4 <ts_itoa+0x2c>
	}
}
 801534e:	bf00      	nop
 8015350:	371c      	adds	r7, #28
 8015352:	46bd      	mov	sp, r7
 8015354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015358:	4770      	bx	lr

0801535a <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 801535a:	b580      	push	{r7, lr}
 801535c:	b088      	sub	sp, #32
 801535e:	af00      	add	r7, sp, #0
 8015360:	60f8      	str	r0, [r7, #12]
 8015362:	60b9      	str	r1, [r7, #8]
 8015364:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	617b      	str	r3, [r7, #20]
	while(*fmt)
 801536a:	e07d      	b.n	8015468 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 801536c:	68bb      	ldr	r3, [r7, #8]
 801536e:	781b      	ldrb	r3, [r3, #0]
 8015370:	2b25      	cmp	r3, #37	; 0x25
 8015372:	d171      	bne.n	8015458 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8015374:	68bb      	ldr	r3, [r7, #8]
 8015376:	3301      	adds	r3, #1
 8015378:	60bb      	str	r3, [r7, #8]
 801537a:	68bb      	ldr	r3, [r7, #8]
 801537c:	781b      	ldrb	r3, [r3, #0]
 801537e:	2b64      	cmp	r3, #100	; 0x64
 8015380:	d01e      	beq.n	80153c0 <ts_formatstring+0x66>
 8015382:	2b64      	cmp	r3, #100	; 0x64
 8015384:	dc06      	bgt.n	8015394 <ts_formatstring+0x3a>
 8015386:	2b58      	cmp	r3, #88	; 0x58
 8015388:	d050      	beq.n	801542c <ts_formatstring+0xd2>
 801538a:	2b63      	cmp	r3, #99	; 0x63
 801538c:	d00e      	beq.n	80153ac <ts_formatstring+0x52>
 801538e:	2b25      	cmp	r3, #37	; 0x25
 8015390:	d058      	beq.n	8015444 <ts_formatstring+0xea>
 8015392:	e05d      	b.n	8015450 <ts_formatstring+0xf6>
 8015394:	2b73      	cmp	r3, #115	; 0x73
 8015396:	d02b      	beq.n	80153f0 <ts_formatstring+0x96>
 8015398:	2b73      	cmp	r3, #115	; 0x73
 801539a:	dc02      	bgt.n	80153a2 <ts_formatstring+0x48>
 801539c:	2b69      	cmp	r3, #105	; 0x69
 801539e:	d00f      	beq.n	80153c0 <ts_formatstring+0x66>
 80153a0:	e056      	b.n	8015450 <ts_formatstring+0xf6>
 80153a2:	2b75      	cmp	r3, #117	; 0x75
 80153a4:	d037      	beq.n	8015416 <ts_formatstring+0xbc>
 80153a6:	2b78      	cmp	r3, #120	; 0x78
 80153a8:	d040      	beq.n	801542c <ts_formatstring+0xd2>
 80153aa:	e051      	b.n	8015450 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	1c5a      	adds	r2, r3, #1
 80153b0:	60fa      	str	r2, [r7, #12]
 80153b2:	687a      	ldr	r2, [r7, #4]
 80153b4:	1d11      	adds	r1, r2, #4
 80153b6:	6079      	str	r1, [r7, #4]
 80153b8:	6812      	ldr	r2, [r2, #0]
 80153ba:	b2d2      	uxtb	r2, r2
 80153bc:	701a      	strb	r2, [r3, #0]
				break;
 80153be:	e047      	b.n	8015450 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	1d1a      	adds	r2, r3, #4
 80153c4:	607a      	str	r2, [r7, #4]
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80153ca:	69fb      	ldr	r3, [r7, #28]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	da07      	bge.n	80153e0 <ts_formatstring+0x86>
					{
						val *= -1;
 80153d0:	69fb      	ldr	r3, [r7, #28]
 80153d2:	425b      	negs	r3, r3
 80153d4:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	1c5a      	adds	r2, r3, #1
 80153da:	60fa      	str	r2, [r7, #12]
 80153dc:	222d      	movs	r2, #45	; 0x2d
 80153de:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80153e0:	69f9      	ldr	r1, [r7, #28]
 80153e2:	f107 030c 	add.w	r3, r7, #12
 80153e6:	220a      	movs	r2, #10
 80153e8:	4618      	mov	r0, r3
 80153ea:	f7ff ff6d 	bl	80152c8 <ts_itoa>
				}
				break;
 80153ee:	e02f      	b.n	8015450 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	1d1a      	adds	r2, r3, #4
 80153f4:	607a      	str	r2, [r7, #4]
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80153fa:	e007      	b.n	801540c <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	1c5a      	adds	r2, r3, #1
 8015400:	60fa      	str	r2, [r7, #12]
 8015402:	69ba      	ldr	r2, [r7, #24]
 8015404:	1c51      	adds	r1, r2, #1
 8015406:	61b9      	str	r1, [r7, #24]
 8015408:	7812      	ldrb	r2, [r2, #0]
 801540a:	701a      	strb	r2, [r3, #0]
					while (*arg)
 801540c:	69bb      	ldr	r3, [r7, #24]
 801540e:	781b      	ldrb	r3, [r3, #0]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d1f3      	bne.n	80153fc <ts_formatstring+0xa2>
					}
				}
				break;
 8015414:	e01c      	b.n	8015450 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	1d1a      	adds	r2, r3, #4
 801541a:	607a      	str	r2, [r7, #4]
 801541c:	6819      	ldr	r1, [r3, #0]
 801541e:	f107 030c 	add.w	r3, r7, #12
 8015422:	220a      	movs	r2, #10
 8015424:	4618      	mov	r0, r3
 8015426:	f7ff ff4f 	bl	80152c8 <ts_itoa>
				break;
 801542a:	e011      	b.n	8015450 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	1d1a      	adds	r2, r3, #4
 8015430:	607a      	str	r2, [r7, #4]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	4619      	mov	r1, r3
 8015436:	f107 030c 	add.w	r3, r7, #12
 801543a:	2210      	movs	r2, #16
 801543c:	4618      	mov	r0, r3
 801543e:	f7ff ff43 	bl	80152c8 <ts_itoa>
				break;
 8015442:	e005      	b.n	8015450 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	1c5a      	adds	r2, r3, #1
 8015448:	60fa      	str	r2, [r7, #12]
 801544a:	2225      	movs	r2, #37	; 0x25
 801544c:	701a      	strb	r2, [r3, #0]
				  break;
 801544e:	bf00      	nop
			}
			fmt++;
 8015450:	68bb      	ldr	r3, [r7, #8]
 8015452:	3301      	adds	r3, #1
 8015454:	60bb      	str	r3, [r7, #8]
 8015456:	e007      	b.n	8015468 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	1c5a      	adds	r2, r3, #1
 801545c:	60fa      	str	r2, [r7, #12]
 801545e:	68ba      	ldr	r2, [r7, #8]
 8015460:	1c51      	adds	r1, r2, #1
 8015462:	60b9      	str	r1, [r7, #8]
 8015464:	7812      	ldrb	r2, [r2, #0]
 8015466:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	781b      	ldrb	r3, [r3, #0]
 801546c:	2b00      	cmp	r3, #0
 801546e:	f47f af7d 	bne.w	801536c <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	2200      	movs	r2, #0
 8015476:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	461a      	mov	r2, r3
 801547c:	697b      	ldr	r3, [r7, #20]
 801547e:	1ad3      	subs	r3, r2, r3
}
 8015480:	4618      	mov	r0, r3
 8015482:	3720      	adds	r7, #32
 8015484:	46bd      	mov	sp, r7
 8015486:	bd80      	pop	{r7, pc}

08015488 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8015488:	b480      	push	{r7}
 801548a:	b085      	sub	sp, #20
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
 8015490:	6039      	str	r1, [r7, #0]
	int length = 0;
 8015492:	2300      	movs	r3, #0
 8015494:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8015496:	e081      	b.n	801559c <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	781b      	ldrb	r3, [r3, #0]
 801549c:	2b25      	cmp	r3, #37	; 0x25
 801549e:	d177      	bne.n	8015590 <ts_formatlength+0x108>
		{
			++fmt;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	3301      	adds	r3, #1
 80154a4:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	781b      	ldrb	r3, [r3, #0]
 80154aa:	3b58      	subs	r3, #88	; 0x58
 80154ac:	2b20      	cmp	r3, #32
 80154ae:	d86a      	bhi.n	8015586 <ts_formatlength+0xfe>
 80154b0:	a201      	add	r2, pc, #4	; (adr r2, 80154b8 <ts_formatlength+0x30>)
 80154b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154b6:	bf00      	nop
 80154b8:	08015579 	.word	0x08015579
 80154bc:	08015587 	.word	0x08015587
 80154c0:	08015587 	.word	0x08015587
 80154c4:	08015587 	.word	0x08015587
 80154c8:	08015587 	.word	0x08015587
 80154cc:	08015587 	.word	0x08015587
 80154d0:	08015587 	.word	0x08015587
 80154d4:	08015587 	.word	0x08015587
 80154d8:	08015587 	.word	0x08015587
 80154dc:	08015587 	.word	0x08015587
 80154e0:	08015587 	.word	0x08015587
 80154e4:	0801553d 	.word	0x0801553d
 80154e8:	0801554b 	.word	0x0801554b
 80154ec:	08015587 	.word	0x08015587
 80154f0:	08015587 	.word	0x08015587
 80154f4:	08015587 	.word	0x08015587
 80154f8:	08015587 	.word	0x08015587
 80154fc:	0801554b 	.word	0x0801554b
 8015500:	08015587 	.word	0x08015587
 8015504:	08015587 	.word	0x08015587
 8015508:	08015587 	.word	0x08015587
 801550c:	08015587 	.word	0x08015587
 8015510:	08015587 	.word	0x08015587
 8015514:	08015587 	.word	0x08015587
 8015518:	08015587 	.word	0x08015587
 801551c:	08015587 	.word	0x08015587
 8015520:	08015587 	.word	0x08015587
 8015524:	08015559 	.word	0x08015559
 8015528:	08015587 	.word	0x08015587
 801552c:	0801554b 	.word	0x0801554b
 8015530:	08015587 	.word	0x08015587
 8015534:	08015587 	.word	0x08015587
 8015538:	08015579 	.word	0x08015579
			{
			  case 'c':
		  		  va_arg(va, int);
 801553c:	683b      	ldr	r3, [r7, #0]
 801553e:	3304      	adds	r3, #4
 8015540:	603b      	str	r3, [r7, #0]
				  ++length;
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	3301      	adds	r3, #1
 8015546:	60fb      	str	r3, [r7, #12]
				  break;
 8015548:	e025      	b.n	8015596 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	330b      	adds	r3, #11
 801554e:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8015550:	683b      	ldr	r3, [r7, #0]
 8015552:	3304      	adds	r3, #4
 8015554:	603b      	str	r3, [r7, #0]
				  break;
 8015556:	e01e      	b.n	8015596 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8015558:	683b      	ldr	r3, [r7, #0]
 801555a:	1d1a      	adds	r2, r3, #4
 801555c:	603a      	str	r2, [r7, #0]
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8015562:	e002      	b.n	801556a <ts_formatlength+0xe2>
			  			  ++length;
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	3301      	adds	r3, #1
 8015568:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 801556a:	68bb      	ldr	r3, [r7, #8]
 801556c:	1c5a      	adds	r2, r3, #1
 801556e:	60ba      	str	r2, [r7, #8]
 8015570:	781b      	ldrb	r3, [r3, #0]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d1f6      	bne.n	8015564 <ts_formatlength+0xdc>
			  	  }
				  break;
 8015576:	e00e      	b.n	8015596 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	3308      	adds	r3, #8
 801557c:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 801557e:	683b      	ldr	r3, [r7, #0]
 8015580:	3304      	adds	r3, #4
 8015582:	603b      	str	r3, [r7, #0]
				  break;
 8015584:	e007      	b.n	8015596 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	3301      	adds	r3, #1
 801558a:	60fb      	str	r3, [r7, #12]
				  break;
 801558c:	bf00      	nop
 801558e:	e002      	b.n	8015596 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	3301      	adds	r3, #1
 8015594:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	3301      	adds	r3, #1
 801559a:	607b      	str	r3, [r7, #4]
	while (*fmt)
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	781b      	ldrb	r3, [r3, #0]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	f47f af79 	bne.w	8015498 <ts_formatlength+0x10>
	}
	return length;
 80155a6:	68fb      	ldr	r3, [r7, #12]
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	3714      	adds	r7, #20
 80155ac:	46bd      	mov	sp, r7
 80155ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b2:	4770      	bx	lr

080155b4 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 80155b4:	b40e      	push	{r1, r2, r3}
 80155b6:	b580      	push	{r7, lr}
 80155b8:	b085      	sub	sp, #20
 80155ba:	af00      	add	r7, sp, #0
 80155bc:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 80155be:	f107 0320 	add.w	r3, r7, #32
 80155c2:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 80155c4:	68ba      	ldr	r2, [r7, #8]
 80155c6:	69f9      	ldr	r1, [r7, #28]
 80155c8:	6878      	ldr	r0, [r7, #4]
 80155ca:	f7ff fec6 	bl	801535a <ts_formatstring>
 80155ce:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80155d0:	68fb      	ldr	r3, [r7, #12]
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3714      	adds	r7, #20
 80155d6:	46bd      	mov	sp, r7
 80155d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80155dc:	b003      	add	sp, #12
 80155de:	4770      	bx	lr

080155e0 <fiprintf>:
**            given file stream according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int fiprintf(FILE * stream, const char *fmt, ...)
{
 80155e0:	b40e      	push	{r1, r2, r3}
 80155e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80155e6:	b086      	sub	sp, #24
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
	int length = 0;
 80155ec:	2300      	movs	r3, #0
 80155ee:	617b      	str	r3, [r7, #20]
	va_list va;
	va_start(va, fmt);
 80155f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80155f4:	60bb      	str	r3, [r7, #8]
	length = ts_formatlength(fmt, va);
 80155f6:	68b9      	ldr	r1, [r7, #8]
 80155f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80155fa:	f7ff ff45 	bl	8015488 <ts_formatlength>
 80155fe:	6178      	str	r0, [r7, #20]
	va_end(va);
	{
 8015600:	466b      	mov	r3, sp
 8015602:	461e      	mov	r6, r3
		char buf[length];
 8015604:	6979      	ldr	r1, [r7, #20]
 8015606:	1e4b      	subs	r3, r1, #1
 8015608:	613b      	str	r3, [r7, #16]
 801560a:	460b      	mov	r3, r1
 801560c:	461a      	mov	r2, r3
 801560e:	f04f 0300 	mov.w	r3, #0
 8015612:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8015616:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 801561a:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 801561e:	460b      	mov	r3, r1
 8015620:	461a      	mov	r2, r3
 8015622:	f04f 0300 	mov.w	r3, #0
 8015626:	00dd      	lsls	r5, r3, #3
 8015628:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 801562c:	00d4      	lsls	r4, r2, #3
 801562e:	460b      	mov	r3, r1
 8015630:	3307      	adds	r3, #7
 8015632:	08db      	lsrs	r3, r3, #3
 8015634:	00db      	lsls	r3, r3, #3
 8015636:	ebad 0d03 	sub.w	sp, sp, r3
 801563a:	466b      	mov	r3, sp
 801563c:	3300      	adds	r3, #0
 801563e:	60fb      	str	r3, [r7, #12]
		va_start(va, fmt);
 8015640:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015644:	60bb      	str	r3, [r7, #8]
		length = ts_formatstring(buf, fmt, va);
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	68ba      	ldr	r2, [r7, #8]
 801564a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801564c:	4618      	mov	r0, r3
 801564e:	f7ff fe84 	bl	801535a <ts_formatstring>
 8015652:	6178      	str	r0, [r7, #20]
		length = _write(stream->_file, buf, length);
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801565a:	4618      	mov	r0, r3
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	697a      	ldr	r2, [r7, #20]
 8015660:	4619      	mov	r1, r3
 8015662:	f000 f939 	bl	80158d8 <_write>
 8015666:	6178      	str	r0, [r7, #20]
 8015668:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 801566a:	697b      	ldr	r3, [r7, #20]
}
 801566c:	4618      	mov	r0, r3
 801566e:	3718      	adds	r7, #24
 8015670:	46bd      	mov	sp, r7
 8015672:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015676:	b003      	add	sp, #12
 8015678:	4770      	bx	lr

0801567a <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 801567a:	b40f      	push	{r0, r1, r2, r3}
 801567c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015680:	b085      	sub	sp, #20
 8015682:	af00      	add	r7, sp, #0
	int length = 0;
 8015684:	2300      	movs	r3, #0
 8015686:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8015688:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801568c:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 801568e:	6839      	ldr	r1, [r7, #0]
 8015690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015692:	f7ff fef9 	bl	8015488 <ts_formatlength>
 8015696:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8015698:	466b      	mov	r3, sp
 801569a:	461e      	mov	r6, r3
		char buf[length];
 801569c:	68f9      	ldr	r1, [r7, #12]
 801569e:	1e4b      	subs	r3, r1, #1
 80156a0:	60bb      	str	r3, [r7, #8]
 80156a2:	460b      	mov	r3, r1
 80156a4:	461a      	mov	r2, r3
 80156a6:	f04f 0300 	mov.w	r3, #0
 80156aa:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80156ae:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80156b2:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80156b6:	460b      	mov	r3, r1
 80156b8:	461a      	mov	r2, r3
 80156ba:	f04f 0300 	mov.w	r3, #0
 80156be:	00dd      	lsls	r5, r3, #3
 80156c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80156c4:	00d4      	lsls	r4, r2, #3
 80156c6:	460b      	mov	r3, r1
 80156c8:	3307      	adds	r3, #7
 80156ca:	08db      	lsrs	r3, r3, #3
 80156cc:	00db      	lsls	r3, r3, #3
 80156ce:	ebad 0d03 	sub.w	sp, sp, r3
 80156d2:	466b      	mov	r3, sp
 80156d4:	3300      	adds	r3, #0
 80156d6:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 80156d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80156dc:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	683a      	ldr	r2, [r7, #0]
 80156e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80156e4:	4618      	mov	r0, r3
 80156e6:	f7ff fe38 	bl	801535a <ts_formatstring>
 80156ea:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	68fa      	ldr	r2, [r7, #12]
 80156f0:	4619      	mov	r1, r3
 80156f2:	2001      	movs	r0, #1
 80156f4:	f000 f8f0 	bl	80158d8 <_write>
 80156f8:	60f8      	str	r0, [r7, #12]
 80156fa:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 80156fc:	68fb      	ldr	r3, [r7, #12]
}
 80156fe:	4618      	mov	r0, r3
 8015700:	3714      	adds	r7, #20
 8015702:	46bd      	mov	sp, r7
 8015704:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015708:	b004      	add	sp, #16
 801570a:	4770      	bx	lr

0801570c <fputs>:
**  Returns:  If successful, the result is 0; otherwise, the result is EOF.
**
**===========================================================================
*/
int fputs(const char *s, FILE *fp)
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b086      	sub	sp, #24
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
 8015714:	6039      	str	r1, [r7, #0]
	int length = strlen(s);
 8015716:	6878      	ldr	r0, [r7, #4]
 8015718:	f000 f874 	bl	8015804 <strlen>
 801571c:	4603      	mov	r3, r0
 801571e:	613b      	str	r3, [r7, #16]
	int wlen = 0;
 8015720:	2300      	movs	r3, #0
 8015722:	60fb      	str	r3, [r7, #12]
	int res;

	wlen = _write((fp->_file), (char*)s, length);
 8015724:	683b      	ldr	r3, [r7, #0]
 8015726:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801572a:	693a      	ldr	r2, [r7, #16]
 801572c:	6879      	ldr	r1, [r7, #4]
 801572e:	4618      	mov	r0, r3
 8015730:	f000 f8d2 	bl	80158d8 <_write>
 8015734:	60f8      	str	r0, [r7, #12]
	wlen += _write((fp->_file), "\n", 1);
 8015736:	683b      	ldr	r3, [r7, #0]
 8015738:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801573c:	2201      	movs	r2, #1
 801573e:	490c      	ldr	r1, [pc, #48]	; (8015770 <fputs+0x64>)
 8015740:	4618      	mov	r0, r3
 8015742:	f000 f8c9 	bl	80158d8 <_write>
 8015746:	4602      	mov	r2, r0
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	4413      	add	r3, r2
 801574c:	60fb      	str	r3, [r7, #12]

	if (wlen == (length+1))
 801574e:	693b      	ldr	r3, [r7, #16]
 8015750:	1c5a      	adds	r2, r3, #1
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	429a      	cmp	r2, r3
 8015756:	d102      	bne.n	801575e <fputs+0x52>
	{
		res = 0;
 8015758:	2300      	movs	r3, #0
 801575a:	617b      	str	r3, [r7, #20]
 801575c:	e002      	b.n	8015764 <fputs+0x58>
	}
	else
	{
		res = EOF;
 801575e:	f04f 33ff 	mov.w	r3, #4294967295
 8015762:	617b      	str	r3, [r7, #20]
	}

	return res;
 8015764:	697b      	ldr	r3, [r7, #20]
}
 8015766:	4618      	mov	r0, r3
 8015768:	3718      	adds	r7, #24
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}
 801576e:	bf00      	nop
 8015770:	0801593c 	.word	0x0801593c

08015774 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b086      	sub	sp, #24
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 801577c:	6878      	ldr	r0, [r7, #4]
 801577e:	f000 f841 	bl	8015804 <strlen>
 8015782:	4603      	mov	r3, r0
 8015784:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 8015786:	2300      	movs	r3, #0
 8015788:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 801578a:	693a      	ldr	r2, [r7, #16]
 801578c:	6879      	ldr	r1, [r7, #4]
 801578e:	2001      	movs	r0, #1
 8015790:	f000 f8a2 	bl	80158d8 <_write>
 8015794:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 8015796:	2201      	movs	r2, #1
 8015798:	490b      	ldr	r1, [pc, #44]	; (80157c8 <puts+0x54>)
 801579a:	2001      	movs	r0, #1
 801579c:	f000 f89c 	bl	80158d8 <_write>
 80157a0:	4602      	mov	r2, r0
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	4413      	add	r3, r2
 80157a6:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 80157a8:	693b      	ldr	r3, [r7, #16]
 80157aa:	1c5a      	adds	r2, r3, #1
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	429a      	cmp	r2, r3
 80157b0:	d102      	bne.n	80157b8 <puts+0x44>
	{
		res = 0;
 80157b2:	2300      	movs	r3, #0
 80157b4:	617b      	str	r3, [r7, #20]
 80157b6:	e002      	b.n	80157be <puts+0x4a>
	}
	else
	{
		res = EOF;
 80157b8:	f04f 33ff 	mov.w	r3, #4294967295
 80157bc:	617b      	str	r3, [r7, #20]
	}

	return res;
 80157be:	697b      	ldr	r3, [r7, #20]
}
 80157c0:	4618      	mov	r0, r3
 80157c2:	3718      	adds	r7, #24
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bd80      	pop	{r7, pc}
 80157c8:	0801593c 	.word	0x0801593c

080157cc <fwrite>:
**  Returns:  Number of elements written
**
**===========================================================================
*/
size_t fwrite(const void * buf, size_t size, size_t count, FILE * fp)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b084      	sub	sp, #16
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	60f8      	str	r0, [r7, #12]
 80157d4:	60b9      	str	r1, [r7, #8]
 80157d6:	607a      	str	r2, [r7, #4]
 80157d8:	603b      	str	r3, [r7, #0]
	return (_write((fp->_file), (char*)buf, size * count) / size);
 80157da:	683b      	ldr	r3, [r7, #0]
 80157dc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80157e0:	4618      	mov	r0, r3
 80157e2:	68bb      	ldr	r3, [r7, #8]
 80157e4:	687a      	ldr	r2, [r7, #4]
 80157e6:	fb02 f303 	mul.w	r3, r2, r3
 80157ea:	461a      	mov	r2, r3
 80157ec:	68f9      	ldr	r1, [r7, #12]
 80157ee:	f000 f873 	bl	80158d8 <_write>
 80157f2:	4603      	mov	r3, r0
 80157f4:	461a      	mov	r2, r3
 80157f6:	68bb      	ldr	r3, [r7, #8]
 80157f8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80157fc:	4618      	mov	r0, r3
 80157fe:	3710      	adds	r7, #16
 8015800:	46bd      	mov	sp, r7
 8015802:	bd80      	pop	{r7, pc}

08015804 <strlen>:
 8015804:	4603      	mov	r3, r0
 8015806:	f813 2b01 	ldrb.w	r2, [r3], #1
 801580a:	2a00      	cmp	r2, #0
 801580c:	d1fb      	bne.n	8015806 <strlen+0x2>
 801580e:	1a18      	subs	r0, r3, r0
 8015810:	3801      	subs	r0, #1
 8015812:	4770      	bx	lr

08015814 <Reset_Handler>:
 8015814:	f8df d034 	ldr.w	sp, [pc, #52]	; 801584c <LoopFillZerobss+0x14>
 8015818:	2100      	movs	r1, #0
 801581a:	e003      	b.n	8015824 <LoopCopyDataInit>

0801581c <CopyDataInit>:
 801581c:	4b0c      	ldr	r3, [pc, #48]	; (8015850 <LoopFillZerobss+0x18>)
 801581e:	585b      	ldr	r3, [r3, r1]
 8015820:	5043      	str	r3, [r0, r1]
 8015822:	3104      	adds	r1, #4

08015824 <LoopCopyDataInit>:
 8015824:	480b      	ldr	r0, [pc, #44]	; (8015854 <LoopFillZerobss+0x1c>)
 8015826:	4b0c      	ldr	r3, [pc, #48]	; (8015858 <LoopFillZerobss+0x20>)
 8015828:	1842      	adds	r2, r0, r1
 801582a:	429a      	cmp	r2, r3
 801582c:	d3f6      	bcc.n	801581c <CopyDataInit>
 801582e:	4a0b      	ldr	r2, [pc, #44]	; (801585c <LoopFillZerobss+0x24>)
 8015830:	e002      	b.n	8015838 <LoopFillZerobss>

08015832 <FillZerobss>:
 8015832:	2300      	movs	r3, #0
 8015834:	f842 3b04 	str.w	r3, [r2], #4

08015838 <LoopFillZerobss>:
 8015838:	4b09      	ldr	r3, [pc, #36]	; (8015860 <LoopFillZerobss+0x28>)
 801583a:	429a      	cmp	r2, r3
 801583c:	d3f9      	bcc.n	8015832 <FillZerobss>
 801583e:	f7ff fc15 	bl	801506c <SystemInit>
 8015842:	f000 f811 	bl	8015868 <__libc_init_array>
 8015846:	f7ff fad9 	bl	8014dfc <main>
 801584a:	4770      	bx	lr
 801584c:	20020000 	.word	0x20020000
 8015850:	08015948 	.word	0x08015948
 8015854:	20000000 	.word	0x20000000
 8015858:	20000030 	.word	0x20000030
 801585c:	20000030 	.word	0x20000030
 8015860:	20012e14 	.word	0x20012e14

08015864 <ADC_IRQHandler>:
 8015864:	e7fe      	b.n	8015864 <ADC_IRQHandler>
	...

08015868 <__libc_init_array>:
 8015868:	b570      	push	{r4, r5, r6, lr}
 801586a:	4e0d      	ldr	r6, [pc, #52]	; (80158a0 <__libc_init_array+0x38>)
 801586c:	4c0d      	ldr	r4, [pc, #52]	; (80158a4 <__libc_init_array+0x3c>)
 801586e:	1ba4      	subs	r4, r4, r6
 8015870:	10a4      	asrs	r4, r4, #2
 8015872:	2500      	movs	r5, #0
 8015874:	42a5      	cmp	r5, r4
 8015876:	d109      	bne.n	801588c <__libc_init_array+0x24>
 8015878:	4e0b      	ldr	r6, [pc, #44]	; (80158a8 <__libc_init_array+0x40>)
 801587a:	4c0c      	ldr	r4, [pc, #48]	; (80158ac <__libc_init_array+0x44>)
 801587c:	f000 f836 	bl	80158ec <_init>
 8015880:	1ba4      	subs	r4, r4, r6
 8015882:	10a4      	asrs	r4, r4, #2
 8015884:	2500      	movs	r5, #0
 8015886:	42a5      	cmp	r5, r4
 8015888:	d105      	bne.n	8015896 <__libc_init_array+0x2e>
 801588a:	bd70      	pop	{r4, r5, r6, pc}
 801588c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015890:	4798      	blx	r3
 8015892:	3501      	adds	r5, #1
 8015894:	e7ee      	b.n	8015874 <__libc_init_array+0xc>
 8015896:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801589a:	4798      	blx	r3
 801589c:	3501      	adds	r5, #1
 801589e:	e7f2      	b.n	8015886 <__libc_init_array+0x1e>
 80158a0:	08015940 	.word	0x08015940
 80158a4:	08015940 	.word	0x08015940
 80158a8:	08015940 	.word	0x08015940
 80158ac:	08015944 	.word	0x08015944

080158b0 <memcpy>:
 80158b0:	b510      	push	{r4, lr}
 80158b2:	1e43      	subs	r3, r0, #1
 80158b4:	440a      	add	r2, r1
 80158b6:	4291      	cmp	r1, r2
 80158b8:	d100      	bne.n	80158bc <memcpy+0xc>
 80158ba:	bd10      	pop	{r4, pc}
 80158bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80158c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80158c4:	e7f7      	b.n	80158b6 <memcpy+0x6>

080158c6 <memset>:
 80158c6:	4402      	add	r2, r0
 80158c8:	4603      	mov	r3, r0
 80158ca:	4293      	cmp	r3, r2
 80158cc:	d100      	bne.n	80158d0 <memset+0xa>
 80158ce:	4770      	bx	lr
 80158d0:	f803 1b01 	strb.w	r1, [r3], #1
 80158d4:	e7f9      	b.n	80158ca <memset+0x4>
	...

080158d8 <_write>:
 80158d8:	4b02      	ldr	r3, [pc, #8]	; (80158e4 <_write+0xc>)
 80158da:	2258      	movs	r2, #88	; 0x58
 80158dc:	601a      	str	r2, [r3, #0]
 80158de:	f04f 30ff 	mov.w	r0, #4294967295
 80158e2:	4770      	bx	lr
 80158e4:	20012e10 	.word	0x20012e10

080158e8 <__EH_FRAME_BEGIN__>:
 80158e8:	00000000                                ....

080158ec <_init>:
 80158ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158ee:	bf00      	nop
 80158f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158f2:	bc08      	pop	{r3}
 80158f4:	469e      	mov	lr, r3
 80158f6:	4770      	bx	lr

080158f8 <_fini>:
 80158f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158fa:	bf00      	nop
 80158fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80158fe:	bc08      	pop	{r3}
 8015900:	469e      	mov	lr, r3
 8015902:	4770      	bx	lr
